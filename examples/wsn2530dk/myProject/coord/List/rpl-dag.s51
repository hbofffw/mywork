///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:40 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\rpl\rpl-dag.c           /
//    Command line       =  D:\myWork\myWork\core\net\rpl\rpl-dag.c -D        /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\rpl-dag.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `rpl-dag`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MUL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??acceptable_rank?relay,0203H
        FUNCTION ??check_prefix?relay,0203H
        FUNCTION ??find_parent_any_dag_any_instance?relay,0203H
        FUNCTION ??find_parent_dag?relay,0203H
        FUNCTION ??get_dag?relay,0203H
        FUNCTION ??global_repair?relay,0203H
        FUNCTION ??lollipop_greater_than?relay,0203H
        FUNCTION ??nullify_parents?relay,0203H
        FUNCTION ??remove_parents?relay,0203H
        PUBLIC ??rpl_add_dag?relay
        FUNCTION ??rpl_add_dag?relay,0203H
        PUBLIC ??rpl_add_parent?relay
        FUNCTION ??rpl_add_parent?relay,0203H
        PUBLIC ??rpl_alloc_dag?relay
        FUNCTION ??rpl_alloc_dag?relay,0203H
        PUBLIC ??rpl_alloc_instance?relay
        FUNCTION ??rpl_alloc_instance?relay,0203H
        PUBLIC ??rpl_dag_init?relay
        FUNCTION ??rpl_dag_init?relay,0203H
        PUBLIC ??rpl_find_of?relay
        FUNCTION ??rpl_find_of?relay,0203H
        PUBLIC ??rpl_find_parent?relay
        FUNCTION ??rpl_find_parent?relay,0203H
        PUBLIC ??rpl_find_parent_any_dag?relay
        FUNCTION ??rpl_find_parent_any_dag?relay,0203H
        PUBLIC ??rpl_free_dag?relay
        FUNCTION ??rpl_free_dag?relay,0203H
        PUBLIC ??rpl_free_instance?relay
        FUNCTION ??rpl_free_instance?relay,0203H
        PUBLIC ??rpl_get_any_dag?relay
        FUNCTION ??rpl_get_any_dag?relay,0203H
        PUBLIC ??rpl_get_instance?relay
        FUNCTION ??rpl_get_instance?relay,0203H
        PUBLIC ??rpl_get_parent_ipaddr?relay
        FUNCTION ??rpl_get_parent_ipaddr?relay,0203H
        PUBLIC ??rpl_get_parent_link_metric?relay
        FUNCTION ??rpl_get_parent_link_metric?relay,0203H
        PUBLIC ??rpl_get_parent_rank?relay
        FUNCTION ??rpl_get_parent_rank?relay,0203H
        PUBLIC ??rpl_join_instance?relay
        FUNCTION ??rpl_join_instance?relay,0203H
        PUBLIC ??rpl_local_repair?relay
        FUNCTION ??rpl_local_repair?relay,0203H
        PUBLIC ??rpl_move_parent?relay
        FUNCTION ??rpl_move_parent?relay,0203H
        PUBLIC ??rpl_nullify_parent?relay
        FUNCTION ??rpl_nullify_parent?relay,0203H
        PUBLIC ??rpl_process_dio?relay
        FUNCTION ??rpl_process_dio?relay,0203H
        PUBLIC ??rpl_process_parent_event?relay
        FUNCTION ??rpl_process_parent_event?relay,0203H
        PUBLIC ??rpl_recalculate_ranks?relay
        FUNCTION ??rpl_recalculate_ranks?relay,0203H
        PUBLIC ??rpl_remove_parent?relay
        FUNCTION ??rpl_remove_parent?relay,0203H
        PUBLIC ??rpl_repair_root?relay
        FUNCTION ??rpl_repair_root?relay,0203H
        PUBLIC ??rpl_select_dag?relay
        FUNCTION ??rpl_select_dag?relay,0203H
        PUBLIC ??rpl_select_parent?relay
        FUNCTION ??rpl_select_parent?relay,0203H
        PUBLIC ??rpl_set_default_instance?relay
        FUNCTION ??rpl_set_default_instance?relay,0203H
        PUBLIC ??rpl_set_default_route?relay
        FUNCTION ??rpl_set_default_route?relay,0203H
        FUNCTION ??rpl_set_preferred_parent?relay,0203H
        PUBLIC ??rpl_set_prefix?relay
        FUNCTION ??rpl_set_prefix?relay,0203H
        PUBLIC ??rpl_set_root?relay
        FUNCTION ??rpl_set_root?relay,0203H
        FUNCTION ??set_ip_from_prefix?relay,0203H
        FUNCTION ??should_send_dao?relay,0203H
        PUBWEAK __Constant_0
        FUNCTION acceptable_rank,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION check_prefix,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 32, STACK
        PUBLIC default_instance
        FUNCTION find_parent_any_dag_any_instance,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION find_parent_dag,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION get_dag,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION global_repair,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC instance_table
        FUNCTION lollipop_greater_than,0203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION nullify_parents,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION remove_parents,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC rpl_add_dag
        FUNCTION rpl_add_dag,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC rpl_add_parent
        FUNCTION rpl_add_parent,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC rpl_alloc_dag
        FUNCTION rpl_alloc_dag,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC rpl_alloc_instance
        FUNCTION rpl_alloc_instance,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC rpl_dag_init
        FUNCTION rpl_dag_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rpl_find_of
        FUNCTION rpl_find_of,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC rpl_find_parent
        FUNCTION rpl_find_parent,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_find_parent_any_dag
        FUNCTION rpl_find_parent_any_dag,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_free_dag
        FUNCTION rpl_free_dag,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC rpl_free_instance
        FUNCTION rpl_free_instance,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_get_any_dag
        FUNCTION rpl_get_any_dag,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rpl_get_instance
        FUNCTION rpl_get_instance,0203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rpl_get_parent_ipaddr
        FUNCTION rpl_get_parent_ipaddr,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_get_parent_link_metric
        FUNCTION rpl_get_parent_link_metric,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_get_parent_rank
        FUNCTION rpl_get_parent_rank,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_join_instance
        FUNCTION rpl_join_instance,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC rpl_local_repair
        FUNCTION rpl_local_repair,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_move_parent
        FUNCTION rpl_move_parent,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_nullify_parent
        FUNCTION rpl_nullify_parent,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_process_dio
        FUNCTION rpl_process_dio,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC rpl_process_parent_event
        FUNCTION rpl_process_parent_event,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC rpl_recalculate_ranks
        FUNCTION rpl_recalculate_ranks,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_remove_parent
        FUNCTION rpl_remove_parent,021603H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC rpl_repair_root
        FUNCTION rpl_repair_root,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_select_dag
        FUNCTION rpl_select_dag,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC rpl_select_parent
        FUNCTION rpl_select_parent,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC rpl_set_default_instance
        FUNCTION rpl_set_default_instance,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rpl_set_default_route
        FUNCTION rpl_set_default_route,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        FUNCTION rpl_set_preferred_parent,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_set_prefix
        FUNCTION rpl_set_prefix,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC rpl_set_root
        FUNCTION rpl_set_root,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION set_ip_from_prefix,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION should_send_dao,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
ctimer_stop         SYMBOL "ctimer_stop"
??ctimer_stop?relay SYMBOL "?relay", ctimer_stop
dao_output          SYMBOL "dao_output"
??dao_output?relay  SYMBOL "?relay", dao_output
list_add            SYMBOL "list_add"
??list_add?relay    SYMBOL "?relay", list_add
list_remove         SYMBOL "list_remove"
??list_remove?relay SYMBOL "?relay", list_remove
memcmp              SYMBOL "memcmp"
??memcmp?relay      SYMBOL "?relay", memcmp
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
memset              SYMBOL "memset"
??memset?relay      SYMBOL "?relay", memset
nbr_table_add_lladdr SYMBOL "nbr_table_add_lladdr"
??nbr_table_add_lladdr?relay SYMBOL "?relay", nbr_table_add_lladdr
nbr_table_get_from_lladdr SYMBOL "nbr_table_get_from_lladdr"
??nbr_table_get_from_lladdr?relay SYMBOL "?relay", nbr_table_get_from_lladdr
nbr_table_get_lladdr SYMBOL "nbr_table_get_lladdr"
??nbr_table_get_lladdr?relay SYMBOL "?relay", nbr_table_get_lladdr
nbr_table_head      SYMBOL "nbr_table_head"
??nbr_table_head?relay SYMBOL "?relay", nbr_table_head
nbr_table_lock      SYMBOL "nbr_table_lock"
??nbr_table_lock?relay SYMBOL "?relay", nbr_table_lock
nbr_table_next      SYMBOL "nbr_table_next"
??nbr_table_next?relay SYMBOL "?relay", nbr_table_next
nbr_table_register  SYMBOL "nbr_table_register"
??nbr_table_register?relay SYMBOL "?relay", nbr_table_register
nbr_table_remove    SYMBOL "nbr_table_remove"
??nbr_table_remove?relay SYMBOL "?relay", nbr_table_remove
nbr_table_unlock    SYMBOL "nbr_table_unlock"
??nbr_table_unlock?relay SYMBOL "?relay", nbr_table_unlock
rpl_remove_routes   SYMBOL "rpl_remove_routes"
??rpl_remove_routes?relay SYMBOL "?relay", rpl_remove_routes
rpl_remove_routes_by_nexthop SYMBOL "rpl_remove_routes_by_nexthop"
??rpl_remove_routes_by_nexthop?relay SYMBOL "?relay", rpl_remove_routes_by_nexthop
rpl_reset_dio_timer SYMBOL "rpl_reset_dio_timer"
??rpl_reset_dio_timer?relay SYMBOL "?relay", rpl_reset_dio_timer
rpl_schedule_dao    SYMBOL "rpl_schedule_dao"
??rpl_schedule_dao?relay SYMBOL "?relay", rpl_schedule_dao
uip_ds6_addr_add    SYMBOL "uip_ds6_addr_add"
??uip_ds6_addr_add?relay SYMBOL "?relay", uip_ds6_addr_add
uip_ds6_addr_lookup SYMBOL "uip_ds6_addr_lookup"
??uip_ds6_addr_lookup?relay SYMBOL "?relay", uip_ds6_addr_lookup
uip_ds6_addr_rm     SYMBOL "uip_ds6_addr_rm"
??uip_ds6_addr_rm?relay SYMBOL "?relay", uip_ds6_addr_rm
uip_ds6_defrt_add   SYMBOL "uip_ds6_defrt_add"
??uip_ds6_defrt_add?relay SYMBOL "?relay", uip_ds6_defrt_add
uip_ds6_defrt_rm    SYMBOL "uip_ds6_defrt_rm"
??uip_ds6_defrt_rm?relay SYMBOL "?relay", uip_ds6_defrt_rm
uip_ds6_nbr_get_ll  SYMBOL "uip_ds6_nbr_get_ll"
??uip_ds6_nbr_get_ll?relay SYMBOL "?relay", uip_ds6_nbr_get_ll
uip_ds6_nbr_ipaddr_from_lladdr SYMBOL "uip_ds6_nbr_ipaddr_from_lladdr"
??uip_ds6_nbr_ipaddr_from_lladdr?relay SYMBOL "?relay", uip_ds6_nbr_ipaddr_from_lladdr
uip_ds6_nbr_lladdr_from_ipaddr SYMBOL "uip_ds6_nbr_lladdr_from_ipaddr"
??uip_ds6_nbr_lladdr_from_ipaddr?relay SYMBOL "?relay", uip_ds6_nbr_lladdr_from_ipaddr
uip_ds6_nbr_lookup  SYMBOL "uip_ds6_nbr_lookup"
??uip_ds6_nbr_lookup?relay SYMBOL "?relay", uip_ds6_nbr_lookup
uip_ds6_set_addr_iid SYMBOL "uip_ds6_set_addr_iid"
??uip_ds6_set_addr_iid?relay SYMBOL "?relay", uip_ds6_set_addr_iid
rpl_add_dag         SYMBOL "rpl_add_dag"
??rpl_add_dag?relay SYMBOL "?relay", rpl_add_dag
rpl_add_parent      SYMBOL "rpl_add_parent"
??rpl_add_parent?relay SYMBOL "?relay", rpl_add_parent
rpl_alloc_dag       SYMBOL "rpl_alloc_dag"
??rpl_alloc_dag?relay SYMBOL "?relay", rpl_alloc_dag
rpl_alloc_instance  SYMBOL "rpl_alloc_instance"
??rpl_alloc_instance?relay SYMBOL "?relay", rpl_alloc_instance
rpl_dag_init        SYMBOL "rpl_dag_init"
??rpl_dag_init?relay SYMBOL "?relay", rpl_dag_init
rpl_find_of         SYMBOL "rpl_find_of"
??rpl_find_of?relay SYMBOL "?relay", rpl_find_of
rpl_find_parent     SYMBOL "rpl_find_parent"
??rpl_find_parent?relay SYMBOL "?relay", rpl_find_parent
rpl_find_parent_any_dag SYMBOL "rpl_find_parent_any_dag"
??rpl_find_parent_any_dag?relay SYMBOL "?relay", rpl_find_parent_any_dag
rpl_free_dag        SYMBOL "rpl_free_dag"
??rpl_free_dag?relay SYMBOL "?relay", rpl_free_dag
rpl_free_instance   SYMBOL "rpl_free_instance"
??rpl_free_instance?relay SYMBOL "?relay", rpl_free_instance
rpl_get_any_dag     SYMBOL "rpl_get_any_dag"
??rpl_get_any_dag?relay SYMBOL "?relay", rpl_get_any_dag
rpl_get_instance    SYMBOL "rpl_get_instance"
??rpl_get_instance?relay SYMBOL "?relay", rpl_get_instance
rpl_get_parent_ipaddr SYMBOL "rpl_get_parent_ipaddr"
??rpl_get_parent_ipaddr?relay SYMBOL "?relay", rpl_get_parent_ipaddr
rpl_get_parent_link_metric SYMBOL "rpl_get_parent_link_metric"
??rpl_get_parent_link_metric?relay SYMBOL "?relay", rpl_get_parent_link_metric
rpl_get_parent_rank SYMBOL "rpl_get_parent_rank"
??rpl_get_parent_rank?relay SYMBOL "?relay", rpl_get_parent_rank
rpl_join_instance   SYMBOL "rpl_join_instance"
??rpl_join_instance?relay SYMBOL "?relay", rpl_join_instance
rpl_local_repair    SYMBOL "rpl_local_repair"
??rpl_local_repair?relay SYMBOL "?relay", rpl_local_repair
rpl_move_parent     SYMBOL "rpl_move_parent"
??rpl_move_parent?relay SYMBOL "?relay", rpl_move_parent
rpl_nullify_parent  SYMBOL "rpl_nullify_parent"
??rpl_nullify_parent?relay SYMBOL "?relay", rpl_nullify_parent
rpl_process_dio     SYMBOL "rpl_process_dio"
??rpl_process_dio?relay SYMBOL "?relay", rpl_process_dio
rpl_process_parent_event SYMBOL "rpl_process_parent_event"
??rpl_process_parent_event?relay SYMBOL "?relay", rpl_process_parent_event
rpl_recalculate_ranks SYMBOL "rpl_recalculate_ranks"
??rpl_recalculate_ranks?relay SYMBOL "?relay", rpl_recalculate_ranks
rpl_remove_parent   SYMBOL "rpl_remove_parent"
??rpl_remove_parent?relay SYMBOL "?relay", rpl_remove_parent
rpl_repair_root     SYMBOL "rpl_repair_root"
??rpl_repair_root?relay SYMBOL "?relay", rpl_repair_root
rpl_select_dag      SYMBOL "rpl_select_dag"
??rpl_select_dag?relay SYMBOL "?relay", rpl_select_dag
rpl_select_parent   SYMBOL "rpl_select_parent"
??rpl_select_parent?relay SYMBOL "?relay", rpl_select_parent
rpl_set_default_instance SYMBOL "rpl_set_default_instance"
??rpl_set_default_instance?relay SYMBOL "?relay", rpl_set_default_instance
rpl_set_default_route SYMBOL "rpl_set_default_route"
??rpl_set_default_route?relay SYMBOL "?relay", rpl_set_default_route
rpl_set_prefix      SYMBOL "rpl_set_prefix"
??rpl_set_prefix?relay SYMBOL "?relay", rpl_set_prefix
rpl_set_root        SYMBOL "rpl_set_root"
??rpl_set_root?relay SYMBOL "?relay", rpl_set_root

        EXTERN ??ctimer_stop?relay
        FUNCTION ??ctimer_stop?relay,00H
        EXTERN ??dao_output?relay
        FUNCTION ??dao_output?relay,00H
        EXTERN ??list_add?relay
        FUNCTION ??list_add?relay,00H
        EXTERN ??list_remove?relay
        FUNCTION ??list_remove?relay,00H
        EXTERN ??memcmp?relay
        FUNCTION ??memcmp?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??nbr_table_add_lladdr?relay
        FUNCTION ??nbr_table_add_lladdr?relay,00H
        EXTERN ??nbr_table_get_from_lladdr?relay
        FUNCTION ??nbr_table_get_from_lladdr?relay,00H
        EXTERN ??nbr_table_get_lladdr?relay
        FUNCTION ??nbr_table_get_lladdr?relay,00H
        EXTERN ??nbr_table_head?relay
        FUNCTION ??nbr_table_head?relay,00H
        EXTERN ??nbr_table_lock?relay
        FUNCTION ??nbr_table_lock?relay,00H
        EXTERN ??nbr_table_next?relay
        FUNCTION ??nbr_table_next?relay,00H
        EXTERN ??nbr_table_register?relay
        FUNCTION ??nbr_table_register?relay,00H
        EXTERN ??nbr_table_remove?relay
        FUNCTION ??nbr_table_remove?relay,00H
        EXTERN ??nbr_table_unlock?relay
        FUNCTION ??nbr_table_unlock?relay,00H
        EXTERN ??rpl_remove_routes?relay
        FUNCTION ??rpl_remove_routes?relay,00H
        EXTERN ??rpl_remove_routes_by_nexthop?relay
        FUNCTION ??rpl_remove_routes_by_nexthop?relay,00H
        EXTERN ??rpl_reset_dio_timer?relay
        FUNCTION ??rpl_reset_dio_timer?relay,00H
        EXTERN ??rpl_schedule_dao?relay
        FUNCTION ??rpl_schedule_dao?relay,00H
        EXTERN ??uip_ds6_addr_add?relay
        FUNCTION ??uip_ds6_addr_add?relay,00H
        EXTERN ??uip_ds6_addr_lookup?relay
        FUNCTION ??uip_ds6_addr_lookup?relay,00H
        EXTERN ??uip_ds6_addr_rm?relay
        FUNCTION ??uip_ds6_addr_rm?relay,00H
        EXTERN ??uip_ds6_defrt_add?relay
        FUNCTION ??uip_ds6_defrt_add?relay,00H
        EXTERN ??uip_ds6_defrt_rm?relay
        FUNCTION ??uip_ds6_defrt_rm?relay,00H
        EXTERN ??uip_ds6_nbr_get_ll?relay
        FUNCTION ??uip_ds6_nbr_get_ll?relay,00H
        EXTERN ??uip_ds6_nbr_ipaddr_from_lladdr?relay
        FUNCTION ??uip_ds6_nbr_ipaddr_from_lladdr?relay,00H
        EXTERN ??uip_ds6_nbr_lladdr_from_ipaddr?relay
        FUNCTION ??uip_ds6_nbr_lladdr_from_ipaddr?relay,00H
        EXTERN ??uip_ds6_nbr_lookup?relay
        FUNCTION ??uip_ds6_nbr_lookup?relay,00H
        EXTERN ??uip_ds6_set_addr_iid?relay
        FUNCTION ??uip_ds6_set_addr_iid?relay,00H
        EXTERN ctimer_stop
        FUNCTION ctimer_stop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dao_output
        FUNCTION dao_output,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_add
        FUNCTION list_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_remove
        FUNCTION list_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcmp
        FUNCTION memcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_add_lladdr
        FUNCTION nbr_table_add_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_get_from_lladdr
        FUNCTION nbr_table_get_from_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_get_lladdr
        FUNCTION nbr_table_get_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_head
        FUNCTION nbr_table_head,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_lock
        FUNCTION nbr_table_lock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_next
        FUNCTION nbr_table_next,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_register
        FUNCTION nbr_table_register,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_remove
        FUNCTION nbr_table_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_unlock
        FUNCTION nbr_table_unlock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_mrhof
        EXTERN rpl_remove_routes
        FUNCTION rpl_remove_routes,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_remove_routes_by_nexthop
        FUNCTION rpl_remove_routes_by_nexthop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_reset_dio_timer
        FUNCTION rpl_reset_dio_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_schedule_dao
        FUNCTION rpl_schedule_dao,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_addr_add
        FUNCTION uip_ds6_addr_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_addr_lookup
        FUNCTION uip_ds6_addr_lookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_addr_rm
        FUNCTION uip_ds6_addr_rm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_defrt_add
        FUNCTION uip_ds6_defrt_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_defrt_rm
        FUNCTION uip_ds6_defrt_rm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_nbr_get_ll
        FUNCTION uip_ds6_nbr_get_ll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_nbr_ipaddr_from_lladdr
        FUNCTION uip_ds6_nbr_ipaddr_from_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_nbr_lladdr_from_ipaddr
        FUNCTION uip_ds6_nbr_lladdr_from_ipaddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_nbr_lookup
        FUNCTION uip_ds6_nbr_lookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_set_addr_iid
        FUNCTION uip_ds6_set_addr_iid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_lladdr

// D:\myWork\myWork\core\net\rpl\rpl-dag.c
//    1 /**
//    2  * \addtogroup uip6
//    3  * @{
//    4  */
//    5 /*
//    6  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    7  * All rights reserved.
//    8  *
//    9  * Redistribution and use in source and binary forms, with or without
//   10  * modification, are permitted provided that the following conditions
//   11  * are met:
//   12  * 1. Redistributions of source code must retain the above copyright
//   13  *    notice, this list of conditions and the following disclaimer.
//   14  * 2. Redistributions in binary form must reproduce the above copyright
//   15  *    notice, this list of conditions and the following disclaimer in the
//   16  *    documentation and/or other materials provided with the distribution.
//   17  * 3. Neither the name of the Institute nor the names of its contributors
//   18  *    may be used to endorse or promote products derived from this software
//   19  *    without specific prior written permission.
//   20  *
//   21  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   22  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   23  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   24  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   25  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   26  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   27  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   28  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   29  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   30  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   31  * SUCH DAMAGE.
//   32  *
//   33  * This file is part of the Contiki operating system.
//   34  *
//   35  */
//   36 /**
//   37  * \file
//   38  *         Logic for Directed Acyclic Graphs in RPL.
//   39  *
//   40  * \author Joakim Eriksson <joakime@sics.se>, Nicolas Tsiftes <nvt@sics.se>
//   41  */
//   42 
//   43 
//   44 #include "contiki.h"
//   45 #include "net/rpl/rpl-private.h"
//   46 #include "net/uip.h"
//   47 #include "net/uip-nd6.h"
//   48 #include "net/nbr-table.h"
//   49 #include "lib/list.h"
//   50 #include "lib/memb.h"
//   51 #include "sys/ctimer.h"
//   52 
//   53 #include <limits.h>
//   54 #include <string.h>
//   55 
//   56 #define DEBUG DEBUG_NONE
//   57 #include "net/uip-debug.h"
//   58 
//   59 #if UIP_CONF_IPV6
//   60 /*---------------------------------------------------------------------------*/
//   61 extern rpl_of_t RPL_OF;

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA16
//   62 static rpl_of_t * const objective_functions[] = {&RPL_OF};
objective_functions:
        DS 2
        REQUIRE `?<Initializer for objective_functions>`
        REQUIRE __INIT_XDATA_I
//   63 
//   64 /*---------------------------------------------------------------------------*/
//   65 /* RPL definitions. */
//   66 
//   67 #ifndef RPL_CONF_GROUNDED
//   68 #define RPL_GROUNDED                    0
//   69 #else
//   70 #define RPL_GROUNDED                    RPL_CONF_GROUNDED
//   71 #endif /* !RPL_CONF_GROUNDED */
//   72 
//   73 /*---------------------------------------------------------------------------*/
//   74 /* Per-parent RPL information */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   75 NBR_TABLE(rpl_parent_t, rpl_parents);
_rpl_parents_mem:
        DS 40
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// static nbr_table_t rpl_parents_struct
rpl_parents_struct:
        DATA8
        DS 8
        REQUIRE `?<Initializer for rpl_parents_struct>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
// static nbr_table_t *__xdata rpl_parents
rpl_parents:
        DATA16
        DS 2
        REQUIRE `?<Initializer for rpl_parents>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I
//   76 /*---------------------------------------------------------------------------*/
//   77 /* Allocate instance table. */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 rpl_instance_t instance_table[RPL_MAX_INSTANCES];
instance_table:
        DS 174
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   79 rpl_instance_t *default_instance;
default_instance:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   80 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   81 void
//   82 rpl_dag_init(void)
rpl_dag_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function rpl_dag_init
        CODE
//   83 {
        FUNCALL rpl_dag_init, nbr_table_register
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   84   nbr_table_register(rpl_parents, (nbr_table_callback *)rpl_remove_parent);
        ; Setup parameters for call to function nbr_table_register
        MOV     R4,#??rpl_remove_parent?relay & 0xff
        MOV     R5,#(??rpl_remove_parent?relay >> 8) & 0xff
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_register?relay
//   85 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//   86 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   87 rpl_rank_t
//   88 rpl_get_parent_rank(uip_lladdr_t *addr)
rpl_get_parent_rank:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function rpl_get_parent_rank
        CODE
//   89 {
        FUNCALL rpl_get_parent_rank, nbr_table_get_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   90   rpl_parent_t *p = nbr_table_get_from_lladdr(rpl_parents, (rimeaddr_t *)addr);
        ; Setup parameters for call to function nbr_table_get_from_lladdr
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_from_lladdr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
//   91   if(p != NULL) {
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??rpl_get_parent_rank_0
//   92     return p->rank;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??rpl_get_parent_rank_1
//   93   } else {
//   94     return 0;
??rpl_get_parent_rank_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_get_parent_rank_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   95   }
//   96 }
//   97 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   98 uint16_t
//   99 rpl_get_parent_link_metric(uip_lladdr_t *addr)
rpl_get_parent_link_metric:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function rpl_get_parent_link_metric
        CODE
//  100 {
        FUNCALL rpl_get_parent_link_metric, nbr_table_get_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  101   rpl_parent_t *p = nbr_table_get_from_lladdr(rpl_parents, (rimeaddr_t *)addr);
        ; Setup parameters for call to function nbr_table_get_from_lladdr
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_from_lladdr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
//  102   if(p != NULL) {
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??rpl_get_parent_link_metric_0
//  103     return p->link_metric;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??rpl_get_parent_link_metric_1
//  104   } else {
//  105     return 0;
??rpl_get_parent_link_metric_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_get_parent_link_metric_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  106   }
//  107 }
//  108 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 uip_ipaddr_t *
//  110 rpl_get_parent_ipaddr(rpl_parent_t *p)
rpl_get_parent_ipaddr:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function rpl_get_parent_ipaddr
        CODE
//  111 {
        FUNCALL rpl_get_parent_ipaddr, nbr_table_get_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_get_parent_ipaddr, uip_ds6_nbr_ipaddr_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  112   rimeaddr_t *lladdr = nbr_table_get_lladdr(rpl_parents, p);
        ; Setup parameters for call to function nbr_table_get_lladdr
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_lladdr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  113   return uip_ds6_nbr_ipaddr_from_lladdr((uip_lladdr_t *)lladdr);
        ; Setup parameters for call to function uip_ds6_nbr_ipaddr_from_lladdr
        LCALL   ??uip_ds6_nbr_ipaddr_from_lladdr?relay
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  114 }
//  115 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 static void
//  117 rpl_set_preferred_parent(rpl_dag_t *dag, rpl_parent_t *p)
rpl_set_preferred_parent:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function rpl_set_preferred_parent
        CODE
//  118 {
        FUNCALL rpl_set_preferred_parent, nbr_table_unlock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_preferred_parent, nbr_table_lock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  119   if(dag != NULL && dag->preferred_parent != p) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??rpl_set_preferred_parent_0
        MOV     A,?V0 + 0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_set_preferred_parent_1
        MOV     A,R7
        XRL     A,R1
??rpl_set_preferred_parent_1:
        JZ      ??rpl_set_preferred_parent_0
//  120     PRINTF("RPL: rpl_set_preferred_parent ");
//  121     if(p != NULL) {
//  122       PRINT6ADDR(rpl_get_parent_ipaddr(p));
//  123     } else {
//  124       PRINTF("NULL");
//  125     }
//  126     PRINTF(" used to be ");
//  127     if(dag->preferred_parent != NULL) {
//  128       PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
//  129     } else {
//  130       PRINTF("NULL");
//  131     }
//  132     PRINTF("\n");
//  133 
//  134     /* Always keep the preferred parent locked, so it remains in the
//  135      * neighbor table. */
//  136     nbr_table_unlock(rpl_parents, dag->preferred_parent);
        ; Setup parameters for call to function nbr_table_unlock
        MOV     A,?V0 + 0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_unlock?relay
//  137     nbr_table_lock(rpl_parents, p);
        ; Setup parameters for call to function nbr_table_lock
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_lock?relay
//  138     dag->preferred_parent = p;
        MOV     A,?V0 + 0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  139   }
//  140 }
??rpl_set_preferred_parent_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  141 /*---------------------------------------------------------------------------*/
//  142 /* Greater-than function for the lollipop counter.                      */
//  143 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  144 static int
//  145 lollipop_greater_than(int a, int b)
lollipop_greater_than:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function lollipop_greater_than
        CODE
//  146 {
        ; Saved register size: 0
        ; Auto size: 0
//  147   /* Check if we are comparing an initial value with an old value */
//  148   if(a > RPL_LOLLIPOP_CIRCULAR_REGION && b <= RPL_LOLLIPOP_CIRCULAR_REGION) {
        CLR     C
        MOV     A,R2
        SUBB    A,#-0x80
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??lollipop_greater_than_0
        CLR     C
        MOV     A,R4
        SUBB    A,#-0x80
        MOV     A,R5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??lollipop_greater_than_0
//  149     return (RPL_LOLLIPOP_MAX_VALUE + 1 + b - a) > RPL_LOLLIPOP_SEQUENCE_WINDOWS;
        MOV     A,R4
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x11
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??lollipop_greater_than_1
        SETB    B.0
        SJMP    ??lollipop_greater_than_2
??lollipop_greater_than_1:
        CLR     B.0
??lollipop_greater_than_2:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     R3,#0x0
        SJMP    ??lollipop_greater_than_3
//  150   }
//  151   /* Otherwise check if a > b and comparable => ok, or
//  152      if they have wrapped and are still comparable */
//  153   return (a > b && (a - b) < RPL_LOLLIPOP_SEQUENCE_WINDOWS) ||
//  154     (a < b && (b - a) > (RPL_LOLLIPOP_CIRCULAR_REGION + 1-
//  155 			 RPL_LOLLIPOP_SEQUENCE_WINDOWS));
??lollipop_greater_than_0:
        CLR     C
        MOV     A,R4
        SUBB    A,R2
        MOV     A,R5
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??lollipop_greater_than_4
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R5
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x10
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??lollipop_greater_than_5
??lollipop_greater_than_4:
        CLR     C
        MOV     A,R2
        SUBB    A,R4
        MOV     A,R3
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??lollipop_greater_than_6
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        MOV     A,R5
        SUBB    A,R3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x71
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??lollipop_greater_than_6
??lollipop_greater_than_5:
        SETB    B.0
        SJMP    ??lollipop_greater_than_7
??lollipop_greater_than_6:
        CLR     B.0
??lollipop_greater_than_7:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     R3,#0x0
??lollipop_greater_than_3:
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  156 }
//  157 /*---------------------------------------------------------------------------*/
//  158 /* Remove DAG parents with a rank that is at least the same as minimum_rank. */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  159 static void
//  160 remove_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
remove_parents:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function remove_parents
        CODE
//  161 {
        FUNCALL remove_parents, nbr_table_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL remove_parents, rpl_remove_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL remove_parents, nbr_table_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  162   rpl_parent_t *p;
//  163 
//  164   PRINTF("RPL: Removing parents (minimum rank %u)\n",
//  165 	minimum_rank);
//  166 
//  167   p = nbr_table_head(rpl_parents);
        ; Setup parameters for call to function nbr_table_head
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_head?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        SJMP    ??remove_parents_0
//  168   while(p != NULL) {
//  169     if(dag == p->dag && p->rank >= minimum_rank) {
??remove_parents_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        XRL     A,R0
        JNZ     ??remove_parents_2
        MOV     A,?V0 + 1
        XRL     A,R1
??remove_parents_2:
        JNZ     ??remove_parents_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 3
        JC      ??remove_parents_3
//  170       rpl_remove_parent(p);
        ; Setup parameters for call to function rpl_remove_parent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_remove_parent?relay
//  171     }
//  172     p = nbr_table_next(rpl_parents, p);
??remove_parents_3:
        ; Setup parameters for call to function nbr_table_next
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_next?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  173   }
??remove_parents_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??remove_parents_1
//  174 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  175 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 static void
//  177 nullify_parents(rpl_dag_t *dag, rpl_rank_t minimum_rank)
nullify_parents:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function nullify_parents
        CODE
//  178 {
        FUNCALL nullify_parents, nbr_table_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nullify_parents, rpl_nullify_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nullify_parents, nbr_table_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  179   rpl_parent_t *p;
//  180 
//  181   PRINTF("RPL: Removing parents (minimum rank %u)\n",
//  182 	minimum_rank);
//  183 
//  184   p = nbr_table_head(rpl_parents);
        ; Setup parameters for call to function nbr_table_head
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_head?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        SJMP    ??nullify_parents_0
//  185   while(p != NULL) {
//  186     if(dag == p->dag && p->rank >= minimum_rank) {
??nullify_parents_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        XRL     A,R0
        JNZ     ??nullify_parents_2
        MOV     A,?V0 + 1
        XRL     A,R1
??nullify_parents_2:
        JNZ     ??nullify_parents_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 3
        JC      ??nullify_parents_3
//  187       rpl_nullify_parent(p);
        ; Setup parameters for call to function rpl_nullify_parent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_nullify_parent?relay
//  188     }
//  189     p = nbr_table_next(rpl_parents, p);
??nullify_parents_3:
        ; Setup parameters for call to function nbr_table_next
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_next?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  190   }
??nullify_parents_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??nullify_parents_1
//  191 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  192 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  193 static int
//  194 should_send_dao(rpl_instance_t *instance, rpl_dio_t *dio, rpl_parent_t *p)
should_send_dao:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function should_send_dao
        CODE
//  195 {
        FUNCALL should_send_dao, lollipop_greater_than
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
//  196   /* if MOP is set to no downward routes no DAO should be sent */
//  197   if(instance->mop == RPL_MOP_NO_DOWNWARD_ROUTES) {
        MOV     A,R2
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??should_send_dao_0
//  198     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??should_send_dao_1
//  199   }
??should_send_dao_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  200   /* check if the new DTSN is more recent */
//  201   return p == instance->current_dag->preferred_parent &&
//  202     (lollipop_greater_than(dio->dtsn, p->dtsn));
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        XRL     A,R2
        JNZ     ??should_send_dao_2
        MOV     A,R5
        XRL     A,R3
??should_send_dao_2:
        JNZ     ??should_send_dao_3
        ; Setup parameters for call to function lollipop_greater_than
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??lollipop_greater_than?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??should_send_dao_3
        SETB    B.0
        SJMP    ??should_send_dao_4
??should_send_dao_3:
        CLR     B.0
??should_send_dao_4:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     R3,#0x0
??should_send_dao_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  203 }
//  204 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 static int
//  206 acceptable_rank(rpl_dag_t *dag, rpl_rank_t rank)
acceptable_rank:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function acceptable_rank
        CODE
//  207 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  208   return rank != INFINITE_RANK &&
//  209     ((dag->instance->max_rankinc == 0) ||
//  210      DAG_RANK(rank, dag->instance) <= DAG_RANK(dag->min_rank + dag->instance->max_rankinc, dag->instance));
        MOV     A,#-0x1
        XRL     A,R4
        JNZ     ??acceptable_rank_0
        MOV     A,#-0x1
        XRL     A,R5
??acceptable_rank_0:
        JNZ     $+5
        LJMP    ??acceptable_rank_1 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??acceptable_rank_2 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 2
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 3
        JC      ??acceptable_rank_1
??acceptable_rank_2:
        SETB    B.0
        SJMP    ??acceptable_rank_3
??acceptable_rank_1:
        CLR     B.0
??acceptable_rank_3:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     R3,#0x0
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  211 }
//  212 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  213 static rpl_dag_t *
//  214 get_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
get_dag:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function get_dag
        CODE
//  215 {
        FUNCALL get_dag, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_dag, memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  216   rpl_instance_t *instance;
//  217   rpl_dag_t *dag;
//  218   int i;
//  219 
//  220   instance = rpl_get_instance(instance_id);
        ; Setup parameters for call to function rpl_get_instance
        MOV     R1,?V0 + 6
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  221   if(instance == NULL) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??get_dag_0
//  222     return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??get_dag_1 & 0xFFFF
//  223   }
//  224 
//  225   for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; ++i) {
??get_dag_0:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??get_dag_2
??get_dag_3:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??get_dag_2:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x2
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??get_dag_4
//  226     dag = &instance->dag_table[i];
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x37
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x37
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xb
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
//  227     if(dag->used && uip_ipaddr_cmp(&dag->dag_id, dag_id)) {
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??get_dag_3
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 8,#0x10
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memcmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??get_dag_3
//  228       return dag;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??get_dag_1
//  229     }
//  230   }
//  231 
//  232   return NULL;
??get_dag_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
??get_dag_1:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  233 }
//  234 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  235 rpl_dag_t *
//  236 rpl_set_root(uint8_t instance_id, uip_ipaddr_t *dag_id)
rpl_set_root:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function rpl_set_root
        CODE
//  237 {
        FUNCALL rpl_set_root, get_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, rpl_free_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, rpl_alloc_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, rpl_remove_routes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_root, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  238   rpl_dag_t *dag;
//  239   rpl_instance_t *instance;
//  240   uint8_t version;
//  241 
//  242   version = RPL_LOLLIPOP_INIT;
        MOV     ?V0 + 5,#-0x10
//  243   dag = get_dag(instance_id, dag_id);
        ; Setup parameters for call to function get_dag
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??get_dag?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  244   if(dag != NULL) {
        MOV     A,R6
        ORL     A,R7
        JZ      ??rpl_set_root_0
//  245     version = dag->version;
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  246     RPL_LOLLIPOP_INCREMENT(version);
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_set_root_1
        INC     ?V0 + 5
        SJMP    ??rpl_set_root_2
??rpl_set_root_1:
        MOV     A,#0x1
        ADD     A,?V0 + 5
        ANL     A,#0x7f
        MOV     ?V0 + 5,A
//  247     PRINTF("RPL: Dropping a joined DAG when setting this node as root");
//  248     if(dag == dag->instance->current_dag) {
??rpl_set_root_2:
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_set_root_3
        MOV     A,R7
        XRL     A,R1
??rpl_set_root_3:
        JNZ     ??rpl_set_root_4
//  249       dag->instance->current_dag = NULL;
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  250     }
//  251     rpl_free_dag(dag);
??rpl_set_root_4:
        ; Setup parameters for call to function rpl_free_dag
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_free_dag?relay
//  252   }
//  253 
//  254   dag = rpl_alloc_dag(instance_id, dag_id);
??rpl_set_root_0:
        ; Setup parameters for call to function rpl_alloc_dag
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??rpl_alloc_dag?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  255   if(dag == NULL) {
        MOV     A,R6
        ORL     A,R7
        JNZ     ??rpl_set_root_5
//  256     PRINTF("RPL: Failed to allocate a DAG\n");
//  257     return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_set_root_6 & 0xFFFF
//  258   }
//  259 
//  260   instance = dag->instance;
??rpl_set_root_5:
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  261 
//  262   dag->version = version;
        MOV     A,?V0 + 5
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  263   dag->joined = 1;
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  264   dag->grounded = RPL_GROUNDED;
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  265   instance->mop = RPL_MOP_DEFAULT;
        MOV     A,?V0 + 0
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
//  266   instance->of = &RPL_OF;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#rpl_mrhof & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(rpl_mrhof >> 8) & 0xff
        MOVX    @DPTR,A
//  267   rpl_set_preferred_parent(dag, NULL);
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_set_preferred_parent?relay
//  268 
//  269   memcpy(&dag->dag_id, dag_id, sizeof(dag->dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 6,#0x10
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  270 
//  271   instance->dio_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
        MOV     A,?V0 + 0
        ADD     A,#0x7f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x8
        MOVX    @DPTR,A
//  272   instance->dio_intmin = RPL_DIO_INTERVAL_MIN;
        MOV     A,?V0 + 0
        ADD     A,#-0x80
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0xc
        MOVX    @DPTR,A
//  273   /* The current interval must differ from the minimum interval in order to
//  274      trigger a DIO timer reset. */
//  275   instance->dio_intcurrent = RPL_DIO_INTERVAL_MIN +
//  276     RPL_DIO_INTERVAL_DOUBLINGS;
        MOV     A,?V0 + 0
        ADD     A,#-0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x14
        MOVX    @DPTR,A
//  277   instance->dio_redundancy = RPL_DIO_REDUNDANCY;
        MOV     A,?V0 + 0
        ADD     A,#-0x7f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0xa
        MOVX    @DPTR,A
//  278   instance->max_rankinc = RPL_MAX_RANKINC;
        MOV     A,?V0 + 0
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  279   instance->min_hoprankinc = RPL_MIN_HOPRANKINC;
        MOV     A,?V0 + 0
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  280   instance->default_lifetime = RPL_DEFAULT_LIFETIME;
        MOV     A,?V0 + 0
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  281   instance->lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
        MOV     A,?V0 + 0
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  282 
//  283   dag->rank = ROOT_RANK(instance);
        MOV     A,?V0 + 0
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  284 
//  285   if(instance->current_dag != dag && instance->current_dag != NULL) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_set_root_7
        MOV     A,R7
        XRL     A,R1
??rpl_set_root_7:
        JZ      ??rpl_set_root_8
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_set_root_8
//  286     /* Remove routes installed by DAOs. */
//  287     rpl_remove_routes(instance->current_dag);
        ; Setup parameters for call to function rpl_remove_routes
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_remove_routes?relay
//  288 
//  289     instance->current_dag->joined = 0;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  290   }
//  291 
//  292   instance->current_dag = dag;
??rpl_set_root_8:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  293   instance->dtsn_out = RPL_LOLLIPOP_INIT;
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x10
        MOVX    @DPTR,A
//  294   instance->of->update_metric_container(instance);
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xa
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  295   default_instance = instance;
        MOV     DPTR,#default_instance
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  296 
//  297   PRINTF("RPL: Node set to be a DAG root with DAG ID ");
//  298   PRINT6ADDR(&dag->dag_id);
//  299   PRINTF("\n");
//  300 
//  301   ANNOTATE("#A root=%u\n", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);
//  302 
//  303   rpl_reset_dio_timer(instance);
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_reset_dio_timer?relay
//  304 
//  305   return dag;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??rpl_set_root_6:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  306 }
//  307 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  308 int
//  309 rpl_repair_root(uint8_t instance_id)
rpl_repair_root:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function rpl_repair_root
        CODE
//  310 {
        FUNCALL rpl_repair_root, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_repair_root, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  311   rpl_instance_t *instance;
//  312 
//  313   instance = rpl_get_instance(instance_id);
        ; Setup parameters for call to function rpl_get_instance
        MOV     R1,A
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  314   if(instance == NULL ||
//  315      instance->current_dag->rank != ROOT_RANK(instance)) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_repair_root_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_repair_root_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_repair_root_1:
        JZ      ??rpl_repair_root_2
//  316     PRINTF("RPL: rpl_repair_root triggered but not root\n");
//  317     return 0;
??rpl_repair_root_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_repair_root_3 & 0xFFFF
//  318   }
//  319 
//  320   RPL_LOLLIPOP_INCREMENT(instance->current_dag->version);
??rpl_repair_root_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_repair_root_4
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??rpl_repair_root_5
??rpl_repair_root_4:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  321   RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
??rpl_repair_root_5:
        MOV     A,R2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_repair_root_6
        MOV     A,R2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??rpl_repair_root_7
??rpl_repair_root_6:
        MOV     A,R2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  322   PRINTF("RPL: rpl_repair_root initiating global repair with version %d\n", instance->current_dag->version);
//  323   rpl_reset_dio_timer(instance);
??rpl_repair_root_7:
        ; Setup parameters for call to function rpl_reset_dio_timer
        LCALL   ??rpl_reset_dio_timer?relay
//  324   return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
??rpl_repair_root_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12
//  325 }
//  326 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 static void
//  328 set_ip_from_prefix(uip_ipaddr_t *ipaddr, rpl_prefix_t *prefix)
set_ip_from_prefix:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function set_ip_from_prefix
        CODE
//  329 {
        FUNCALL set_ip_from_prefix, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL set_ip_from_prefix, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL set_ip_from_prefix, uip_ds6_set_addr_iid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  330   memset(ipaddr, 0, sizeof(uip_ipaddr_t));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x10
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  331   memcpy(ipaddr, &prefix->prefix, (prefix->length + 7) / 8);
        ; Setup parameters for call to function memcpy
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  332   uip_ds6_set_addr_iid(ipaddr, &uip_lladdr);
        ; Setup parameters for call to function uip_ds6_set_addr_iid
        MOV     R4,#uip_lladdr & 0xff
        MOV     R5,#(uip_lladdr >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??uip_ds6_set_addr_iid?relay
//  333 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  334 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  335 static void
//  336 check_prefix(rpl_prefix_t *last_prefix, rpl_prefix_t *new_prefix)
check_prefix:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function check_prefix
        CODE
//  337 {
        FUNCALL check_prefix, memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, set_ip_from_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, uip_ds6_addr_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, uip_ds6_addr_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, set_ip_from_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, uip_ds6_addr_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL check_prefix, uip_ds6_addr_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  338   uip_ipaddr_t ipaddr;
//  339   uip_ds6_addr_t *rep;
//  340 
//  341   if(last_prefix != NULL && new_prefix != NULL &&
//  342      last_prefix->length == new_prefix->length &&
//  343      uip_ipaddr_prefixcmp(&last_prefix->prefix, &new_prefix->prefix, new_prefix->length) &&
//  344      last_prefix->flags == new_prefix->flags) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??check_prefix_0
        MOV     A,R6
        ORL     A,R7
        JZ      ??check_prefix_0
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??check_prefix_0
        ; Setup parameters for call to function memcmp
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??memcmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??check_prefix_0
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??check_prefix_1
//  345     /* Nothing has changed. */
//  346     return;
//  347   }
//  348 
//  349   if(last_prefix != NULL) {
??check_prefix_0:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??check_prefix_2
//  350     set_ip_from_prefix(&ipaddr, last_prefix);
        ; Setup parameters for call to function set_ip_from_prefix
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??set_ip_from_prefix?relay
//  351     rep = uip_ds6_addr_lookup(&ipaddr);
        ; Setup parameters for call to function uip_ds6_addr_lookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_ds6_addr_lookup?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  352     if(rep != NULL) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??check_prefix_2
//  353       PRINTF("RPL: removing global IP address ");
//  354       PRINT6ADDR(&ipaddr);
//  355       PRINTF("\n");
//  356       uip_ds6_addr_rm(rep);
        ; Setup parameters for call to function uip_ds6_addr_rm
        LCALL   ??uip_ds6_addr_rm?relay
//  357     }
//  358   }
//  359   
//  360   if(new_prefix != NULL) {
??check_prefix_2:
        MOV     A,R6
        ORL     A,R7
        JZ      ??check_prefix_1
//  361     set_ip_from_prefix(&ipaddr, new_prefix);
        ; Setup parameters for call to function set_ip_from_prefix
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??set_ip_from_prefix?relay
//  362     if(uip_ds6_addr_lookup(&ipaddr) == NULL) {
        ; Setup parameters for call to function uip_ds6_addr_lookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_ds6_addr_lookup?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??check_prefix_1
//  363       PRINTF("RPL: adding global IP address ");
//  364       PRINT6ADDR(&ipaddr);
//  365       PRINTF("\n");
//  366       uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
        ; Setup parameters for call to function uip_ds6_addr_add
        MOV     DPTR,#__Constant_0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R1,#0x1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_ds6_addr_add?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  367     }
//  368   }
//  369 }
??check_prefix_1:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  370 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  371 int
//  372 rpl_set_prefix(rpl_dag_t *dag, uip_ipaddr_t *prefix, unsigned len)
rpl_set_prefix:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function rpl_set_prefix
        CODE
//  373 {
        FUNCALL rpl_set_prefix, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_prefix, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_prefix, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_prefix, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_prefix, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  374   rpl_prefix_t last_prefix;
//  375   uint8_t last_len = dag->prefix_info.length;
        MOV     A,R6
        ADD     A,#0x35
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  376   
//  377   if(len > 128) {
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#-0x7f
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        JC      ??rpl_set_prefix_0
//  378     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_set_prefix_1 & 0xFFFF
//  379   }
//  380   if(dag->prefix_info.length != 0) {
??rpl_set_prefix_0:
        MOV     A,R6
        ADD     A,#0x35
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_set_prefix_2
//  381     memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 6,#0x16
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R6
        ADD     A,#0x21
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  382   }
//  383   memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
??rpl_set_prefix_2:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 6,#0x10
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x21
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  384   memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
        ; Setup parameters for call to function memcpy
        MOV     A,?V0 + 0
        ADD     A,#0x7
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?US_SHR
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        ADD     A,#0x21
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
//  385   dag->prefix_info.length = len;
        MOV     A,?V0 + 0
        MOV     A,R6
        ADD     A,#0x35
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  386   dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
        MOV     A,R6
        ADD     A,#0x36
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x40
        MOVX    @DPTR,A
//  387   PRINTF("RPL: Prefix set - will announce this in DIOs\n");
//  388   /* Autoconfigure an address if this node does not already have an address
//  389      with this prefix. Otherwise, update the prefix */
//  390   if(last_len == 0) {
        MOV     A,?V0 + 4
        JNZ     ??rpl_set_prefix_3
//  391     PRINTF("rpl_set_prefix - prefix NULL\n");
//  392     check_prefix(NULL, &dag->prefix_info);
        ; Setup parameters for call to function check_prefix
        MOV     A,R6
        ADD     A,#0x21
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??check_prefix?relay
        SJMP    ??rpl_set_prefix_4
//  393   } else { 
//  394     PRINTF("rpl_set_prefix - prefix NON-NULL\n");
//  395     check_prefix(&last_prefix, &dag->prefix_info);
??rpl_set_prefix_3:
        ; Setup parameters for call to function check_prefix
        MOV     A,R6
        ADD     A,#0x21
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??check_prefix?relay
//  396   }
//  397   return 1;
??rpl_set_prefix_4:
        MOV     R2,#0x1
        MOV     R3,#0x0
??rpl_set_prefix_1:
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  398 }
//  399 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  400 int
//  401 rpl_set_default_route(rpl_instance_t *instance, uip_ipaddr_t *from)
rpl_set_default_route:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function rpl_set_default_route
        CODE
//  402 {
        FUNCALL rpl_set_default_route, uip_ds6_defrt_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_default_route, uip_ds6_defrt_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_set_default_route, uip_ds6_defrt_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  403   if(instance->def_route != NULL) {
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_set_default_route_0
//  404     PRINTF("RPL: Removing default route through ");
//  405     PRINT6ADDR(&instance->def_route->ipaddr);
//  406     PRINTF("\n");
//  407     uip_ds6_defrt_rm(instance->def_route);
        ; Setup parameters for call to function uip_ds6_defrt_rm
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??uip_ds6_defrt_rm?relay
//  408     instance->def_route = NULL;
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  409   }
//  410 
//  411   if(from != NULL) {
??rpl_set_default_route_0:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??rpl_set_default_route_1
//  412     PRINTF("RPL: Adding default route through ");
//  413     PRINT6ADDR(from);
//  414     PRINTF("\n");
//  415     instance->def_route = uip_ds6_defrt_add(from,
//  416         RPL_LIFETIME(instance,
//  417             instance->default_lifetime));
        ; Setup parameters for call to function uip_ds6_defrt_add
        MOV     A,R6
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,R6
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??uip_ds6_defrt_add?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  418     if(instance->def_route == NULL) {
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rpl_set_default_route_2
//  419       return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_set_default_route_3
//  420     }
//  421   } else {
//  422     PRINTF("RPL: Removing default route\n");
//  423     if(instance->def_route != NULL) {
??rpl_set_default_route_1:
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_set_default_route_2
//  424       uip_ds6_defrt_rm(instance->def_route);
        ; Setup parameters for call to function uip_ds6_defrt_rm
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??uip_ds6_defrt_rm?relay
//  425     } else {
//  426       PRINTF("RPL: Not actually removing default route, since instance had no default route\n");
//  427     }
//  428   }
//  429   return 1;
??rpl_set_default_route_2:
        MOV     R2,#0x1
        MOV     R3,#0x0
??rpl_set_default_route_3:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16
//  430 }
//  431 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  432 rpl_instance_t *
//  433 rpl_alloc_instance(uint8_t instance_id)
rpl_alloc_instance:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function rpl_alloc_instance
        CODE
//  434 {
        FUNCALL rpl_alloc_instance, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  435   rpl_instance_t *instance, *end;
//  436 
//  437   for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES;
        MOV     R6,#instance_table & 0xff
        MOV     R7,#(instance_table >> 8) & 0xff
        MOV     A,R6
        ADD     A,#-0x52
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??rpl_alloc_instance_0
//  438       instance < end; ++instance) {
??rpl_alloc_instance_1:
        MOV     A,R6
        ADD     A,#-0x52
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??rpl_alloc_instance_0:
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??rpl_alloc_instance_2
//  439     if(instance->used == 0) {
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??rpl_alloc_instance_1
//  440       memset(instance, 0, sizeof(*instance));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#-0x52
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  441       instance->instance_id = instance_id;
        MOV     A,?V0 + 0
        MOV     A,R6
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  442       instance->def_route = NULL;
        MOV     A,R6
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  443       instance->used = 1;
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  444       return instance;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??rpl_alloc_instance_3
//  445     }
//  446   }
//  447   return NULL;
??rpl_alloc_instance_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_alloc_instance_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  448 }
//  449 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  450 rpl_dag_t *
//  451 rpl_alloc_dag(uint8_t instance_id, uip_ipaddr_t *dag_id)
rpl_alloc_dag:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function rpl_alloc_dag
        CODE
//  452 {
        FUNCALL rpl_alloc_dag, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_alloc_dag, rpl_alloc_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_alloc_dag, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_alloc_dag, rpl_free_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
//  453   rpl_dag_t *dag, *end;
//  454   rpl_instance_t *instance;
//  455 
//  456   instance = rpl_get_instance(instance_id);
        ; Setup parameters for call to function rpl_get_instance
        MOV     R1,?V0 + 2
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  457   if(instance == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??rpl_alloc_dag_0
//  458     instance = rpl_alloc_instance(instance_id);
        ; Setup parameters for call to function rpl_alloc_instance
        MOV     R1,?V0 + 2
        LCALL   ??rpl_alloc_instance?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  459     if(instance == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??rpl_alloc_dag_0
//  460       RPL_STAT(rpl_stats.mem_overflows++);
//  461       return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_alloc_dag_1 & 0xFFFF
//  462     }
//  463   }
//  464 
//  465   for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
??rpl_alloc_dag_0:
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x6e
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??rpl_alloc_dag_2
??rpl_alloc_dag_3:
        MOV     A,R6
        ADD     A,#0x37
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??rpl_alloc_dag_2:
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??rpl_alloc_dag_4
//  466     if(!dag->used) {
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??rpl_alloc_dag_3
//  467       memset(dag, 0, sizeof(*dag));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x37
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  468       dag->used = 1;
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  469       dag->rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  470       dag->min_rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  471       dag->instance = instance;
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  472       return dag;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??rpl_alloc_dag_1
//  473     }
//  474   }
//  475 
//  476   RPL_STAT(rpl_stats.mem_overflows++);
//  477   rpl_free_instance(instance);
??rpl_alloc_dag_4:
        ; Setup parameters for call to function rpl_free_instance
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_free_instance?relay
//  478   return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_alloc_dag_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
//  479 }
//  480 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  481 void
//  482 rpl_set_default_instance(rpl_instance_t *instance)
rpl_set_default_instance:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function rpl_set_default_instance
        CODE
//  483 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  484   default_instance = instance;
        MOV     DPTR,#default_instance
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  485 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
//  486 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  487 void
//  488 rpl_free_instance(rpl_instance_t *instance)
rpl_free_instance:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function rpl_free_instance
        CODE
//  489 {
        FUNCALL rpl_free_instance, rpl_free_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_free_instance, rpl_set_default_route
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_free_instance, ctimer_stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_free_instance, ctimer_stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  490   rpl_dag_t *dag;
//  491   rpl_dag_t *end;
//  492 
//  493   PRINTF("RPL: Leaving the instance %u\n", instance->instance_id);
//  494 
//  495   /* Remove any DAG inside this instance */
//  496   for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
        MOV     A,R6
        ADD     A,#0xb
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ADD     A,#0x6e
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        SJMP    ??rpl_free_instance_0
//  497     if(dag->used) {
??rpl_free_instance_1:
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_free_instance_2
//  498       rpl_free_dag(dag);
        ; Setup parameters for call to function rpl_free_dag
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_free_dag?relay
//  499     }
//  500   }
??rpl_free_instance_2:
        MOV     A,?V0 + 0
        ADD     A,#0x37
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??rpl_free_instance_0:
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        JC      ??rpl_free_instance_1
//  501 
//  502   rpl_set_default_route(instance, NULL);
        ; Setup parameters for call to function rpl_set_default_route
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_set_default_route?relay
//  503 
//  504   ctimer_stop(&instance->dio_timer);
        ; Setup parameters for call to function ctimer_stop
        MOV     A,R6
        ADD     A,#-0x72
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_stop?relay
//  505   ctimer_stop(&instance->dao_timer);
        ; Setup parameters for call to function ctimer_stop
        MOV     A,R6
        ADD     A,#-0x62
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_stop?relay
//  506 
//  507   if(default_instance == instance) {
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_free_instance_3
        MOV     A,R7
        XRL     A,R1
??rpl_free_instance_3:
        JNZ     ??rpl_free_instance_4
//  508     default_instance = NULL;
        MOV     DPTR,#default_instance
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  509   }
//  510 
//  511   instance->used = 0;
??rpl_free_instance_4:
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  512 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
//  513 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  514 void
//  515 rpl_free_dag(rpl_dag_t *dag)
rpl_free_dag:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function rpl_free_dag
        CODE
//  516 {
        FUNCALL rpl_free_dag, rpl_remove_routes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_free_dag, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_free_dag, remove_parents
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  517   if(dag->joined) {
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_free_dag_0
//  518     PRINTF("RPL: Leaving the DAG ");
//  519     PRINT6ADDR(&dag->dag_id);
//  520     PRINTF("\n");
//  521     dag->joined = 0;
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  522 
//  523     /* Remove routes installed by DAOs. */
//  524     rpl_remove_routes(dag);
        ; Setup parameters for call to function rpl_remove_routes
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_remove_routes?relay
//  525 
//  526    /* Remove autoconfigured address */
//  527     if((dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS)) {
        MOV     A,R6
        ADD     A,#0x36
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_free_dag_1
//  528       check_prefix(&dag->prefix_info, NULL);
        ; Setup parameters for call to function check_prefix
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x21
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??check_prefix?relay
//  529     }
//  530 
//  531     remove_parents(dag, 0);
??rpl_free_dag_1:
        ; Setup parameters for call to function remove_parents
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??remove_parents?relay
//  532   }
//  533   dag->used = 0;
??rpl_free_dag_0:
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  534 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
//  535 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  536 rpl_parent_t *
//  537 rpl_add_parent(rpl_dag_t *dag, rpl_dio_t *dio, uip_ipaddr_t *addr)
rpl_add_parent:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function rpl_add_parent
        CODE
//  538 {
        FUNCALL rpl_add_parent, uip_ds6_nbr_lladdr_from_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_parent, nbr_table_add_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
//  539   rpl_parent_t *p = NULL;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  540   /* Is the parent known by ds6? Drop this request if not.
//  541    * Typically, the parent is added upon receiving a DIO. */
//  542   uip_lladdr_t *lladdr = uip_ds6_nbr_lladdr_from_ipaddr(addr);
        ; Setup parameters for call to function uip_ds6_nbr_lladdr_from_ipaddr
        LCALL   ??uip_ds6_nbr_lladdr_from_ipaddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  543 
//  544   PRINTF("RPL: rpl_add_parent lladdr %p\n", lladdr);
//  545   if(lladdr != NULL) {
        MOV     A,R4
        ORL     A,R5
        JZ      ??rpl_add_parent_0
//  546     /* Add parent in rpl_parents */
//  547     p = nbr_table_add_lladdr(rpl_parents, (rimeaddr_t *)lladdr);
        ; Setup parameters for call to function nbr_table_add_lladdr
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_add_lladdr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  548     p->dag = dag;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  549     p->rank = dio->rank;
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  550     p->dtsn = dio->dtsn;
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  551     p->link_metric = RPL_INIT_LINK_METRIC;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x5
        MOVX    @DPTR,A
//  552 #if RPL_DAG_MC != RPL_DAG_MC_NONE
//  553     memcpy(&p->mc, &dio->mc, sizeof(p->mc));
//  554 #endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
//  555   }
//  556 
//  557   return p;
??rpl_add_parent_0:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock22
//  558 }
//  559 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 static rpl_parent_t *
//  561 find_parent_any_dag_any_instance(uip_ipaddr_t *addr)
find_parent_any_dag_any_instance:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function find_parent_any_dag_any_instance
        CODE
//  562 {
        FUNCALL find_parent_any_dag_any_instance, uip_ds6_nbr_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL find_parent_any_dag_any_instance, uip_ds6_nbr_get_ll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL find_parent_any_dag_any_instance, nbr_table_get_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  563   uip_ds6_nbr_t *ds6_nbr = uip_ds6_nbr_lookup(addr);
        ; Setup parameters for call to function uip_ds6_nbr_lookup
        LCALL   ??uip_ds6_nbr_lookup?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  564   uip_lladdr_t *lladdr = uip_ds6_nbr_get_ll(ds6_nbr);
        ; Setup parameters for call to function uip_ds6_nbr_get_ll
        LCALL   ??uip_ds6_nbr_get_ll?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  565   return nbr_table_get_from_lladdr(rpl_parents, (rimeaddr_t *)lladdr);
        ; Setup parameters for call to function nbr_table_get_from_lladdr
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_from_lladdr?relay
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock23
//  566 }
//  567 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 rpl_parent_t *
//  569 rpl_find_parent(rpl_dag_t *dag, uip_ipaddr_t *addr)
rpl_find_parent:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function rpl_find_parent
        CODE
//  570 {
        FUNCALL rpl_find_parent, find_parent_any_dag_any_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
//  571   rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
        ; Setup parameters for call to function find_parent_any_dag_any_instance
        LCALL   ??find_parent_any_dag_any_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  572   if(p != NULL && p->dag == dag) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_find_parent_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_find_parent_1
        MOV     A,R7
        XRL     A,R1
??rpl_find_parent_1:
        JZ      ??rpl_find_parent_2
//  573     return p;
//  574   } else {
//  575     return NULL;
??rpl_find_parent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_find_parent_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
//  576   }
//  577 }
//  578 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 static rpl_dag_t *
//  580 find_parent_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
find_parent_dag:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function find_parent_dag
        CODE
//  581 {
        FUNCALL find_parent_dag, find_parent_any_dag_any_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  582   rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
        ; Setup parameters for call to function find_parent_any_dag_any_instance
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        LCALL   ??find_parent_any_dag_any_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
//  583   if(p != NULL) {
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??find_parent_dag_0
//  584     return p->dag;
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??find_parent_dag_1
//  585   } else {
//  586     return NULL;
??find_parent_dag_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??find_parent_dag_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25
//  587   }
//  588 }
//  589 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  590 rpl_parent_t *
//  591 rpl_find_parent_any_dag(rpl_instance_t *instance, uip_ipaddr_t *addr)
rpl_find_parent_any_dag:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function rpl_find_parent_any_dag
        CODE
//  592 {
        FUNCALL rpl_find_parent_any_dag, find_parent_any_dag_any_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
//  593   rpl_parent_t *p = find_parent_any_dag_any_instance(addr);
        ; Setup parameters for call to function find_parent_any_dag_any_instance
        LCALL   ??find_parent_any_dag_any_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  594   if(p && p->dag && p->dag->instance == instance) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_find_parent_any_dag_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_find_parent_any_dag_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_find_parent_any_dag_1
        MOV     A,R7
        XRL     A,R1
??rpl_find_parent_any_dag_1:
        JZ      ??rpl_find_parent_any_dag_2
//  595     return p;
//  596   } else {
//  597     return NULL;
??rpl_find_parent_any_dag_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_find_parent_any_dag_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
//  598   }
//  599 }
//  600 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 rpl_dag_t *
//  602 rpl_select_dag(rpl_instance_t *instance, rpl_parent_t *p)
rpl_select_dag:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function rpl_select_dag
        CODE
//  603 {
        FUNCALL rpl_select_dag, rpl_select_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_remove_routes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_set_default_route
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, dao_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, acceptable_rank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, dao_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_schedule_dao
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_dag, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  604   rpl_parent_t *last_parent;
//  605   rpl_dag_t *dag, *end, *best_dag;
//  606   rpl_rank_t old_rank;
//  607 
//  608   old_rank = instance->current_dag->rank;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        ADD     A,#0x19
        MOV     DPL,A
        MOV     R0,A
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
//  609   last_parent = instance->current_dag->preferred_parent;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  610 
//  611   best_dag = instance->current_dag;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  612   if(best_dag->rank != ROOT_RANK(instance)) {
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_select_dag_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_select_dag_0:
        JZ      ??rpl_select_dag_1
//  613     if(rpl_select_parent(p->dag) != NULL) {
        ; Setup parameters for call to function rpl_select_parent
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_select_parent?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??rpl_select_dag_2
//  614       if(p->dag != best_dag) {
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_select_dag_3
        MOV     A,R7
        XRL     A,R1
??rpl_select_dag_3:
        JZ      ??rpl_select_dag_1
//  615         best_dag = instance->of->best_dag(best_dag, p->dag);
        ; Setup parameters for indirect call
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x6
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  616       }
//  617     } else if(p->dag == best_dag) {
//  618       best_dag = NULL;
//  619       for(dag = &instance->dag_table[0], end = dag + RPL_MAX_DAG_PER_INSTANCE; dag < end; ++dag) {
//  620         if(dag->used && dag->preferred_parent != NULL && dag->preferred_parent->rank != INFINITE_RANK) {
//  621           if(best_dag == NULL) {
//  622             best_dag = dag;
//  623           } else {
//  624             best_dag = instance->of->best_dag(best_dag, dag);
//  625           }
//  626         }
//  627       }
//  628     }
//  629   }
//  630 
//  631   if(best_dag == NULL) {
??rpl_select_dag_1:
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??rpl_select_dag_4 & 0xFFFF
//  632     /* No parent found: the calling function handle this problem. */
//  633     return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_select_dag_5 & 0xFFFF
//  634   }
??rpl_select_dag_2:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_select_dag_6
        MOV     A,R7
        XRL     A,R1
??rpl_select_dag_6:
        JNZ     ??rpl_select_dag_1
        MOV     R6,#0x0
        MOV     R7,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0xb
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        ADD     A,#0x6e
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        SJMP    ??rpl_select_dag_7
??rpl_select_dag_8:
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x6
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
??rpl_select_dag_9:
        MOV     A,?V0 + 2
        ADD     A,#0x37
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??rpl_select_dag_7:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 6
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 7
        JC      $+5
        LJMP    ??rpl_select_dag_1 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_select_dag_9
        MOV     A,?V0 + 2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_select_dag_9
        MOV     A,?V0 + 2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??rpl_select_dag_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??rpl_select_dag_10:
        JZ      ??rpl_select_dag_9
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??rpl_select_dag_8 & 0xFFFF
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        SJMP    ??rpl_select_dag_9
//  635 
//  636   if(instance->current_dag != best_dag) {
??rpl_select_dag_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_select_dag_11
        MOV     A,R7
        XRL     A,R1
??rpl_select_dag_11:
        JNZ     $+5
        LJMP    ??rpl_select_dag_12 & 0xFFFF
//  637     /* Remove routes installed by DAOs. */
//  638     rpl_remove_routes(instance->current_dag);
        ; Setup parameters for call to function rpl_remove_routes
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_remove_routes?relay
//  639 
//  640     PRINTF("RPL: New preferred DAG: ");
//  641     PRINT6ADDR(&best_dag->dag_id);
//  642     PRINTF("\n");
//  643 
//  644     if(best_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
        MOV     A,R6
        ADD     A,#0x36
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_select_dag_13
//  645       check_prefix(&instance->current_dag->prefix_info, &best_dag->prefix_info);
        ; Setup parameters for call to function check_prefix
        MOV     A,R6
        ADD     A,#0x21
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x21
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??check_prefix?relay
        SJMP    ??rpl_select_dag_14
//  646     } else if(instance->current_dag->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
??rpl_select_dag_13:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x36
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_select_dag_14
//  647       check_prefix(&instance->current_dag->prefix_info, NULL);
        ; Setup parameters for call to function check_prefix
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x21
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??check_prefix?relay
//  648     }
//  649 
//  650     best_dag->joined = 1;
??rpl_select_dag_14:
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  651     instance->current_dag->joined = 0;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  652     instance->current_dag = best_dag;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  653   }
//  654 
//  655   instance->of->update_metric_container(instance);
??rpl_select_dag_12:
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xa
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  656   /* Update the DAG rank. */
//  657   best_dag->rank = instance->of->calculate_rank(best_dag->preferred_parent, 0);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  658   if(last_parent == NULL || best_dag->rank < best_dag->min_rank) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??rpl_select_dag_15
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      $+5
        LJMP    ??rpl_select_dag_16 & 0xFFFF
//  659     best_dag->min_rank = best_dag->rank;
??rpl_select_dag_15:
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  660   } else if(!acceptable_rank(best_dag, best_dag->rank)) {
//  661     PRINTF("RPL: New rank unacceptable!\n");
//  662     rpl_set_preferred_parent(instance->current_dag, NULL);
//  663     if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES && last_parent != NULL) {
//  664       /* Send a No-Path DAO to the removed preferred parent. */
//  665       dao_output(last_parent, RPL_ZERO_LIFETIME);
//  666     }
//  667     return NULL;
//  668   }
//  669 
//  670   if(best_dag->preferred_parent != last_parent) {
??rpl_select_dag_17:
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        XRL     A,R0
        JNZ     ??rpl_select_dag_18
        MOV     A,?V0 + 5
        XRL     A,R1
??rpl_select_dag_18:
        JNZ     $+5
        LJMP    ??rpl_select_dag_19 & 0xFFFF
//  671     rpl_set_default_route(instance, rpl_get_parent_ipaddr(best_dag->preferred_parent));
        ; Setup parameters for call to function rpl_set_default_route
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_default_route?relay
//  672     PRINTF("RPL: Changed preferred parent, rank changed from %u to %u\n",
//  673   	(unsigned)old_rank, best_dag->rank);
//  674     RPL_STAT(rpl_stats.parent_switch++);
//  675     if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
        MOV     A,?V0 + 0
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??rpl_select_dag_20 & 0xFFFF
//  676       if(last_parent != NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??rpl_select_dag_21
//  677         /* Send a No-Path DAO to the removed preferred parent. */
//  678         dao_output(last_parent, RPL_ZERO_LIFETIME);
        ; Setup parameters for call to function dao_output
        MOV     R1,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??dao_output?relay
//  679       }
//  680       /* The DAO parent set changed - schedule a DAO transmission. */
//  681       RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
??rpl_select_dag_21:
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_select_dag_22
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??rpl_select_dag_23 & 0xFFFF
??rpl_select_dag_16:
        ; Setup parameters for call to function acceptable_rank
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??acceptable_rank?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??rpl_select_dag_17 & 0xFFFF
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_set_preferred_parent?relay
        MOV     A,?V0 + 0
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_select_dag_24
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??rpl_select_dag_24
        ; Setup parameters for call to function dao_output
        MOV     R1,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??dao_output?relay
??rpl_select_dag_24:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_select_dag_5
??rpl_select_dag_22:
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  682       rpl_schedule_dao(instance);
??rpl_select_dag_23:
        ; Setup parameters for call to function rpl_schedule_dao
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_schedule_dao?relay
//  683     }
//  684     rpl_reset_dio_timer(instance);
??rpl_select_dag_20:
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_reset_dio_timer?relay
//  685   } else if(best_dag->rank != old_rank) {
//  686     PRINTF("RPL: Preferred parent update, rank changed from %u to %u\n",
//  687   	(unsigned)old_rank, best_dag->rank);
//  688   }
//  689   return best_dag;
??rpl_select_dag_19:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
??rpl_select_dag_5:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock27
//  690 }
//  691 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  692 rpl_parent_t *
//  693 rpl_select_parent(rpl_dag_t *dag)
rpl_select_parent:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function rpl_select_parent
        CODE
//  694 {
        FUNCALL rpl_select_parent, nbr_table_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_parent, nbr_table_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_select_parent, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  695   rpl_parent_t *p, *best;
//  696 
//  697   best = NULL;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  698 
//  699   p = nbr_table_head(rpl_parents);
        ; Setup parameters for call to function nbr_table_head
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_head?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        SJMP    ??rpl_select_parent_0
//  700   while(p != NULL) {
//  701     if(p->rank == INFINITE_RANK) {
//  702       /* ignore this neighbor */
//  703     } else if(best == NULL) {
//  704       best = p;
//  705     } else {
//  706       best = dag->instance->of->best_parent(best, p);
??rpl_select_parent_1:
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,?V0 + 0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  707     }
//  708     p = nbr_table_next(rpl_parents, p);
??rpl_select_parent_2:
        ; Setup parameters for call to function nbr_table_next
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_next?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
??rpl_select_parent_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??rpl_select_parent_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??rpl_select_parent_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??rpl_select_parent_4:
        JZ      ??rpl_select_parent_2
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??rpl_select_parent_1
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        SJMP    ??rpl_select_parent_2
//  709   }
//  710 
//  711   if(best != NULL) {
??rpl_select_parent_3:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??rpl_select_parent_5
//  712     rpl_set_preferred_parent(dag, best);
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_preferred_parent?relay
//  713   }
//  714 
//  715   return best;
??rpl_select_parent_5:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock28
//  716 }
//  717 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  718 void
//  719 rpl_remove_parent(rpl_parent_t *parent)
rpl_remove_parent:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function rpl_remove_parent
        CODE
//  720 {
        FUNCALL rpl_remove_parent, rpl_nullify_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_remove_parent, nbr_table_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  721   PRINTF("RPL: Removing parent ");
//  722   PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  723   PRINTF("\n");
//  724 
//  725   rpl_nullify_parent(parent);
        ; Setup parameters for call to function rpl_nullify_parent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_nullify_parent?relay
//  726 
//  727   nbr_table_remove(rpl_parents, parent);
        ; Setup parameters for call to function nbr_table_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_remove?relay
//  728 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock29
//  729 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  730 void
//  731 rpl_nullify_parent(rpl_parent_t *parent)
rpl_nullify_parent:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function rpl_nullify_parent
        CODE
//  732 {
        FUNCALL rpl_nullify_parent, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_nullify_parent, uip_ds6_defrt_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_nullify_parent, dao_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  733   rpl_dag_t *dag = parent->dag;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  734   /* This function can be called when the preferred parent is NULL, so we
//  735      need to handle this condition in order to trigger uip_ds6_defrt_rm. */
//  736   if(parent == dag->preferred_parent || dag->preferred_parent == NULL) {
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        XRL     A,R0
        JNZ     ??rpl_nullify_parent_0
        MOV     A,?V0 + 1
        XRL     A,R1
??rpl_nullify_parent_0:
        JZ      ??rpl_nullify_parent_1
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??rpl_nullify_parent_2 & 0xFFFF
//  737     rpl_set_preferred_parent(dag, NULL);
??rpl_nullify_parent_1:
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_set_preferred_parent?relay
//  738     dag->rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  739     if(dag->joined) {
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_nullify_parent_2
//  740       if(dag->instance->def_route != NULL) {
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_nullify_parent_3
//  741         PRINTF("RPL: Removing default route ");
//  742         PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  743         PRINTF("\n");
//  744         uip_ds6_defrt_rm(dag->instance->def_route);
        ; Setup parameters for call to function uip_ds6_defrt_rm
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??uip_ds6_defrt_rm?relay
//  745         dag->instance->def_route = NULL;
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  746       }
//  747       dao_output(parent, RPL_ZERO_LIFETIME);
??rpl_nullify_parent_3:
        ; Setup parameters for call to function dao_output
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??dao_output?relay
//  748     }
//  749   }
//  750 
//  751   PRINTF("RPL: Nullifying parent ");
//  752   PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  753   PRINTF("\n");
//  754 }
??rpl_nullify_parent_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock30
//  755 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  756 void
//  757 rpl_move_parent(rpl_dag_t *dag_src, rpl_dag_t *dag_dst, rpl_parent_t *parent)
rpl_move_parent:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function rpl_move_parent
        CODE
//  758 {
        FUNCALL rpl_move_parent, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_move_parent, uip_ds6_defrt_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_move_parent, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_move_parent, rpl_remove_routes_by_nexthop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_move_parent, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_move_parent, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  759   if(parent == dag_src->preferred_parent) {
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        XRL     A,R0
        JNZ     ??rpl_move_parent_0
        MOV     A,?V0 + 1
        XRL     A,R1
??rpl_move_parent_0:
        JZ      $+5
        LJMP    ??rpl_move_parent_1 & 0xFFFF
//  760       rpl_set_preferred_parent(dag_src, NULL);
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_set_preferred_parent?relay
//  761       dag_src->rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  762     if(dag_src->joined && dag_src->instance->def_route != NULL) {
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??rpl_move_parent_2 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_move_parent_2
//  763       PRINTF("RPL: Removing default route ");
//  764       PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  765       PRINTF("\n");
//  766       PRINTF("rpl_move_parent\n");
//  767       uip_ds6_defrt_rm(dag_src->instance->def_route);
        ; Setup parameters for call to function uip_ds6_defrt_rm
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??uip_ds6_defrt_rm?relay
//  768       dag_src->instance->def_route = NULL;
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x79
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??rpl_move_parent_2
//  769     }
//  770   } else if(dag_src->joined) {
??rpl_move_parent_1:
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_move_parent_2
//  771     /* Remove uIPv6 routes that have this parent as the next hop. */
//  772     rpl_remove_routes_by_nexthop(rpl_get_parent_ipaddr(parent), dag_src);
        ; Setup parameters for call to function rpl_remove_routes_by_nexthop
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rpl_remove_routes_by_nexthop?relay
//  773   }
//  774 
//  775   PRINTF("RPL: Moving parent ");
//  776   PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  777   PRINTF("\n");
//  778 
//  779   list_remove(dag_src->parents, parent);
??rpl_move_parent_2:
        ; Setup parameters for call to function list_remove
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  780   parent->dag = dag_dst;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  781   list_add(dag_dst->parents, parent);
        ; Setup parameters for call to function list_add
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,?V0 + 2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  782 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock31
//  783 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  784 rpl_dag_t *
//  785 rpl_get_any_dag(void)
rpl_get_any_dag:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function rpl_get_any_dag
        CODE
//  786 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  787   int i;
//  788 
//  789   for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??rpl_get_any_dag_0
??rpl_get_any_dag_1:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??rpl_get_any_dag_0:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??rpl_get_any_dag_2 & 0xFFFF
//  790     if(instance_table[i].used && instance_table[i].current_dag->joined) {
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#-0x52
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     A,#(instance_table + 124) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((instance_table + 124) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_get_any_dag_1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#-0x52
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     A,#(instance_table + 9) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((instance_table + 9) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_get_any_dag_1
//  791       return instance_table[i].current_dag;
        MOV     A,R0
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#-0x52
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(instance_table + 9) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((instance_table + 9) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??rpl_get_any_dag_3
//  792     }
//  793   }
//  794   return NULL;
??rpl_get_any_dag_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_get_any_dag_3:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock32
//  795 }
//  796 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  797 rpl_instance_t *
//  798 rpl_get_instance(uint8_t instance_id)
rpl_get_instance:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function rpl_get_instance
        CODE
//  799 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  800   int i;
//  801 
//  802   for(i = 0; i < RPL_MAX_INSTANCES; ++i) {
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_get_instance_0
??rpl_get_instance_1:
        MOV     A,R2
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??rpl_get_instance_0:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??rpl_get_instance_2
//  803     if(instance_table[i].used && instance_table[i].instance_id == instance_id) {
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#-0x52
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,#(instance_table + 124) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((instance_table + 124) >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_get_instance_1
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#-0x52
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,#(instance_table + 123) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((instance_table + 123) >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??rpl_get_instance_1
//  804       return &instance_table[i];
        MOV     A,R2
        MOV     B,#-0x52
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#-0x52
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,#instance_table & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(instance_table >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        SJMP    ??rpl_get_instance_3
//  805     }
//  806   }
//  807   return NULL;
??rpl_get_instance_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_get_instance_3:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock33
//  808 }
//  809 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  810 rpl_of_t *
//  811 rpl_find_of(rpl_ocp_t ocp)
rpl_find_of:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function rpl_find_of
        CODE
//  812 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  813   unsigned int i;
//  814 
//  815   for(i = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??rpl_find_of_0
//  816       i < sizeof(objective_functions) / sizeof(objective_functions[0]);
//  817       i++) {
??rpl_find_of_1:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??rpl_find_of_0:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rpl_find_of_2
//  818     if(objective_functions[i]->ocp == ocp) {
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,#objective_functions & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(objective_functions >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R4
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R4
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??rpl_find_of_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??rpl_find_of_3:
        JNZ     ??rpl_find_of_1
//  819       return objective_functions[i];
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#objective_functions & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(objective_functions >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??rpl_find_of_4
//  820     }
//  821   }
//  822 
//  823   return NULL;
??rpl_find_of_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_find_of_4:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34
//  824 }
//  825 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  826 void
//  827 rpl_join_instance(uip_ipaddr_t *from, rpl_dio_t *dio)
rpl_join_instance:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function rpl_join_instance
        CODE
//  828 {
        FUNCALL rpl_join_instance, rpl_alloc_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_add_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_find_of
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_remove_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, check_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_set_default_route
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_join_instance, rpl_schedule_dao
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  829   rpl_instance_t *instance;
//  830   rpl_dag_t *dag;
//  831   rpl_parent_t *p;
//  832   rpl_of_t *of;
//  833 
//  834   dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
        ; Setup parameters for call to function rpl_alloc_dag
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,?V0 + 2
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_alloc_dag?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  835   if(dag == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rpl_join_instance_0 & 0xFFFF
//  836     PRINTF("RPL: Failed to allocate a DAG object!\n");
//  837     return;
//  838   }
//  839 
//  840   instance = dag->instance;
        MOV     A,?V0 + 0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  841 
//  842   p = rpl_add_parent(dag, dio, from);
        ; Setup parameters for call to function rpl_add_parent
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_add_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
//  843   PRINTF("RPL: Adding ");
//  844   PRINT6ADDR(from);
//  845   PRINTF(" as a parent: ");
//  846   if(p == NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??rpl_join_instance_1
//  847     PRINTF("failed\n");
//  848     instance->used = 0;
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  849     return;
        LJMP    ??rpl_join_instance_0 & 0xFFFF
//  850   }
//  851   p->dtsn = dio->dtsn;
??rpl_join_instance_1:
        MOV     A,?V0 + 2
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  852   PRINTF("succeeded\n");
//  853 
//  854   /* Determine the objective function by using the
//  855      objective code point of the DIO. */
//  856   of = rpl_find_of(dio->ocp);
        ; Setup parameters for call to function rpl_find_of
        MOV     A,?V0 + 2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_find_of?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
//  857   if(of == NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     ??rpl_join_instance_2
//  858     PRINTF("RPL: DIO for DAG instance %u does not specify a supported OF\n",
//  859         dio->instance_id);
//  860     rpl_remove_parent(p);
        ; Setup parameters for call to function rpl_remove_parent
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??rpl_remove_parent?relay
//  861     instance->used = 0;
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  862     return;
        LJMP    ??rpl_join_instance_0 & 0xFFFF
//  863   }
//  864 
//  865   /* Autoconfigure an address if this node does not already have an address
//  866      with this prefix. */
//  867   if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
??rpl_join_instance_2:
        MOV     A,?V0 + 2
        ADD     A,#0x4f
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_join_instance_3
//  868     check_prefix(NULL, &dio->prefix_info);
        ; Setup parameters for call to function check_prefix
        MOV     A,?V0 + 2
        ADD     A,#0x3a
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??check_prefix?relay
//  869   }
//  870 
//  871   dag->joined = 1;
??rpl_join_instance_3:
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  872   dag->preference = dio->preference;
        MOV     A,?V0 + 2
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  873   dag->grounded = dio->grounded;
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  874   dag->version = dio->version;
        MOV     A,?V0 + 2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  875 
//  876   instance->of = of;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  877   instance->mop = dio->mop;
        MOV     A,?V0 + 2
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  878   instance->current_dag = dag;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  879   instance->dtsn_out = RPL_LOLLIPOP_INIT;
        MOV     A,R6
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x10
        MOVX    @DPTR,A
//  880 
//  881   instance->max_rankinc = dio->dag_max_rankinc;
        MOV     A,?V0 + 2
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  882   instance->min_hoprankinc = dio->dag_min_hoprankinc;
        MOV     A,?V0 + 2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  883   instance->dio_intdoubl = dio->dag_intdoubl;
        MOV     A,?V0 + 2
        ADD     A,#0x1a
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x7f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  884   instance->dio_intmin = dio->dag_intmin;
        MOV     A,?V0 + 2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#-0x80
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  885   instance->dio_intcurrent = instance->dio_intmin + instance->dio_intdoubl;
        MOV     A,R6
        ADD     A,#0x7f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#-0x80
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#-0x7d
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  886   instance->dio_redundancy = dio->dag_redund;
        MOV     A,?V0 + 2
        ADD     A,#0x1c
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#-0x7f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  887   instance->default_lifetime = dio->default_lifetime;
        MOV     A,?V0 + 2
        ADD     A,#0x1d
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  888   instance->lifetime_unit = dio->lifetime_unit;
        MOV     A,?V0 + 2
        ADD     A,#0x1e
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  889 
//  890   memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 6,#0x10
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  891 
//  892   /* Copy prefix information from the DIO into the DAG object. */
//  893   memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 6,#0x16
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,?V0 + 2
        ADD     A,#0x3a
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  894 
//  895   rpl_set_preferred_parent(dag, p);
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_preferred_parent?relay
//  896   instance->of->update_metric_container(instance);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xa
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  897   dag->rank = instance->of->calculate_rank(p, 0);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  898   /* So far this is the lowest rank we are aware of. */
//  899   dag->min_rank = dag->rank;
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  900 
//  901   if(default_instance == NULL) {
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rpl_join_instance_4
//  902     default_instance = instance;
        MOV     DPTR,#default_instance
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  903   }
//  904 
//  905   PRINTF("RPL: Joined DAG with instance ID %u, rank %hu, DAG ID ",
//  906          dio->instance_id, dag->rank);
//  907   PRINT6ADDR(&dag->dag_id);
//  908   PRINTF("\n");
//  909 
//  910   ANNOTATE("#A join=%u\n", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);
//  911 
//  912   rpl_reset_dio_timer(instance);
??rpl_join_instance_4:
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_reset_dio_timer?relay
//  913   rpl_set_default_route(instance, from);
        ; Setup parameters for call to function rpl_set_default_route
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_set_default_route?relay
//  914 
//  915   if(instance->mop != RPL_MOP_NO_DOWNWARD_ROUTES) {
        MOV     A,R6
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_join_instance_0
//  916     rpl_schedule_dao(instance);
        ; Setup parameters for call to function rpl_schedule_dao
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_schedule_dao?relay
//  917   } else {
//  918     PRINTF("RPL: The DIO does not meet the prerequisites for sending a DAO\n");
//  919   }
//  920 }
??rpl_join_instance_0:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35
//  921 
//  922 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  923 void
//  924 rpl_add_dag(uip_ipaddr_t *from, rpl_dio_t *dio)
rpl_add_dag:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function rpl_add_dag
        CODE
//  925 {
        FUNCALL rpl_add_dag, rpl_alloc_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, find_parent_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_add_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_find_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_move_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_find_of
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_remove_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_set_preferred_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_add_dag, rpl_process_parent_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  926   rpl_instance_t *instance;
//  927   rpl_dag_t *dag, *previous_dag;
//  928   rpl_parent_t *p;
//  929   rpl_of_t *of;
//  930 
//  931   dag = rpl_alloc_dag(dio->instance_id, &dio->dag_id);
        ; Setup parameters for call to function rpl_alloc_dag
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_alloc_dag?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  932   if(dag == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rpl_add_dag_0 & 0xFFFF
//  933     PRINTF("RPL: Failed to allocate a DAG object!\n");
//  934     return;
//  935   }
//  936 
//  937   instance = dag->instance;
        MOV     A,?V0 + 0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  938 
//  939   previous_dag = find_parent_dag(instance, from);
        ; Setup parameters for call to function find_parent_dag
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??find_parent_dag?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
//  940   if(previous_dag == NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??rpl_add_dag_1
//  941     PRINTF("RPL: Adding ");
//  942     PRINT6ADDR(from);
//  943     PRINTF(" as a parent: ");
//  944     p = rpl_add_parent(dag, dio, from);
        ; Setup parameters for call to function rpl_add_parent
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_add_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  945     if(p == NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     ??rpl_add_dag_2
//  946       PRINTF("failed\n");
//  947       dag->used = 0;
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  948       return;
        LJMP    ??rpl_add_dag_0 & 0xFFFF
//  949     }
//  950     PRINTF("succeeded\n");
//  951   } else {
//  952     p = rpl_find_parent(previous_dag, from);
??rpl_add_dag_1:
        ; Setup parameters for call to function rpl_find_parent
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??rpl_find_parent?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 6,?V0 + 8
        MOV     ?V0 + 7,?V0 + 9
//  953     if(p != NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??rpl_add_dag_2
//  954       rpl_move_parent(previous_dag, dag, p);
        ; Setup parameters for call to function rpl_move_parent
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??rpl_move_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  955     }
//  956   }
//  957 
//  958   /* Determine the objective function by using the
//  959      objective code point of the DIO. */
//  960   of = rpl_find_of(dio->ocp);
??rpl_add_dag_2:
        ; Setup parameters for call to function rpl_find_of
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_find_of?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
//  961   if(of != instance->of ||
//  962      instance->mop != dio->mop ||
//  963      instance->max_rankinc != dio->dag_max_rankinc ||
//  964      instance->min_hoprankinc != dio->dag_min_hoprankinc ||
//  965      instance->dio_intdoubl != dio->dag_intdoubl ||
//  966      instance->dio_intmin != dio->dag_intmin ||
//  967      instance->dio_redundancy != dio->dag_redund ||
//  968      instance->default_lifetime != dio->default_lifetime ||
//  969      instance->lifetime_unit != dio->lifetime_unit) {
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        XRL     A,R0
        JNZ     ??rpl_add_dag_3
        MOV     A,?V0 + 5
        XRL     A,R1
??rpl_add_dag_3:
        JZ      $+5
        LJMP    ??rpl_add_dag_4 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??rpl_add_dag_4 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_add_dag_5:
        JZ      $+5
        LJMP    ??rpl_add_dag_4 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_add_dag_6:
        JZ      $+5
        LJMP    ??rpl_add_dag_4 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x7f
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_4
        MOV     A,?V0 + 2
        ADD     A,#-0x80
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_4
        MOV     A,?V0 + 2
        ADD     A,#-0x7f
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x1c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_4
        MOV     A,?V0 + 2
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,#0x1d
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_4
        MOV     A,?V0 + 2
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x1e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_add_dag_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_add_dag_7:
        JZ      ??rpl_add_dag_8
//  970     PRINTF("RPL: DIO for DAG instance %u uncompatible with previos DIO\n",
//  971 	   dio->instance_id);
//  972     rpl_remove_parent(p);
??rpl_add_dag_4:
        ; Setup parameters for call to function rpl_remove_parent
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??rpl_remove_parent?relay
//  973     dag->used = 0;
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  974     return;
        LJMP    ??rpl_add_dag_0 & 0xFFFF
//  975   }
//  976 
//  977   dag->used = 1;
??rpl_add_dag_8:
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  978   dag->grounded = dio->grounded;
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  979   dag->preference = dio->preference;
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  980   dag->version = dio->version;
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  981 
//  982   memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  983 
//  984   /* copy prefix information into the dag */
//  985   memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x16
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        ADD     A,#0x3a
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  986 
//  987   rpl_set_preferred_parent(dag, p);
        ; Setup parameters for call to function rpl_set_preferred_parent
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_preferred_parent?relay
//  988   dag->rank = instance->of->calculate_rank(p, 0);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  989   dag->min_rank = dag->rank; /* So far this is the lowest rank we know of. */
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  990 
//  991   PRINTF("RPL: Joined DAG with instance ID %u, rank %hu, DAG ID ",
//  992          dio->instance_id, dag->rank);
//  993   PRINT6ADDR(&dag->dag_id);
//  994   PRINTF("\n");
//  995 
//  996   ANNOTATE("#A join=%u\n", dag->dag_id.u8[sizeof(dag->dag_id) - 1]);
//  997 
//  998   rpl_process_parent_event(instance, p);
        ; Setup parameters for call to function rpl_process_parent_event
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_process_parent_event?relay
//  999   p->dtsn = dio->dtsn;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1000 }
??rpl_add_dag_0:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock36
// 1001 
// 1002 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1003 static void
// 1004 global_repair(uip_ipaddr_t *from, rpl_dag_t *dag, rpl_dio_t *dio)
global_repair:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function global_repair
        CODE
// 1005 {
        FUNCALL global_repair, remove_parents
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL global_repair, rpl_add_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL global_repair, rpl_process_parent_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1006   rpl_parent_t *p;
// 1007 
// 1008   remove_parents(dag, 0);
        ; Setup parameters for call to function remove_parents
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??remove_parents?relay
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 1009   dag->version = dio->version;
        MOV     A,?V0 + 0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1010   dag->instance->of->reset(dag);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
// 1011   dag->min_rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1012   RPL_LOLLIPOP_INCREMENT(dag->instance->dtsn_out);
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??global_repair_0
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??global_repair_1
??global_repair_0:
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1013 
// 1014   p = rpl_add_parent(dag, dio, from);
??global_repair_1:
        ; Setup parameters for call to function rpl_add_parent
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_add_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
// 1015   if(p == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??global_repair_2
// 1016     PRINTF("RPL: Failed to add a parent during the global repair\n");
// 1017     dag->rank = INFINITE_RANK;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??global_repair_3
// 1018   } else {
// 1019     dag->rank = dag->instance->of->calculate_rank(p, 0);
??global_repair_2:
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1020     dag->min_rank = dag->rank;
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1021     PRINTF("RPL: rpl_process_parent_event global repair\n");
// 1022     rpl_process_parent_event(dag->instance, p);
        ; Setup parameters for call to function rpl_process_parent_event
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_process_parent_event?relay
// 1023   }
// 1024 
// 1025   PRINTF("RPL: Participating in a global repair (version=%u, rank=%hu)\n",
// 1026          dag->version, dag->rank);
// 1027 
// 1028   RPL_STAT(rpl_stats.global_repairs++);
// 1029 }
??global_repair_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37
// 1030 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1031 void
// 1032 rpl_local_repair(rpl_instance_t *instance)
rpl_local_repair:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function rpl_local_repair
        CODE
// 1033 {
        FUNCALL rpl_local_repair, nullify_parents
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_local_repair, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1034   int i;
// 1035 
// 1036   if(instance == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rpl_local_repair_0 & 0xFFFF
// 1037     PRINTF("RPL: local repair requested for instance NULL\n");
// 1038     return;
// 1039   }
// 1040   PRINTF("RPL: Starting a local instance repair\n");
// 1041   for(i = 0; i < RPL_MAX_DAG_PER_INSTANCE; i++) {
        MOV     R6,#0x0
        MOV     R7,#0x0
        LJMP    ??rpl_local_repair_1 & 0xFFFF
// 1042     if(instance->dag_table[i].used) {
??rpl_local_repair_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x37
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x37
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_local_repair_3
// 1043       instance->dag_table[i].rank = INFINITE_RANK;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x37
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x37
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x24
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1044       nullify_parents(&instance->dag_table[i], 0);
        ; Setup parameters for call to function nullify_parents
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x37
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x37
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xb
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??nullify_parents?relay
// 1045     }
// 1046   }
??rpl_local_repair_3:
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??rpl_local_repair_1:
        CLR     C
        MOV     A,R6
        SUBB    A,#0x2
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??rpl_local_repair_2 & 0xFFFF
// 1047 
// 1048   rpl_reset_dio_timer(instance);
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_reset_dio_timer?relay
// 1049 
// 1050   RPL_STAT(rpl_stats.local_repairs++);
// 1051 }
??rpl_local_repair_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock38
// 1052 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1053 void
// 1054 rpl_recalculate_ranks(void)
rpl_recalculate_ranks:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function rpl_recalculate_ranks
        CODE
// 1055 {
        FUNCALL rpl_recalculate_ranks, nbr_table_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_recalculate_ranks, rpl_process_parent_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_recalculate_ranks, nbr_table_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1056   rpl_parent_t *p;
// 1057 
// 1058   /*
// 1059    * We recalculate ranks when we receive feedback from the system rather
// 1060    * than RPL protocol messages. This periodical recalculation is called
// 1061    * from a timer in order to keep the stack depth reasonably low.
// 1062    */
// 1063   p = nbr_table_head(rpl_parents);
        ; Setup parameters for call to function nbr_table_head
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_head?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        LJMP    ??rpl_recalculate_ranks_0 & 0xFFFF
// 1064   while(p != NULL) {
// 1065     if(p->dag != NULL && p->dag->instance && p->updated) {
??rpl_recalculate_ranks_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_recalculate_ranks_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_recalculate_ranks_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??rpl_recalculate_ranks_2
// 1066       p->updated = 0;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1067       PRINTF("RPL: rpl_process_parent_event recalculate_ranks\n");
// 1068       if(!rpl_process_parent_event(p->dag->instance, p)) {
        ; Setup parameters for call to function rpl_process_parent_event
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_process_parent_event?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1069         PRINTF("RPL: A parent was dropped\n");
// 1070       }
// 1071     }
// 1072     p = nbr_table_next(rpl_parents, p);
??rpl_recalculate_ranks_2:
        ; Setup parameters for call to function nbr_table_next
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#rpl_parents
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_next?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1073   }
??rpl_recalculate_ranks_0:
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??rpl_recalculate_ranks_1 & 0xFFFF
// 1074 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock39
// 1075 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1076 int
// 1077 rpl_process_parent_event(rpl_instance_t *instance, rpl_parent_t *p)
rpl_process_parent_event:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function rpl_process_parent_event
        CODE
// 1078 {
        FUNCALL rpl_process_parent_event, acceptable_rank
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_parent_event, rpl_nullify_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_parent_event, rpl_select_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_parent_event, rpl_local_repair
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1079   int return_value;
// 1080 
// 1081 #if DEBUG
// 1082   rpl_rank_t old_rank;
// 1083   old_rank = instance->current_dag->rank;
// 1084 #endif /* DEBUG */
// 1085 
// 1086   return_value = 1;
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
// 1087 
// 1088   if(!acceptable_rank(p->dag, p->rank)) {
        ; Setup parameters for call to function acceptable_rank
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??acceptable_rank?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??rpl_process_parent_event_0
// 1089     /* The candidate parent is no longer valid: the rank increase resulting
// 1090        from the choice of it as a parent would be too high. */
// 1091     PRINTF("RPL: Unacceptable rank %u\n", (unsigned)p->rank);
// 1092     rpl_nullify_parent(p);
        ; Setup parameters for call to function rpl_nullify_parent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_nullify_parent?relay
// 1093     if(p != instance->current_dag->preferred_parent) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??rpl_process_parent_event_1
        MOV     A,R7
        XRL     A,R1
??rpl_process_parent_event_1:
        JZ      ??rpl_process_parent_event_2
// 1094       return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_process_parent_event_3
// 1095     } else {
// 1096       return_value = 0;
??rpl_process_parent_event_2:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
// 1097     }
// 1098   }
// 1099 
// 1100   if(rpl_select_dag(instance, p) == NULL) {
??rpl_process_parent_event_0:
        ; Setup parameters for call to function rpl_select_dag
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_select_dag?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??rpl_process_parent_event_4
// 1101     /* No suitable parent; trigger a local repair. */
// 1102     PRINTF("RPL: No parents found in any DAG\n");
// 1103     rpl_local_repair(instance);
        ; Setup parameters for call to function rpl_local_repair
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_local_repair?relay
// 1104     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_process_parent_event_3
// 1105   }
// 1106 
// 1107 #if DEBUG
// 1108   if(DAG_RANK(old_rank, instance) != DAG_RANK(instance->current_dag->rank, instance)) {
// 1109     PRINTF("RPL: Moving in the instance from rank %hu to %hu\n",
// 1110 	   DAG_RANK(old_rank, instance), DAG_RANK(instance->current_dag->rank, instance));
// 1111     if(instance->current_dag->rank != INFINITE_RANK) {
// 1112       PRINTF("RPL: The preferred parent is ");
// 1113       PRINT6ADDR(rpl_get_parent_ipaddr(instance->current_dag->preferred_parent));
// 1114       PRINTF(" (rank %u)\n",
// 1115            (unsigned)DAG_RANK(instance->current_dag->preferred_parent->rank, instance));
// 1116     } else {
// 1117       PRINTF("RPL: We don't have any parent");
// 1118     }
// 1119   }
// 1120 #endif /* DEBUG */
// 1121 
// 1122   return return_value;
??rpl_process_parent_event_4:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
??rpl_process_parent_event_3:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
// 1123 }
// 1124 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1125 void
// 1126 rpl_process_dio(uip_ipaddr_t *from, rpl_dio_t *dio)
rpl_process_dio:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function rpl_process_dio
        CODE
// 1127 {
        FUNCALL rpl_process_dio, get_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, lollipop_greater_than
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_set_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, global_repair
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, lollipop_greater_than
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_join_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_add_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_set_prefix
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_find_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, find_parent_dag
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_add_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_find_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_move_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_process_parent_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, should_send_dao
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, rpl_schedule_dao
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_process_dio, uip_ds6_defrt_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1128   rpl_instance_t *instance;
// 1129   rpl_dag_t *dag, *previous_dag;
// 1130   rpl_parent_t *p;
// 1131 
// 1132   if(dio->mop != RPL_MOP_DEFAULT) {
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1133     PRINTF("RPL: Ignoring a DIO with an unsupported MOP: %d\n", dio->mop);
// 1134     return;
// 1135   }
// 1136 
// 1137   dag = get_dag(dio->instance_id, &dio->dag_id);
        ; Setup parameters for call to function get_dag
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??get_dag?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
// 1138   instance = rpl_get_instance(dio->instance_id);
        ; Setup parameters for call to function rpl_get_instance
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
// 1139 
// 1140   if(dag != NULL && instance != NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rpl_process_dio_1 & 0xFFFF
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??rpl_process_dio_1 & 0xFFFF
// 1141     if(lollipop_greater_than(dio->version, dag->version)) {
        ; Setup parameters for call to function lollipop_greater_than
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??lollipop_greater_than?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??rpl_process_dio_2 & 0xFFFF
// 1142       if(dag->rank == ROOT_RANK(instance)) {
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_process_dio_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_process_dio_3:
        JNZ     ??rpl_process_dio_4
// 1143 	PRINTF("RPL: Root received inconsistent DIO version number\n");
// 1144 	dag->version = dio->version;
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1145 	RPL_LOLLIPOP_INCREMENT(dag->version);
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_process_dio_5
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??rpl_process_dio_6
??rpl_process_dio_5:
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1146 	rpl_reset_dio_timer(instance);
??rpl_process_dio_6:
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_reset_dio_timer?relay
        SJMP    ??rpl_process_dio_7
// 1147       } else {
// 1148         PRINTF("RPL: Global Repair\n");
// 1149         if(dio->prefix_info.length != 0) {
??rpl_process_dio_4:
        MOV     A,R6
        ADD     A,#0x4e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_process_dio_8
// 1150           if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
        MOV     A,R6
        ADD     A,#0x4f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_process_dio_8
// 1151             PRINTF("RPL : Prefix announced in DIO\n");
// 1152             rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
        ; Setup parameters for call to function rpl_set_prefix
        MOV     A,R6
        ADD     A,#0x4e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        ADD     A,#0x3a
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_prefix?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1153           }
// 1154         }
// 1155 	global_repair(from, dag, dio);
??rpl_process_dio_8:
        ; Setup parameters for call to function global_repair
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??global_repair?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1156       }
// 1157       return;
??rpl_process_dio_7:
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1158     }
// 1159 
// 1160     if(lollipop_greater_than(dag->version, dio->version)) {
??rpl_process_dio_2:
        ; Setup parameters for call to function lollipop_greater_than
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??lollipop_greater_than?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??rpl_process_dio_1
// 1161       /* The DIO sender is on an older version of the DAG. */
// 1162       PRINTF("RPL: old version received => inconsistency detected\n");
// 1163       if(dag->joined) {
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_process_dio_1
// 1164         rpl_reset_dio_timer(instance);
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_reset_dio_timer?relay
// 1165         return;
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1166       }
// 1167     }
// 1168   }
// 1169 
// 1170   if(instance == NULL) {
??rpl_process_dio_1:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??rpl_process_dio_9
// 1171     PRINTF("RPL: New instance detected: Joining...\n");
// 1172     rpl_join_instance(from, dio);
        ; Setup parameters for call to function rpl_join_instance
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??rpl_join_instance?relay
// 1173     return;
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1174   }
// 1175 
// 1176   if(dag == NULL) {
??rpl_process_dio_9:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??rpl_process_dio_10
// 1177     PRINTF("RPL: Adding new DAG to known instance.\n");
// 1178     rpl_add_dag(from, dio);
        ; Setup parameters for call to function rpl_add_dag
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??rpl_add_dag?relay
// 1179     return;
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1180   }
// 1181 
// 1182 
// 1183   if(dio->rank < ROOT_RANK(instance)) {
??rpl_process_dio_10:
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,?V0 + 2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     $+5
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1184     PRINTF("RPL: Ignoring DIO with too low rank: %u\n",
// 1185            (unsigned)dio->rank);
// 1186     return;
// 1187   } else if(dio->rank == INFINITE_RANK && dag->joined) {
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??rpl_process_dio_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??rpl_process_dio_11:
        JNZ     ??rpl_process_dio_12
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_process_dio_12
// 1188     rpl_reset_dio_timer(instance);
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_reset_dio_timer?relay
// 1189   }
// 1190   
// 1191   /* Prefix Information Option treated to add new prefix */
// 1192   if(dio->prefix_info.length != 0) {
??rpl_process_dio_12:
        MOV     A,R6
        ADD     A,#0x4e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_process_dio_13
// 1193     if(dio->prefix_info.flags & UIP_ND6_RA_FLAG_AUTONOMOUS) {
        MOV     A,R6
        ADD     A,#0x4f
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_process_dio_13
// 1194       PRINTF("RPL : Prefix announced in DIO\n");
// 1195       rpl_set_prefix(dag, &dio->prefix_info.prefix, dio->prefix_info.length);
        ; Setup parameters for call to function rpl_set_prefix
        MOV     A,R6
        ADD     A,#0x4e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        ADD     A,#0x3a
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_set_prefix?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1196     }
// 1197   }
// 1198 
// 1199   if(dag->rank == ROOT_RANK(instance)) {
??rpl_process_dio_13:
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_process_dio_14
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_process_dio_14:
        JNZ     ??rpl_process_dio_15
// 1200     if(dio->rank != INFINITE_RANK) {
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??rpl_process_dio_16
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??rpl_process_dio_16:
        JZ      ??rpl_process_dio_17
// 1201       instance->dio_counter++;
        MOV     A,?V0 + 2
        ADD     A,#-0x7b
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
// 1202     }
// 1203     return;
??rpl_process_dio_17:
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1204   }
// 1205 
// 1206   /*
// 1207    * At this point, we know that this DIO pertains to a DAG that
// 1208    * we are already part of. We consider the sender of the DIO to be
// 1209    * a candidate parent, and let rpl_process_parent_event decide
// 1210    * whether to keep it in the set.
// 1211    */
// 1212 
// 1213   p = rpl_find_parent(dag, from);
??rpl_process_dio_15:
        ; Setup parameters for call to function rpl_find_parent
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_find_parent?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
// 1214   if(p == NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??rpl_process_dio_18
// 1215     previous_dag = find_parent_dag(instance, from);
        ; Setup parameters for call to function find_parent_dag
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??find_parent_dag?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
// 1216     if(previous_dag == NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     ??rpl_process_dio_19
// 1217       /* Add the DIO sender as a candidate parent. */
// 1218       p = rpl_add_parent(dag, dio, from);
        ; Setup parameters for call to function rpl_add_parent
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_add_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
// 1219       if(p == NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??rpl_process_dio_20 & 0xFFFF
// 1220         PRINTF("RPL: Failed to add a new parent (");
// 1221         PRINT6ADDR(from);
// 1222         PRINTF(")\n");
// 1223         return;
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1224       }
// 1225       PRINTF("RPL: New candidate parent with rank %u: ", (unsigned)p->rank);
// 1226       PRINT6ADDR(from);
// 1227       PRINTF("\n");
// 1228     } else {
// 1229       p = rpl_find_parent(previous_dag, from);
??rpl_process_dio_19:
        ; Setup parameters for call to function rpl_find_parent
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??rpl_find_parent?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
// 1230       if(p != NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??rpl_process_dio_20
// 1231         rpl_move_parent(previous_dag, dag, p);
        ; Setup parameters for call to function rpl_move_parent
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??rpl_move_parent?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??rpl_process_dio_20
// 1232       }
// 1233     }
// 1234   } else {
// 1235     if(p->rank == dio->rank) {
??rpl_process_dio_18:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??rpl_process_dio_21
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??rpl_process_dio_21:
        JNZ     ??rpl_process_dio_22
// 1236       PRINTF("RPL: Received consistent DIO\n");
// 1237       if(dag->joined) {
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_process_dio_20
// 1238         instance->dio_counter++;
        MOV     A,?V0 + 2
        ADD     A,#-0x7b
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??rpl_process_dio_20
// 1239       }
// 1240     } else {
// 1241       p->rank=dio->rank;
??rpl_process_dio_22:
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1242     }
// 1243   }
// 1244 
// 1245   PRINTF("RPL: preferred DAG ");
// 1246   PRINT6ADDR(&instance->current_dag->dag_id);
// 1247   PRINTF(", rank %u, min_rank %u, ",
// 1248 	 instance->current_dag->rank, instance->current_dag->min_rank);
// 1249   PRINTF("parent rank %u, parent etx %u, link metric %u, instance etx %u\n",
// 1250 	 p->rank, -1/*p->mc.obj.etx*/, p->link_metric, instance->mc.obj.etx);
// 1251 
// 1252   /* We have allocated a candidate parent; process the DIO further. */
// 1253 
// 1254 #if RPL_DAG_MC != RPL_DAG_MC_NONE
// 1255   memcpy(&p->mc, &dio->mc, sizeof(p->mc));
// 1256 #endif /* RPL_DAG_MC != RPL_DAG_MC_NONE */
// 1257   if(rpl_process_parent_event(instance, p) == 0) {
??rpl_process_dio_20:
        ; Setup parameters for call to function rpl_process_parent_event
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_process_parent_event?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     $+5
        LJMP    ??rpl_process_dio_0 & 0xFFFF
// 1258     PRINTF("RPL: The candidate parent is rejected\n");
// 1259     return;
// 1260   }
// 1261 
// 1262   /* We don't use route control, so we can have only one official parent. */
// 1263   if(dag->joined && p == dag->preferred_parent) {
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??rpl_process_dio_23 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        XRL     A,R0
        JNZ     ??rpl_process_dio_24
        MOV     A,?V0 + 5
        XRL     A,R1
??rpl_process_dio_24:
        JZ      $+5
        LJMP    ??rpl_process_dio_23 & 0xFFFF
// 1264     if(should_send_dao(instance, dio, p)) {
        ; Setup parameters for call to function should_send_dao
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??should_send_dao?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??rpl_process_dio_25
// 1265       RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
        MOV     A,?V0 + 2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??rpl_process_dio_26
        MOV     A,?V0 + 2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??rpl_process_dio_27
??rpl_process_dio_26:
        MOV     A,?V0 + 2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 2
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1266       rpl_schedule_dao(instance);
??rpl_process_dio_27:
        ; Setup parameters for call to function rpl_schedule_dao
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??rpl_schedule_dao?relay
// 1267     }
// 1268     /* We received a new DIO from our preferred parent.
// 1269      * Call uip_ds6_defrt_add to set a fresh value for the lifetime counter */
// 1270     uip_ds6_defrt_add(from, RPL_LIFETIME(instance, instance->default_lifetime));
??rpl_process_dio_25:
        ; Setup parameters for call to function uip_ds6_defrt_add
        MOV     A,?V0 + 2
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        CLR     A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,?V0 + 2
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??uip_ds6_defrt_add?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 1271   }
// 1272   p->dtsn = dio->dtsn;
??rpl_process_dio_23:
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1273 }
??rpl_process_dio_0:
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for objective_functions>`:
        DATA16
        DW rpl_mrhof

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for rpl_parents_struct>`:
        DATA16
        DW 0
        DW 10
        DW 0H
        DW _rpl_parents_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for rpl_parents>`:
        DATA16
        DW rpl_parents_struct

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_0>`:
        DATA32
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_dag_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_dag_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_get_parent_rank?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_get_parent_rank

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_get_parent_link_metric?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_get_parent_link_metric

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_get_parent_ipaddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_get_parent_ipaddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_set_preferred_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_set_preferred_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??lollipop_greater_than?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    lollipop_greater_than

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??remove_parents?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    remove_parents

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nullify_parents?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nullify_parents

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??should_send_dao?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    should_send_dao

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??acceptable_rank?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    acceptable_rank

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    get_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_set_root?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_set_root

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_repair_root?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_repair_root

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??set_ip_from_prefix?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    set_ip_from_prefix

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??check_prefix?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    check_prefix

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_set_prefix?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_set_prefix

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_set_default_route?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_set_default_route

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_alloc_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_alloc_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_alloc_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_alloc_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_set_default_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_set_default_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_free_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_free_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_free_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_free_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_add_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_add_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??find_parent_any_dag_any_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    find_parent_any_dag_any_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_find_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_find_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??find_parent_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    find_parent_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_find_parent_any_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_find_parent_any_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_select_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_select_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_select_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_select_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_remove_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_remove_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_nullify_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_nullify_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_move_parent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_move_parent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_get_any_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_get_any_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_get_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_get_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_find_of?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_find_of

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_join_instance?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_join_instance

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_add_dag?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_add_dag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??global_repair?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    global_repair

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_local_repair?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_local_repair

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_recalculate_ranks?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_recalculate_ranks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_process_parent_event?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_process_parent_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_process_dio?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_process_dio

        END
// 1274 /*---------------------------------------------------------------------------*/
// 1275 #endif /* UIP_CONF_IPV6 */
// 
// 10 471 bytes in segment BANKED_CODE
//    252 bytes in segment BANK_RELAYS
//     16 bytes in segment XDATA_I
//     16 bytes in segment XDATA_ID
//    216 bytes in segment XDATA_Z
// 
// 10 735 bytes of CODE  memory (+ 4 bytes shared)
//    228 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
