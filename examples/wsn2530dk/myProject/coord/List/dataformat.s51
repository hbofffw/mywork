///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:47 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\dat /
//                          aformat\dataformat.c                              /
//    Command line       =  D:\myWork\myWork\examples\wsn2530dk\myProject\dat /
//                          aformat\dataformat.c -D AUTOSTART_ENABLE -D       /
//                          PROJECT_CONF_H -lC D:\myWork\myWork\examples\wsn2 /
//                          530dk\myProject\coord\List\ -lA                   /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ --diag_suppress Pa050,Pa082,Pe550        /
//                          --diag_warning Pe144 -o                           /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\dataformat.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME dataformat

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD
        EXTERN ?L_IOR
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?L_TO_FLT
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_SHR
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??addSleepTimer?relay
        FUNCTION ??addSleepTimer?relay,0203H
        PUBLIC ??broadcastForward?relay
        FUNCTION ??broadcastForward?relay,0203H
        PUBLIC ??buildAndSendFrame?relay
        FUNCTION ??buildAndSendFrame?relay,0203H
        PUBLIC ??buildBufflist?relay
        FUNCTION ??buildBufflist?relay,0203H
        PUBLIC ??default_timebase?relay
        FUNCTION ??default_timebase?relay,0203H
        PUBLIC ??getInformationListLength?relay
        FUNCTION ??getInformationListLength?relay,0203H
        PUBLIC ??getTemperature?relay
        FUNCTION ??getTemperature?relay,0203H
        PUBLIC ??getVoltage?relay
        FUNCTION ??getVoltage?relay,0203H
        PUBLIC ??getpacketbufListLength?relay
        FUNCTION ??getpacketbufListLength?relay,0203H
        PUBLIC ??instructionSend?relay
        FUNCTION ??instructionSend?relay,0203H
        PUBLIC ??intoPM2Mode?relay
        FUNCTION ??intoPM2Mode?relay,0203H
        PUBLIC ??is_broadcast_addr?relay
        FUNCTION ??is_broadcast_addr?relay,0203H
        PUBLIC ??is_myAddr?relay
        FUNCTION ??is_myAddr?relay,0203H
        PUBLIC ??process_getSleepCMD?relay
        FUNCTION ??process_getSleepCMD?relay,0203H
        PUBLIC ??process_setSleepCMD?relay
        FUNCTION ??process_setSleepCMD?relay,0203H
        PUBLIC ??sendPacket?relay
        FUNCTION ??sendPacket?relay,0203H
        PUBLIC ??sensor_dataInpack?relay
        FUNCTION ??sensor_dataInpack?relay,0203H
        PUBLIC ??sensor_incomingPacketProcessing?relay
        FUNCTION ??sensor_incomingPacketProcessing?relay,0203H
        PUBLIC ??sensor_popAndSendItemOfList?relay
        FUNCTION ??sensor_popAndSendItemOfList?relay,0203H
        PUBLIC ??sink_incomingPacketProcessing?relay
        FUNCTION ??sink_incomingPacketProcessing?relay,0203H
        PUBLIC ??sink_printItemOfList?relay
        FUNCTION ??sink_printItemOfList?relay,0203H
        PUBLIC ??toInformationList?relay
        FUNCTION ??toInformationList?relay,0203H
        PUBWEAK PCON
        PUBWEAK SLEEPCMD
        PUBWEAK ST0
        PUBWEAK ST1
        PUBWEAK ST2
        PUBWEAK __Constant_40700000
        PUBWEAK __Constant_40900000
        PUBWEAK __Constant_41300000
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_44ffe000
        PUBWEAK __Constant_8000
        PUBLIC addSleepTimer
        FUNCTION addSleepTimer,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC broadcastForward
        FUNCTION broadcastForward,021203H
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC buildAndSendFrame
        FUNCTION buildAndSendFrame,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBLIC buildBufflist
        FUNCTION buildBufflist,021203H
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 64, STACK
        PUBLIC default_timebase
        FUNCTION default_timebase,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC getInformationListLength
        FUNCTION getInformationListLength,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC getTemperature
        FUNCTION getTemperature,021201H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC getVoltage
        FUNCTION getVoltage,021201H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC getpacketbufListLength
        FUNCTION getpacketbufListLength,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC instructionSend
        FUNCTION instructionSend,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC intoPM2Mode
        FUNCTION intoPM2Mode,0201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC is_broadcast_addr
        FUNCTION is_broadcast_addr,0203H
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC is_myAddr
        FUNCTION is_myAddr,0203H
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC packetBufCache
        PUBLIC process_getSleepCMD
        FUNCTION process_getSleepCMD,0201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC process_setSleepCMD
        FUNCTION process_setSleepCMD,0203H
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC sendPacket
        FUNCTION sendPacket,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC sensor_dataInpack
        FUNCTION sensor_dataInpack,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC sensor_incomingPacketProcessing
        FUNCTION sensor_incomingPacketProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        PUBLIC sensor_popAndSendItemOfList
        FUNCTION sensor_popAndSendItemOfList,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC sink_incomingPacketProcessing
        FUNCTION sink_incomingPacketProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBLIC sink_printItemOfList
        FUNCTION sink_printItemOfList,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC toInformationList
        FUNCTION toInformationList,021203H
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
clock_wait          SYMBOL "clock_wait"
??clock_wait?relay  SYMBOL "?relay", clock_wait
dataInpack          SYMBOL "dataInpack"
??dataInpack?relay  SYMBOL "?relay", dataInpack
frame802154_create  SYMBOL "frame802154_create"
??frame802154_create?relay SYMBOL "?relay", frame802154_create
frame802154_hdrlen  SYMBOL "frame802154_hdrlen"
??frame802154_hdrlen?relay SYMBOL "?relay", frame802154_hdrlen
frame802154_parse   SYMBOL "frame802154_parse"
??frame802154_parse?relay SYMBOL "?relay", frame802154_parse
leds_off            SYMBOL "leds_off"
??leds_off?relay    SYMBOL "?relay", leds_off
leds_on             SYMBOL "leds_on"
??leds_on?relay     SYMBOL "?relay", leds_on
list_add            SYMBOL "list_add"
??list_add?relay    SYMBOL "?relay", list_add
list_length         SYMBOL "list_length"
??list_length?relay SYMBOL "?relay", list_length
list_pop            SYMBOL "list_pop"
??list_pop?relay    SYMBOL "?relay", list_pop
memb_alloc          SYMBOL "memb_alloc"
??memb_alloc?relay  SYMBOL "?relay", memb_alloc
memb_free           SYMBOL "memb_free"
??memb_free?relay   SYMBOL "?relay", memb_free
packetbuf_clear     SYMBOL "packetbuf_clear"
??packetbuf_clear?relay SYMBOL "?relay", packetbuf_clear
packetbuf_copyfrom  SYMBOL "packetbuf_copyfrom"
??packetbuf_copyfrom?relay SYMBOL "?relay", packetbuf_copyfrom
packetbuf_datalen   SYMBOL "packetbuf_datalen"
??packetbuf_datalen?relay SYMBOL "?relay", packetbuf_datalen
packetbuf_dataptr   SYMBOL "packetbuf_dataptr"
??packetbuf_dataptr?relay SYMBOL "?relay", packetbuf_dataptr
packetbuf_hdralloc  SYMBOL "packetbuf_hdralloc"
??packetbuf_hdralloc?relay SYMBOL "?relay", packetbuf_hdralloc
packetbuf_hdrptr    SYMBOL "packetbuf_hdrptr"
??packetbuf_hdrptr?relay SYMBOL "?relay", packetbuf_hdrptr
packetbuf_hdrreduce SYMBOL "packetbuf_hdrreduce"
??packetbuf_hdrreduce?relay SYMBOL "?relay", packetbuf_hdrreduce
packetbuf_set_datalen SYMBOL "packetbuf_set_datalen"
??packetbuf_set_datalen?relay SYMBOL "?relay", packetbuf_set_datalen
packetbuf_totlen    SYMBOL "packetbuf_totlen"
??packetbuf_totlen?relay SYMBOL "?relay", packetbuf_totlen
printf              SYMBOL "printf"
??printf?relay      SYMBOL "?relay", printf
puthex              SYMBOL "puthex"
??puthex?relay      SYMBOL "?relay", puthex
putstring           SYMBOL "putstring"
??putstring?relay   SYMBOL "?relay", putstring
random_rand         SYMBOL "random_rand"
??random_rand?relay SYMBOL "?relay", random_rand
rimeaddr_cmp        SYMBOL "rimeaddr_cmp"
??rimeaddr_cmp?relay SYMBOL "?relay", rimeaddr_cmp
rimeaddr_copy       SYMBOL "rimeaddr_copy"
??rimeaddr_copy?relay SYMBOL "?relay", rimeaddr_copy
sensors_find        SYMBOL "sensors_find"
??sensors_find?relay SYMBOL "?relay", sensors_find
addSleepTimer       SYMBOL "addSleepTimer"
??addSleepTimer?relay SYMBOL "?relay", addSleepTimer
broadcastForward    SYMBOL "broadcastForward"
??broadcastForward?relay SYMBOL "?relay", broadcastForward
buildAndSendFrame   SYMBOL "buildAndSendFrame"
??buildAndSendFrame?relay SYMBOL "?relay", buildAndSendFrame
buildBufflist       SYMBOL "buildBufflist"
??buildBufflist?relay SYMBOL "?relay", buildBufflist
default_timebase    SYMBOL "default_timebase"
??default_timebase?relay SYMBOL "?relay", default_timebase
getInformationListLength SYMBOL "getInformationListLength"
??getInformationListLength?relay SYMBOL "?relay", getInformationListLength
getTemperature      SYMBOL "getTemperature"
??getTemperature?relay SYMBOL "?relay", getTemperature
getVoltage          SYMBOL "getVoltage"
??getVoltage?relay  SYMBOL "?relay", getVoltage
getpacketbufListLength SYMBOL "getpacketbufListLength"
??getpacketbufListLength?relay SYMBOL "?relay", getpacketbufListLength
instructionSend     SYMBOL "instructionSend"
??instructionSend?relay SYMBOL "?relay", instructionSend
intoPM2Mode         SYMBOL "intoPM2Mode"
??intoPM2Mode?relay SYMBOL "?relay", intoPM2Mode
is_broadcast_addr   SYMBOL "is_broadcast_addr"
??is_broadcast_addr?relay SYMBOL "?relay", is_broadcast_addr
is_myAddr           SYMBOL "is_myAddr"
??is_myAddr?relay   SYMBOL "?relay", is_myAddr
process_getSleepCMD SYMBOL "process_getSleepCMD"
??process_getSleepCMD?relay SYMBOL "?relay", process_getSleepCMD
process_setSleepCMD SYMBOL "process_setSleepCMD"
??process_setSleepCMD?relay SYMBOL "?relay", process_setSleepCMD
sendPacket          SYMBOL "sendPacket"
??sendPacket?relay  SYMBOL "?relay", sendPacket
sensor_dataInpack   SYMBOL "sensor_dataInpack"
??sensor_dataInpack?relay SYMBOL "?relay", sensor_dataInpack
sensor_incomingPacketProcessing SYMBOL "sensor_incomingPacketProcessing"
??sensor_incomingPacketProcessing?relay SYMBOL "?relay", sensor_incomingPacketProcessing
sensor_popAndSendItemOfList SYMBOL "sensor_popAndSendItemOfList"
??sensor_popAndSendItemOfList?relay SYMBOL "?relay", sensor_popAndSendItemOfList
sink_incomingPacketProcessing SYMBOL "sink_incomingPacketProcessing"
??sink_incomingPacketProcessing?relay SYMBOL "?relay", sink_incomingPacketProcessing
sink_printItemOfList SYMBOL "sink_printItemOfList"
??sink_printItemOfList?relay SYMBOL "?relay", sink_printItemOfList
toInformationList   SYMBOL "toInformationList"
??toInformationList?relay SYMBOL "?relay", toInformationList

        EXTERN ??clock_wait?relay
        FUNCTION ??clock_wait?relay,00H
        EXTERN ??dataInpack?relay
        FUNCTION ??dataInpack?relay,00H
        EXTERN ??frame802154_create?relay
        FUNCTION ??frame802154_create?relay,00H
        EXTERN ??frame802154_hdrlen?relay
        FUNCTION ??frame802154_hdrlen?relay,00H
        EXTERN ??frame802154_parse?relay
        FUNCTION ??frame802154_parse?relay,00H
        EXTERN ??leds_off?relay
        FUNCTION ??leds_off?relay,00H
        EXTERN ??leds_on?relay
        FUNCTION ??leds_on?relay,00H
        EXTERN ??list_add?relay
        FUNCTION ??list_add?relay,00H
        EXTERN ??list_length?relay
        FUNCTION ??list_length?relay,00H
        EXTERN ??list_pop?relay
        FUNCTION ??list_pop?relay,00H
        EXTERN ??memb_alloc?relay
        FUNCTION ??memb_alloc?relay,00H
        EXTERN ??memb_free?relay
        FUNCTION ??memb_free?relay,00H
        EXTERN ??packetbuf_clear?relay
        FUNCTION ??packetbuf_clear?relay,00H
        EXTERN ??packetbuf_copyfrom?relay
        FUNCTION ??packetbuf_copyfrom?relay,00H
        EXTERN ??packetbuf_datalen?relay
        FUNCTION ??packetbuf_datalen?relay,00H
        EXTERN ??packetbuf_dataptr?relay
        FUNCTION ??packetbuf_dataptr?relay,00H
        EXTERN ??packetbuf_hdralloc?relay
        FUNCTION ??packetbuf_hdralloc?relay,00H
        EXTERN ??packetbuf_hdrptr?relay
        FUNCTION ??packetbuf_hdrptr?relay,00H
        EXTERN ??packetbuf_hdrreduce?relay
        FUNCTION ??packetbuf_hdrreduce?relay,00H
        EXTERN ??packetbuf_set_datalen?relay
        FUNCTION ??packetbuf_set_datalen?relay,00H
        EXTERN ??packetbuf_totlen?relay
        FUNCTION ??packetbuf_totlen?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H
        EXTERN ??puthex?relay
        FUNCTION ??puthex?relay,00H
        EXTERN ??putstring?relay
        FUNCTION ??putstring?relay,00H
        EXTERN ??random_rand?relay
        FUNCTION ??random_rand?relay,00H
        EXTERN ??rimeaddr_cmp?relay
        FUNCTION ??rimeaddr_cmp?relay,00H
        EXTERN ??rimeaddr_copy?relay
        FUNCTION ??rimeaddr_copy?relay,00H
        EXTERN ??sensors_find?relay
        FUNCTION ??sensors_find?relay,00H
        EXTERN cc2530_rf_driver
        EXTERN clock_wait
        FUNCTION clock_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dataInpack
        FUNCTION dataInpack,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN frame802154_create
        FUNCTION frame802154_create,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN frame802154_hdrlen
        FUNCTION frame802154_hdrlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN frame802154_parse
        FUNCTION frame802154_parse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN leds_off
        FUNCTION leds_off,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN leds_on
        FUNCTION leds_on,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_add
        FUNCTION list_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_length
        FUNCTION list_length,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_pop
        FUNCTION list_pop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_alloc
        FUNCTION memb_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_free
        FUNCTION memb_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_clear
        FUNCTION packetbuf_clear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_copyfrom
        FUNCTION packetbuf_copyfrom,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_datalen
        FUNCTION packetbuf_datalen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_dataptr
        FUNCTION packetbuf_dataptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdralloc
        FUNCTION packetbuf_hdralloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdrptr
        FUNCTION packetbuf_hdrptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdrreduce
        FUNCTION packetbuf_hdrreduce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_datalen
        FUNCTION packetbuf_set_datalen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_totlen
        FUNCTION packetbuf_totlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN puthex
        FUNCTION puthex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN putstring
        FUNCTION putstring,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN random_rand
        FUNCTION random_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_cmp
        FUNCTION rimeaddr_cmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_copy
        FUNCTION rimeaddr_copy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_node_addr
        EXTERN rimeaddr_null
        EXTERN sensors_find
        FUNCTION sensors_find,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,087H
// unsigned char volatile __sfr PCON
PCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,096H
// unsigned char volatile __sfr ST1
ST1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,097H
// unsigned char volatile __sfr ST2
ST2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "Frome node ">`:
        DS 12
        REQUIRE `?<Initializer for <Constant "Frome node ">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant ": ">`:
        DS 3
        REQUIRE `?<Initializer for <Constant ": ">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "temperature = %d.%d, ">`:
        DS 22
        REQUIRE `?<Initializer for <Constant "temperature = %d.`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "voltage remained = %d...">`:
        DS 28
        REQUIRE `?<Initializer for <Constant "voltage remained `
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
`?<Constant "ADC">`:
        DS 4
        REQUIRE `?<Initializer for <Constant "ADC">>`
        REQUIRE __INIT_XDATA_I
// D:\myWork\myWork\examples\wsn2530dk\myProject\dataformat\dataformat.c
//    1 /******created by dongbo huang*****/
//    2 
//    3 #include "dataformat.h"

        RSEG XDATA_I:XDATA:NOROOT(0)
// static list_t packetbuf_list
packetbuf_list:
        DATA16
        DS 2
        REQUIRE `?<Initializer for packetbuf_list>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static void *__xdata packetbuf_list_list
packetbuf_list_list:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// static struct memb packetbuf_memb
packetbuf_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for packetbuf_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static char packetbuf_memb_memb_count[5]
packetbuf_memb_memb_count:
        DS 5
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct packetbufListStruct packetbuf_memb_memb_mem[5]
packetbuf_memb_memb_mem:
        DS 660
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// static list_t information_list
information_list:
        DATA16
        DS 2
        REQUIRE `?<Initializer for information_list>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static void *__xdata information_list_list
information_list_list:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// static struct memb information_memb
information_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for information_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_40900000:
        DS 4
        REQUIRE `?<Initializer for __Constant_40900000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_41300000:
        DS 4
        REQUIRE `?<Initializer for __Constant_41300000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_40700000:
        DS 4
        REQUIRE `?<Initializer for __Constant_40700000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_44ffe000:
        DS 4
        REQUIRE `?<Initializer for __Constant_44ffe000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_42c80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_42c80000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_8000:
        DS 4
        REQUIRE `?<Initializer for __Constant_8000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static char information_memb_memb_count[10]
information_memb_memb_count:
        DS 10
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct informationListStruct information_memb_memb_mem[10]
information_memb_memb_mem:
        DS 80
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static int sleepingCMD
sleepingCMD:
        DS 2
        REQUIRE __INIT_XDATA_Z
//    4 
//    5 
//    6 #include "contiki.h"
//    7 #include "soc.h"
//    8 #include "stack.h"
//    9 #include "sys/clock.h"
//   10 #include "sys/autostart.h"
//   11 #include "dev/serial-line.h"
//   12 #include "dev/slip.h"
//   13 #include "dev/leds.h"
//   14 #include "dev/io-arch.h"
//   15 #include "dev/dma.h"
//   16 #include "dev/cc2530-rf.h"
//   17 #include "dev/watchdog.h"
//   18 #include "dev/clock-isr.h"
//   19 #include "dev/port2.h"
//   20 #include "dev/lpm.h"
//   21 #include "dev/button-sensor.h"
//   22 #include "dev/adc-sensor.h"
//   23 #include "dev/leds-arch.h"
//   24 #include "net/rime.h"
//   25 #include "net/netstack.h"
//   26 #include "net/mac/frame802154.h"
//   27 //#include "net/mac/csma.h"
//   28 #include "net/rime/route.h" //for routing table
//   29 
//   30 #include "sys/ctimer.h"
//   31 
//   32 #include "lib/random.h"
//   33 
//   34 #include "debug.h"
//   35 #include "cc253x.h"
//   36 #include "sfr-bits.h"
//   37 #include "contiki-lib.h"
//   38 #include "contiki-net.h"
//   39 
//   40 #include <stdio.h> /* For printf() */
//   41 #include <string.h>
//   42 
//   43 #define DEBUG 0  //default :0 by dongbo huang
//   44 #if DEBUG
//   45 #include "debug.h"
//   46 #define PUTSTRING(...) putstring(__VA_ARGS__)
//   47 #define PUTHEX(...) puthex(__VA_ARGS__)
//   48 #else
//   49 #define PUTSTRING(...)
//   50 #define PUTHEX(...)
//   51 #endif
//   52 
//   53 
//   54 //--------------------------------parameters setting--------------------------------//
//   55 //for sequence number

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   56 static uint8_t mac_dsn;
mac_dsn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   57 
//   58 /***************reserved for complicated network situation********************/
//   59 //for broadcasting retransmission flag，当转发过一次hello后，标志hello flag标志位设为1，即之后不再处理Hello广播包

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   60 static int helloRetrans_flag=0;
helloRetrans_flag:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   61 //同理

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   62 static int sleepRetrans_flag=0;
sleepRetrans_flag:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   63 //hop count flag
//   64 //static int hopCount_flag=0;
//   65 //route table, maybe use pointer list?
//   66 //static tableContent route[3]; 
//   67 /****************************************************************************/
//   68 //in our case use only one address to up data

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   69 static rimeaddr_t upGoingNode;
upGoingNode:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   70 //-------------------------
//   71 
//   72 //-------parameters for packetbuf list handle---------

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   73 packetbufListStruct_t *packetBufCache;
packetBufCache:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   74 //----------------------------------------------------
//   75 
//   76 ////////////////////////////////////end of parameters setting////////////////////////////////////////////
//   77 
//   78 
//   79 
//   80 
//   81 //--------------------------------function setting---------------------------------------//
//   82 
//   83 
//   84 
//   85 //-------for address identification, for sensor to identify whether the incoming packet is broadcast or unicast---------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 int is_broadcast_addr(uint8_t *addr)
is_broadcast_addr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function is_broadcast_addr
        CODE
//   87 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   88     int i = 2;
        MOV     R0,#0x2
        MOV     R1,#0x0
//   89     while(i-- > 0) {
??is_broadcast_addr_0:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,R4
        SUBB    A,#0x1
        MOV     A,R5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??is_broadcast_addr_1
//   90         if(addr[i] != 0xff) {
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??is_broadcast_addr_0
//   91             return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??is_broadcast_addr_2
//   92         }
//   93     }
//   94     return 1;
??is_broadcast_addr_1:
        MOV     R2,#0x1
        MOV     R3,#0x0
??is_broadcast_addr_2:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//   95 }
//   96 
//   97 //ignore the incoming pakcet sent by itself

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   98 int is_myAddr(uint8_t *addr)
is_myAddr:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function is_myAddr
        CODE
//   99 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  100     int flag = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
//  101     int i = 2;
        MOV     R4,#0x2
        MOV     R5,#0x0
//  102     while(i-->0)
//  103     {
//  104         if(addr[i]!=rimeaddr_node_addr.u8[i])
//  105             flag += 0;
??is_myAddr_0:
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#-0x1
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R5,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??is_myAddr_1
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#rimeaddr_node_addr & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(rimeaddr_node_addr >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??is_myAddr_0
//  106         else
//  107             flag += 1;
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??is_myAddr_0
//  108     }
//  109     return flag;
??is_myAddr_1:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  110 }
//  111 //------------------------------------------
//  112 
//  113 //----------------for input method---------------
//  114 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 int sensor_incomingPacketProcessing()
sensor_incomingPacketProcessing:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function sensor_incomingPacketProcessing
        CODE
//  116 {
        FUNCALL sensor_incomingPacketProcessing, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, packetbuf_set_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, frame802154_parse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, packetbuf_hdrreduce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, is_broadcast_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, is_myAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, leds_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, leds_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, dataInpack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, buildBufflist
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, broadcastForward
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, process_setSleepCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, buildBufflist
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_incomingPacketProcessing, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 48
        MOV     A,#-0x30
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  117     frame802154_t frame;
//  118     int flag=0;                   //function return flag
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  119     int len;  
//  120     len = cc2530_rf_driver.pending_packet(); //original. physical layer knows there's a integral packet received.
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  121     if(len)
        MOV     A,?V0 + 2
        ORL     A,R7
        JNZ     $+5
        LJMP    ??sensor_incomingPacketProcessing_0 & 0xFFFF
//  122     {
//  123         packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  124         len = cc2530_rf_driver.read(packetbuf_dataptr(),PACKETBUF_SIZE);
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        ; Setup parameters for indirect call
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     DPTR,#cc2530_rf_driver + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  125         packetbuf_set_datalen(len);
        ; Setup parameters for call to function packetbuf_set_datalen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??packetbuf_set_datalen?relay
//  126         if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
//  127                 packetbuf_hdrreduce(len - frame.payload_len))
        ; Setup parameters for call to function frame802154_parse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??frame802154_parse?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
        ; Setup parameters for call to function packetbuf_hdrreduce
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R7
        SUBB    A,R1
        MOV     R3,A
        LCALL   ??packetbuf_hdrreduce?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
//  128         {
//  129             if(is_broadcast_addr(frame.dest_addr) && !is_myAddr(frame.src_addr))
        ; Setup parameters for call to function is_broadcast_addr
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??is_broadcast_addr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
        ; Setup parameters for call to function is_myAddr
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??is_myAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
//  130             {
//  131                 if(helloRetrans_flag == 0)
        MOV     DPTR,#helloRetrans_flag
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??sensor_incomingPacketProcessing_2 & 0xFFFF
//  132                 {
//  133                     cumt_instruction *inst;
//  134                     //remember the upgoing node address
//  135                     rimeaddr_copy(&upGoingNode,(rimeaddr_t*) &frame.src_addr);
        ; Setup parameters for call to function rimeaddr_copy
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#upGoingNode & 0xff
        MOV     R3,#(upGoingNode >> 8) & 0xff
        LCALL   ??rimeaddr_copy?relay
//  136                     inst = (cumt_instruction*)frame.payload;
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  137                     if(inst->instructionType == HELLOMSG)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??sensor_incomingPacketProcessing_2
//  138                     {
//  139                         PUTSTRING("hello received!\r\n");
//  140                         leds_off(LEDS_ALL);
        ; Setup parameters for call to function leds_off
        MOV     R1,#0x3
        LCALL   ??leds_off?relay
//  141                         leds_on(LEDS_GREEN);
        ; Setup parameters for call to function leds_on
        MOV     R1,#0x2
        LCALL   ??leds_on?relay
//  142                         helloRetrans_flag = 1;   //has already forwarded hello instruction, next time when hello instruction comes, it will drop it 
        MOV     DPTR,#helloRetrans_flag
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  143                         inst->hopCount++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  144                         dataInpack(upGoingNode); //add the data packet to the list of sensor node, wait for a spare time to rebroadcast
        ; Setup parameters for call to function dataInpack
        MOV     DPTR,#upGoingNode
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 62)
        LCALL   ??dataInpack?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  145                         if(buildBufflist((uint8_t *)inst, sizeof(*inst), rimeaddr_null))  //add the instruction packet to the packet list, wait for a spare time to broadcast
        ; Setup parameters for call to function buildBufflist
        MOV     DPTR,#rimeaddr_null
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??buildBufflist?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sensor_incomingPacketProcessing_3
//  146                         {
//  147                             helloRetrans_flag = 1;
        MOV     DPTR,#helloRetrans_flag
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  148                         }
//  149                         inst = NULL;
??sensor_incomingPacketProcessing_3:
        MOV     R6,#0x0
        MOV     R7,#0x0
//  150                     }
//  151                 }
//  152                 if(sleepRetrans_flag == 0)
??sensor_incomingPacketProcessing_2:
        MOV     DPTR,#sleepRetrans_flag
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??sensor_incomingPacketProcessing_4
//  153                 {
//  154                     cumt_instruction *inst;
//  155                     inst = (cumt_instruction *)frame.payload;
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  156                     PUTSTRING("sleep cmd received! \r\n");
//  157                     if(inst->instructionType == SLEEPMSG)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??sensor_incomingPacketProcessing_4
//  158                     {
//  159                         if(broadcastForward(frame.payload, frame.payload_len));
        ; Setup parameters for call to function broadcastForward
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??broadcastForward?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  160                         {
//  161                             inst=NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  162                             sleepRetrans_flag = 1;  //should be 1, already forwarded sleep instruction, ignore the other incoming sleep instruction 
        MOV     DPTR,#sleepRetrans_flag
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  163                             flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  164                             PUTSTRING("into sleep mode\r\n");
//  165                             process_setSleepCMD(1);
        ; Setup parameters for call to function process_setSleepCMD
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??process_setSleepCMD?relay
//  166                         }
//  167                     }
//  168                 }
//  169                 if(rimeaddr_cmp((rimeaddr_t *)&frame.dest_addr, &rimeaddr_node_addr))
??sensor_incomingPacketProcessing_4:
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sensor_incomingPacketProcessing_1
//  170                 {
//  171                     PUTSTRING("some one send data on me");
//  172                     if(buildBufflist(frame.payload, frame.payload_len, upGoingNode))
        ; Setup parameters for call to function buildBufflist
        MOV     DPTR,#upGoingNode
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??buildBufflist?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sensor_incomingPacketProcessing_1
//  173                     {
//  174                         flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  175                     }
//  176                 }
//  177             }
//  178         }            //data for me 
//  179         packetbuf_clear();
??sensor_incomingPacketProcessing_1:
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  180     }
//  181     return flag;
??sensor_incomingPacketProcessing_0:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,#0x30
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  182 }
//  183 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  184 int sink_incomingPacketProcessing(void)
sink_incomingPacketProcessing:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function sink_incomingPacketProcessing
        CODE
//  185 {
        FUNCALL sink_incomingPacketProcessing, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_set_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, frame802154_parse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_hdrreduce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, toInformationList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_incomingPacketProcessing, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 48
        MOV     A,#-0x30
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  186     int len;
//  187     int flag = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  188     len = cc2530_rf_driver.pending_packet();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//  189     if(len)
        MOV     A,?V0 + 2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??sink_incomingPacketProcessing_0 & 0xFFFF
//  190     {
//  191         frame802154_t frame;
//  192         cumt_information *sensorData;
//  193         //PUTSTRING("packet income\r\n");
//  194         packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  195         len = cc2530_rf_driver.read(packetbuf_dataptr(),PACKETBUF_SIZE);
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        ; Setup parameters for indirect call
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     DPTR,#cc2530_rf_driver + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//  196         packetbuf_set_datalen(len);
        ; Setup parameters for call to function packetbuf_set_datalen
        LCALL   ??packetbuf_set_datalen?relay
//  197         if(frame802154_parse(packetbuf_dataptr(), packetbuf_datalen(), &frame) && packetbuf_hdrreduce(packetbuf_datalen() - frame.payload_len))
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        ; Setup parameters for call to function frame802154_parse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??frame802154_parse?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??sink_incomingPacketProcessing_0 & 0xFFFF
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        ; Setup parameters for call to function packetbuf_hdrreduce
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,?V0 + 3
        SUBB    A,R3
        MOV     R3,A
        LCALL   ??packetbuf_hdrreduce?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sink_incomingPacketProcessing_0
//  198         {
//  199             if(rimeaddr_cmp((rimeaddr_t *)&frame.dest_addr, &rimeaddr_node_addr)&& !rimeaddr_cmp((rimeaddr_t *)&frame.src_addr, &rimeaddr_node_addr)) //incoming packet address is for sink node
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sink_incomingPacketProcessing_0
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??sink_incomingPacketProcessing_0
//  200             {
//  201                 sensorData = (cumt_information *)frame.payload;
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
//  202                 toInformationList(*sensorData); //add the data packet to the packet list of sink node, wait for a spare time to send to the computer
        ; Setup parameters for call to function toInformationList
        MOV     A,#0x6
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 66)
        LCALL   ??toInformationList?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  203                 packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  204                 flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  205             }
//  206         }
//  207     }
//  208     return flag;
??sink_incomingPacketProcessing_0:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,#0x30
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  209 }
//  210 
//  211 //-----------------------------------------------
//  212 
//  213 //-------------------list processing-------------------------
//  214 
//  215 
//  216 //--------------for outgoing packet --------------
//  217 //sensor 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 int buildBufflist(uint8_t *payload, int payload_len, rimeaddr_t nxthop)
buildBufflist:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function buildBufflist
        CODE
//  219 {
        FUNCALL buildBufflist, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_copyfrom
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, frame802154_hdrlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_hdralloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, frame802154_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildBufflist, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 48
        MOV     A,#-0x30
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  220     int flag=0;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  221     int hdrlen;
//  222 
//  223     //--------------------this part is to set the 820.15.4 frame-------------------------------
//  224     packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  225     packetbuf_copyfrom(payload,payload_len);
        ; Setup parameters for call to function packetbuf_copyfrom
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??packetbuf_copyfrom?relay
//  226     frame802154_t frm;
//  227     frm.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  228     frm.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  229     frm.fcf.frame_type = FRAME802154_DATAFRAME;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  230     frm.fcf.security_enabled = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  231     frm.fcf.frame_pending = 1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  232     frm.fcf.panid_compression = 0;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  233     frm.fcf.frame_version = FRAME802154_IEEE802154_2006; //another choice: FRAME802154_IEEE802154_2003
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  234     if(mac_dsn == 0)
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        JNZ     ??buildBufflist_0
//  235     {
//  236         mac_dsn = random_rand() % 256;
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x0
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     DPTR,#mac_dsn
        MOVX    @DPTR,A
        SJMP    ??buildBufflist_1
//  237     }
//  238     else
//  239     {
//  240         mac_dsn++;
??buildBufflist_0:
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  241     }
//  242 
//  243     frm.seq=mac_dsn;
??buildBufflist_1:
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  244     frm.dest_pid = IEEE802154_PANID;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x54
        MOVX    @DPTR,A
//  245     frm.src_pid = IEEE802154_PANID;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x54
        MOVX    @DPTR,A
//  246     if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??buildBufflist_2
//  247     {
//  248         frm.fcf.ack_required = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  249         frm.dest_addr[0] = 0xFF;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  250         frm.dest_addr[1] = 0xFF;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??buildBufflist_3
//  251     }
//  252     else
//  253     {
//  254         frm.fcf.ack_required = 1;
??buildBufflist_2:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  255         rimeaddr_copy((rimeaddr_t *)&frm.dest_addr, &nxthop);  
        ; Setup parameters for call to function rimeaddr_copy
        MOV     A,#0x3e
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_copy?relay
//  256     }
//  257 
//  258     rimeaddr_copy((rimeaddr_t *)&frm.src_addr, &rimeaddr_node_addr);
??buildBufflist_3:
        ; Setup parameters for call to function rimeaddr_copy
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_copy?relay
//  259     frm.payload = packetbuf_dataptr();
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  260     frm.payload_len = packetbuf_datalen();
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     A,R2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  261     //-----------------------end of frame setting----------------------------------------
//  262 
//  263     hdrlen = frame802154_hdrlen(&frm);
        ; Setup parameters for call to function frame802154_hdrlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??frame802154_hdrlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  264     if(packetbuf_hdralloc(hdrlen))
        ; Setup parameters for call to function packetbuf_hdralloc
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??packetbuf_hdralloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??buildBufflist_4 & 0xFFFF
//  265     {
//  266         //-----------------create the output buff, add it to the list-------------------//
//  267         //for list item operation and mem allocation
//  268         packetbufListStruct_t *cache;
//  269         cache = memb_alloc(&packetbuf_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#packetbuf_memb & 0xff
        MOV     R3,#(packetbuf_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  270         //create buff
//  271         frame802154_create(&frm, packetbuf_hdrptr(), hdrlen);
        ; Setup parameters for call to function frame802154_create
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??frame802154_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
//  272         int i;
//  273         uint8_t *bufTmp;
//  274         bufTmp = (uint8_t *)packetbuf_hdrptr();
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  275         for(i = 0; i<packetbuf_totlen(); i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??buildBufflist_5
//  276         {
//  277             cache->packetbuf[i] = bufTmp[i]; 
??buildBufflist_6:
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  278         }
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??buildBufflist_5:
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        JC      ??buildBufflist_6
//  279         cache->dataLen = packetbuf_totlen();
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     A,R6
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  280         list_add(packetbuf_list,cache);
        ; Setup parameters for call to function list_add
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#packetbuf_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  281         //---------------------------------------------------------------------//
//  282         packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  283         flag=1;
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
//  284     }
//  285     return flag;
??buildBufflist_4:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,#0x30
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  286 }
//  287 
//  288 //sensor send one item in the list

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  289 int sensor_popAndSendItemOfList()
sensor_popAndSendItemOfList:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function sensor_popAndSendItemOfList
        CODE
//  290 {
        FUNCALL sensor_popAndSendItemOfList, list_length
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_popAndSendItemOfList, list_pop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_popAndSendItemOfList, sendPacket
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_popAndSendItemOfList, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  291     int flag = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  292     packetbufListStruct_t *pop;
//  293     if(list_length(packetbuf_list) != 0)
        ; Setup parameters for call to function list_length
        MOV     DPTR,#packetbuf_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_length?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sensor_popAndSendItemOfList_0
//  294         pop = (packetbufListStruct_t *)list_pop(packetbuf_list);
        ; Setup parameters for call to function list_pop
        MOV     DPTR,#packetbuf_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_pop?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  295     if(sendPacket(pop->packetbuf, pop->dataLen))
??sensor_popAndSendItemOfList_0:
        ; Setup parameters for call to function sendPacket
        MOV     A,R6
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sendPacket?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??sensor_popAndSendItemOfList_1
//  296     {
//  297         flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  298     }
//  299     //free the item from the mem
//  300     memb_free(&packetbuf_memb, pop);
??sensor_popAndSendItemOfList_1:
        ; Setup parameters for call to function memb_free
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#packetbuf_memb & 0xff
        MOV     R3,#(packetbuf_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  301     return flag;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  302 }
//  303 
//  304 //for sink node to handel temperature packets, CAN NOT be directly called

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 void toInformationList(cumt_information tmp) 
toInformationList:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function toInformationList
        CODE
//  306 {
        FUNCALL toInformationList, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL toInformationList, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  307     informationListStruct_t *cache;
//  308     cache = memb_alloc(&information_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#information_memb & 0xff
        MOV     R3,#(information_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  309     cache->tmpData = tmp;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  310     list_add(information_list, cache);
        ; Setup parameters for call to function list_add
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPTR,#information_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  311 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  312 
//  313 //print item from list

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  314 void sink_printItemOfList(void)
sink_printItemOfList:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function sink_printItemOfList
        CODE
//  315 {
        FUNCALL sink_printItemOfList, list_length
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, list_pop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, putstring
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, puthex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, puthex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, putstring
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sink_printItemOfList, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  316     cumt_information sensorData;
//  317     informationListStruct_t *pop;
//  318     if(list_length(information_list) != 0)
        ; Setup parameters for call to function list_length
        MOV     DPTR,#information_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_length?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??sink_printItemOfList_0
//  319         pop = (informationListStruct_t *)list_pop(information_list);
        ; Setup parameters for call to function list_pop
        MOV     DPTR,#information_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_pop?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  320     sensorData = pop->tmpData;
??sink_printItemOfList_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  321     putstring("Frome node ");
        ; Setup parameters for call to function putstring
        MOV     R2,#`?<Constant "Frome node ">` & 0xff
        MOV     R3,#(`?<Constant "Frome node ">` >> 8) & 0xff
        LCALL   ??putstring?relay
//  322     puthex(sensorData.startAddr[0]);
        ; Setup parameters for call to function puthex
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??puthex?relay
//  323     puthex(sensorData.startAddr[1]);
        ; Setup parameters for call to function puthex
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??puthex?relay
//  324     putstring(": ");
        ; Setup parameters for call to function putstring
        MOV     R2,#`?<Constant ": ">` & 0xff
        MOV     R3,#(`?<Constant ": ">` >> 8) & 0xff
        LCALL   ??putstring?relay
//  325     printf("temperature = %d.%d, ", sensorData.temperature[0], sensorData.temperature[1]);
        ; Setup parameters for call to function printf
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#`?<Constant "temperature = %d.%d, ">` & 0xff
        MOV     R3,#(`?<Constant "temperature = %d.%d, ">` >> 8) & 0xff
        LCALL   ??printf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  326     printf("voltage remained = %d.%d \r\n", sensorData.vdd[0], sensorData.vdd[1]);
        ; Setup parameters for call to function printf
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#`?<Constant "voltage remained = %d...">` & 0xff
        MOV     R3,#(`?<Constant "voltage remained = %d...">` >> 8) & 0xff
        LCALL   ??printf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  327     memb_free(&information_memb, pop);
        ; Setup parameters for call to function memb_free
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#information_memb & 0xff
        MOV     R3,#(information_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  328 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  329 
//  330 
//  331 //for sensor or sink node know the length of corresponding list

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 int getpacketbufListLength(void)
getpacketbufListLength:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function getpacketbufListLength
        CODE
//  333 {
        FUNCALL getpacketbufListLength, list_length
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  334     return list_length(packetbuf_list);
        ; Setup parameters for call to function list_length
        MOV     DPTR,#packetbuf_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_length?relay
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  335 }
//  336 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  337 int getInformationListLength(void)
getInformationListLength:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function getInformationListLength
        CODE
//  338 {
        FUNCALL getInformationListLength, list_length
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  339     return list_length(information_list);
        ; Setup parameters for call to function list_length
        MOV     DPTR,#information_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_length?relay
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock9
//  340 }
//  341 //------------------------------------------------------------------------------------
//  342 
//  343 //----------------------------for outgoing packet--------------------------------------
//  344 //CAN NOT be directly called

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  345 int sendPacket(void *datatogo, int datalen)
sendPacket:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function sendPacket
        CODE
//  346 {
        FUNCALL sendPacket, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendPacket, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendPacket, leds_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendPacket, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendPacket, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  347     int flag=0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  348     clock_time_t waitTime;
//  349     int backoffs=0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  350     int sendStatus;
//  351     waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
        MOV     ?V0 + 8,#0x10
        MOV     ?V0 + 9,#0x0
        SJMP    ??sendPacket_0
//  352     //send with csma
//  353     do
//  354     {
//  355         while(cc2530_rf_driver.channel_clear() == 0)
//  356         {
//  357             waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??sendPacket_1:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 8
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 9
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 8
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 8
        ADD     A,?V0 + 4
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,?V0 + 5
        MOV     ?V0 + 9,A
//  358             backoffs ++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  359             clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??clock_wait?relay
//  360         }
??sendPacket_0:
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??sendPacket_1
//  361         sendStatus = cc2530_rf_driver.send(datatogo, datalen);
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     DPTR,#cc2530_rf_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 4,?V0 + 10
        MOV     ?V0 + 5,?V0 + 11
//  362         if(backoffs >5)
        CLR     C
        MOV     A,R6
        SUBB    A,#0x6
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??sendPacket_2
//  363             backoffs=5;
        MOV     R6,#0x5
        MOV     R7,#0x0
//  364         if(sendStatus == RADIO_TX_OK)
??sendPacket_2:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??sendPacket_3
//  365         {
//  366             backoffs = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  367             flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  368             //indicate the status is OK
//  369             leds_on(LEDS_RED);
        ; Setup parameters for call to function leds_on
        MOV     R1,#0x1
        LCALL   ??leds_on?relay
        SJMP    ??sendPacket_4
//  370         }
//  371         else
//  372         {
//  373             PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
//  374             waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??sendPacket_3:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 8
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 9
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 8
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 8
        ADD     A,?V0 + 10
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,?V0 + 11
        MOV     ?V0 + 9,A
//  375             backoffs++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  376             clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??clock_wait?relay
//  377         }
//  378     }while(sendStatus != RADIO_TX_OK);
??sendPacket_4:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??sendPacket_0 & 0xFFFF
//  379     return flag;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  380 }
//  381 //CAN NOT be directly called, only for sleep instruction

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382 int broadcastForward(uint8_t* overAir, int payloadLen)
broadcastForward:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function broadcastForward
        CODE
//  383 {
        FUNCALL broadcastForward, buildAndSendFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  384     if(buildAndSendFrame(overAir,payloadLen,rimeaddr_null))
        ; Setup parameters for call to function buildAndSendFrame
        MOV     DPTR,#rimeaddr_null
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ??buildAndSendFrame?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??broadcastForward_0
//  385         return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        SJMP    ??broadcastForward_1
//  386     else
//  387         return 0;
??broadcastForward_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??broadcastForward_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  388 }
//  389 
//  390 //csma timebase

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  391 clock_time_t default_timebase(void)
default_timebase:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function default_timebase
        CODE
//  392 {
        ; Saved register size: 0
        ; Auto size: 0
//  393     clock_time_t time=0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  394     /* The retransmission time must be proportional to the channel
//  395        check interval of the underlying radio duty cycling layer.*/
//  396     //   time = NETSTACK_RDC.channel_check_interval();
//  397 
//  398     /* If the radio duty cycle has no channel check interval (i.e., it
//  399        does not turn the radio off), we make the retransmission time
//  400        proportional to the configured MAC channel check rate.*/
//  401     if(time == 0) {
        MOV     A,R2
        ORL     A,R3
        JNZ     ??default_timebase_0
//  402         time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
        MOV     R2,#0x10
        MOV     R3,#0x0
//  403     }
//  404     return time;
??default_timebase_0:
        LJMP    ?BRET
          CFI EndBlock cfiBlock12
//  405 }
//  406 
//  407 //for sink node broadcasting instructions

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 int buildAndSendFrame(uint8_t* payload, int payloadLen,  rimeaddr_t nxthop)
buildAndSendFrame:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function buildAndSendFrame
        CODE
//  409 {
        FUNCALL buildAndSendFrame, packetbuf_clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_copyfrom
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, frame802154_hdrlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_hdralloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, frame802154_create
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL buildAndSendFrame, clock_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 48
        MOV     A,#-0x30
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
//  410     int flag=0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  411     int len;
//  412     int sendStatus;
//  413 
//  414     clock_time_t waitTime; 
//  415     int backoffs = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  416 
//  417     //-----------------------------------802.15.4 frame buiding----------------------------------------------------
//  418     packetbuf_clear();
        ; Setup parameters for call to function packetbuf_clear
        LCALL   ??packetbuf_clear?relay
//  419     packetbuf_copyfrom(payload,payloadLen);
        ; Setup parameters for call to function packetbuf_copyfrom
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??packetbuf_copyfrom?relay
//  420     frame802154_t frm;
//  421     frm.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  422     frm.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  423     frm.fcf.frame_type = FRAME802154_DATAFRAME;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  424     frm.fcf.security_enabled = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  425     frm.fcf.frame_pending = 1;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  426     frm.fcf.panid_compression = 0;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  427     frm.fcf.frame_version = FRAME802154_IEEE802154_2006; //another choice: FRAME802154_IEEE802154_2003
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  428     if(mac_dsn == 0)
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        JNZ     ??buildAndSendFrame_0
//  429     {
//  430         mac_dsn = random_rand() % 256;
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x0
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     DPTR,#mac_dsn
        MOVX    @DPTR,A
        SJMP    ??buildAndSendFrame_1
//  431     }
//  432     else
//  433     {
//  434         mac_dsn++;
??buildAndSendFrame_0:
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  435     }
//  436     frm.seq=mac_dsn;
??buildAndSendFrame_1:
        MOV     DPTR,#mac_dsn
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  437     frm.dest_pid = IEEE802154_PANID;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x54
        MOVX    @DPTR,A
//  438     frm.src_pid = IEEE802154_PANID;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x49
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x54
        MOVX    @DPTR,A
//  439     if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??buildAndSendFrame_2
//  440     {
//  441         frm.fcf.ack_required = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  442         frm.dest_addr[0] = 0xFF;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  443         frm.dest_addr[1] = 0xFF;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??buildAndSendFrame_3
//  444     }
//  445     else
//  446     {
//  447         frm.fcf.ack_required = 1;
??buildAndSendFrame_2:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  448         rimeaddr_copy((rimeaddr_t *)&frm.dest_addr, &nxthop);  
        ; Setup parameters for call to function rimeaddr_copy
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_copy?relay
//  449     }
//  450 
//  451     rimeaddr_copy((rimeaddr_t *)&frm.src_addr, &rimeaddr_node_addr);
??buildAndSendFrame_3:
        ; Setup parameters for call to function rimeaddr_copy
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_copy?relay
//  452     frm.payload = packetbuf_dataptr();
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  453     frm.payload_len = packetbuf_datalen();
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     A,R2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  454     //-------------------------------------end of frame building--------------------------------------------------
//  455     
//  456     len = frame802154_hdrlen(&frm);
        ; Setup parameters for call to function frame802154_hdrlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??frame802154_hdrlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  457     if(packetbuf_hdralloc(len))
        ; Setup parameters for call to function packetbuf_hdralloc
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??packetbuf_hdralloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??buildAndSendFrame_4 & 0xFFFF
//  458     {
//  459         frame802154_create(&frm, packetbuf_hdrptr(), len);
        ; Setup parameters for call to function frame802154_create
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??frame802154_create?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 64)
//  460         //------------------------send with csma, broadcasting or unicasting-------------------- 
//  461         if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     A,#0x40
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??buildAndSendFrame_5 & 0xFFFF
//  462         {
//  463             waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        SJMP    ??buildAndSendFrame_6
//  464             do
//  465             {
//  466                 while(cc2530_rf_driver.channel_clear() == 0)
//  467                 {
//  468                     waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??buildAndSendFrame_7:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 4
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 5
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 4
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     ?V0 + 5,A
//  469                     backoffs ++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  470                     clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??clock_wait?relay
//  471                 }
??buildAndSendFrame_6:
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??buildAndSendFrame_7
//  472                 sendStatus = cc2530_rf_driver.send(packetbuf_hdrptr(), packetbuf_totlen());
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#cc2530_rf_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
//  473                 if(backoffs >5)
        CLR     C
        MOV     A,R6
        SUBB    A,#0x6
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??buildAndSendFrame_8
//  474                     backoffs=5;
        MOV     R6,#0x5
        MOV     R7,#0x0
//  475                 if(sendStatus == RADIO_TX_OK)
??buildAndSendFrame_8:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??buildAndSendFrame_9
//  476                 {
//  477                     backoffs = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  478                     flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        SJMP    ??buildAndSendFrame_10
//  479                 }
//  480                 else
//  481                 {
//  482                     PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
//  483                     waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??buildAndSendFrame_9:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 4
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 5
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 4
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 4
        ADD     A,?V0 + 6
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 7
        MOV     ?V0 + 5,A
//  484                     backoffs++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  485                     clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??clock_wait?relay
//  486                 }
//  487             }while(sendStatus != RADIO_TX_OK);
??buildAndSendFrame_10:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??buildAndSendFrame_6 & 0xFFFF
        LJMP    ??buildAndSendFrame_4 & 0xFFFF
//  488         }
//  489         else
//  490         {
//  491             waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
??buildAndSendFrame_5:
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        SJMP    ??buildAndSendFrame_11
//  492             do
//  493             {
//  494                 while(cc2530_rf_driver.channel_clear() == 0)
//  495                 {
//  496                     waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??buildAndSendFrame_12:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 4
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 5
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 4
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     ?V0 + 5,A
//  497                     backoffs ++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  498                     clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??clock_wait?relay
//  499                 }
??buildAndSendFrame_11:
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??buildAndSendFrame_12
//  500                 sendStatus = cc2530_rf_driver.send(packetbuf_hdrptr(), packetbuf_totlen());
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#cc2530_rf_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
//  501                 if(backoffs >5)
        CLR     C
        MOV     A,R6
        SUBB    A,#0x6
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??buildAndSendFrame_13
//  502                     backoffs=5;
        MOV     R6,#0x5
        MOV     R7,#0x0
//  503                 if(sendStatus == RADIO_TX_OK)
??buildAndSendFrame_13:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??buildAndSendFrame_14
//  504                 {
//  505                     backoffs = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  506                     flag = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        SJMP    ??buildAndSendFrame_15
//  507                 }
//  508                 else
//  509                 {
//  510                     PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
//  511                     waitTime = waitTime + (random_rand()%(backoffs * waitTime));
??buildAndSendFrame_14:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 4
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 5
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 4
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 4
        ADD     A,?V0 + 6
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 7
        MOV     ?V0 + 5,A
//  512                     backoffs++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  513                     clock_wait(waitTime);
        ; Setup parameters for call to function clock_wait
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??clock_wait?relay
//  514                 }
//  515             }while(sendStatus != RADIO_TX_OK);
??buildAndSendFrame_15:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??buildAndSendFrame_11 & 0xFFFF
//  516         }
//  517         //-------------------------end of sending----------------------------------------
//  518     }
//  519     return flag;
??buildAndSendFrame_4:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,#0x30
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  520 }
//  521 
//  522 //for sink node 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 int instructionSend(uint8_t instruction)
instructionSend:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function instructionSend
        CODE
//  524 {
        FUNCALL instructionSend, buildAndSendFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  525     static cumt_instruction instruc;
//  526     instruc.srcAddr[0] = rimeaddr_node_addr.u8[0];
        MOV     DPTR,#rimeaddr_node_addr
        MOVX    A,@DPTR
        MOV     DPTR,#??instruc
        MOVX    @DPTR,A
//  527     instruc.srcAddr[1] = rimeaddr_node_addr.u8[1];
        MOV     DPTR,#rimeaddr_node_addr + 1
        MOVX    A,@DPTR
        MOV     DPTR,#??instruc + 1
        MOVX    @DPTR,A
//  528     instruc.hopCount = 0;
        MOV     DPTR,#??instruc + 2
        MOV     A,#0x0
        MOVX    @DPTR,A
//  529     instruc.instructionType = instruction;
        MOV     A,R6
        MOV     DPTR,#??instruc + 3
        MOVX    @DPTR,A
//  530     if(buildAndSendFrame((uint8_t *) &instruc,sizeof(instruc),  rimeaddr_null))
        ; Setup parameters for call to function buildAndSendFrame
        MOV     DPTR,#rimeaddr_null
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#??instruc & 0xff
        MOV     R3,#(??instruc >> 8) & 0xff
        LCALL   ??buildAndSendFrame?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??instructionSend_0
//  531         return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        SJMP    ??instructionSend_1
//  532     else
//  533         return 0;
??instructionSend_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??instructionSend_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  534 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
??instruc:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  535 
//  536 //--------------------------------------------------
//  537 
//  538 //-----------------sensing--------------------
//  539 //temperature

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 float getTemperature()
getTemperature:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function getTemperature
        CODE
//  541 {
        FUNCALL getTemperature, sensors_find
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  542     int rv;
//  543     struct sensors_sensor *sensor;
//  544     float sane = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  545     sensor = (struct sensors_sensor *) sensors_find(ADC_SENSOR);
        ; Setup parameters for call to function sensors_find
        MOV     R2,#`?<Constant "ADC">` & 0xff
        MOV     R3,#(`?<Constant "ADC">` >> 8) & 0xff
        LCALL   ??sensors_find?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
//  546     if(sensor)
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??getTemperature_0
//  547     {
//  548         rv = sensor->value(ADC_SENSOR_TYPE_TEMP);
        ; Setup parameters for indirect call
        MOV     R2,#0x0
        MOV     R3,#0x0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  549         if(rv != -1)
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??getTemperature_1
        MOV     A,#-0x1
        XRL     A,R1
??getTemperature_1:
        JZ      ??getTemperature_2
//  550         {
//  551             sane = 11 + ((rv - 1480) / 4.5);
        MOV     A,R0
        ADD     A,#0x38
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x6
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_40900000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_41300000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  552             //sane = ((rv-1367.5)/4.5)-4;
//  553             return sane;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??getTemperature_3
//  554 
//  555         }
//  556         else
//  557         {
//  558             PUTSTRING("get TEMPERATURE value failed\r\n");
//  559             return 0;
??getTemperature_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ??getTemperature_3
//  560         }
//  561     }
//  562     else
//  563     {
//  564         PUTSTRING("sensor API load failed(tmp)\r\n");
//  565         return 0;
??getTemperature_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
??getTemperature_3:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  566     }
//  567 }
//  568 
//  569 //voltage

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  570 float getVoltage()
getVoltage:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function getVoltage
        CODE
//  571 {
        FUNCALL getVoltage, sensors_find
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  572     int rv;
//  573     struct sensors_sensor *sensor;
//  574     float sane = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  575     sensor = (struct sensors_sensor *) sensors_find(ADC_SENSOR);
        ; Setup parameters for call to function sensors_find
        MOV     R2,#`?<Constant "ADC">` & 0xff
        MOV     R3,#(`?<Constant "ADC">` >> 8) & 0xff
        LCALL   ??sensors_find?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
//  576     if(sensor)
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??getVoltage_0
//  577     {
//  578         rv = sensor->value(ADC_SENSOR_TYPE_VDD);
        ; Setup parameters for indirect call
        MOV     R2,#0x4
        MOV     R3,#0x0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  579         if(rv != -1)
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        JNZ     ??getVoltage_1
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??getVoltage_1:
        JZ      ??getVoltage_2
//  580         {
//  581             sane = rv * 3.75/2047;
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_40700000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_44ffe000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//  582             return sane;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??getVoltage_3
//  583         }
//  584         else
//  585         {
//  586             PUTSTRING("get VDD value failed\r\n");
//  587             return 0;
??getVoltage_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ??getVoltage_3
//  588         }
//  589     }
//  590     else
//  591     {
//  592         PUTSTRING("sensor API load failed(vdd)\r\n");
//  593         return 0;
??getVoltage_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
??getVoltage_3:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16
//  594     }
//  595 }
//  596 //-------------------end of sensing--------------------------
//  597 
//  598 
//  599 //-----------------------sensor add data packet to the list--------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  600 void sensor_dataInpack(rimeaddr_t nxthop)
sensor_dataInpack:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function sensor_dataInpack
        CODE
//  601 {
        FUNCALL sensor_dataInpack, getTemperature
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_dataInpack, getVoltage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensor_dataInpack, buildBufflist
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  602     cumt_information temperaturePkt;
//  603     float tmp;
//  604     float vdd;
//  605     uint8_t vddInt;
//  606     uint8_t vddPnt;
//  607     uint8_t tmpInt;
//  608     uint8_t tmpPnt;
//  609     temperaturePkt.startAddr[0] = rimeaddr_node_addr.u8[0];
        MOV     DPTR,#rimeaddr_node_addr
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  610     temperaturePkt.startAddr[1] = rimeaddr_node_addr.u8[1];
        MOV     DPTR,#rimeaddr_node_addr + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  611     tmp = getTemperature();
        ; Setup parameters for call to function getTemperature
        LCALL   ??getTemperature?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
//  612     vdd = getVoltage();
        ; Setup parameters for call to function getVoltage
        LCALL   ??getVoltage?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  613     tmpInt = (uint8_t)((int)tmp);
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     R2,?V0 + 0
//  614     tmpPnt = (uint8_t)(tmp*100)%100;
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 8
        MOV     B,#0x64
        DIV     AB
        MOV     A,B
        MOV     R3,B
//  615     vddInt = (uint8_t)((int)vdd);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 0
        MOV     R4,?V0 + 0
//  616     vddPnt = (uint8_t)(vdd*100)%100;
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,?V0 + 4
        MOV     B,#0x64
        DIV     AB
        MOV     A,B
        MOV     R0,B
//  617     temperaturePkt.temperature[0] = tmpInt;
        MOV     A,R2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  618     temperaturePkt.temperature[1] = tmpPnt;
        MOV     A,R3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  619     temperaturePkt.vdd[0] = vddInt;
        MOV     A,R4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  620     temperaturePkt.vdd[1] = vddPnt;
        MOV     A,B
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,B
        MOVX    @DPTR,A
//  621     buildBufflist((uint8_t *)&temperaturePkt, sizeof(temperaturePkt), upGoingNode);
        ; Setup parameters for call to function buildBufflist
        MOV     DPTR,#upGoingNode
        MOV     A,#0x2
        LCALL   ?PUSH_XSTACK8_X
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??buildBufflist?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  622 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  623 //------------------------------------------------------------------------------------------------
//  624 
//  625 //----------------------sleep mode handler----------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  626 void addSleepTimer(uint16_t sec)
addSleepTimer:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function addSleepTimer
        CODE
//  627 {
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
//  628     uint32_t sleepTimer = 0;
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//  629     sleepTimer |= ST0;
        MOV     A,0x95
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
//  630     sleepTimer |= (uint32_t)ST1 <<  8;
        MOV     A,0x96
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
//  631     sleepTimer |= (uint32_t)ST2 << 16;
        MOV     A,0x97
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
//  632     sleepTimer += ((uint32_t)sec * (uint32_t)32768);
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#__Constant_8000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
//  633     ST2 = (uint8_t)(sleepTimer >> 16);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOV     0x97,A
//  634     ST1 = (uint8_t)(sleepTimer >> 8);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        CLR     A
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 0
        MOV     0x96,A
//  635     ST0 = (uint8_t) sleepTimer;
        MOV     A,?V0 + 4
        MOV     0x95,A
//  636 }
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
        REQUIRE ST0
        REQUIRE ST1
        REQUIRE ST2

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  637 void intoPM2Mode()
intoPM2Mode:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function intoPM2Mode
        CODE
//  638 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  639     helloRetrans_flag = 0;
        MOV     DPTR,#helloRetrans_flag
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  640     sleepRetrans_flag = 0;
        MOV     DPTR,#sleepRetrans_flag
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  641     int j;
//  642     int mode = 2;
        MOV     R0,#0x2
        MOV     R1,#0x0
//  643     SLEEPCMD &= 0xFC;
        ANL     0xbe,#0xfc
//  644     SLEEPCMD |= mode;
        MOV     A,R0
        ORL     0xbe,A
//  645     for(j=0;j<4;j++);
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??intoPM2Mode_0
??intoPM2Mode_1:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??intoPM2Mode_0:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x4
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??intoPM2Mode_1
//  646     PCON = 0x01;    
        MOV     0x87,#0x1
//  647 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
        REQUIRE SLEEPCMD
        REQUIRE PCON
//  648 //--------------------------------------------------------------
//  649 
//  650 
//  651 //-----------sleep flag processing---------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  652 int process_getSleepCMD()
process_getSleepCMD:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function process_getSleepCMD
        CODE
//  653 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  654     return sleepingCMD;
        MOV     DPTR,#sleepingCMD
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock20
//  655 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  656 void process_setSleepCMD(int state)
process_setSleepCMD:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function process_setSleepCMD
        CODE
//  657 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  658     sleepingCMD = state;
        MOV     DPTR,#sleepingCMD
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  659 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock21

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Frome node ">>`:
        DB "Frome node "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant ": ">>`:
        DB ": "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "temperature = %d.`:
        DB "temperature = %d.%d, "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "voltage remained `:
        DB "voltage remained = %d.%d \015\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ADC">>`:
        DB "ADC"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for packetbuf_list>`:
        DATA16
        DW packetbuf_list_list

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for packetbuf_memb>`:
        DATA16
        DW 132
        DW 5
        DW packetbuf_memb_memb_count
        DW packetbuf_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for information_list>`:
        DATA16
        DW information_list_list

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for information_memb>`:
        DATA16
        DW 8
        DW 10
        DW information_memb_memb_count
        DW information_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_40900000>`:
        DATA32
        DD 40900000H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_41300000>`:
        DATA32
        DD 41300000H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_40700000>`:
        DATA32
        DD 40700000H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_44ffe000>`:
        DATA32
        DD 44FFE000H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_42c80000>`:
        DATA32
        DD 42C80000H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_8000>`:
        DATA32
        DD 32768

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??is_broadcast_addr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    is_broadcast_addr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??is_myAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    is_myAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensor_incomingPacketProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensor_incomingPacketProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sink_incomingPacketProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sink_incomingPacketProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??buildBufflist?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    buildBufflist

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensor_popAndSendItemOfList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensor_popAndSendItemOfList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??toInformationList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    toInformationList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sink_printItemOfList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sink_printItemOfList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getpacketbufListLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getpacketbufListLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getInformationListLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getInformationListLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendPacket?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sendPacket

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??broadcastForward?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    broadcastForward

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??default_timebase?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    default_timebase

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??buildAndSendFrame?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    buildAndSendFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??instructionSend?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    instructionSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getTemperature?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getTemperature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getVoltage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getVoltage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensor_dataInpack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensor_dataInpack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??addSleepTimer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    addSleepTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??intoPM2Mode?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    intoPM2Mode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??process_getSleepCMD?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    process_getSleepCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??process_setSleepCMD?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    process_setSleepCMD

        END
//  660 //-----------------------------------------------
//  661 
//  662 //----------------dongbo huang-----------------//
//  663 
//  664 
// 
// 4 151 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     5 bytes in segment SFR_AN
//   113 bytes in segment XDATA_I
//   113 bytes in segment XDATA_ID
//   774 bytes in segment XDATA_Z
// 
// 4 372 bytes of CODE  memory (+ 24 bytes shared)
//     0 bytes of DATA  memory (+  5 bytes shared)
//   863 bytes of XDATA memory (+ 24 bytes shared)
//
//Errors: none
//Warnings: 1
