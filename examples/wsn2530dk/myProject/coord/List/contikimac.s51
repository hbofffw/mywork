///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:46 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\mac\contikimac.c        /
//    Command line       =  D:\myWork\myWork\core\net\mac\contikimac.c -D     /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\contikimac.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME contikimac

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??broadcast_rate_drop?relay,0203H
        PUBLIC ??contikimac_debug_print?relay
        FUNCTION ??contikimac_debug_print?relay,0203H
        FUNCTION ??duty_cycle?relay,0203H
        FUNCTION ??init?relay,0203H
        FUNCTION ??input_packet?relay,0203H
        FUNCTION ??off?relay,0203H
        FUNCTION ??on?relay,0203H
        FUNCTION ??powercycle?relay,0203H
        FUNCTION ??powercycle_turn_radio_off?relay,0203H
        FUNCTION ??powercycle_turn_radio_on?relay,0203H
        FUNCTION ??qsend_list?relay,0203H
        FUNCTION ??qsend_packet?relay,0203H
        FUNCTION ??recv_burst_off?relay,0203H
        FUNCTION ??schedule_powercycle?relay,0203H
        FUNCTION ??schedule_powercycle_fixed?relay,0203H
        FUNCTION ??send_packet?relay,0203H
        FUNCTION ??turn_off?relay,0203H
        FUNCTION ??turn_on?relay,0203H
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        FUNCTION broadcast_rate_drop,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC contikimac_debug_print
        FUNCTION contikimac_debug_print,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC contikimac_driver
        FUNCTION duty_cycle,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION init,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION input_packet,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION off,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION on,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION powercycle,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION powercycle_turn_radio_off,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION powercycle_turn_radio_on,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION qsend_list,021603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION qsend_packet,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION recv_burst_off,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION schedule_powercycle,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION schedule_powercycle_fixed,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION send_packet,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        FUNCTION turn_off,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION turn_on,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
ctimer_set          SYMBOL "ctimer_set"
??ctimer_set?relay  SYMBOL "?relay", ctimer_set
ctimer_stop         SYMBOL "ctimer_stop"
??ctimer_stop?relay SYMBOL "?relay", ctimer_stop
list_item_next      SYMBOL "list_item_next"
??list_item_next?relay SYMBOL "?relay", list_item_next
mac_call_sent_callback SYMBOL "mac_call_sent_callback"
??mac_call_sent_callback?relay SYMBOL "?relay", mac_call_sent_callback
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
memset              SYMBOL "memset"
??memset?relay      SYMBOL "?relay", memset
packetbuf_addr      SYMBOL "packetbuf_addr"
??packetbuf_addr?relay SYMBOL "?relay", packetbuf_addr
packetbuf_attr      SYMBOL "packetbuf_attr"
??packetbuf_attr?relay SYMBOL "?relay", packetbuf_attr
packetbuf_compact   SYMBOL "packetbuf_compact"
??packetbuf_compact?relay SYMBOL "?relay", packetbuf_compact
packetbuf_datalen   SYMBOL "packetbuf_datalen"
??packetbuf_datalen?relay SYMBOL "?relay", packetbuf_datalen
packetbuf_dataptr   SYMBOL "packetbuf_dataptr"
??packetbuf_dataptr?relay SYMBOL "?relay", packetbuf_dataptr
packetbuf_hdr_remove SYMBOL "packetbuf_hdr_remove"
??packetbuf_hdr_remove?relay SYMBOL "?relay", packetbuf_hdr_remove
packetbuf_hdralloc  SYMBOL "packetbuf_hdralloc"
??packetbuf_hdralloc?relay SYMBOL "?relay", packetbuf_hdralloc
packetbuf_hdrptr    SYMBOL "packetbuf_hdrptr"
??packetbuf_hdrptr?relay SYMBOL "?relay", packetbuf_hdrptr
packetbuf_hdrreduce SYMBOL "packetbuf_hdrreduce"
??packetbuf_hdrreduce?relay SYMBOL "?relay", packetbuf_hdrreduce
packetbuf_set_addr  SYMBOL "packetbuf_set_addr"
??packetbuf_set_addr?relay SYMBOL "?relay", packetbuf_set_addr
packetbuf_set_attr  SYMBOL "packetbuf_set_attr"
??packetbuf_set_attr?relay SYMBOL "?relay", packetbuf_set_attr
packetbuf_set_datalen SYMBOL "packetbuf_set_datalen"
??packetbuf_set_datalen?relay SYMBOL "?relay", packetbuf_set_datalen
packetbuf_totlen    SYMBOL "packetbuf_totlen"
??packetbuf_totlen?relay SYMBOL "?relay", packetbuf_totlen
phase_init          SYMBOL "phase_init"
??phase_init?relay  SYMBOL "?relay", phase_init
phase_update        SYMBOL "phase_update"
??phase_update?relay SYMBOL "?relay", phase_update
phase_wait          SYMBOL "phase_wait"
??phase_wait?relay  SYMBOL "?relay", phase_wait
queuebuf_to_packetbuf SYMBOL "queuebuf_to_packetbuf"
??queuebuf_to_packetbuf?relay SYMBOL "?relay", queuebuf_to_packetbuf
rimeaddr_cmp        SYMBOL "rimeaddr_cmp"
??rimeaddr_cmp?relay SYMBOL "?relay", rimeaddr_cmp
rimeaddr_copy       SYMBOL "rimeaddr_copy"
??rimeaddr_copy?relay SYMBOL "?relay", rimeaddr_copy
rtimer_set          SYMBOL "rtimer_set"
??rtimer_set?relay  SYMBOL "?relay", rtimer_set
watchdog_periodic   SYMBOL "watchdog_periodic"
??watchdog_periodic?relay SYMBOL "?relay", watchdog_periodic
contikimac_debug_print SYMBOL "contikimac_debug_print"
??contikimac_debug_print?relay SYMBOL "?relay", contikimac_debug_print

        EXTERN ??ctimer_set?relay
        FUNCTION ??ctimer_set?relay,00H
        EXTERN ??ctimer_stop?relay
        FUNCTION ??ctimer_stop?relay,00H
        EXTERN ??list_item_next?relay
        FUNCTION ??list_item_next?relay,00H
        EXTERN ??mac_call_sent_callback?relay
        FUNCTION ??mac_call_sent_callback?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??packetbuf_addr?relay
        FUNCTION ??packetbuf_addr?relay,00H
        EXTERN ??packetbuf_attr?relay
        FUNCTION ??packetbuf_attr?relay,00H
        EXTERN ??packetbuf_compact?relay
        FUNCTION ??packetbuf_compact?relay,00H
        EXTERN ??packetbuf_datalen?relay
        FUNCTION ??packetbuf_datalen?relay,00H
        EXTERN ??packetbuf_dataptr?relay
        FUNCTION ??packetbuf_dataptr?relay,00H
        EXTERN ??packetbuf_hdr_remove?relay
        FUNCTION ??packetbuf_hdr_remove?relay,00H
        EXTERN ??packetbuf_hdralloc?relay
        FUNCTION ??packetbuf_hdralloc?relay,00H
        EXTERN ??packetbuf_hdrptr?relay
        FUNCTION ??packetbuf_hdrptr?relay,00H
        EXTERN ??packetbuf_hdrreduce?relay
        FUNCTION ??packetbuf_hdrreduce?relay,00H
        EXTERN ??packetbuf_set_addr?relay
        FUNCTION ??packetbuf_set_addr?relay,00H
        EXTERN ??packetbuf_set_attr?relay
        FUNCTION ??packetbuf_set_attr?relay,00H
        EXTERN ??packetbuf_set_datalen?relay
        FUNCTION ??packetbuf_set_datalen?relay,00H
        EXTERN ??packetbuf_totlen?relay
        FUNCTION ??packetbuf_totlen?relay,00H
        EXTERN ??phase_init?relay
        FUNCTION ??phase_init?relay,00H
        EXTERN ??phase_update?relay
        FUNCTION ??phase_update?relay,00H
        EXTERN ??phase_wait?relay
        FUNCTION ??phase_wait?relay,00H
        EXTERN ??queuebuf_to_packetbuf?relay
        FUNCTION ??queuebuf_to_packetbuf?relay,00H
        EXTERN ??rimeaddr_cmp?relay
        FUNCTION ??rimeaddr_cmp?relay,00H
        EXTERN ??rimeaddr_copy?relay
        FUNCTION ??rimeaddr_copy?relay,00H
        EXTERN ??rtimer_set?relay
        FUNCTION ??rtimer_set?relay,00H
        EXTERN ??watchdog_periodic?relay
        FUNCTION ??watchdog_periodic?relay,00H
        EXTERN cc2530_rf_driver
        EXTERN ctimer_set
        FUNCTION ctimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ctimer_stop
        FUNCTION ctimer_stop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN framer_802154
        EXTERN list_item_next
        FUNCTION list_item_next,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mac_call_sent_callback
        FUNCTION mac_call_sent_callback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nullmac_driver
        EXTERN packetbuf_addr
        FUNCTION packetbuf_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_attr
        FUNCTION packetbuf_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_compact
        FUNCTION packetbuf_compact,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_datalen
        FUNCTION packetbuf_datalen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_dataptr
        FUNCTION packetbuf_dataptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdr_remove
        FUNCTION packetbuf_hdr_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdralloc
        FUNCTION packetbuf_hdralloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdrptr
        FUNCTION packetbuf_hdrptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdrreduce
        FUNCTION packetbuf_hdrreduce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_addr
        FUNCTION packetbuf_set_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_attr
        FUNCTION packetbuf_set_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_datalen
        FUNCTION packetbuf_set_datalen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_totlen
        FUNCTION packetbuf_totlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN phase_init
        FUNCTION phase_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN phase_update
        FUNCTION phase_update,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN phase_wait
        FUNCTION phase_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_to_packetbuf
        FUNCTION queuebuf_to_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_cmp
        FUNCTION rimeaddr_cmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_copy
        FUNCTION rimeaddr_copy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_node_addr
        EXTERN rimeaddr_null
        EXTERN rtimer_set
        FUNCTION rtimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN watchdog_periodic
        FUNCTION watchdog_periodic,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1
// D:\myWork\myWork\core\net\mac\contikimac.c
//    1 /*
//    2  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         Implementation of the ContikiMAC power-saving radio duty cycling protocol
//   36  * \author
//   37  *         Adam Dunkels <adam@sics.se>
//   38  *         Niclas Finne <nfi@sics.se>
//   39  *         Joakim Eriksson <joakime@sics.se>
//   40  */
//   41 
//   42 #include "contiki-conf.h"
//   43 #include "dev/leds.h"
//   44 #include "dev/radio.h"
//   45 #include "dev/watchdog.h"
//   46 #include "lib/random.h"
//   47 #include "net/mac/contikimac.h"
//   48 #include "net/netstack.h"
//   49 #include "net/rime.h"
//   50 #include "sys/compower.h"
//   51 #include "sys/pt.h"
//   52 #include "sys/rtimer.h"
//   53 
//   54 
//   55 #include <string.h>
//   56 
//   57 /* TX/RX cycles are synchronized with neighbor wake periods */
//   58 #ifdef CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION
//   59 #define WITH_PHASE_OPTIMIZATION      CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION
//   60 #else /* CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION */
//   61 #define WITH_PHASE_OPTIMIZATION      1
//   62 #endif /* CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION */
//   63 /* Two byte header added to allow recovery of padded short packets */
//   64 /* Wireshark will not understand such packets at present */
//   65 #ifdef CONTIKIMAC_CONF_WITH_CONTIKIMAC_HEADER
//   66 #define WITH_CONTIKIMAC_HEADER       CONTIKIMAC_CONF_WITH_CONTIKIMAC_HEADER
//   67 #else
//   68 #define WITH_CONTIKIMAC_HEADER       1
//   69 #endif
//   70 /* More aggressive radio sleeping when channel is busy with other traffic */
//   71 #ifndef WITH_FAST_SLEEP
//   72 #define WITH_FAST_SLEEP              1
//   73 #endif
//   74 /* Radio does CSMA and autobackoff */
//   75 #ifndef RDC_CONF_HARDWARE_CSMA
//   76 #define RDC_CONF_HARDWARE_CSMA       0
//   77 #endif
//   78 /* Radio returns TX_OK/TX_NOACK after autoack wait */
//   79 #ifndef RDC_CONF_HARDWARE_ACK
//   80 #define RDC_CONF_HARDWARE_ACK        0
//   81 #endif
//   82 /* MCU can sleep during radio off */
//   83 #ifndef RDC_CONF_MCU_SLEEP
//   84 #define RDC_CONF_MCU_SLEEP           0
//   85 #endif
//   86 
//   87 #if NETSTACK_RDC_CHANNEL_CHECK_RATE >= 64
//   88 #undef WITH_PHASE_OPTIMIZATION
//   89 #define WITH_PHASE_OPTIMIZATION 0
//   90 #endif
//   91 
//   92 #if WITH_CONTIKIMAC_HEADER
//   93 #define CONTIKIMAC_ID 0x00
//   94 
//   95 struct hdr {
//   96     uint8_t id;
//   97     uint8_t len;
//   98 };
//   99 #endif /* WITH_CONTIKIMAC_HEADER */
//  100 
//  101 /* CYCLE_TIME for channel cca checks, in rtimer ticks. */
//  102 #ifdef CONTIKIMAC_CONF_CYCLE_TIME
//  103 #define CYCLE_TIME (CONTIKIMAC_CONF_CYCLE_TIME)
//  104 #else
//  105 #define CYCLE_TIME (RTIMER_ARCH_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE)
//  106 #endif
//  107 
//  108 /* CHANNEL_CHECK_RATE is enforced to be a power of two.
//  109  * If RTIMER_ARCH_SECOND is not also a power of two, there will be an inexact
//  110  * number of channel checks per second due to the truncation of CYCLE_TIME.
//  111  * This will degrade the effectiveness of phase optimization with neighbors that
//  112  * do not have the same truncation error.
//  113  * Define SYNC_CYCLE_STARTS to ensure an integral number of checks per second.
//  114  */
//  115 #if RTIMER_ARCH_SECOND & (RTIMER_ARCH_SECOND - 1)
//  116 #define SYNC_CYCLE_STARTS                    1
//  117 #endif
//  118 
//  119 /* Are we currently receiving a burst? */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  120 static int we_are_receiving_burst = 0;
we_are_receiving_burst:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  121 
//  122 /* INTER_PACKET_DEADLINE is the maximum time a receiver waits for the
//  123    next packet of a burst when FRAME_PENDING is set. */
//  124 #define INTER_PACKET_DEADLINE               CLOCK_SECOND / 32
//  125 
//  126 /* ContikiMAC performs periodic channel checks. Each channel check
//  127    consists of two or more CCA checks. CCA_COUNT_MAX is the number of
//  128    CCAs to be done for each periodic channel check. The default is
//  129    two.*/
//  130 #ifdef CONTIKIMAC_CONF_CCA_COUNT_MAX
//  131 #define CCA_COUNT_MAX                      (CONTIKIMAC_CONF_CCA_COUNT_MAX)
//  132 #else
//  133 #define CCA_COUNT_MAX                      2
//  134 #endif
//  135 
//  136 /* Before starting a transmission, Contikimac checks the availability
//  137    of the channel with CCA_COUNT_MAX_TX consecutive CCAs */
//  138 #ifdef CONTIKIMAC_CONF_CCA_COUNT_MAX_TX
//  139 #define CCA_COUNT_MAX_TX                   (CONTIKIMAC_CONF_CCA_COUNT_MAX_TX)
//  140 #else
//  141 #define CCA_COUNT_MAX_TX                   6
//  142 #endif
//  143 
//  144 /* CCA_CHECK_TIME is the time it takes to perform a CCA check. */
//  145 /* Note this may be zero. AVRs have 7612 ticks/sec, but block until cca is done */
//  146 #ifdef CONTIKIMAC_CONF_CCA_CHECK_TIME
//  147 #define CCA_CHECK_TIME                     (CONTIKIMAC_CONF_CCA_CHECK_TIME)
//  148 #else
//  149 #define CCA_CHECK_TIME                     RTIMER_ARCH_SECOND / 8192
//  150 #endif
//  151 
//  152 /* CCA_SLEEP_TIME is the time between two successive CCA checks. */
//  153 /* Add 1 when rtimer ticks are coarse */
//  154 #if RTIMER_ARCH_SECOND > 8000
//  155 #define CCA_SLEEP_TIME                     RTIMER_ARCH_SECOND / 2000
//  156 #else
//  157 #define CCA_SLEEP_TIME                     (RTIMER_ARCH_SECOND / 2000) + 1
//  158 #endif
//  159 
//  160 /* CHECK_TIME is the total time it takes to perform CCA_COUNT_MAX
//  161    CCAs. */
//  162 #define CHECK_TIME                         (CCA_COUNT_MAX * (CCA_CHECK_TIME + CCA_SLEEP_TIME))
//  163 
//  164 /* CHECK_TIME_TX is the total time it takes to perform CCA_COUNT_MAX_TX
//  165    CCAs. */
//  166 #define CHECK_TIME_TX                      (CCA_COUNT_MAX_TX * (CCA_CHECK_TIME + CCA_SLEEP_TIME))
//  167 
//  168 /* LISTEN_TIME_AFTER_PACKET_DETECTED is the time that we keep checking
//  169    for activity after a potential packet has been detected by a CCA
//  170    check. */
//  171 #define LISTEN_TIME_AFTER_PACKET_DETECTED  RTIMER_ARCH_SECOND / 80
//  172 
//  173 /* MAX_SILENCE_PERIODS is the maximum amount of periods (a period is
//  174    CCA_CHECK_TIME + CCA_SLEEP_TIME) that we allow to be silent before
//  175    we turn of the radio. */
//  176 #define MAX_SILENCE_PERIODS                5
//  177 
//  178 /* MAX_NONACTIVITY_PERIODS is the maximum number of periods we allow
//  179    the radio to be turned on without any packet being received, when
//  180    WITH_FAST_SLEEP is enabled. */
//  181 #define MAX_NONACTIVITY_PERIODS            10
//  182 
//  183 
//  184 
//  185 /* STROBE_TIME is the maximum amount of time a transmitted packet
//  186    should be repeatedly transmitted as part of a transmission. */
//  187 #define STROBE_TIME                        (CYCLE_TIME + 2 * CHECK_TIME)
//  188 
//  189 /* GUARD_TIME is the time before the expected phase of a neighbor that
//  190    a transmitted should begin transmitting packets. */
//  191 #define GUARD_TIME                         10 * CHECK_TIME + CHECK_TIME_TX
//  192 
//  193 /* INTER_PACKET_INTERVAL is the interval between two successive packet transmissions */
//  194 #ifdef CONTIKIMAC_CONF_INTER_PACKET_INTERVAL
//  195 #define INTER_PACKET_INTERVAL              CONTIKIMAC_CONF_INTER_PACKET_INTERVAL
//  196 #else
//  197 #define INTER_PACKET_INTERVAL              RTIMER_ARCH_SECOND / 2500
//  198 #endif
//  199 
//  200 /* AFTER_ACK_DETECTECT_WAIT_TIME is the time to wait after a potential
//  201    ACK packet has been detected until we can read it out from the
//  202    radio. */
//  203 #ifdef CONTIKIMAC_CONF_AFTER_ACK_DETECTECT_WAIT_TIME
//  204 #define AFTER_ACK_DETECTECT_WAIT_TIME      CONTIKIMAC_CONF_AFTER_ACK_DETECTECT_WAIT_TIME
//  205 #else
//  206 #define AFTER_ACK_DETECTECT_WAIT_TIME      RTIMER_ARCH_SECOND / 1500
//  207 #endif
//  208 
//  209 /* MAX_PHASE_STROBE_TIME is the time that we transmit repeated packets
//  210    to a neighbor for which we have a phase lock. */
//  211 #define MAX_PHASE_STROBE_TIME              RTIMER_ARCH_SECOND / 60
//  212 
//  213 
//  214 /* SHORTEST_PACKET_SIZE is the shortest packet that ContikiMAC
//  215    allows. Packets have to be a certain size to be able to be detected
//  216    by two consecutive CCA checks, and here is where we define this
//  217    shortest size.
//  218    Padded packets will have the wrong ipv6 checksum unless CONTIKIMAC_HEADER
//  219    is used (on both sides) and the receiver will ignore them.
//  220    With no header, reduce to transmit a proper multicast RPL DIS. */
//  221 #ifdef CONTIKIMAC_CONF_SHORTEST_PACKET_SIZE
//  222 #define SHORTEST_PACKET_SIZE  CONTIKIMAC_CONF_SHORTEST_PACKET_SIZE
//  223 #else
//  224 #define SHORTEST_PACKET_SIZE               43
//  225 #endif
//  226 
//  227 
//  228 #define ACK_LEN 3
//  229 
//  230 #include <stdio.h>

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  231 static struct rtimer rt;
rt:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  232 static struct pt pt;
pt:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  233 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  234 static volatile uint8_t contikimac_is_on = 0;
contikimac_is_on:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  235 static volatile uint8_t contikimac_keep_radio_on = 0;
contikimac_keep_radio_on:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  236 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  237 static volatile unsigned char we_are_sending = 0;
we_are_sending:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  238 static volatile unsigned char radio_is_on = 0;
radio_is_on:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  239 
//  240 #define DEBUG 0
//  241 #if DEBUG
//  242 #include <stdio.h>
//  243 #define PRINTF(...) printf(__VA_ARGS__)
//  244 #define PRINTDEBUG(...) printf(__VA_ARGS__)
//  245 #else
//  246 #define PRINTF(...)
//  247 #define PRINTDEBUG(...)
//  248 #endif
//  249 
//  250 #if CONTIKIMAC_CONF_COMPOWER
//  251 static struct compower_activity current_packet;
//  252 #endif /* CONTIKIMAC_CONF_COMPOWER */
//  253 
//  254 #if WITH_PHASE_OPTIMIZATION
//  255 
//  256 #include "net/mac/phase.h"
//  257 
//  258 #endif /* WITH_PHASE_OPTIMIZATION */
//  259 
//  260 #define DEFAULT_STREAM_TIME (4 * CYCLE_TIME)
//  261 
//  262 #ifndef MIN
//  263 #define MIN(a, b) ((a) < (b)? (a) : (b))
//  264 #endif /* MIN */
//  265 
//  266 struct seqno {
//  267     rimeaddr_t sender;
//  268     uint8_t seqno;
//  269 };
//  270 
//  271 #ifdef NETSTACK_CONF_MAC_SEQNO_HISTORY
//  272 #define MAX_SEQNOS NETSTACK_CONF_MAC_SEQNO_HISTORY
//  273 #else /* NETSTACK_CONF_MAC_SEQNO_HISTORY */
//  274 #define MAX_SEQNOS 16
//  275 #endif /* NETSTACK_CONF_MAC_SEQNO_HISTORY */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  276 static struct seqno received_seqnos[MAX_SEQNOS];
received_seqnos:
        DS 48
        REQUIRE __INIT_XDATA_Z
//  277 
//  278 #if CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT
//  279 static struct timer broadcast_rate_timer;
//  280 static int broadcast_rate_counter;
//  281 #endif /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
//  282 
//  283 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284     static void
//  285 on(void)
on:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function on
        CODE
//  286 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  287     if(contikimac_is_on && radio_is_on == 0) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JZ      ??on_0
        MOV     DPTR,#radio_is_on
        MOVX    A,@DPTR
        JNZ     ??on_0
//  288         radio_is_on = 1;
        MOV     DPTR,#radio_is_on
        MOV     A,#0x1
        MOVX    @DPTR,A
//  289         NETSTACK_RADIO.on();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 16
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  290     }
//  291 }
??on_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//  292 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  293     static void
//  294 off(void)
off:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function off
        CODE
//  295 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  296     if(contikimac_is_on && radio_is_on != 0 &&
//  297             contikimac_keep_radio_on == 0) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JZ      ??off_0
        MOV     DPTR,#radio_is_on
        MOVX    A,@DPTR
        JZ      ??off_0
        MOV     DPTR,#contikimac_keep_radio_on
        MOVX    A,@DPTR
        JNZ     ??off_0
//  298         radio_is_on = 0;
        MOV     DPTR,#radio_is_on
        MOV     A,#0x0
        MOVX    @DPTR,A
//  299         NETSTACK_RADIO.off();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 18
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  300     }
//  301 }
??off_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  302 /*---------------------------------------------------------------------------*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  303 static volatile rtimer_clock_t cycle_start;
cycle_start:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  304 static char powercycle(struct rtimer *t, void *ptr);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305     static void
//  306 schedule_powercycle(struct rtimer *t, rtimer_clock_t time)
schedule_powercycle:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function schedule_powercycle
        CODE
//  307 {
        FUNCALL schedule_powercycle, rtimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  308     int r;
//  309 
//  310     if(contikimac_is_on) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??schedule_powercycle_0 & 0xFFFF
//  311 
//  312         if(RTIMER_CLOCK_LT(RTIMER_TIME(t) + time, RTIMER_NOW() + 2)) {
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R1,A
        MOV     A,0xe2
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,0xe3
        MOV     R6,A
        MOV     R7,#0x0
        CLR     A
        XCH     A,R6
        MOV     R7,A
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,R7
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??schedule_powercycle_1
//  313             time = RTIMER_NOW() - RTIMER_TIME(t) + 2;
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R4,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R5
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
//  314         }
//  315 
//  316         r = rtimer_set(t, RTIMER_TIME(t) + time, 1,
//  317                 (void (*)(struct rtimer *, void *))powercycle, NULL);
??schedule_powercycle_1:
        ; Setup parameters for call to function rtimer_set
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#??powercycle?relay & 0xff
        MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        LCALL   ??rtimer_set?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  318         if(r != RTIMER_OK) {
//  319             PRINTF("schedule_powercycle: could not set rtimer\n");
//  320         }
//  321     }
//  322 }
??schedule_powercycle_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  323 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  324     static void
//  325 schedule_powercycle_fixed(struct rtimer *t, rtimer_clock_t fixed_time)
schedule_powercycle_fixed:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function schedule_powercycle_fixed
        CODE
//  326 {
        FUNCALL schedule_powercycle_fixed, rtimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  327     int r;
//  328 
//  329     if(contikimac_is_on) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JZ      ??schedule_powercycle_fixed_0
//  330 
//  331         if(RTIMER_CLOCK_LT(fixed_time, RTIMER_NOW() + 1)) {
        MOV     A,0xe2
        MOV     R6,A
        MOV     R7,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R5
        SUBB    A,R1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??schedule_powercycle_fixed_1
//  332             fixed_time = RTIMER_NOW() + 1;
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R0,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
//  333         }
//  334 
//  335         r = rtimer_set(t, fixed_time, 1,
//  336                 (void (*)(struct rtimer *, void *))powercycle, NULL);
??schedule_powercycle_fixed_1:
        ; Setup parameters for call to function rtimer_set
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#??powercycle?relay & 0xff
        MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ??rtimer_set?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  337         if(r != RTIMER_OK) {
//  338             PRINTF("schedule_powercycle: could not set rtimer\n");
//  339         }
//  340     }
//  341 }
??schedule_powercycle_fixed_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  342 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  343     static void
//  344 powercycle_turn_radio_off(void)
powercycle_turn_radio_off:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function powercycle_turn_radio_off
        CODE
//  345 {
        FUNCALL powercycle_turn_radio_off, off
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  346 #if CONTIKIMAC_CONF_COMPOWER
//  347     uint8_t was_on = radio_is_on;
//  348 #endif /* CONTIKIMAC_CONF_COMPOWER */
//  349 
//  350     if(we_are_sending == 0 && we_are_receiving_burst == 0) {
        MOV     DPTR,#we_are_sending
        MOVX    A,@DPTR
        JNZ     ??powercycle_turn_radio_off_0
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??powercycle_turn_radio_off_0
//  351         off();
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  352 #if CONTIKIMAC_CONF_COMPOWER
//  353         if(was_on && !radio_is_on) {
//  354             compower_accumulate(&compower_idle_activity);
//  355         }
//  356 #endif /* CONTIKIMAC_CONF_COMPOWER */
//  357     }
//  358 }
??powercycle_turn_radio_off_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  359 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360     static void
//  361 powercycle_turn_radio_on(void)
powercycle_turn_radio_on:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function powercycle_turn_radio_on
        CODE
//  362 {
        FUNCALL powercycle_turn_radio_on, on
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  363     if(we_are_sending == 0 && we_are_receiving_burst == 0) {
        MOV     DPTR,#we_are_sending
        MOVX    A,@DPTR
        JNZ     ??powercycle_turn_radio_on_0
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??powercycle_turn_radio_on_0
//  364         on();
        ; Setup parameters for call to function on
        LCALL   ??on?relay
//  365     }
//  366 }
??powercycle_turn_radio_on_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  367 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  368     static char
//  369 powercycle(struct rtimer *t, void *ptr)
powercycle:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function powercycle
        CODE
//  370 {
        FUNCALL powercycle, powercycle_turn_radio_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, powercycle_turn_radio_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, schedule_powercycle_fixed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, powercycle_turn_radio_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, powercycle_turn_radio_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, schedule_powercycle_fixed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, powercycle_turn_radio_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL powercycle, schedule_powercycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  371 #if SYNC_CYCLE_STARTS
//  372     static volatile rtimer_clock_t sync_cycle_start;
//  373     static volatile uint8_t sync_cycle_phase;
//  374 #endif
//  375 
//  376     PT_BEGIN(&pt);
        MOV     R2,#0x1
        MOV     DPTR,#pt
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for powercycle>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??powercycle_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        426
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??powercycle_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        476
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??powercycle_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        504
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??powercycle_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??powercycle_4
        CODE
//  377 
//  378 #if SYNC_CYCLE_STARTS
//  379     sync_cycle_start = RTIMER_NOW();
??powercycle_0:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#??sync_cycle_start
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  380 #else
//  381     cycle_start = RTIMER_NOW();
//  382 #endif
//  383 
//  384     while(1) {
//  385         static uint8_t packet_seen;
//  386         static rtimer_clock_t t0;
//  387         static uint8_t count;
//  388 
//  389 #if SYNC_CYCLE_STARTS
//  390         /* Compute cycle start when RTIMER_ARCH_SECOND is not a multiple
//  391            of CHANNEL_CHECK_RATE */
//  392         if(sync_cycle_phase++ == NETSTACK_RDC_CHANNEL_CHECK_RATE) {
??powercycle_5:
        MOV     DPTR,#??sync_cycle_phase
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     DPTR,#??sync_cycle_phase
        MOVX    @DPTR,A
        MOV     A,#0x8
        XRL     A,R0
        JNZ     ??powercycle_6
//  393             sync_cycle_phase = 0;
        MOV     DPTR,#??sync_cycle_phase
        MOV     A,#0x0
        MOVX    @DPTR,A
//  394             sync_cycle_start += RTIMER_ARCH_SECOND;
        MOV     DPTR,#??sync_cycle_start
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x3d
        MOVX    @DPTR,A
//  395             cycle_start = sync_cycle_start;
        MOV     DPTR,#??sync_cycle_start
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#cycle_start
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??powercycle_7
//  396         } else {
//  397 #if (RTIMER_ARCH_SECOND * NETSTACK_RDC_CHANNEL_CHECK_RATE) > 65535
//  398             cycle_start = sync_cycle_start + ((unsigned long)(sync_cycle_phase*RTIMER_ARCH_SECOND))/NETSTACK_RDC_CHANNEL_CHECK_RATE;
??powercycle_6:
        MOV     DPTR,#??sync_cycle_start
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPTR,#??sync_cycle_phase
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,?V0 + 0
        MOV     B,#0x9
        MUL     AB
        XCH     A,?V0 + 0
        MOV     R0,B
        MOV     B,#0x3d
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x9
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     DPTR,#cycle_start
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  399 #else
//  400             cycle_start = sync_cycle_start + (sync_cycle_phase*RTIMER_ARCH_SECOND)/NETSTACK_RDC_CHANNEL_CHECK_RATE;
//  401 #endif
//  402         }
//  403 #else
//  404         cycle_start += CYCLE_TIME;
//  405 #endif
//  406 
//  407         packet_seen = 0;
??powercycle_7:
        MOV     DPTR,#??packet_seen
        MOV     A,#0x0
        MOVX    @DPTR,A
//  408 
//  409         for(count = 0; count < CCA_COUNT_MAX; ++count) {
        MOV     DPTR,#??count
        MOV     A,#0x0
        MOVX    @DPTR,A
??powercycle_8:
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JNC     ??powercycle_9
//  410             t0 = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#??t0
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  411             if(we_are_sending == 0 && we_are_receiving_burst == 0) {
        MOV     DPTR,#we_are_sending
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??powercycle_10 & 0xFFFF
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??powercycle_10 & 0xFFFF
//  412                 powercycle_turn_radio_on();
        ; Setup parameters for call to function powercycle_turn_radio_on
        LCALL   ??powercycle_turn_radio_on?relay
//  413                 /* Check if a packet is seen in the air. If so, we keep the
//  414                    radio on for a while (LISTEN_TIME_AFTER_PACKET_DETECTED) to
//  415                    be able to receive the packet. We also continuously check
//  416                    the radio medium to make sure that we wasn't woken up by a
//  417                    false positive: a spurious radio interference that was not
//  418                    caused by an incoming packet. */
//  419                 if(NETSTACK_RADIO.channel_clear() == 0) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??powercycle_11 & 0xFFFF
//  420                     packet_seen = 1;
        MOV     DPTR,#??packet_seen
        MOV     A,#0x1
        MOVX    @DPTR,A
//  421                     break;
//  422                 }
//  423                 powercycle_turn_radio_off();
//  424             }
//  425             schedule_powercycle_fixed(t, RTIMER_NOW() + CCA_SLEEP_TIME);
//  426             PT_YIELD(&pt);
//  427         }
//  428 
//  429         if(packet_seen) {
??powercycle_9:
        MOV     DPTR,#??packet_seen
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??powercycle_12 & 0xFFFF
//  430             static rtimer_clock_t start;
//  431             static uint8_t silence_periods, periods;
//  432             start = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#??start
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  433 
//  434             periods = silence_periods = 0;
        MOV     A,#0x0
        MOV     DPTR,#??silence_periods
        MOVX    @DPTR,A
        MOV     DPTR,#??periods
        MOVX    @DPTR,A
//  435             while(we_are_sending == 0 && radio_is_on &&
//  436                     RTIMER_CLOCK_LT(RTIMER_NOW(),
//  437                         (start + LISTEN_TIME_AFTER_PACKET_DETECTED))) {
??powercycle_13:
        MOV     DPTR,#we_are_sending
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??powercycle_14 & 0xFFFF
        MOV     DPTR,#radio_is_on
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??powercycle_14 & 0xFFFF
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#??start
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#-0x3d
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??powercycle_14 & 0xFFFF
//  438 
//  439                 /* Check for a number of consecutive periods of
//  440                    non-activity. If we see two such periods, we turn the
//  441                    radio off. Also, if a packet has been successfully
//  442                    received (as indicated by the
//  443                    NETSTACK_RADIO.pending_packet() function), we stop
//  444                    snooping. */
//  445 #if !RDC_CONF_HARDWARE_CSMA
//  446                 /* A cca cycle will disrupt rx on some radios, e.g. mc1322x, rf230 */
//  447                 /*TODO: Modify those drivers to just return the internal RSSI when already in rx mode */
//  448                 if(NETSTACK_RADIO.channel_clear()) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??powercycle_15
//  449                     ++silence_periods;
        MOV     DPTR,#??silence_periods
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??powercycle_16
//  450                 } else {
??powercycle_11:
        ; Setup parameters for call to function powercycle_turn_radio_off
        LCALL   ??powercycle_turn_radio_off?relay
??powercycle_10:
        ; Setup parameters for call to function schedule_powercycle_fixed
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x7
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??schedule_powercycle_fixed?relay
        MOV     R2,#0x0
        MOV     DPTR,#pt
        MOV     A,#-0x56
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
??powercycle_1:
        MOV     A,R2
        JNZ     ??powercycle_17
        MOV     R1,#0x1
        LJMP    ??powercycle_18 & 0xFFFF
??powercycle_17:
        MOV     DPTR,#??count
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??powercycle_8 & 0xFFFF
//  451                     silence_periods = 0;
??powercycle_15:
        MOV     DPTR,#??silence_periods
        MOV     A,#0x0
        MOVX    @DPTR,A
//  452                 }
//  453 #endif
//  454 
//  455                 ++periods;
??powercycle_16:
        MOV     DPTR,#??periods
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  456 
//  457                 if(NETSTACK_RADIO.receiving_packet()) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??powercycle_19
//  458                     silence_periods = 0;
        MOV     DPTR,#??silence_periods
        MOV     A,#0x0
        MOVX    @DPTR,A
//  459                 }
//  460                 if(silence_periods > MAX_SILENCE_PERIODS) {
??powercycle_19:
        MOV     DPTR,#??silence_periods
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??powercycle_20 & 0xFFFF
//  461                     powercycle_turn_radio_off();
        ; Setup parameters for call to function powercycle_turn_radio_off
        LCALL   ??powercycle_turn_radio_off?relay
//  462                     break;
//  463                 }
//  464                 if(WITH_FAST_SLEEP &&
//  465                         periods > MAX_NONACTIVITY_PERIODS &&
//  466                         !(NETSTACK_RADIO.receiving_packet() ||
//  467                             NETSTACK_RADIO.pending_packet())) {
//  468                     powercycle_turn_radio_off();
//  469                     break;
//  470                 }
//  471                 if(NETSTACK_RADIO.pending_packet()) {
//  472                     break;
//  473                 }
//  474 
//  475                 schedule_powercycle(t, CCA_CHECK_TIME + CCA_SLEEP_TIME);
//  476                 PT_YIELD(&pt);
//  477             }
//  478             if(radio_is_on) {
??powercycle_14:
        MOV     DPTR,#radio_is_on
        MOVX    A,@DPTR
        JZ      ??powercycle_12
//  479                 if(!(NETSTACK_RADIO.receiving_packet() ||
//  480                             NETSTACK_RADIO.pending_packet()) ||
//  481                         !RTIMER_CLOCK_LT(RTIMER_NOW(),
//  482                             (start + LISTEN_TIME_AFTER_PACKET_DETECTED))) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??powercycle_21
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??powercycle_22
??powercycle_21:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#??start
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#-0x3d
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??powercycle_12
//  483                     powercycle_turn_radio_off();
??powercycle_22:
        ; Setup parameters for call to function powercycle_turn_radio_off
        LCALL   ??powercycle_turn_radio_off?relay
//  484                 }
//  485             }
//  486         }
//  487 
//  488         if(RTIMER_CLOCK_LT(RTIMER_NOW() - cycle_start, CYCLE_TIME - CHECK_TIME * 4)) {
??powercycle_12:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#cycle_start
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x61
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x8
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??powercycle_5 & 0xFFFF
//  489             /* Schedule the next powercycle interrupt, or sleep the mcu
//  490                until then.  Sleeping will not exit from this interrupt, so
//  491                ensure an occasional wake cycle or foreground processing will
//  492                be blocked until a packet is detected */
//  493 #if RDC_CONF_MCU_SLEEP
//  494             static uint8_t sleepcycle;
//  495             if((sleepcycle++ < 16) && !we_are_sending && !radio_is_on) {
//  496                 rtimer_arch_sleep(CYCLE_TIME - (RTIMER_NOW() - cycle_start));
//  497             } else {
//  498                 sleepcycle = 0;
//  499                 schedule_powercycle_fixed(t, CYCLE_TIME + cycle_start);
//  500                 PT_YIELD(&pt);
//  501             }
//  502 #else
//  503             schedule_powercycle_fixed(t, CYCLE_TIME + cycle_start);
        ; Setup parameters for call to function schedule_powercycle_fixed
        MOV     DPTR,#cycle_start
        MOVX    A,@DPTR
        ADD     A,#-0x5f
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x7
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??schedule_powercycle_fixed?relay
//  504             PT_YIELD(&pt);
        MOV     R2,#0x0
        MOV     DPTR,#pt
        MOV     A,#-0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
??powercycle_3:
        MOV     A,R2
        JZ      $+5
        LJMP    ??powercycle_23 & 0xFFFF
        MOV     R1,#0x1
        LJMP    ??powercycle_18 & 0xFFFF
??powercycle_20:
        MOV     DPTR,#??periods
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xb
        JC      ??powercycle_24
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??powercycle_24
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??powercycle_24
        ; Setup parameters for call to function powercycle_turn_radio_off
        LCALL   ??powercycle_turn_radio_off?relay
        LJMP    ??powercycle_14 & 0xFFFF
??powercycle_24:
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??powercycle_14 & 0xFFFF
        ; Setup parameters for call to function schedule_powercycle
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??schedule_powercycle?relay
        MOV     R2,#0x0
        MOV     DPTR,#pt
        MOV     A,#-0x24
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
??powercycle_2:
        MOV     A,R2
        JNZ     ??powercycle_25
        MOV     R1,#0x1
        SJMP    ??powercycle_18
??powercycle_25:
        LJMP    ??powercycle_13 & 0xFFFF
??powercycle_23:
        LJMP    ??powercycle_5 & 0xFFFF
//  505 #endif
//  506         }
//  507     }
//  508 
//  509     PT_END(&pt);
??powercycle_4:
        MOV     R2,#0x0
        MOV     DPTR,#pt
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,#0x3
??powercycle_18:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  510 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??sync_cycle_start:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??sync_cycle_phase:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??packet_seen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??t0:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??count:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??start:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??silence_periods:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??periods:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  511 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  512     static int
//  513 broadcast_rate_drop(void)
broadcast_rate_drop:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function broadcast_rate_drop
        CODE
//  514 {
        ; Saved register size: 0
        ; Auto size: 0
//  515 #if CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT
//  516     if(!timer_expired(&broadcast_rate_timer)) {
//  517         broadcast_rate_counter++;
//  518         if(broadcast_rate_counter < CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT) {
//  519             return 0;
//  520         } else {
//  521             return 1;
//  522         }
//  523     } else {
//  524         timer_set(&broadcast_rate_timer, CLOCK_SECOND);
//  525         broadcast_rate_counter = 0;
//  526         return 0;
//  527     }
//  528 #else /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
//  529     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock7
//  530 #endif /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
//  531 }
//  532 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533     static int
//  534 send_packet(mac_callback_t mac_callback, void *mac_callback_ptr,
send_packet:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function send_packet
        CODE
//  535         struct rdc_buf_list *buf_list,
//  536         int is_receiver_awake)
//  537 {
        FUNCALL send_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_set_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, broadcast_rate_drop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_set_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_hdralloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_hdr_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_compact
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_hdr_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, phase_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, watchdog_periodic
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, watchdog_periodic
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, phase_update
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
//  538     rtimer_clock_t t0;
//  539     rtimer_clock_t encounter_time = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  540     int strobes;
//  541     uint8_t got_strobe_ack = 0;
        MOV     ?V0 + 4,#0x0
//  542     int hdrlen, len;
//  543     uint8_t is_broadcast = 0;
        MOV     ?V0 + 2,#0x0
//  544     uint8_t is_reliable = 0;
        MOV     ?V0 + 15,#0x0
//  545     uint8_t is_known_receiver = 0;
        MOV     ?V0 + 14,#0x0
//  546     uint8_t collisions;
//  547     int transmit_len;
//  548     int ret;
//  549     uint8_t contikimac_was_on;
//  550     uint8_t seqno;
//  551 #if WITH_CONTIKIMAC_HEADER
//  552     struct hdr *chdr;
//  553 #endif /* WITH_CONTIKIMAC_HEADER */
//  554 
//  555     /* Exit if RDC and radio were explicitly turned off */
//  556     if(!contikimac_is_on && !contikimac_keep_radio_on) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JNZ     ??send_packet_0
        MOV     DPTR,#contikimac_keep_radio_on
        MOVX    A,@DPTR
        JNZ     ??send_packet_0
//  557         PRINTF("contikimac: radio is turned off\n");
//  558         return MAC_TX_ERR_FATAL;
        MOV     R2,#0x5
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  559     }
//  560 
//  561     if(packetbuf_totlen() == 0) {
??send_packet_0:
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??send_packet_2
//  562         PRINTF("contikimac: send_packet data len 0\n");
//  563         return MAC_TX_ERR_FATAL;
        MOV     R2,#0x5
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  564     }
//  565 
//  566 #if !NETSTACK_CONF_BRIDGE_MODE
//  567     /* If NETSTACK_CONF_BRIDGE_MODE is set, assume PACKETBUF_ADDR_SENDER is already set. */
//  568     packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &rimeaddr_node_addr);
??send_packet_2:
        ; Setup parameters for call to function packetbuf_set_addr
        MOV     R2,#rimeaddr_node_addr & 0xff
        MOV     R3,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     R1,#0x18
        LCALL   ??packetbuf_set_addr?relay
//  569 #endif
//  570     if(rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &rimeaddr_null)) {
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??send_packet_3
//  571         is_broadcast = 1;
        MOV     ?V0 + 2,#0x1
//  572         PRINTDEBUG("contikimac: send broadcast\n");
//  573 
//  574         if(broadcast_rate_drop()) {
        ; Setup parameters for call to function broadcast_rate_drop
        LCALL   ??broadcast_rate_drop?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??send_packet_3
//  575             return MAC_TX_COLLISION;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  576         }
//  577     } else {
//  578 #if UIP_CONF_IPV6
//  579         PRINTDEBUG("contikimac: send unicast to %02x%02x:%02x%02x:%02x%02x:%02x%02x\n",
//  580                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
//  581                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[1],
//  582                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[2],
//  583                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[3],
//  584                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[4],
//  585                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[5],
//  586                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[6],
//  587                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[7]);
//  588 #else /* UIP_CONF_IPV6 */
//  589         PRINTDEBUG("contikimac: send unicast to %u.%u\n",
//  590                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
//  591                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[1]);
//  592 #endif /* UIP_CONF_IPV6 */
//  593     }
//  594     is_reliable = packetbuf_attr(PACKETBUF_ATTR_RELIABLE) ||
//  595         packetbuf_attr(PACKETBUF_ATTR_ERELIABLE);
??send_packet_3:
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xc
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??send_packet_4
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0x17
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??send_packet_5
??send_packet_4:
        MOV     A,#0x1
        SJMP    ??send_packet_6
??send_packet_5:
        MOV     A,#0x0
??send_packet_6:
        MOV     ?V0 + 15,A
//  596 
//  597     packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
        ; Setup parameters for call to function packetbuf_set_attr
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0xb
        LCALL   ??packetbuf_set_attr?relay
//  598 
//  599 #if WITH_CONTIKIMAC_HEADER
//  600     hdrlen = packetbuf_totlen();
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  601     if(packetbuf_hdralloc(sizeof(struct hdr)) == 0) {
        ; Setup parameters for call to function packetbuf_hdralloc
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??packetbuf_hdralloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??send_packet_7
//  602         /* Failed to allocate space for contikimac header */
//  603         PRINTF("contikimac: send failed, too large header\n");
//  604         return MAC_TX_ERR_FATAL;
        MOV     R2,#0x5
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  605     }
//  606     chdr = packetbuf_hdrptr();
??send_packet_7:
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
//  607     chdr->id = CONTIKIMAC_ID;
        MOV     A,#0x0
        MOVX    @DPTR,A
//  608     chdr->len = hdrlen;
        MOV     A,?V0 + 0
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  609 
//  610     /* Create the MAC header for the data packet. */
//  611     hdrlen = NETSTACK_FRAMER.create();
        ; Setup parameters for indirect call
        MOV     DPTR,#framer_802154
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  612     if(hdrlen < 0) {
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x0
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??send_packet_8
//  613         /* Failed to send */
//  614         PRINTF("contikimac: send failed, too large header\n");
//  615         packetbuf_hdr_remove(sizeof(struct hdr));
        ; Setup parameters for call to function packetbuf_hdr_remove
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??packetbuf_hdr_remove?relay
//  616         return MAC_TX_ERR_FATAL;
        MOV     R2,#0x5
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  617     }
//  618     hdrlen += sizeof(struct hdr);
??send_packet_8:
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  619 #else
//  620     /* Create the MAC header for the data packet. */
//  621     hdrlen = NETSTACK_FRAMER.create();
//  622     if(hdrlen < 0) {
//  623         /* Failed to send */
//  624         PRINTF("contikimac: send failed, too large header\n");
//  625         return MAC_TX_ERR_FATAL;
//  626     }
//  627 #endif
//  628 
//  629     /* Make sure that the packet is longer or equal to the shortest
//  630        packet length. */
//  631     transmit_len = packetbuf_totlen();
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  632     if(transmit_len < SHORTEST_PACKET_SIZE) {
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,#0x2b
        MOV     A,?V0 + 7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??send_packet_9
//  633         /* Pad with zeroes */
//  634         uint8_t *ptr;
//  635         ptr = packetbuf_dataptr();
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
//  636         memset(ptr + packetbuf_datalen(), 0, SHORTEST_PACKET_SIZE - packetbuf_totlen());
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R0,?V0 + 6
        MOV     R1,?V0 + 7
        ; Setup parameters for call to function memset
        MOV     A,#0x2b
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 6,A
        MOV     A,#0x0
        SUBB    A,R1
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 4
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 7
        MOV     R3,A
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  637 
//  638         PRINTF("contikimac: shorter than shortest (%d)\n", packetbuf_totlen());
//  639         transmit_len = SHORTEST_PACKET_SIZE;
        MOV     ?V0 + 6,#0x2b
        MOV     ?V0 + 7,#0x0
//  640     }
//  641 
//  642 
//  643     packetbuf_compact();
??send_packet_9:
        ; Setup parameters for call to function packetbuf_compact
        LCALL   ??packetbuf_compact?relay
//  644 
//  645 #ifdef NETSTACK_ENCRYPT
//  646     NETSTACK_ENCRYPT();
//  647 #endif /* NETSTACK_ENCRYPT */
//  648 
//  649     transmit_len = packetbuf_totlen();
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  650 
//  651     NETSTACK_RADIO.prepare(packetbuf_hdrptr(), transmit_len);
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     DPTR,#cc2530_rf_driver + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  652 
//  653     /* Remove the MAC-layer header since it will be recreated next time around. */
//  654     packetbuf_hdr_remove(hdrlen);
        ; Setup parameters for call to function packetbuf_hdr_remove
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??packetbuf_hdr_remove?relay
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  655 
//  656     if(!is_broadcast && !is_receiver_awake) {
        MOV     A,?V0 + 2
        JNZ     ??send_packet_10
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??send_packet_10
//  657 #if WITH_PHASE_OPTIMIZATION
//  658         ret = phase_wait(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  659                 CYCLE_TIME, GUARD_TIME,
//  660                 mac_callback, mac_callback_ptr, buf_list);
        ; Setup parameters for call to function phase_wait
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#-0x30
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#-0x5f
        MOV     R5,#0x7
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??phase_wait?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
//  661         if(ret == PHASE_DEFERRED) {
        MOV     A,#0x2
        XRL     A,?V0 + 0
        JNZ     ??send_packet_11
        MOV     A,#0x0
        XRL     A,?V0 + 1
??send_packet_11:
        JNZ     ??send_packet_12
//  662             return MAC_TX_DEFERRED;
        MOV     R2,#0x3
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  663         }
//  664         if(ret != PHASE_UNKNOWN) {
??send_packet_12:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??send_packet_10
//  665             is_known_receiver = 1;
        MOV     ?V0 + 14,#0x1
//  666         }
//  667 #endif /* WITH_PHASE_OPTIMIZATION */ 
//  668     }
//  669 
//  670 
//  671 
//  672     /* By setting we_are_sending to one, we ensure that the rtimer
//  673        powercycle interrupt do not interfere with us sending the packet. */
//  674     we_are_sending = 1;
??send_packet_10:
        MOV     DPTR,#we_are_sending
        MOV     A,#0x1
        MOVX    @DPTR,A
//  675 
//  676     /* If we have a pending packet in the radio, we should not send now,
//  677        because we will trash the received packet. Instead, we signal
//  678        that we have a collision, which lets the packet be received. This
//  679        packet will be retransmitted later by the MAC protocol
//  680        instread. */
//  681     if(NETSTACK_RADIO.receiving_packet() || NETSTACK_RADIO.pending_packet()) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??send_packet_13
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??send_packet_14
//  682         we_are_sending = 0;
??send_packet_13:
        MOV     DPTR,#we_are_sending
        MOV     A,#0x0
        MOVX    @DPTR,A
//  683         PRINTF("contikimac: collision receiving %d, pending %d\n",
//  684                 NETSTACK_RADIO.receiving_packet(), NETSTACK_RADIO.pending_packet());
//  685         return MAC_TX_COLLISION;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  686     }
//  687 
//  688     /* Switch off the radio to ensure that we didn't start sending while
//  689        the radio was doing a channel check. */
//  690     off();
??send_packet_14:
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  691 
//  692 
//  693     strobes = 0;
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
//  694 
//  695     /* Send a train of strobes until the receiver answers with an ACK. */
//  696     collisions = 0;
        MOV     ?V0 + 3,#0x0
//  697 
//  698     got_strobe_ack = 0;
        MOV     ?V0 + 4,#0x0
//  699 
//  700     /* Set contikimac_is_on to one to allow the on() and off() functions
//  701        to control the radio. We restore the old value of
//  702        contikimac_is_on when we are done. */
//  703     contikimac_was_on = contikimac_is_on;
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  704     contikimac_is_on = 1;
        MOV     DPTR,#contikimac_is_on
        MOV     A,#0x1
        MOVX    @DPTR,A
//  705 
//  706 #if !RDC_CONF_HARDWARE_CSMA
//  707     /* Check if there are any transmissions by others. */
//  708     /* TODO: why does this give collisions before sending with the mc1322x? */
//  709     if(is_receiver_awake == 0) {
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??send_packet_15 & 0xFFFF
//  710         int i;
//  711         for(i = 0; i < CCA_COUNT_MAX_TX; ++i) {
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??send_packet_16
//  712             t0 = RTIMER_NOW();
//  713             on();
//  714 #if CCA_CHECK_TIME > 0
//  715             while(RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + CCA_CHECK_TIME)) { }
//  716 #endif
//  717             if(NETSTACK_RADIO.channel_clear() == 0) {
//  718                 collisions++;
//  719                 off();
//  720                 break;
//  721             }
//  722             off();
??send_packet_17:
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  723             t0 = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
//  724             while(RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + CCA_SLEEP_TIME)) { }
??send_packet_18:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0x7
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_packet_18
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??send_packet_16:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x6
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??send_packet_15
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
        ; Setup parameters for call to function on
        LCALL   ??on?relay
??send_packet_19:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_packet_19
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JZ      $+5
        LJMP    ??send_packet_17 & 0xFFFF
        INC     ?V0 + 3
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  725         }
//  726     }
//  727 
//  728     if(collisions > 0) {
??send_packet_15:
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x1
        JC      ??send_packet_20
//  729         we_are_sending = 0;
        MOV     DPTR,#we_are_sending
        MOV     A,#0x0
        MOVX    @DPTR,A
//  730         off();
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  731         PRINTF("contikimac: collisions before sending\n");
//  732         contikimac_is_on = contikimac_was_on;
        MOV     A,?V0 + 5
        MOV     DPTR,#contikimac_is_on
        MOVX    @DPTR,A
//  733         return MAC_TX_COLLISION;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??send_packet_1 & 0xFFFF
//  734     }
//  735 #endif /* RDC_CONF_HARDWARE_CSMA */
//  736 
//  737 #if !RDC_CONF_HARDWARE_ACK
//  738     if(!is_broadcast) {
??send_packet_20:
        MOV     A,?V0 + 2
        JNZ     ??send_packet_21
//  739         /* Turn radio on to receive expected unicast ack.  Not necessary
//  740            with hardware ack detection, and may trigger an unnecessary cca
//  741            or rx cycle */
//  742         on();
        ; Setup parameters for call to function on
        LCALL   ??on?relay
//  743     }
//  744 #endif
//  745 
//  746     watchdog_periodic();
??send_packet_21:
        ; Setup parameters for call to function watchdog_periodic
        LCALL   ??watchdog_periodic?relay
//  747     t0 = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
//  748     seqno = packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO);
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xa
        LCALL   ??packetbuf_attr?relay
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  749     for(strobes = 0, collisions = 0;
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??send_packet_22
//  750             got_strobe_ack == 0 && collisions == 0 &&
//  751             RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + STROBE_TIME); strobes++) {
//  752 
//  753         watchdog_periodic();
//  754 
//  755         if(!is_broadcast && (is_receiver_awake || is_known_receiver) &&
//  756                 !RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + MAX_PHASE_STROBE_TIME)) {
//  757             PRINTF("miss to %d\n", packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0]);
//  758             break;
//  759         }
//  760 
//  761         len = 0;
//  762 
//  763         {
//  764             rtimer_clock_t wt;
//  765             rtimer_clock_t txtime;
//  766             int ret;
//  767 
//  768             txtime = RTIMER_NOW();
//  769             ret = NETSTACK_RADIO.transmit(transmit_len);
//  770 
//  771 #if RDC_CONF_HARDWARE_ACK
//  772             /* For radios that block in the transmit routine and detect the
//  773                ACK in hardware */
//  774             if(ret == RADIO_TX_OK) {
//  775                 if(!is_broadcast) {
//  776                     got_strobe_ack = 1;
//  777                     encounter_time = txtime;
//  778                     break;
//  779                 }
//  780             } else if (ret == RADIO_TX_NOACK) {
//  781             } else if (ret == RADIO_TX_COLLISION) {
//  782                 PRINTF("contikimac: collisions while sending\n");
//  783                 collisions++;
//  784             }
//  785             wt = RTIMER_NOW();
//  786             while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + INTER_PACKET_INTERVAL)) { }
//  787 #else /* RDC_CONF_HARDWARE_ACK */
//  788             /* Wait for the ACK packet */
//  789             wt = RTIMER_NOW();
//  790             while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + INTER_PACKET_INTERVAL)) { }
//  791 
//  792             if(!is_broadcast && (NETSTACK_RADIO.receiving_packet() ||
//  793                         NETSTACK_RADIO.pending_packet() ||
//  794                         NETSTACK_RADIO.channel_clear() == 0)) {
//  795                 uint8_t ackbuf[ACK_LEN];
//  796                 wt = RTIMER_NOW();
//  797                 while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + AFTER_ACK_DETECTECT_WAIT_TIME)) { }
//  798 
//  799                 len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
//  800                 if(len == ACK_LEN && seqno == ackbuf[ACK_LEN - 1]) {
//  801                     got_strobe_ack = 1;
//  802                     encounter_time = txtime;
//  803                     break;
//  804                 } else {
//  805                     PRINTF("contikimac: collisions while sending\n");
//  806                     collisions++;
??send_packet_23:
        INC     ?V0 + 3
//  807                 }
??send_packet_24:
        MOV     A,?V0 + 8
        ADD     A,#0x1
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
??send_packet_22:
        MOV     A,?V0 + 4
        JZ      $+5
        LJMP    ??send_packet_25 & 0xFFFF
        MOV     A,?V0 + 3
        JZ      $+5
        LJMP    ??send_packet_25 & 0xFFFF
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#-0x3f
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x7
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??send_packet_25 & 0xFFFF
        ; Setup parameters for call to function watchdog_periodic
        LCALL   ??watchdog_periodic?relay
        MOV     A,?V0 + 2
        JNZ     ??send_packet_26
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??send_packet_27
        MOV     A,?V0 + 14
        JZ      ??send_packet_26
??send_packet_27:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0x4
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??send_packet_25 & 0xFFFF
??send_packet_26:
        MOV     ?V0 + 12,#0x0
        MOV     ?V0 + 13,#0x0
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V0 + 1,A
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     DPTR,#cc2530_rf_driver + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
??send_packet_28:
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        MOV     R2,A
        MOV     A,R3
        SUBB    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x0
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_packet_28
        MOV     A,?V0 + 2
        JZ      $+5
        LJMP    ??send_packet_24 & 0xFFFF
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     ??send_packet_29
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     ??send_packet_29
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      $+5
        LJMP    ??send_packet_24 & 0xFFFF
??send_packet_29:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
??send_packet_30:
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,#0xa
        MOV     R2,A
        MOV     A,R3
        SUBB    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x0
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_packet_30
        ; Setup parameters for indirect call
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#cc2530_rf_driver + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 12,?V0 + 10
        MOV     ?V0 + 13,?V0 + 11
        MOV     A,#0x3
        XRL     A,?V0 + 12
        JNZ     ??send_packet_31
        MOV     A,#0x0
        XRL     A,?V0 + 13
??send_packet_31:
        JZ      $+5
        LJMP    ??send_packet_23 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??send_packet_23 & 0xFFFF
        MOV     ?V0 + 4,#0x1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  808             }
//  809 #endif /* RDC_CONF_HARDWARE_ACK */
//  810         }
//  811     }
//  812 
//  813     off();
??send_packet_25:
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  814 
//  815     PRINTF("contikimac: send (strobes=%u, len=%u, %s, %s), done\n", strobes,
//  816             packetbuf_totlen(),
//  817             got_strobe_ack ? "ack" : "no ack",
//  818             collisions ? "collision" : "no collision");
//  819 
//  820 #if CONTIKIMAC_CONF_COMPOWER
//  821     /* Accumulate the power consumption for the packet transmission. */
//  822     compower_accumulate(&current_packet);
//  823 
//  824     /* Convert the accumulated power consumption for the transmitted
//  825        packet to packet attributes so that the higher levels can keep
//  826        track of the amount of energy spent on transmitting the
//  827        packet. */
//  828     compower_attrconv(&current_packet);
//  829 
//  830     /* Clear the accumulated power consumption so that it is ready for
//  831        the next packet. */
//  832     compower_clear(&current_packet);
//  833 #endif /* CONTIKIMAC_CONF_COMPOWER */
//  834 
//  835     contikimac_is_on = contikimac_was_on;
        MOV     A,?V0 + 5
        MOV     DPTR,#contikimac_is_on
        MOVX    @DPTR,A
//  836     we_are_sending = 0;
        MOV     DPTR,#we_are_sending
        MOV     A,#0x0
        MOVX    @DPTR,A
//  837 
//  838     /* Determine the return value that we will return from the
//  839        function. We must pass this value to the phase module before we
//  840        return from the function.  */
//  841     if(collisions > 0) {
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x1
        JC      ??send_packet_32
//  842         ret = MAC_TX_COLLISION;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        SJMP    ??send_packet_33
//  843     } else if(!is_broadcast && !got_strobe_ack) {
??send_packet_32:
        MOV     A,?V0 + 2
        JNZ     ??send_packet_34
        MOV     A,?V0 + 4
        JNZ     ??send_packet_34
//  844         ret = MAC_TX_NOACK;
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        SJMP    ??send_packet_33
//  845     } else {
//  846         ret = MAC_TX_OK;
??send_packet_34:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  847     }
//  848 
//  849 #if WITH_PHASE_OPTIMIZATION
//  850     if(is_known_receiver && got_strobe_ack) {
//  851         PRINTF("no miss %d wake-ups %d\n",
//  852                 packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
//  853                 strobes);
//  854     }
//  855 
//  856     if(!is_broadcast) {
??send_packet_33:
        MOV     A,?V0 + 2
        JNZ     ??send_packet_35
//  857         if(collisions == 0 && is_receiver_awake == 0) {
        MOV     A,?V0 + 3
        JNZ     ??send_packet_35
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??send_packet_35
//  858             phase_update(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  859                     encounter_time, ret);
        ; Setup parameters for call to function phase_update
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??phase_update?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  860         }
//  861     }
//  862 #endif /* WITH_PHASE_OPTIMIZATION */
//  863 
//  864     return ret;
??send_packet_35:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
??send_packet_1:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  865 }
//  866 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  867     static void
//  868 qsend_packet(mac_callback_t sent, void *ptr)
qsend_packet:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function qsend_packet
        CODE
//  869 {
        FUNCALL qsend_packet, send_packet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_packet, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  870     int ret = send_packet(sent, ptr, NULL, 0);
        ; Setup parameters for call to function send_packet
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??send_packet?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  871     if(ret != MAC_TX_DEFERRED) {
        MOV     A,#0x3
        XRL     A,?V0 + 2
        JNZ     ??qsend_packet_0
        MOV     A,#0x0
        XRL     A,?V0 + 3
??qsend_packet_0:
        JZ      ??qsend_packet_1
//  872         mac_call_sent_callback(sent, ptr, ret, 1);
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  873     }
//  874 }
??qsend_packet_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  875 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  876     static void
//  877 qsend_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
qsend_list:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function qsend_list
        CODE
//  878 {
        FUNCALL qsend_list, queuebuf_to_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, list_item_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, queuebuf_to_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, packetbuf_set_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, send_packet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL qsend_list, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  879     struct rdc_buf_list *curr = buf_list;
//  880     struct rdc_buf_list *next;
//  881     int ret;
//  882     int is_receiver_awake;
//  883 
//  884     if(curr == NULL) {
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??qsend_list_0 & 0xFFFF
//  885         return;
//  886     }
//  887     /* Do not send during reception of a burst */
//  888     if(we_are_receiving_burst) {
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??qsend_list_1
//  889         /* Prepare the packetbuf for callback */
//  890         queuebuf_to_packetbuf(curr->buf);
        ; Setup parameters for call to function queuebuf_to_packetbuf
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_to_packetbuf?relay
//  891         /* Return COLLISION so the MAC may try again later */
//  892         mac_call_sent_callback(sent, ptr, MAC_TX_COLLISION, 1);
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  893         return;
        LJMP    ??qsend_list_0 & 0xFFFF
//  894     }
//  895     /* The receiver needs to be awoken before we send */
//  896     is_receiver_awake = 0;
??qsend_list_1:
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//  897     do { /* A loop sending a burst of packets from buf_list */
//  898         next = list_item_next(curr);
??qsend_list_2:
        ; Setup parameters for call to function list_item_next
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??list_item_next?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 2,?V0 + 8
        MOV     ?V0 + 3,?V0 + 9
//  899 
//  900         /* Prepare the packetbuf */
//  901         queuebuf_to_packetbuf(curr->buf);
        ; Setup parameters for call to function queuebuf_to_packetbuf
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_to_packetbuf?relay
//  902         if(next != NULL) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??qsend_list_3
//  903             packetbuf_set_attr(PACKETBUF_ATTR_PENDING, 1);
        ; Setup parameters for call to function packetbuf_set_attr
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x12
        LCALL   ??packetbuf_set_attr?relay
//  904         }
//  905 
//  906         /* Send the current packet */
//  907         ret = send_packet(sent, ptr, curr, is_receiver_awake);
??qsend_list_3:
        ; Setup parameters for call to function send_packet
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??send_packet?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     ?V0 + 8,?V0 + 10
        MOV     ?V0 + 9,?V0 + 11
//  908         if(ret != MAC_TX_DEFERRED) {
        MOV     A,#0x3
        XRL     A,?V0 + 8
        JNZ     ??qsend_list_4
        MOV     A,#0x0
        XRL     A,?V0 + 9
??qsend_list_4:
        JZ      ??qsend_list_5
//  909             mac_call_sent_callback(sent, ptr, ret, 1);
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     ?V0 + 10,#0x1
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  910         }
//  911 
//  912         if(ret == MAC_TX_OK) {
??qsend_list_5:
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??qsend_list_6
//  913             if(next != NULL) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??qsend_list_7
//  914                 /* We're in a burst, no need to wake the receiver up again */
//  915                 is_receiver_awake = 1;
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
//  916                 curr = next;
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,?V0 + 3
        SJMP    ??qsend_list_7
//  917             }
//  918         } else {
//  919             /* The transmission failed, we stop the burst */
//  920             next = NULL;
??qsend_list_6:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  921         }
//  922     } while(next != NULL);
??qsend_list_7:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??qsend_list_2 & 0xFFFF
//  923 }
??qsend_list_0:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  924 /*---------------------------------------------------------------------------*/
//  925 /* Timer callback triggered when receiving a burst, after having
//  926    waited for a next packet for a too long time. Turns the radio off
//  927    and leaves burst reception mode */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  928     static void
//  929 recv_burst_off(void *ptr)
recv_burst_off:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function recv_burst_off
        CODE
//  930 {
        FUNCALL recv_burst_off, off
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  931     off();
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  932     we_are_receiving_burst = 0;
        MOV     DPTR,#we_are_receiving_burst
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  933 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock11
//  934 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  935     static void
//  936 input_packet(void)
input_packet:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function input_packet
        CODE
//  937 {
        FUNCALL input_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_hdrreduce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_set_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, ctimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, ctimer_stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL input_packet, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  938     static struct ctimer ct;
//  939     if(!we_are_receiving_burst) {
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??input_packet_0
//  940         off();
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  941     }
//  942 
//  943     /*  printf("cycle_start 0x%02x 0x%02x\n", cycle_start, cycle_start % CYCLE_TIME);*/
//  944 
//  945 #ifdef NETSTACK_DECRYPT
//  946     NETSTACK_DECRYPT();
//  947 #endif /* NETSTACK_DECRYPT */
//  948 
//  949     if(packetbuf_totlen() > 0 && NETSTACK_FRAMER.parse() >= 0) {
??input_packet_0:
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??input_packet_1 & 0xFFFF
        ; Setup parameters for indirect call
        MOV     DPTR,#framer_802154 + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x0
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??input_packet_1 & 0xFFFF
//  950 
//  951 #if WITH_CONTIKIMAC_HEADER
//  952         struct hdr *chdr;
//  953         chdr = packetbuf_dataptr();
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  954         if(chdr->id != CONTIKIMAC_ID) {
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??input_packet_1 & 0xFFFF
//  955             PRINTF("contikimac: failed to parse hdr (%u)\n", packetbuf_totlen());
//  956             return;
//  957         }
//  958         packetbuf_hdrreduce(sizeof(struct hdr));
        ; Setup parameters for call to function packetbuf_hdrreduce
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??packetbuf_hdrreduce?relay
//  959         packetbuf_set_datalen(chdr->len);
        ; Setup parameters for call to function packetbuf_set_datalen
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??packetbuf_set_datalen?relay
//  960 #endif /* WITH_CONTIKIMAC_HEADER */
//  961 
//  962         if(packetbuf_datalen() > 0 &&
//  963                 packetbuf_totlen() > 0 &&
//  964                 (rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  965                               &rimeaddr_node_addr) ||
//  966                  rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  967                      &rimeaddr_null))) {
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??input_packet_1 & 0xFFFF
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??input_packet_1 & 0xFFFF
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??input_packet_2
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??input_packet_1 & 0xFFFF
//  968             /* This is a regular packet that is destined to us or to the
//  969                broadcast address. */
//  970 
//  971             /* If FRAME_PENDING is set, we are receiving a packets in a burst */
//  972             we_are_receiving_burst = packetbuf_attr(PACKETBUF_ATTR_PENDING);
??input_packet_2:
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0x12
        LCALL   ??packetbuf_attr?relay
        MOV     DPTR,#we_are_receiving_burst
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  973             if(we_are_receiving_burst) {
        MOV     DPTR,#we_are_receiving_burst
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??input_packet_3
//  974                 on();
        ; Setup parameters for call to function on
        LCALL   ??on?relay
//  975                 /* Set a timer to turn the radio off in case we do not receive
//  976                    a next packet */
//  977                 ctimer_set(&ct, INTER_PACKET_DEADLINE, recv_burst_off, NULL);
        ; Setup parameters for call to function ctimer_set
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#??recv_burst_off?relay & 0xff
        MOV     ?V0 + 1,#(??recv_burst_off?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#??ct & 0xff
        MOV     R3,#(??ct >> 8) & 0xff
        LCALL   ??ctimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??input_packet_4
//  978             } else {
//  979                 off();
??input_packet_3:
        ; Setup parameters for call to function off
        LCALL   ??off?relay
//  980                 ctimer_stop(&ct);
        ; Setup parameters for call to function ctimer_stop
        MOV     R2,#??ct & 0xff
        MOV     R3,#(??ct >> 8) & 0xff
        LCALL   ??ctimer_stop?relay
//  981             }
//  982 
//  983             /* Check for duplicate packet by comparing the sequence number
//  984                of the incoming packet with the last few ones we saw. */
//  985             {
//  986                 int i;
//  987                 for(i = 0; i < MAX_SEQNOS; ++i) {
??input_packet_4:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??input_packet_5
??input_packet_6:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??input_packet_5:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x10
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??input_packet_7 & 0xFFFF
//  988                     if(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno &&
//  989                             rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
//  990                                 &received_seqnos[i].sender)) {
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xd
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#(received_seqnos + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((received_seqnos + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        XRL     A,R2
        JNZ     ??input_packet_8
        MOV     A,R1
        XRL     A,R3
??input_packet_8:
        JNZ     ??input_packet_6
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#received_seqnos & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(received_seqnos >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x18
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??input_packet_6 & 0xFFFF
//  991                         /* Drop the packet. */
//  992                         /*        printf("Drop duplicate ContikiMAC layer packet\n");*/
//  993                         return;
        LJMP    ??input_packet_1 & 0xFFFF
//  994                     }
//  995                 }
//  996                 for(i = MAX_SEQNOS - 1; i > 0; --i) {
??input_packet_7:
        MOV     ?V0 + 0,#0xf
        MOV     ?V0 + 1,#0x0
        SJMP    ??input_packet_9
//  997                     memcpy(&received_seqnos[i], &received_seqnos[i - 1],
//  998                             sizeof(struct seqno));
??input_packet_10:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,#0x3
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(received_seqnos + 253) & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#((received_seqnos - 3) >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#received_seqnos & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(received_seqnos >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  999                 }
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
??input_packet_9:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x1
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??input_packet_10
// 1000                 received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xd
        LCALL   ??packetbuf_attr?relay
        MOV     A,R2
        MOV     DPTR,#received_seqnos + 2
        MOVX    @DPTR,A
// 1001                 rimeaddr_copy(&received_seqnos[0].sender,
// 1002                         packetbuf_addr(PACKETBUF_ADDR_SENDER));
        ; Setup parameters for call to function rimeaddr_copy
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x18
        LCALL   ??packetbuf_addr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#received_seqnos & 0xff
        MOV     R3,#(received_seqnos >> 8) & 0xff
        LCALL   ??rimeaddr_copy?relay
// 1003             }
// 1004 
// 1005 #if CONTIKIMAC_CONF_COMPOWER
// 1006             /* Accumulate the power consumption for the packet reception. */
// 1007             compower_accumulate(&current_packet);
// 1008             /* Convert the accumulated power consumption for the received
// 1009                packet to packet attributes so that the higher levels can
// 1010                keep track of the amount of energy spent on receiving the
// 1011                packet. */
// 1012             compower_attrconv(&current_packet);
// 1013 
// 1014             /* Clear the accumulated power consumption so that it is ready
// 1015                for the next packet. */
// 1016             compower_clear(&current_packet);
// 1017 #endif /* CONTIKIMAC_CONF_COMPOWER */
// 1018 
// 1019             PRINTDEBUG("contikimac: data (%u)\n", packetbuf_datalen());
// 1020             NETSTACK_MAC.input();
        ; Setup parameters for indirect call
        MOV     DPTR,#nullmac_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
// 1021             return;
// 1022         } else {
// 1023             PRINTDEBUG("contikimac: data not for us\n");
// 1024         }
// 1025     } else {
// 1026         PRINTF("contikimac: failed to parse (%u)\n", packetbuf_totlen());
// 1027     }
// 1028 }
??input_packet_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??ct:
        DS 16
        REQUIRE __INIT_XDATA_Z
// 1029 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1030     static void
// 1031 init(void)
init:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function init
        CODE
// 1032 {
        FUNCALL init, rtimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, phase_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1033     radio_is_on = 0;
        MOV     DPTR,#radio_is_on
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1034     PT_INIT(&pt);
        MOV     DPTR,#pt
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1035 
// 1036     rtimer_set(&rt, RTIMER_NOW() + CYCLE_TIME, 1,
// 1037             (void (*)(struct rtimer *, void *))powercycle, NULL);
        ; Setup parameters for call to function rtimer_set
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#??powercycle?relay & 0xff
        MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x5f
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x7
        MOV     R5,A
        MOV     R2,#rt & 0xff
        MOV     R3,#(rt >> 8) & 0xff
        LCALL   ??rtimer_set?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1038 
// 1039     contikimac_is_on = 1;
        MOV     DPTR,#contikimac_is_on
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1040 
// 1041 #if WITH_PHASE_OPTIMIZATION
// 1042     phase_init();
        ; Setup parameters for call to function phase_init
        LCALL   ??phase_init?relay
// 1043 #endif /* WITH_PHASE_OPTIMIZATION */
// 1044 
// 1045 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
        REQUIRE T1CNTL
        REQUIRE T1CNTH
// 1046 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1047     static int
// 1048 turn_on(void)
turn_on:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function turn_on
        CODE
// 1049 {
        FUNCALL turn_on, rtimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1050     if(contikimac_is_on == 0) {
        MOV     DPTR,#contikimac_is_on
        MOVX    A,@DPTR
        JNZ     ??turn_on_0
// 1051         contikimac_is_on = 1;
        MOV     DPTR,#contikimac_is_on
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1052         contikimac_keep_radio_on = 0;
        MOV     DPTR,#contikimac_keep_radio_on
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1053         rtimer_set(&rt, RTIMER_NOW() + CYCLE_TIME, 1,
// 1054                 (void (*)(struct rtimer *, void *))powercycle, NULL);
        ; Setup parameters for call to function rtimer_set
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#??powercycle?relay & 0xff
        MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x5f
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x7
        MOV     R5,A
        MOV     R2,#rt & 0xff
        MOV     R3,#(rt >> 8) & 0xff
        LCALL   ??rtimer_set?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1055     }
// 1056     return 1;
??turn_on_0:
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
        REQUIRE T1CNTL
        REQUIRE T1CNTH
// 1057 }
// 1058 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1059     static int
// 1060 turn_off(int keep_radio_on)
turn_off:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function turn_off
        CODE
// 1061 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1062     contikimac_is_on = 0;
        MOV     DPTR,#contikimac_is_on
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1063     contikimac_keep_radio_on = keep_radio_on;
        MOV     A,R2
        MOV     DPTR,#contikimac_keep_radio_on
        MOVX    @DPTR,A
// 1064     if(keep_radio_on) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??turn_off_0
// 1065         radio_is_on = 1;
        MOV     DPTR,#radio_is_on
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1066         return NETSTACK_RADIO.on();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 16
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        SJMP    ??turn_off_1
// 1067     } else {
// 1068         radio_is_on = 0;
??turn_off_0:
        MOV     DPTR,#radio_is_on
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1069         return NETSTACK_RADIO.off();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 18
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??turn_off_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock15
// 1070     }
// 1071 }
// 1072 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1073     static unsigned short
// 1074 duty_cycle(void)
duty_cycle:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function duty_cycle
        CODE
// 1075 {
        ; Saved register size: 0
        ; Auto size: 0
// 1076     return (1ul * CLOCK_SECOND * CYCLE_TIME) / RTIMER_ARCH_SECOND;
        MOV     R2,#0xf
        MOV     R3,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock16
// 1077 }

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "ContikiMAC">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "ContikiMAC">>`
        REQUIRE __INIT_XDATA_I
// 1078 /*---------------------------------------------------------------------------*/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
// 1079 const struct rdc_driver contikimac_driver = {
contikimac_driver:
        DS 16
        REQUIRE `?<Initializer for contikimac_driver>`
        REQUIRE __INIT_XDATA_I
// 1080     "ContikiMAC",
// 1081     init,
// 1082     qsend_packet,
// 1083     qsend_list,
// 1084     input_packet,
// 1085     turn_on,
// 1086     turn_off,
// 1087     duty_cycle,
// 1088 };
// 1089 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1090     uint16_t
// 1091 contikimac_debug_print(void)
contikimac_debug_print:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function contikimac_debug_print
        CODE
// 1092 {
        ; Saved register size: 0
        ; Auto size: 0
// 1093     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock17
// 1094 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ContikiMAC">>`:
        DB "ContikiMAC"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for contikimac_driver>`:
        DATA16
        DW `?<Constant "ContikiMAC">`
        DW ??init?relay
        DW ??qsend_packet?relay
        DW ??qsend_list?relay
        DW ??input_packet?relay
        DW ??turn_on?relay
        DW ??turn_off?relay
        DW ??duty_cycle?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??on?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    on

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??schedule_powercycle?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    schedule_powercycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??schedule_powercycle_fixed?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    schedule_powercycle_fixed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??powercycle_turn_radio_off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powercycle_turn_radio_off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??powercycle_turn_radio_on?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powercycle_turn_radio_on

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??powercycle?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powercycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??broadcast_rate_drop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    broadcast_rate_drop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??qsend_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    qsend_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??qsend_list?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    qsend_list

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??recv_burst_off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    recv_burst_off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??input_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    input_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??turn_on?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    turn_on

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??turn_off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    turn_off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??duty_cycle?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    duty_cycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??contikimac_debug_print?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    contikimac_debug_print

        END
// 1095 /*---------------------------------------------------------------------------*/
// 
// 4 427 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    27 bytes in segment XDATA_I
//    27 bytes in segment XDATA_ID
//    91 bytes in segment XDATA_Z
// 
// 4 562 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//   118 bytes of XDATA memory
//
//Errors: none
//Warnings: none
