###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:41 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\net\rpl\rpl-icmp6.c          #
#    Command line       =  D:\myWork\myWork\core\net\rpl\rpl-icmp6.c -D       #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\rpl-icmp6.lst                               #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\rpl-icmp6.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\net\rpl\rpl-icmp6.c
      1          /**
      2           * \addtogroup uip6
      3           * @{
      4           */
      5          /*
      6           * Copyright (c) 2010, Swedish Institute of Computer Science.
      7           * All rights reserved.
      8           *
      9           * Redistribution and use in source and binary forms, with or without
     10           * modification, are permitted provided that the following conditions
     11           * are met:
     12           * 1. Redistributions of source code must retain the above copyright
     13           *    notice, this list of conditions and the following disclaimer.
     14           * 2. Redistributions in binary form must reproduce the above copyright
     15           *    notice, this list of conditions and the following disclaimer in the
     16           *    documentation and/or other materials provided with the distribution.
     17           * 3. Neither the name of the Institute nor the names of its contributors
     18           *    may be used to endorse or promote products derived from this software
     19           *    without specific prior written permission.
     20           *
     21           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     22           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     24           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     25           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     27           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     28           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     29           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     30           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     31           * SUCH DAMAGE.
     32           *
     33           * This file is part of the Contiki operating system.
     34           *
     35           */
     36          /**
     37           * \file
     38           *         ICMP6 I/O for RPL control messages.
     39           *
     40           * \author Joakim Eriksson <joakime@sics.se>, Nicolas Tsiftes <nvt@sics.se>
     41           * Contributors: Niclas Finne <nfi@sics.se>, Joel Hoglund <joel@sics.se>,
     42           *               Mathieu Pouillot <m.pouillot@watteco.com>
     43           */
     44          
     45          #include "net/tcpip.h"
     46          #include "net/uip.h"
     47          #include "net/uip-ds6.h"
     48          #include "net/uip-nd6.h"
     49          #include "net/uip-icmp6.h"
     50          #include "net/rpl/rpl-private.h"
     51          #include "net/packetbuf.h"
     52          
     53          #include <limits.h>
     54          #include <string.h>
     55          
     56          #define DEBUG DEBUG_NONE
     57          
     58          #include "net/uip-debug.h"
     59          
     60          #if UIP_CONF_IPV6
     61          /*---------------------------------------------------------------------------*/
     62          #define RPL_DIO_GROUNDED                 0x80
     63          #define RPL_DIO_MOP_SHIFT                3
     64          #define RPL_DIO_MOP_MASK                 0x3c
     65          #define RPL_DIO_PREFERENCE_MASK          0x07
     66          
     67          #define UIP_IP_BUF       ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
     68          #define UIP_ICMP_BUF     ((struct uip_icmp_hdr *)&uip_buf[uip_l2_l3_hdr_len])
     69          #define UIP_ICMP_PAYLOAD ((unsigned char *)&uip_buf[uip_l2_l3_icmp_hdr_len])
     70          /*---------------------------------------------------------------------------*/
     71          static void dis_input(void);
     72          static void dio_input(void);
     73          static void dao_input(void);
     74          static void dao_ack_input(void);
     75          
     76          /* some debug callbacks useful when debugging RPL networks */
     77          #ifdef RPL_DEBUG_DIO_INPUT
     78          void RPL_DEBUG_DIO_INPUT(uip_ipaddr_t *, rpl_dio_t *);
     79          #endif
     80          
     81          #ifdef RPL_DEBUG_DAO_OUTPUT
     82          void RPL_DEBUG_DAO_OUTPUT(rpl_parent_t *);
     83          #endif
     84          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     85          static uint8_t dao_sequence = RPL_LOLLIPOP_INIT;
   \                     dao_sequence:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for dao_sequence>`
   \   000001                REQUIRE __INIT_XDATA_I
     86          
     87          /* some debug callbacks useful when debugging RPL networks */
     88          #ifdef RPL_DEBUG_DIO_INPUT
     89          void RPL_DEBUG_DIO_INPUT(uip_ipaddr_t *, rpl_dio_t *);
     90          #endif
     91          
     92          #ifdef RPL_DEBUG_DAO_OUTPUT
     93          void RPL_DEBUG_DAO_OUTPUT(rpl_parent_t *);
     94          #endif
     95          
     96          extern rpl_of_t RPL_OF;
     97          
     98          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          static int
    100          get_global_addr(uip_ipaddr_t *addr)
   \                     get_global_addr:
    101          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    102            int i;
    103            int state;
    104          
    105            for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
   \   000009   8008         SJMP    ??get_global_addr_0
   \                     ??get_global_addr_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FC           MOV     R4,A
   \   00000F   ED           MOV     A,R5
   \   000010   3400         ADDC    A,#0x0
   \   000012   FD           MOV     R5,A
   \                     ??get_global_addr_0:
   \   000013   C3           CLR     C
   \   000014   EC           MOV     A,R4
   \   000015   9403         SUBB    A,#0x3
   \   000017   ED           MOV     A,R5
   \   000018   9400         SUBB    A,#0x0
   \   00001A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001C   65D0         XRL     A,PSW
   \   00001E   33           RLC     A
   \   00001F   4003         JC      $+5
   \   000021   02....       LJMP    ??get_global_addr_2 & 0xFFFF
    106              state = uip_ds6_if.addr_list[i].state;
   \   000024   EC           MOV     A,R4
   \   000025   F8           MOV     R0,A
   \   000026   ED           MOV     A,R5
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   75F01C       MOV     B,#0x1c
   \   00002C   A4           MUL     AB
   \   00002D   C8           XCH     A,R0
   \   00002E   AEF0         MOV     R6,B
   \   000030   75F000       MOV     B,#0x0
   \   000033   A4           MUL     AB
   \   000034   2E           ADD     A,R6
   \   000035   FE           MOV     R6,A
   \   000036   75F01C       MOV     B,#0x1c
   \   000039   E9           MOV     A,R1
   \   00003A   A4           MUL     AB
   \   00003B   2E           ADD     A,R6
   \   00003C   F9           MOV     R1,A
   \   00003D   74..         MOV     A,#(uip_ds6_if + 35) & 0xff
   \   00003F   28           ADD     A,R0
   \   000040   F582         MOV     DPL,A
   \   000042   74..         MOV     A,#((uip_ds6_if + 35) >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FE           MOV     R6,A
   \   000049   7F00         MOV     R7,#0x0
    107              if(uip_ds6_if.addr_list[i].isused &&
    108                 (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
   \   00004B   EC           MOV     A,R4
   \   00004C   F8           MOV     R0,A
   \   00004D   ED           MOV     A,R5
   \   00004E   F9           MOV     R1,A
   \   00004F   E8           MOV     A,R0
   \   000050   75F01C       MOV     B,#0x1c
   \   000053   A4           MUL     AB
   \   000054   C8           XCH     A,R0
   \   000055   85F0..       MOV     ?V0 + 0,B
   \   000058   75F000       MOV     B,#0x0
   \   00005B   A4           MUL     AB
   \   00005C   25..         ADD     A,?V0 + 0
   \   00005E   F5..         MOV     ?V0 + 0,A
   \   000060   75F01C       MOV     B,#0x1c
   \   000063   E9           MOV     A,R1
   \   000064   A4           MUL     AB
   \   000065   25..         ADD     A,?V0 + 0
   \   000067   F9           MOV     R1,A
   \   000068   74..         MOV     A,#(uip_ds6_if + 18) & 0xff
   \   00006A   28           ADD     A,R0
   \   00006B   F582         MOV     DPL,A
   \   00006D   74..         MOV     A,#((uip_ds6_if + 18) >> 8) & 0xff
   \   00006F   39           ADDC    A,R1
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6096         JZ      ??get_global_addr_1
   \   000075   EE           MOV     A,R6
   \   000076   4F           ORL     A,R7
   \   000077   600A         JZ      ??get_global_addr_3
   \   000079   7401         MOV     A,#0x1
   \   00007B   6E           XRL     A,R6
   \   00007C   7003         JNZ     ??get_global_addr_4
   \   00007E   7400         MOV     A,#0x0
   \   000080   6F           XRL     A,R7
   \                     ??get_global_addr_4:
   \   000081   7088         JNZ     ??get_global_addr_1
    109                if(!uip_is_addr_link_local(&uip_ds6_if.addr_list[i].ipaddr)) {
   \                     ??get_global_addr_3:
   \   000083   EC           MOV     A,R4
   \   000084   F8           MOV     R0,A
   \   000085   ED           MOV     A,R5
   \   000086   F9           MOV     R1,A
   \   000087   E8           MOV     A,R0
   \   000088   75F01C       MOV     B,#0x1c
   \   00008B   A4           MUL     AB
   \   00008C   C8           XCH     A,R0
   \   00008D   AEF0         MOV     R6,B
   \   00008F   75F000       MOV     B,#0x0
   \   000092   A4           MUL     AB
   \   000093   2E           ADD     A,R6
   \   000094   FE           MOV     R6,A
   \   000095   75F01C       MOV     B,#0x1c
   \   000098   E9           MOV     A,R1
   \   000099   A4           MUL     AB
   \   00009A   2E           ADD     A,R6
   \   00009B   F9           MOV     R1,A
   \   00009C   74..         MOV     A,#(uip_ds6_if + 19) & 0xff
   \   00009E   28           ADD     A,R0
   \   00009F   F582         MOV     DPL,A
   \   0000A1   74..         MOV     A,#((uip_ds6_if + 19) >> 8) & 0xff
   \   0000A3   39           ADDC    A,R1
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   64FE         XRL     A,#0xfe
   \   0000A9   702B         JNZ     ??get_global_addr_5
   \   0000AB   EC           MOV     A,R4
   \   0000AC   F8           MOV     R0,A
   \   0000AD   ED           MOV     A,R5
   \   0000AE   F9           MOV     R1,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   75F01C       MOV     B,#0x1c
   \   0000B3   A4           MUL     AB
   \   0000B4   C8           XCH     A,R0
   \   0000B5   AEF0         MOV     R6,B
   \   0000B7   75F000       MOV     B,#0x0
   \   0000BA   A4           MUL     AB
   \   0000BB   2E           ADD     A,R6
   \   0000BC   FE           MOV     R6,A
   \   0000BD   75F01C       MOV     B,#0x1c
   \   0000C0   E9           MOV     A,R1
   \   0000C1   A4           MUL     AB
   \   0000C2   2E           ADD     A,R6
   \   0000C3   F9           MOV     R1,A
   \   0000C4   74..         MOV     A,#(uip_ds6_if + 20) & 0xff
   \   0000C6   28           ADD     A,R0
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   74..         MOV     A,#((uip_ds6_if + 20) >> 8) & 0xff
   \   0000CB   39           ADDC    A,R1
   \   0000CC   F583         MOV     DPH,A
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6480         XRL     A,#0x80
   \   0000D1   7003         JNZ     $+5
   \   0000D3   02....       LJMP    ??get_global_addr_1 & 0xFFFF
    110                  memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));
   \                     ??get_global_addr_5:
   \   0000D6                ; Setup parameters for call to function memcpy
   \   0000D6   75..10       MOV     ?V0 + 0,#0x10
   \   0000D9   75..00       MOV     ?V0 + 1,#0x0
   \   0000DC   78..         MOV     R0,#?V0 + 0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   EC           MOV     A,R4
   \   0000E2   75F01C       MOV     B,#0x1c
   \   0000E5   A4           MUL     AB
   \   0000E6   CC           XCH     A,R4
   \   0000E7   A8F0         MOV     R0,B
   \   0000E9   75F000       MOV     B,#0x0
   \   0000EC   A4           MUL     AB
   \   0000ED   28           ADD     A,R0
   \   0000EE   F8           MOV     R0,A
   \   0000EF   75F01C       MOV     B,#0x1c
   \   0000F2   ED           MOV     A,R5
   \   0000F3   A4           MUL     AB
   \   0000F4   28           ADD     A,R0
   \   0000F5   FD           MOV     R5,A
   \   0000F6   74..         MOV     A,#(uip_ds6_if + 19) & 0xff
   \   0000F8   2C           ADD     A,R4
   \   0000F9   FC           MOV     R4,A
   \   0000FA   74..         MOV     A,#((uip_ds6_if + 19) >> 8) & 0xff
   \   0000FC   3D           ADDC    A,R5
   \   0000FD   FD           MOV     R5,A
   \   0000FE   12....       LCALL   ??memcpy?relay
   \   000101   7402         MOV     A,#0x2
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
    111                  return 1;
   \   000106   7A01         MOV     R2,#0x1
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   8004         SJMP    ??get_global_addr_6
    112                }
    113              }
    114            }
    115            return 0;
   \                     ??get_global_addr_2:
   \   00010C   7A00         MOV     R2,#0x0
   \   00010E   7B00         MOV     R3,#0x0
   \                     ??get_global_addr_6:
   \   000110   7F02         MOV     R7,#0x2
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA
    116          }
    117          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    118          static uint32_t
    119          get32(uint8_t *buffer, int pos)
   \                     get32:
    120          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    121            return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
    122                   (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
   \   000005   EA           MOV     A,R2
   \   000006   2C           ADD     A,R4
   \   000007   F582         MOV     DPL,A
   \   000009   EB           MOV     A,R3
   \   00000A   3D           ADDC    A,R5
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   E4           CLR     A
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   F5..         MOV     ?V0 + 2,A
   \   000015   F5..         MOV     ?V0 + 3,A
   \   000017   7418         MOV     A,#0x18
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?L_SHL
   \   00001E   EA           MOV     A,R2
   \   00001F   2C           ADD     A,R4
   \   000020   F582         MOV     DPL,A
   \   000022   EB           MOV     A,R3
   \   000023   3D           ADDC    A,R5
   \   000024   F583         MOV     DPH,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   E4           CLR     A
   \   00002B   F5..         MOV     ?V0 + 5,A
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F   F5..         MOV     ?V0 + 7,A
   \   000031   7410         MOV     A,#0x10
   \   000033   78..         MOV     R0,#?V0 + 4
   \   000035   12....       LCALL   ?L_SHL
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   79..         MOV     R1,#?V0 + 4
   \   00003C   12....       LCALL   ?L_IOR
   \   00003F   EA           MOV     A,R2
   \   000040   2C           ADD     A,R4
   \   000041   F582         MOV     DPL,A
   \   000043   EB           MOV     A,R3
   \   000044   3D           ADDC    A,R5
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 4,A
   \   00004C   E4           CLR     A
   \   00004D   F5..         MOV     ?V0 + 5,A
   \   00004F   F5..         MOV     ?V0 + 6,A
   \   000051   F5..         MOV     ?V0 + 7,A
   \   000053   7408         MOV     A,#0x8
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?L_SHL
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   79..         MOV     R1,#?V0 + 4
   \   00005E   12....       LCALL   ?L_IOR
   \   000061   EA           MOV     A,R2
   \   000062   2C           ADD     A,R4
   \   000063   F582         MOV     DPL,A
   \   000065   EB           MOV     A,R3
   \   000066   3D           ADDC    A,R5
   \   000067   F583         MOV     DPH,A
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V0 + 4,A
   \   00006F   E4           CLR     A
   \   000070   F5..         MOV     ?V0 + 5,A
   \   000072   F5..         MOV     ?V0 + 6,A
   \   000074   F5..         MOV     ?V0 + 7,A
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   79..         MOV     R1,#?V0 + 4
   \   00007A   12....       LCALL   ?L_IOR
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   AC..         MOV     R4,?V0 + 2
   \   000083   AD..         MOV     R5,?V0 + 3
   \   000085   7F08         MOV     R7,#0x8
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    123          }
    124          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          static void
    126          set32(uint8_t *buffer, int pos, uint32_t value)
   \                     set32:
    127          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   12....       LCALL   ?L_MOV_X
    128            buffer[pos++] = value >> 24;
   \   00000F   85....       MOV     ?V0 + 0,?V0 + 4
   \   000012   85....       MOV     ?V0 + 1,?V0 + 5
   \   000015   85....       MOV     ?V0 + 2,?V0 + 6
   \   000018   85....       MOV     ?V0 + 3,?V0 + 7
   \   00001B   7418         MOV     A,#0x18
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?UL_SHR
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   EA           MOV     A,R2
   \   000025   2C           ADD     A,R4
   \   000026   F582         MOV     DPL,A
   \   000028   EB           MOV     A,R3
   \   000029   3D           ADDC    A,R5
   \   00002A   F583         MOV     DPH,A
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   EC           MOV     A,R4
   \   000030   2401         ADD     A,#0x1
   \   000032   FC           MOV     R4,A
   \   000033   ED           MOV     A,R5
   \   000034   3400         ADDC    A,#0x0
   \   000036   FD           MOV     R5,A
    129            buffer[pos++] = (value >> 16) & 0xff;
   \   000037   85....       MOV     ?V0 + 0,?V0 + 4
   \   00003A   85....       MOV     ?V0 + 1,?V0 + 5
   \   00003D   85....       MOV     ?V0 + 2,?V0 + 6
   \   000040   85....       MOV     ?V0 + 3,?V0 + 7
   \   000043   7410         MOV     A,#0x10
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?UL_SHR
   \   00004A   E5..         MOV     A,?V0 + 0
   \   00004C   EA           MOV     A,R2
   \   00004D   2C           ADD     A,R4
   \   00004E   F582         MOV     DPL,A
   \   000050   EB           MOV     A,R3
   \   000051   3D           ADDC    A,R5
   \   000052   F583         MOV     DPH,A
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   EC           MOV     A,R4
   \   000058   2401         ADD     A,#0x1
   \   00005A   FC           MOV     R4,A
   \   00005B   ED           MOV     A,R5
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   FD           MOV     R5,A
    130            buffer[pos++] = (value >> 8) & 0xff;
   \   00005F   85....       MOV     ?V0 + 0,?V0 + 4
   \   000062   85....       MOV     ?V0 + 1,?V0 + 5
   \   000065   E4           CLR     A
   \   000066   E5..         MOV     A,?V0 + 1
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   EA           MOV     A,R2
   \   00006D   2C           ADD     A,R4
   \   00006E   F582         MOV     DPL,A
   \   000070   EB           MOV     A,R3
   \   000071   3D           ADDC    A,R5
   \   000072   F583         MOV     DPH,A
   \   000074   E5..         MOV     A,?V0 + 0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   EC           MOV     A,R4
   \   000078   2401         ADD     A,#0x1
   \   00007A   FC           MOV     R4,A
   \   00007B   ED           MOV     A,R5
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   FD           MOV     R5,A
    131            buffer[pos++] = value & 0xff;
   \   00007F   E5..         MOV     A,?V0 + 4
   \   000081   EA           MOV     A,R2
   \   000082   2C           ADD     A,R4
   \   000083   F582         MOV     DPL,A
   \   000085   EB           MOV     A,R3
   \   000086   3D           ADDC    A,R5
   \   000087   F583         MOV     DPH,A
   \   000089   E5..         MOV     A,?V0 + 4
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   EC           MOV     A,R4
   \   00008D   2401         ADD     A,#0x1
   \   00008F   FC           MOV     R4,A
   \   000090   ED           MOV     A,R5
   \   000091   3400         ADDC    A,#0x0
   \   000093   FD           MOV     R5,A
    132          }
   \   000094   7F08         MOV     R7,#0x8
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
    133          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          static uint16_t
    135          get16(uint8_t *buffer, int pos)
   \                     get16:
    136          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    137            return (uint16_t)buffer[pos] << 8 | buffer[pos + 1];
   \   000004   EA           MOV     A,R2
   \   000005   2C           ADD     A,R4
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   3D           ADDC    A,R5
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E4           CLR     A
   \   000011   C8           XCH     A,R0
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   2C           ADD     A,R4
   \   000015   F582         MOV     DPL,A
   \   000017   EB           MOV     A,R3
   \   000018   3D           ADDC    A,R5
   \   000019   F583         MOV     DPH,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   E8           MOV     A,R0
   \   000021   4A           ORL     A,R2
   \   000022   FA           MOV     R2,A
   \   000023   E9           MOV     A,R1
   \   000024   4B           ORL     A,R3
   \   000025   FB           MOV     R3,A
   \   000026   D083         POP     DPH
   \   000028   D082         POP     DPL
   \   00002A   02....       LJMP    ?BRET
    138          }
    139          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          static void
    141          set16(uint8_t *buffer, int pos, uint16_t value)
   \                     set16:
    142          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
    143            buffer[pos++] = value >> 8;
   \   00000F   EE           MOV     A,R6
   \   000010   F8           MOV     R0,A
   \   000011   EF           MOV     A,R7
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   E9           MOV     A,R1
   \   000015   F8           MOV     R0,A
   \   000016   C0E0         PUSH    A
   \   000018   EA           MOV     A,R2
   \   000019   2C           ADD     A,R4
   \   00001A   F582         MOV     DPL,A
   \   00001C   EB           MOV     A,R3
   \   00001D   3D           ADDC    A,R5
   \   00001E   F583         MOV     DPH,A
   \   000020   D0E0         POP     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   EC           MOV     A,R4
   \   000024   2401         ADD     A,#0x1
   \   000026   FC           MOV     R4,A
   \   000027   ED           MOV     A,R5
   \   000028   3400         ADDC    A,#0x0
   \   00002A   FD           MOV     R5,A
    144            buffer[pos++] = value & 0xff;
   \   00002B   EE           MOV     A,R6
   \   00002C   C0E0         PUSH    A
   \   00002E   EA           MOV     A,R2
   \   00002F   2C           ADD     A,R4
   \   000030   F582         MOV     DPL,A
   \   000032   EB           MOV     A,R3
   \   000033   3D           ADDC    A,R5
   \   000034   F583         MOV     DPH,A
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   EC           MOV     A,R4
   \   00003A   2401         ADD     A,#0x1
   \   00003C   FC           MOV     R4,A
   \   00003D   ED           MOV     A,R5
   \   00003E   3400         ADDC    A,#0x0
   \   000040   FD           MOV     R5,A
    145          }
   \   000041   7F01         MOV     R7,#0x1
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
    146          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          static void
    148          dis_input(void)
   \                     dis_input:
    149          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    150            rpl_instance_t *instance;
    151            rpl_instance_t *end;
    152          
    153            /* DAG Information Solicitation */
    154            PRINTF("RPL: Received a DIS from ");
    155            PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
    156            PRINTF("\n");
    157          
    158            for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
   \   000005   7E..         MOV     R6,#instance_table & 0xff
   \   000007   7F..         MOV     R7,#(instance_table >> 8) & 0xff
   \   000009   EE           MOV     A,R6
   \   00000A   24AE         ADD     A,#-0x52
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   8013         SJMP    ??dis_input_0
    159              if(instance->used == 1) {
    160          #if RPL_LEAF_ONLY
    161                if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    162          	PRINTF("RPL: LEAF ONLY Multicast DIS will NOT reset DIO timer\n");
    163          #else /* !RPL_LEAF_ONLY */
    164                if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
    165                  PRINTF("RPL: Multicast DIS => reset DIO timer\n");
    166                  rpl_reset_dio_timer(instance);
    167                } else {
    168          #endif /* !RPL_LEAF_ONLY */
    169                  PRINTF("RPL: Unicast DIS, reply to sender\n");
    170                  dio_output(instance, &UIP_IP_BUF->srcipaddr);
   \                     ??dis_input_1:
   \   000015                ; Setup parameters for call to function dio_output
   \   000015   7C..         MOV     R4,#(uip_aligned_buf + 8) & 0xff
   \   000017   7D..         MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??dio_output?relay
    171                }
   \                     ??dis_input_2:
   \   000020   EE           MOV     A,R6
   \   000021   24AE         ADD     A,#-0x52
   \   000023   FE           MOV     R6,A
   \   000024   EF           MOV     A,R7
   \   000025   3400         ADDC    A,#0x0
   \   000027   FF           MOV     R7,A
   \                     ??dis_input_0:
   \   000028   A8..         MOV     R0,?V0 + 0
   \   00002A   A9..         MOV     R1,?V0 + 1
   \   00002C   C3           CLR     C
   \   00002D   EE           MOV     A,R6
   \   00002E   98           SUBB    A,R0
   \   00002F   EF           MOV     A,R7
   \   000030   99           SUBB    A,R1
   \   000031   5020         JNC     ??dis_input_3
   \   000033   EE           MOV     A,R6
   \   000034   247C         ADD     A,#0x7c
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6401         XRL     A,#0x1
   \   000040   70DE         JNZ     ??dis_input_2
   \   000042   90....       MOV     DPTR,#uip_aligned_buf + 24
   \   000045   E0           MOVX    A,@DPTR
   \   000046   64FF         XRL     A,#0xff
   \   000048   70CB         JNZ     ??dis_input_1
   \   00004A                ; Setup parameters for call to function rpl_reset_dio_timer
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   ??rpl_reset_dio_timer?relay
   \   000051   80CD         SJMP    ??dis_input_2
    172              }
    173            }
    174          }
   \                     ??dis_input_3:
   \   000053   7F02         MOV     R7,#0x2
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
    175          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void
    177          dis_output(uip_ipaddr_t *addr)
   \                     dis_output:
    178          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    179            unsigned char *buffer;
    180            uip_ipaddr_t tmpaddr;
    181          
    182            /* DAG Information Solicitation  - 2 bytes reserved      */
    183            /*      0                   1                   2        */
    184            /*      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3  */
    185            /*     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
    186            /*     |     Flags     |   Reserved    |   Option(s)...  */
    187            /*     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
    188          
    189            buffer = UIP_ICMP_PAYLOAD;
   \   00000A   90....       MOV     DPTR,#uip_ext_len
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   7900         MOV     R1,#0x0
   \   000011   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000013   28           ADD     A,R0
   \   000014   F8           MOV     R0,A
   \   000015   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   000017   39           ADDC    A,R1
   \   000018   F9           MOV     R1,A
    190            buffer[0] = buffer[1] = 0;
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   EC           MOV     A,R4
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
   \   000022   EC           MOV     A,R4
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   F0           MOVX    @DPTR,A
    191          
    192            if(addr == NULL) {
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   706B         JNZ     ??dis_output_0
    193              uip_create_linklocal_rplnodes_mcast(&tmpaddr);
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   74FF         MOV     A,#-0x1
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   7402         MOV     A,#0x2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   7400         MOV     A,#0x0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   7406         MOV     A,#0x6
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   7400         MOV     A,#0x0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   7400         MOV     A,#0x0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   7408         MOV     A,#0x8
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   7400         MOV     A,#0x0
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   7400         MOV     A,#0x0
   \   000068   F0           MOVX    @DPTR,A
   \   000069   740A         MOV     A,#0xa
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   7400         MOV     A,#0x0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   7400         MOV     A,#0x0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   740C         MOV     A,#0xc
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   7400         MOV     A,#0x0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   7400         MOV     A,#0x0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   740E         MOV     A,#0xe
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7400         MOV     A,#0x0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   741A         MOV     A,#0x1a
   \   00008C   F0           MOVX    @DPTR,A
    194              addr = &tmpaddr;
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
    195            }
    196          
    197            PRINTF("RPL: Sending a DIS to ");
    198            PRINT6ADDR(addr);
    199            PRINTF("\n");
    200          
    201            uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
   \                     ??dis_output_0:
   \   000097                ; Setup parameters for call to function uip_icmp6_send
   \   000097   75..02       MOV     ?V0 + 0,#0x2
   \   00009A   75..00       MOV     ?V0 + 1,#0x0
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   E4           CLR     A
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   F5..         MOV     ?V0 + 1,A
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7C9B         MOV     R4,#-0x65
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   12....       LCALL   ??uip_icmp6_send?relay
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    202          }
   \   0000B8   7410         MOV     A,#0x10
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   7F02         MOV     R7,#0x2
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
    203          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          static void
    205          dio_input(void)
   \                     dio_input:
    206          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 103
   \   000005   7499         MOV     A,#-0x67
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    207            unsigned char *buffer;
    208            uint8_t buffer_length;
    209            rpl_dio_t dio;
    210            uint8_t subopt_type;
    211            int i;
    212            int len;
    213            uip_ipaddr_t from;
    214            uip_ds6_nbr_t *nbr;
    215          
    216            memset(&dio, 0, sizeof(dio));
   \   00000A                ; Setup parameters for call to function memset
   \   00000A   75..57       MOV     ?V0 + 0,#0x57
   \   00000D   75..00       MOV     ?V0 + 1,#0x0
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C00         MOV     R4,#0x0
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   12....       LCALL   ??memset?relay
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
    217          
    218            /* Set default values in case the DIO configuration option is missing. */
    219            dio.dag_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
   \   00002A   741A         MOV     A,#0x1a
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7408         MOV     A,#0x8
   \   000031   F0           MOVX    @DPTR,A
    220            dio.dag_intmin = RPL_DIO_INTERVAL_MIN;
   \   000032   741B         MOV     A,#0x1b
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   740C         MOV     A,#0xc
   \   000039   F0           MOVX    @DPTR,A
    221            dio.dag_redund = RPL_DIO_REDUNDANCY;
   \   00003A   741C         MOV     A,#0x1c
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   740A         MOV     A,#0xa
   \   000041   F0           MOVX    @DPTR,A
    222            dio.dag_min_hoprankinc = RPL_MIN_HOPRANKINC;
   \   000042   7422         MOV     A,#0x22
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   7401         MOV     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
    223            dio.dag_max_rankinc = RPL_MAX_RANKINC;
   \   00004E   7420         MOV     A,#0x20
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   7400         MOV     A,#0x0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   7407         MOV     A,#0x7
   \   000059   F0           MOVX    @DPTR,A
    224            dio.ocp = RPL_OF.ocp;
   \   00005A   90....       MOV     DPTR,#rpl_mrhof + 12
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   7410         MOV     A,#0x10
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E8           MOV     A,R0
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E9           MOV     A,R1
   \   00006B   F0           MOVX    @DPTR,A
    225            dio.default_lifetime = RPL_DEFAULT_LIFETIME;
   \   00006C   741D         MOV     A,#0x1d
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   74FF         MOV     A,#-0x1
   \   000073   F0           MOVX    @DPTR,A
    226            dio.lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
   \   000074   741E         MOV     A,#0x1e
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   74FF         MOV     A,#-0x1
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   74FF         MOV     A,#-0x1
   \   00007F   F0           MOVX    @DPTR,A
    227          
    228            uip_ipaddr_copy(&from, &UIP_IP_BUF->srcipaddr);
   \   000080                ; Setup parameters for call to function memcpy
   \   000080   75..10       MOV     ?V0 + 0,#0x10
   \   000083   75..00       MOV     ?V0 + 1,#0x0
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C..         MOV     R4,#(uip_aligned_buf + 8) & 0xff
   \   00008D   7D..         MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
   \   00008F   7459         MOV     A,#0x59
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   \   000098   12....       LCALL   ??memcpy?relay
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   8A..         MOV     ?V0 + 0,R2
   \   0000A2   8B..         MOV     ?V0 + 1,R3
   \   0000A4   AA..         MOV     R2,?V0 + 0
   \   0000A6   AB..         MOV     R3,?V0 + 1
    229          
    230            /* DAG Information Object */
    231            PRINTF("RPL: Received a DIO from ");
    232            PRINT6ADDR(&from);
    233            PRINTF("\n");
    234          
    235            if((nbr = uip_ds6_nbr_lookup(&from)) == NULL) {
   \   0000A8                ; Setup parameters for call to function uip_ds6_nbr_lookup
   \   0000A8   12....       LCALL   ??uip_ds6_nbr_lookup?relay
   \   0000AB   8A..         MOV     ?V0 + 0,R2
   \   0000AD   8B..         MOV     ?V0 + 1,R3
   \   0000AF   AA..         MOV     R2,?V0 + 0
   \   0000B1   AB..         MOV     R3,?V0 + 1
   \   0000B3   EA           MOV     A,R2
   \   0000B4   F8           MOV     R0,A
   \   0000B5   EB           MOV     A,R3
   \   0000B6   F9           MOV     R1,A
   \   0000B7   EA           MOV     A,R2
   \   0000B8   4B           ORL     A,R3
   \   0000B9   7053         JNZ     ??dio_input_0
    236              if((nbr = uip_ds6_nbr_add(&from, (uip_lladdr_t *)
    237                                        packetbuf_addr(PACKETBUF_ADDR_SENDER),
    238                                        0, NBR_REACHABLE)) != NULL) {
   \   0000BB                ; Setup parameters for call to function uip_ds6_nbr_add
   \   0000BB   75..01       MOV     ?V0 + 0,#0x1
   \   0000BE   78..         MOV     R0,#?V0 + 0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   E9           MOV     A,R1
   \   0000C6   FE           MOV     R6,A
   \   0000C7   F9           MOV     R1,A
   \   0000C8                ; Setup parameters for call to function packetbuf_addr
   \   0000C8   7918         MOV     R1,#0x18
   \   0000CA   12....       LCALL   ??packetbuf_addr?relay
   \   0000CD   EA           MOV     A,R2
   \   0000CE   FC           MOV     R4,A
   \   0000CF   EB           MOV     A,R3
   \   0000D0   FD           MOV     R5,A
   \   0000D1   EE           MOV     A,R6
   \   0000D2   F9           MOV     R1,A
   \   0000D3   FE           MOV     R6,A
   \   0000D4   7458         MOV     A,#0x58
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   AA82         MOV     R2,DPL
   \   0000DB   AB83         MOV     R3,DPH
   \   0000DD   12....       LCALL   ??uip_ds6_nbr_add?relay
   \   0000E0   7401         MOV     A,#0x1
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   8A..         MOV     ?V0 + 0,R2
   \   0000E7   8B..         MOV     ?V0 + 1,R3
   \   0000E9   AA..         MOV     R2,?V0 + 0
   \   0000EB   AB..         MOV     R3,?V0 + 1
   \   0000ED   EA           MOV     A,R2
   \   0000EE   F8           MOV     R0,A
   \   0000EF   EB           MOV     A,R3
   \   0000F0   F9           MOV     R1,A
   \   0000F1   EA           MOV     A,R2
   \   0000F2   4B           ORL     A,R3
   \   0000F3   7003         JNZ     $+5
   \   0000F5   02....       LJMP    ??dio_input_1 & 0xFFFF
    239                /* set reachable timer */
    240                stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
   \   0000F8                ; Setup parameters for call to function stimer_set
   \   0000F8   90....       MOV     DPTR,#__Constant_258
   \   0000FB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000FE   E8           MOV     A,R0
   \   0000FF   2410         ADD     A,#0x10
   \   000101   FA           MOV     R2,A
   \   000102   E9           MOV     A,R1
   \   000103   3400         ADDC    A,#0x0
   \   000105   FB           MOV     R3,A
   \   000106   12....       LCALL   ??stimer_set?relay
   \   000109   7404         MOV     A,#0x4
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
    241                PRINTF("RPL: Neighbor added to neighbor cache ");
    242                PRINT6ADDR(&from);
    243                PRINTF(", ");
    244                PRINTLLADDR((uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
    245                PRINTF("\n");
    246              } else {
    247                PRINTF("RPL: Out of Memory, dropping DIO from ");
    248                PRINT6ADDR(&from);
    249                PRINTF(", ");
    250                PRINTLLADDR((uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
    251                PRINTF("\n");
    252                return;
    253              }
    254            } else {
    255              PRINTF("RPL: Neighbor already in neighbor cache\n");
    256            }
    257          
    258            buffer_length = uip_len - uip_l3_icmp_hdr_len;
   \                     ??dio_input_0:
   \   00010E   90....       MOV     DPTR,#uip_ext_len
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   7900         MOV     R1,#0x0
   \   000115   242C         ADD     A,#0x2c
   \   000117   F8           MOV     R0,A
   \   000118   E9           MOV     A,R1
   \   000119   3400         ADDC    A,#0x0
   \   00011B   F9           MOV     R1,A
   \   00011C   90....       MOV     DPTR,#uip_len
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   FA           MOV     R2,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FB           MOV     R3,A
   \   000124   EA           MOV     A,R2
   \   000125   C3           CLR     C
   \   000126   98           SUBB    A,R0
   \   000127   F5..         MOV     ?V0 + 4,A
    259          
    260            /* Process the DIO base option. */
    261            i = 0;
   \   000129   7E00         MOV     R6,#0x0
   \   00012B   7F00         MOV     R7,#0x0
    262            buffer = UIP_ICMP_PAYLOAD;
   \   00012D   90....       MOV     DPTR,#uip_ext_len
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   7900         MOV     R1,#0x0
   \   000134   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000136   28           ADD     A,R0
   \   000137   F5..         MOV     ?V0 + 2,A
   \   000139   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   00013B   39           ADDC    A,R1
   \   00013C   F5..         MOV     ?V0 + 3,A
    263          
    264            dio.instance_id = buffer[i++];
   \   00013E   E5..         MOV     A,?V0 + 2
   \   000140   2E           ADD     A,R6
   \   000141   F582         MOV     DPL,A
   \   000143   E5..         MOV     A,?V0 + 3
   \   000145   3F           ADDC    A,R7
   \   000146   F583         MOV     DPH,A
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   7418         MOV     A,#0x18
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
   \   000153   EE           MOV     A,R6
   \   000154   2401         ADD     A,#0x1
   \   000156   FE           MOV     R6,A
   \   000157   EF           MOV     A,R7
   \   000158   3400         ADDC    A,#0x0
   \   00015A   FF           MOV     R7,A
    265            dio.version = buffer[i++];
   \   00015B   E5..         MOV     A,?V0 + 2
   \   00015D   2E           ADD     A,R6
   \   00015E   F582         MOV     DPL,A
   \   000160   E5..         MOV     A,?V0 + 3
   \   000162   3F           ADDC    A,R7
   \   000163   F583         MOV     DPH,A
   \   000165   E0           MOVX    A,@DPTR
   \   000166   C0E0         PUSH    A
   \   000168   7417         MOV     A,#0x17
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   D0E0         POP     A
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   EE           MOV     A,R6
   \   000171   2401         ADD     A,#0x1
   \   000173   FE           MOV     R6,A
   \   000174   EF           MOV     A,R7
   \   000175   3400         ADDC    A,#0x0
   \   000177   FF           MOV     R7,A
    266            dio.rank = get16(buffer, i);
   \   000178                ; Setup parameters for call to function get16
   \   000178   EE           MOV     A,R6
   \   000179   FC           MOV     R4,A
   \   00017A   EF           MOV     A,R7
   \   00017B   FD           MOV     R5,A
   \   00017C   AA..         MOV     R2,?V0 + 2
   \   00017E   AB..         MOV     R3,?V0 + 3
   \   000180   12....       LCALL   ??get16?relay
   \   000183   7412         MOV     A,#0x12
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   EA           MOV     A,R2
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   A3           INC     DPTR
   \   00018B   EB           MOV     A,R3
   \   00018C   F0           MOVX    @DPTR,A
    267            i += 2;
   \   00018D   EE           MOV     A,R6
   \   00018E   2402         ADD     A,#0x2
   \   000190   FE           MOV     R6,A
   \   000191   EF           MOV     A,R7
   \   000192   3400         ADDC    A,#0x0
   \   000194   FF           MOV     R7,A
    268          
    269            PRINTF("RPL: Incoming DIO (id, ver, rank) = (%u,%u,%u)\n",
    270                   (unsigned)dio.instance_id,
    271                   (unsigned)dio.version, 
    272                   (unsigned)dio.rank);
    273          
    274            dio.grounded = buffer[i] & RPL_DIO_GROUNDED;
   \   000195   E5..         MOV     A,?V0 + 2
   \   000197   2E           ADD     A,R6
   \   000198   F582         MOV     DPL,A
   \   00019A   E5..         MOV     A,?V0 + 3
   \   00019C   3F           ADDC    A,R7
   \   00019D   F583         MOV     DPH,A
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   5480         ANL     A,#0x80
   \   0001A2   C0E0         PUSH    A
   \   0001A4   7414         MOV     A,#0x14
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   D0E0         POP     A
   \   0001AB   F0           MOVX    @DPTR,A
    275            dio.mop = (buffer[i]& RPL_DIO_MOP_MASK) >> RPL_DIO_MOP_SHIFT;
   \   0001AC   E5..         MOV     A,?V0 + 2
   \   0001AE   2E           ADD     A,R6
   \   0001AF   F582         MOV     DPL,A
   \   0001B1   E5..         MOV     A,?V0 + 3
   \   0001B3   3F           ADDC    A,R7
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   13           RRC     A
   \   0001B8   13           RRC     A
   \   0001B9   13           RRC     A
   \   0001BA   541F         ANL     A,#0x1f
   \   0001BC   5407         ANL     A,#0x7
   \   0001BE   C0E0         PUSH    A
   \   0001C0   7415         MOV     A,#0x15
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   D0E0         POP     A
   \   0001C7   F0           MOVX    @DPTR,A
    276            dio.preference = buffer[i++] & RPL_DIO_PREFERENCE_MASK;
   \   0001C8   E5..         MOV     A,?V0 + 2
   \   0001CA   2E           ADD     A,R6
   \   0001CB   F582         MOV     DPL,A
   \   0001CD   E5..         MOV     A,?V0 + 3
   \   0001CF   3F           ADDC    A,R7
   \   0001D0   F583         MOV     DPH,A
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   5407         ANL     A,#0x7
   \   0001D5   C0E0         PUSH    A
   \   0001D7   7416         MOV     A,#0x16
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   D0E0         POP     A
   \   0001DE   F0           MOVX    @DPTR,A
   \   0001DF   EE           MOV     A,R6
   \   0001E0   2401         ADD     A,#0x1
   \   0001E2   FE           MOV     R6,A
   \   0001E3   EF           MOV     A,R7
   \   0001E4   3400         ADDC    A,#0x0
   \   0001E6   FF           MOV     R7,A
    277          
    278            dio.dtsn = buffer[i++];
   \   0001E7   E5..         MOV     A,?V0 + 2
   \   0001E9   2E           ADD     A,R6
   \   0001EA   F582         MOV     DPL,A
   \   0001EC   E5..         MOV     A,?V0 + 3
   \   0001EE   3F           ADDC    A,R7
   \   0001EF   F583         MOV     DPH,A
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   C0E0         PUSH    A
   \   0001F4   7419         MOV     A,#0x19
   \   0001F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F9   D0E0         POP     A
   \   0001FB   F0           MOVX    @DPTR,A
   \   0001FC   EE           MOV     A,R6
   \   0001FD   2401         ADD     A,#0x1
   \   0001FF   FE           MOV     R6,A
   \   000200   EF           MOV     A,R7
   \   000201   3400         ADDC    A,#0x0
   \   000203   FF           MOV     R7,A
    279            /* two reserved bytes */
    280            i += 2;
   \   000204   EE           MOV     A,R6
   \   000205   2402         ADD     A,#0x2
   \   000207   FE           MOV     R6,A
   \   000208   EF           MOV     A,R7
   \   000209   3400         ADDC    A,#0x0
   \   00020B   FF           MOV     R7,A
    281          
    282            memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));
   \   00020C                ; Setup parameters for call to function memcpy
   \   00020C   75..10       MOV     ?V0 + 0,#0x10
   \   00020F   75..00       MOV     ?V0 + 1,#0x0
   \   000212   78..         MOV     R0,#?V0 + 0
   \   000214   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000217   E5..         MOV     A,?V0 + 2
   \   000219   2E           ADD     A,R6
   \   00021A   FC           MOV     R4,A
   \   00021B   E5..         MOV     A,?V0 + 3
   \   00021D   3F           ADDC    A,R7
   \   00021E   FD           MOV     R5,A
   \   00021F   7402         MOV     A,#0x2
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   AA82         MOV     R2,DPL
   \   000226   AB83         MOV     R3,DPH
   \   000228   12....       LCALL   ??memcpy?relay
   \   00022B   7402         MOV     A,#0x2
   \   00022D   12....       LCALL   ?DEALLOC_XSTACK8
    283            i += sizeof(dio.dag_id);
   \   000230   EE           MOV     A,R6
   \   000231   2410         ADD     A,#0x10
   \   000233   FE           MOV     R6,A
   \   000234   EF           MOV     A,R7
   \   000235   3400         ADDC    A,#0x0
   \   000237   FF           MOV     R7,A
   \   000238   807A         SJMP    ??dio_input_2
    284          
    285            PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
    286            PRINT6ADDR(&dio.dag_id);
    287            PRINTF(", %u)\n", dio.preference);
    288          
    289            /* Check if there are any DIO suboptions. */
    290            for(; i < buffer_length; i += len) {
    291              subopt_type = buffer[i];
    292              if(subopt_type == RPL_OPTION_PAD1) {
    293                len = 1;
    294              } else {
    295                /* Suboption with a two-byte header + payload */
    296                len = 2 + buffer[i + 1];
    297              }
    298          
    299              if(len + i > buffer_length) {
    300                PRINTF("RPL: Invalid DIO packet\n");
    301                RPL_STAT(rpl_stats.malformed_msgs++);
    302                return;
    303              }
    304          
    305              PRINTF("RPL: DIO option %u, length: %u\n", subopt_type, len - 2);
    306          
    307              switch(subopt_type) {
    308              case RPL_OPTION_DAG_METRIC_CONTAINER:
    309                if(len < 6) {
    310                  PRINTF("RPL: Invalid DAG MC, len = %d\n", len);
    311          	RPL_STAT(rpl_stats.malformed_msgs++);
    312                  return;
    313                }
    314                dio.mc.type = buffer[i + 2];
    315                dio.mc.flags = buffer[i + 3] << 1;
    316                dio.mc.flags |= buffer[i + 4] >> 7;
    317                dio.mc.aggr = (buffer[i + 4] >> 4) & 0x3;
    318                dio.mc.prec = buffer[i + 4] & 0xf;
    319                dio.mc.length = buffer[i + 5];
    320          
    321                if(dio.mc.type == RPL_DAG_MC_NONE) {
    322                  /* No metric container: do nothing */
    323                } else if(dio.mc.type == RPL_DAG_MC_ETX) {
    324                  dio.mc.obj.etx = get16(buffer, i + 6);
    325          
    326                  PRINTF("RPL: DAG MC: type %u, flags %u, aggr %u, prec %u, length %u, ETX %u\n",
    327          	       (unsigned)dio.mc.type,  
    328          	       (unsigned)dio.mc.flags, 
    329          	       (unsigned)dio.mc.aggr, 
    330          	       (unsigned)dio.mc.prec, 
    331          	       (unsigned)dio.mc.length, 
    332          	       (unsigned)dio.mc.obj.etx);
    333                } else if(dio.mc.type == RPL_DAG_MC_ENERGY) {
    334                  dio.mc.obj.energy.flags = buffer[i + 6];
    335                  dio.mc.obj.energy.energy_est = buffer[i + 7];
    336                } else {
    337                 PRINTF("RPL: Unhandled DAG MC type: %u\n", (unsigned)dio.mc.type);
    338                 return;
    339                }
    340                break;
    341              case RPL_OPTION_ROUTE_INFO:
    342                if(len < 9) {
    343                  PRINTF("RPL: Invalid destination prefix option, len = %d\n", len);
    344          	RPL_STAT(rpl_stats.malformed_msgs++);
    345                  return;
    346                }
    347          
    348                /* The flags field includes the preference value. */
    349                dio.destination_prefix.length = buffer[i + 2];
    350                dio.destination_prefix.flags = buffer[i + 3];
    351                dio.destination_prefix.lifetime = get32(buffer, i + 4);
    352          
    353                if(((dio.destination_prefix.length + 7) / 8) + 8 <= len &&
    354                   dio.destination_prefix.length <= 128) {
    355                  PRINTF("RPL: Copying destination prefix\n");
    356                  memcpy(&dio.destination_prefix.prefix, &buffer[i + 8],
    357                         (dio.destination_prefix.length + 7) / 8);
    358                } else {
    359                  PRINTF("RPL: Invalid route info option, len = %d\n", len);
    360          	RPL_STAT(rpl_stats.malformed_msgs++);
    361          	return;
    362                }
    363          
    364                break;
    365              case RPL_OPTION_DAG_CONF:
    366                if(len != 16) {
    367                  PRINTF("RPL: Invalid DAG configuration option, len = %d\n", len);
    368          	RPL_STAT(rpl_stats.malformed_msgs++);
    369                  return;
    370                }
    371          
    372                /* Path control field not yet implemented - at i + 2 */
    373                dio.dag_intdoubl = buffer[i + 3];
    374                dio.dag_intmin = buffer[i + 4];
    375                dio.dag_redund = buffer[i + 5];
    376                dio.dag_max_rankinc = get16(buffer, i + 6);
    377                dio.dag_min_hoprankinc = get16(buffer, i + 8);
    378                dio.ocp = get16(buffer, i + 10);
    379                /* buffer + 12 is reserved */
    380                dio.default_lifetime = buffer[i + 13];
    381                dio.lifetime_unit = get16(buffer, i + 14);
    382                PRINTF("RPL: DAG conf:dbl=%d, min=%d red=%d maxinc=%d mininc=%d ocp=%d d_l=%u l_u=%u\n",
    383                       dio.dag_intdoubl, dio.dag_intmin, dio.dag_redund,
    384                       dio.dag_max_rankinc, dio.dag_min_hoprankinc, dio.ocp,
    385                       dio.default_lifetime, dio.lifetime_unit);
    386                break;
    387              case RPL_OPTION_PREFIX_INFO:
    388                if(len != 32) {
    389                  PRINTF("RPL: DAG prefix info not ok, len != 32\n");
    390          	RPL_STAT(rpl_stats.malformed_msgs++);
    391                  return;
    392                }
    393                dio.prefix_info.length = buffer[i + 2];
   \                     ??dio_input_3:
   \   00023A   E5..         MOV     A,?V0 + 2
   \   00023C   2E           ADD     A,R6
   \   00023D   F582         MOV     DPL,A
   \   00023F   E5..         MOV     A,?V0 + 3
   \   000241   3F           ADDC    A,R7
   \   000242   F583         MOV     DPH,A
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   E0           MOVX    A,@DPTR
   \   000247   C0E0         PUSH    A
   \   000249   744E         MOV     A,#0x4e
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   D0E0         POP     A
   \   000250   F0           MOVX    @DPTR,A
    394                dio.prefix_info.flags = buffer[i + 3];
   \   000251   E5..         MOV     A,?V0 + 2
   \   000253   2E           ADD     A,R6
   \   000254   F582         MOV     DPL,A
   \   000256   E5..         MOV     A,?V0 + 3
   \   000258   3F           ADDC    A,R7
   \   000259   F583         MOV     DPH,A
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   C0E0         PUSH    A
   \   000261   744F         MOV     A,#0x4f
   \   000263   12....       LCALL   ?XSTACK_DISP0_8
   \   000266   D0E0         POP     A
   \   000268   F0           MOVX    @DPTR,A
    395                /* valid lifetime is ingnored for now - at i + 4 */
    396                /* preferred lifetime stored in lifetime */
    397                dio.prefix_info.lifetime = get32(buffer, i + 8);
   \   000269                ; Setup parameters for call to function get32
   \   000269   EE           MOV     A,R6
   \   00026A   2408         ADD     A,#0x8
   \   00026C   FC           MOV     R4,A
   \   00026D   EF           MOV     A,R7
   \   00026E   3400         ADDC    A,#0x0
   \   000270   FD           MOV     R5,A
   \   000271   AA..         MOV     R2,?V0 + 2
   \   000273   AB..         MOV     R3,?V0 + 3
   \   000275   12....       LCALL   ??get32?relay
   \   000278   744A         MOV     A,#0x4a
   \   00027A   12....       LCALL   ?XSTACK_DISP0_8
   \   00027D   12....       LCALL   ?XSTORE_R2345
    398                /* 32-bit reserved at i + 12 */
    399                PRINTF("RPL: Copying prefix information\n");
    400                memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);
   \   000280                ; Setup parameters for call to function memcpy
   \   000280   75..10       MOV     ?V0 + 6,#0x10
   \   000283   75..00       MOV     ?V0 + 7,#0x0
   \   000286   78..         MOV     R0,#?V0 + 6
   \   000288   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028B   E5..         MOV     A,?V0 + 2
   \   00028D   2E           ADD     A,R6
   \   00028E   F8           MOV     R0,A
   \   00028F   E5..         MOV     A,?V0 + 3
   \   000291   3F           ADDC    A,R7
   \   000292   F9           MOV     R1,A
   \   000293   E8           MOV     A,R0
   \   000294   2410         ADD     A,#0x10
   \   000296   FC           MOV     R4,A
   \   000297   E9           MOV     A,R1
   \   000298   3400         ADDC    A,#0x0
   \   00029A   FD           MOV     R5,A
   \   00029B   743C         MOV     A,#0x3c
   \   00029D   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A0   AA82         MOV     R2,DPL
   \   0002A2   AB83         MOV     R3,DPH
   \   0002A4   12....       LCALL   ??memcpy?relay
   \   0002A7   7402         MOV     A,#0x2
   \   0002A9   12....       LCALL   ?DEALLOC_XSTACK8
    401                break;
   \                     ??dio_input_4:
   \   0002AC   EE           MOV     A,R6
   \   0002AD   25..         ADD     A,?V0 + 0
   \   0002AF   FE           MOV     R6,A
   \   0002B0   EF           MOV     A,R7
   \   0002B1   35..         ADDC    A,?V0 + 1
   \   0002B3   FF           MOV     R7,A
   \                     ??dio_input_2:
   \   0002B4   85....       MOV     ?V0 + 0,?V0 + 4
   \   0002B7   75..00       MOV     ?V0 + 1,#0x0
   \   0002BA   C3           CLR     C
   \   0002BB   EE           MOV     A,R6
   \   0002BC   95..         SUBB    A,?V0 + 0
   \   0002BE   EF           MOV     A,R7
   \   0002BF   95..         SUBB    A,?V0 + 1
   \   0002C1   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0002C3   65D0         XRL     A,PSW
   \   0002C5   33           RLC     A
   \   0002C6   4003         JC      $+5
   \   0002C8   02....       LJMP    ??dio_input_5 & 0xFFFF
   \   0002CB   E5..         MOV     A,?V0 + 2
   \   0002CD   2E           ADD     A,R6
   \   0002CE   F582         MOV     DPL,A
   \   0002D0   E5..         MOV     A,?V0 + 3
   \   0002D2   3F           ADDC    A,R7
   \   0002D3   F583         MOV     DPH,A
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   FA           MOV     R2,A
   \   0002D7   EA           MOV     A,R2
   \   0002D8   7008         JNZ     ??dio_input_6
   \   0002DA   75..01       MOV     ?V0 + 0,#0x1
   \   0002DD   75..00       MOV     ?V0 + 1,#0x0
   \   0002E0   8018         SJMP    ??dio_input_7
   \                     ??dio_input_6:
   \   0002E2   E5..         MOV     A,?V0 + 2
   \   0002E4   2E           ADD     A,R6
   \   0002E5   F582         MOV     DPL,A
   \   0002E7   E5..         MOV     A,?V0 + 3
   \   0002E9   3F           ADDC    A,R7
   \   0002EA   F583         MOV     DPH,A
   \   0002EC   A3           INC     DPTR
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   F8           MOV     R0,A
   \   0002EF   7900         MOV     R1,#0x0
   \   0002F1   2402         ADD     A,#0x2
   \   0002F3   F5..         MOV     ?V0 + 0,A
   \   0002F5   E9           MOV     A,R1
   \   0002F6   3400         ADDC    A,#0x0
   \   0002F8   F5..         MOV     ?V0 + 1,A
   \                     ??dio_input_7:
   \   0002FA   85....       MOV     ?V0 + 6,?V0 + 4
   \   0002FD   75..00       MOV     ?V0 + 7,#0x0
   \   000300   E5..         MOV     A,?V0 + 0
   \   000302   2E           ADD     A,R6
   \   000303   F8           MOV     R0,A
   \   000304   E5..         MOV     A,?V0 + 1
   \   000306   3F           ADDC    A,R7
   \   000307   F9           MOV     R1,A
   \   000308   C3           CLR     C
   \   000309   E5..         MOV     A,?V0 + 6
   \   00030B   98           SUBB    A,R0
   \   00030C   E5..         MOV     A,?V0 + 7
   \   00030E   99           SUBB    A,R1
   \   00030F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000311   65D0         XRL     A,PSW
   \   000313   33           RLC     A
   \   000314   5003         JNC     $+5
   \   000316   02....       LJMP    ??dio_input_1 & 0xFFFF
   \   000319   EA           MOV     A,R2
   \   00031A   24FE         ADD     A,#-0x2
   \   00031C   6016         JZ      ??dio_input_8
   \   00031E   14           DEC     A
   \   00031F   7003         JNZ     $+5
   \   000321   02....       LJMP    ??dio_input_9 & 0xFFFF
   \   000324   14           DEC     A
   \   000325   7003         JNZ     $+5
   \   000327   02....       LJMP    ??dio_input_10 & 0xFFFF
   \   00032A   24FC         ADD     A,#-0x4
   \   00032C   7003         JNZ     $+5
   \   00032E   02....       LJMP    ??dio_input_11 & 0xFFFF
   \   000331   02....       LJMP    ??dio_input_4 & 0xFFFF
   \                     ??dio_input_8:
   \   000334   C3           CLR     C
   \   000335   E5..         MOV     A,?V0 + 0
   \   000337   9406         SUBB    A,#0x6
   \   000339   E5..         MOV     A,?V0 + 1
   \   00033B   9400         SUBB    A,#0x0
   \   00033D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00033F   65D0         XRL     A,PSW
   \   000341   33           RLC     A
   \   000342   5003         JNC     $+5
   \   000344   02....       LJMP    ??dio_input_1 & 0xFFFF
   \   000347   E5..         MOV     A,?V0 + 2
   \   000349   2E           ADD     A,R6
   \   00034A   F582         MOV     DPL,A
   \   00034C   E5..         MOV     A,?V0 + 3
   \   00034E   3F           ADDC    A,R7
   \   00034F   F583         MOV     DPH,A
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   E0           MOVX    A,@DPTR
   \   000354   C0E0         PUSH    A
   \   000356   7450         MOV     A,#0x50
   \   000358   12....       LCALL   ?XSTACK_DISP0_8
   \   00035B   D0E0         POP     A
   \   00035D   F0           MOVX    @DPTR,A
   \   00035E   E5..         MOV     A,?V0 + 2
   \   000360   2E           ADD     A,R6
   \   000361   F582         MOV     DPL,A
   \   000363   E5..         MOV     A,?V0 + 3
   \   000365   3F           ADDC    A,R7
   \   000366   F583         MOV     DPH,A
   \   000368   A3           INC     DPTR
   \   000369   A3           INC     DPTR
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   C3           CLR     C
   \   00036D   33           RLC     A
   \   00036E   C0E0         PUSH    A
   \   000370   7451         MOV     A,#0x51
   \   000372   12....       LCALL   ?XSTACK_DISP0_8
   \   000375   D0E0         POP     A
   \   000377   F0           MOVX    @DPTR,A
   \   000378   E5..         MOV     A,?V0 + 2
   \   00037A   2E           ADD     A,R6
   \   00037B   F582         MOV     DPL,A
   \   00037D   E5..         MOV     A,?V0 + 3
   \   00037F   3F           ADDC    A,R7
   \   000380   F583         MOV     DPH,A
   \   000382   A3           INC     DPTR
   \   000383   A3           INC     DPTR
   \   000384   A3           INC     DPTR
   \   000385   A3           INC     DPTR
   \   000386   E0           MOVX    A,@DPTR
   \   000387   A2E7         MOV     C,0xE0 /* A   */.7
   \   000389   E4           CLR     A
   \   00038A   33           RLC     A
   \   00038B   F8           MOV     R0,A
   \   00038C   7451         MOV     A,#0x51
   \   00038E   12....       LCALL   ?XSTACK_DISP0_8
   \   000391   E0           MOVX    A,@DPTR
   \   000392   48           ORL     A,R0
   \   000393   F0           MOVX    @DPTR,A
   \   000394   E5..         MOV     A,?V0 + 2
   \   000396   2E           ADD     A,R6
   \   000397   F582         MOV     DPL,A
   \   000399   E5..         MOV     A,?V0 + 3
   \   00039B   3F           ADDC    A,R7
   \   00039C   F583         MOV     DPH,A
   \   00039E   A3           INC     DPTR
   \   00039F   A3           INC     DPTR
   \   0003A0   A3           INC     DPTR
   \   0003A1   A3           INC     DPTR
   \   0003A2   E0           MOVX    A,@DPTR
   \   0003A3   C4           SWAP    A
   \   0003A4   540F         ANL     A,#0xf
   \   0003A6   5403         ANL     A,#0x3
   \   0003A8   C0E0         PUSH    A
   \   0003AA   7452         MOV     A,#0x52
   \   0003AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AF   D0E0         POP     A
   \   0003B1   F0           MOVX    @DPTR,A
   \   0003B2   E5..         MOV     A,?V0 + 2
   \   0003B4   2E           ADD     A,R6
   \   0003B5   F582         MOV     DPL,A
   \   0003B7   E5..         MOV     A,?V0 + 3
   \   0003B9   3F           ADDC    A,R7
   \   0003BA   F583         MOV     DPH,A
   \   0003BC   A3           INC     DPTR
   \   0003BD   A3           INC     DPTR
   \   0003BE   A3           INC     DPTR
   \   0003BF   A3           INC     DPTR
   \   0003C0   E0           MOVX    A,@DPTR
   \   0003C1   540F         ANL     A,#0xf
   \   0003C3   C0E0         PUSH    A
   \   0003C5   7453         MOV     A,#0x53
   \   0003C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CA   D0E0         POP     A
   \   0003CC   F0           MOVX    @DPTR,A
   \   0003CD   E5..         MOV     A,?V0 + 2
   \   0003CF   2E           ADD     A,R6
   \   0003D0   F582         MOV     DPL,A
   \   0003D2   E5..         MOV     A,?V0 + 3
   \   0003D4   3F           ADDC    A,R7
   \   0003D5   F583         MOV     DPH,A
   \   0003D7   A3           INC     DPTR
   \   0003D8   A3           INC     DPTR
   \   0003D9   A3           INC     DPTR
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   E0           MOVX    A,@DPTR
   \   0003DD   C0E0         PUSH    A
   \   0003DF   7454         MOV     A,#0x54
   \   0003E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E4   D0E0         POP     A
   \   0003E6   F0           MOVX    @DPTR,A
   \   0003E7   7450         MOV     A,#0x50
   \   0003E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EC   E0           MOVX    A,@DPTR
   \   0003ED   6023         JZ      ??dio_input_12
   \   0003EF   7450         MOV     A,#0x50
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E0           MOVX    A,@DPTR
   \   0003F5   6407         XRL     A,#0x7
   \   0003F7   701C         JNZ     ??dio_input_13
   \   0003F9                ; Setup parameters for call to function get16
   \   0003F9   EE           MOV     A,R6
   \   0003FA   2406         ADD     A,#0x6
   \   0003FC   FC           MOV     R4,A
   \   0003FD   EF           MOV     A,R7
   \   0003FE   3400         ADDC    A,#0x0
   \   000400   FD           MOV     R5,A
   \   000401   AA..         MOV     R2,?V0 + 2
   \   000403   AB..         MOV     R3,?V0 + 3
   \   000405   12....       LCALL   ??get16?relay
   \   000408   7455         MOV     A,#0x55
   \   00040A   12....       LCALL   ?XSTACK_DISP0_8
   \   00040D   EA           MOV     A,R2
   \   00040E   F0           MOVX    @DPTR,A
   \   00040F   A3           INC     DPTR
   \   000410   EB           MOV     A,R3
   \   000411   F0           MOVX    @DPTR,A
   \                     ??dio_input_12:
   \   000412   02....       LJMP    ??dio_input_4 & 0xFFFF
   \                     ??dio_input_13:
   \   000415   7450         MOV     A,#0x50
   \   000417   12....       LCALL   ?XSTACK_DISP0_8
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   6402         XRL     A,#0x2
   \   00041D   7039         JNZ     ??dio_input_14
   \   00041F   E5..         MOV     A,?V0 + 2
   \   000421   2E           ADD     A,R6
   \   000422   F582         MOV     DPL,A
   \   000424   E5..         MOV     A,?V0 + 3
   \   000426   3F           ADDC    A,R7
   \   000427   F583         MOV     DPH,A
   \   000429   A3           INC     DPTR
   \   00042A   A3           INC     DPTR
   \   00042B   A3           INC     DPTR
   \   00042C   A3           INC     DPTR
   \   00042D   A3           INC     DPTR
   \   00042E   A3           INC     DPTR
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   C0E0         PUSH    A
   \   000432   7455         MOV     A,#0x55
   \   000434   12....       LCALL   ?XSTACK_DISP0_8
   \   000437   D0E0         POP     A
   \   000439   F0           MOVX    @DPTR,A
   \   00043A   E5..         MOV     A,?V0 + 2
   \   00043C   2E           ADD     A,R6
   \   00043D   F582         MOV     DPL,A
   \   00043F   E5..         MOV     A,?V0 + 3
   \   000441   3F           ADDC    A,R7
   \   000442   F583         MOV     DPH,A
   \   000444   A3           INC     DPTR
   \   000445   A3           INC     DPTR
   \   000446   A3           INC     DPTR
   \   000447   A3           INC     DPTR
   \   000448   A3           INC     DPTR
   \   000449   A3           INC     DPTR
   \   00044A   A3           INC     DPTR
   \   00044B   E0           MOVX    A,@DPTR
   \   00044C   C0E0         PUSH    A
   \   00044E   7456         MOV     A,#0x56
   \   000450   12....       LCALL   ?XSTACK_DISP0_8
   \   000453   D0E0         POP     A
   \   000455   F0           MOVX    @DPTR,A
   \   000456   80BA         SJMP    ??dio_input_12
   \                     ??dio_input_14:
   \   000458   02....       LJMP    ??dio_input_1 & 0xFFFF
   \                     ??dio_input_9:
   \   00045B   C3           CLR     C
   \   00045C   E5..         MOV     A,?V0 + 0
   \   00045E   9409         SUBB    A,#0x9
   \   000460   E5..         MOV     A,?V0 + 1
   \   000462   9400         SUBB    A,#0x0
   \   000464   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000466   65D0         XRL     A,PSW
   \   000468   33           RLC     A
   \   000469   5003         JNC     $+5
   \   00046B   02....       LJMP    ??dio_input_1 & 0xFFFF
   \   00046E   E5..         MOV     A,?V0 + 2
   \   000470   2E           ADD     A,R6
   \   000471   F582         MOV     DPL,A
   \   000473   E5..         MOV     A,?V0 + 3
   \   000475   3F           ADDC    A,R7
   \   000476   F583         MOV     DPH,A
   \   000478   A3           INC     DPTR
   \   000479   A3           INC     DPTR
   \   00047A   E0           MOVX    A,@DPTR
   \   00047B   C0E0         PUSH    A
   \   00047D   7438         MOV     A,#0x38
   \   00047F   12....       LCALL   ?XSTACK_DISP0_8
   \   000482   D0E0         POP     A
   \   000484   F0           MOVX    @DPTR,A
   \   000485   E5..         MOV     A,?V0 + 2
   \   000487   2E           ADD     A,R6
   \   000488   F582         MOV     DPL,A
   \   00048A   E5..         MOV     A,?V0 + 3
   \   00048C   3F           ADDC    A,R7
   \   00048D   F583         MOV     DPH,A
   \   00048F   A3           INC     DPTR
   \   000490   A3           INC     DPTR
   \   000491   A3           INC     DPTR
   \   000492   E0           MOVX    A,@DPTR
   \   000493   C0E0         PUSH    A
   \   000495   7439         MOV     A,#0x39
   \   000497   12....       LCALL   ?XSTACK_DISP0_8
   \   00049A   D0E0         POP     A
   \   00049C   F0           MOVX    @DPTR,A
   \   00049D                ; Setup parameters for call to function get32
   \   00049D   EE           MOV     A,R6
   \   00049E   2404         ADD     A,#0x4
   \   0004A0   FC           MOV     R4,A
   \   0004A1   EF           MOV     A,R7
   \   0004A2   3400         ADDC    A,#0x0
   \   0004A4   FD           MOV     R5,A
   \   0004A5   AA..         MOV     R2,?V0 + 2
   \   0004A7   AB..         MOV     R3,?V0 + 3
   \   0004A9   12....       LCALL   ??get32?relay
   \   0004AC   7434         MOV     A,#0x34
   \   0004AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B1   12....       LCALL   ?XSTORE_R2345
   \   0004B4   7438         MOV     A,#0x38
   \   0004B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B9   E0           MOVX    A,@DPTR
   \   0004BA   F8           MOV     R0,A
   \   0004BB   7900         MOV     R1,#0x0
   \   0004BD   2407         ADD     A,#0x7
   \   0004BF   F8           MOV     R0,A
   \   0004C0   E9           MOV     A,R1
   \   0004C1   3400         ADDC    A,#0x0
   \   0004C3   F9           MOV     R1,A
   \   0004C4   7A08         MOV     R2,#0x8
   \   0004C6   7B00         MOV     R3,#0x0
   \   0004C8   12....       LCALL   ?S_DIV_MOD
   \   0004CB   88..         MOV     ?V0 + 6,R0
   \   0004CD   89..         MOV     ?V0 + 7,R1
   \   0004CF   E5..         MOV     A,?V0 + 6
   \   0004D1   2408         ADD     A,#0x8
   \   0004D3   F8           MOV     R0,A
   \   0004D4   E5..         MOV     A,?V0 + 7
   \   0004D6   3400         ADDC    A,#0x0
   \   0004D8   F9           MOV     R1,A
   \   0004D9   C3           CLR     C
   \   0004DA   E5..         MOV     A,?V0 + 0
   \   0004DC   98           SUBB    A,R0
   \   0004DD   E5..         MOV     A,?V0 + 1
   \   0004DF   99           SUBB    A,R1
   \   0004E0   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0004E2   65D0         XRL     A,PSW
   \   0004E4   33           RLC     A
   \   0004E5   404F         JC      ??dio_input_15
   \   0004E7   7438         MOV     A,#0x38
   \   0004E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EC   E0           MOVX    A,@DPTR
   \   0004ED   C3           CLR     C
   \   0004EE   9481         SUBB    A,#-0x7f
   \   0004F0   5044         JNC     ??dio_input_15
   \   0004F2                ; Setup parameters for call to function memcpy
   \   0004F2   7438         MOV     A,#0x38
   \   0004F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F7   E0           MOVX    A,@DPTR
   \   0004F8   F8           MOV     R0,A
   \   0004F9   7900         MOV     R1,#0x0
   \   0004FB   2407         ADD     A,#0x7
   \   0004FD   F8           MOV     R0,A
   \   0004FE   E9           MOV     A,R1
   \   0004FF   3400         ADDC    A,#0x0
   \   000501   F9           MOV     R1,A
   \   000502   7A08         MOV     R2,#0x8
   \   000504   7B00         MOV     R3,#0x0
   \   000506   12....       LCALL   ?S_DIV_MOD
   \   000509   88..         MOV     ?V0 + 6,R0
   \   00050B   89..         MOV     ?V0 + 7,R1
   \   00050D   78..         MOV     R0,#?V0 + 6
   \   00050F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000512   E5..         MOV     A,?V0 + 2
   \   000514   2E           ADD     A,R6
   \   000515   F8           MOV     R0,A
   \   000516   E5..         MOV     A,?V0 + 3
   \   000518   3F           ADDC    A,R7
   \   000519   F9           MOV     R1,A
   \   00051A   E8           MOV     A,R0
   \   00051B   2408         ADD     A,#0x8
   \   00051D   FC           MOV     R4,A
   \   00051E   E9           MOV     A,R1
   \   00051F   3400         ADDC    A,#0x0
   \   000521   FD           MOV     R5,A
   \   000522   7426         MOV     A,#0x26
   \   000524   12....       LCALL   ?XSTACK_DISP0_8
   \   000527   AA82         MOV     R2,DPL
   \   000529   AB83         MOV     R3,DPH
   \   00052B   12....       LCALL   ??memcpy?relay
   \   00052E   7402         MOV     A,#0x2
   \   000530   12....       LCALL   ?DEALLOC_XSTACK8
   \   000533   02....       LJMP    ??dio_input_4 & 0xFFFF
   \                     ??dio_input_15:
   \   000536   02....       LJMP    ??dio_input_1 & 0xFFFF
   \                     ??dio_input_10:
   \   000539   7410         MOV     A,#0x10
   \   00053B   65..         XRL     A,?V0 + 0
   \   00053D   7004         JNZ     ??dio_input_16
   \   00053F   7400         MOV     A,#0x0
   \   000541   65..         XRL     A,?V0 + 1
   \                     ??dio_input_16:
   \   000543   6003         JZ      $+5
   \   000545   02....       LJMP    ??dio_input_1 & 0xFFFF
   \   000548   E5..         MOV     A,?V0 + 2
   \   00054A   2E           ADD     A,R6
   \   00054B   F582         MOV     DPL,A
   \   00054D   E5..         MOV     A,?V0 + 3
   \   00054F   3F           ADDC    A,R7
   \   000550   F583         MOV     DPH,A
   \   000552   A3           INC     DPTR
   \   000553   A3           INC     DPTR
   \   000554   A3           INC     DPTR
   \   000555   E0           MOVX    A,@DPTR
   \   000556   C0E0         PUSH    A
   \   000558   741A         MOV     A,#0x1a
   \   00055A   12....       LCALL   ?XSTACK_DISP0_8
   \   00055D   D0E0         POP     A
   \   00055F   F0           MOVX    @DPTR,A
   \   000560   E5..         MOV     A,?V0 + 2
   \   000562   2E           ADD     A,R6
   \   000563   F582         MOV     DPL,A
   \   000565   E5..         MOV     A,?V0 + 3
   \   000567   3F           ADDC    A,R7
   \   000568   F583         MOV     DPH,A
   \   00056A   A3           INC     DPTR
   \   00056B   A3           INC     DPTR
   \   00056C   A3           INC     DPTR
   \   00056D   A3           INC     DPTR
   \   00056E   E0           MOVX    A,@DPTR
   \   00056F   C0E0         PUSH    A
   \   000571   741B         MOV     A,#0x1b
   \   000573   12....       LCALL   ?XSTACK_DISP0_8
   \   000576   D0E0         POP     A
   \   000578   F0           MOVX    @DPTR,A
   \   000579   E5..         MOV     A,?V0 + 2
   \   00057B   2E           ADD     A,R6
   \   00057C   F582         MOV     DPL,A
   \   00057E   E5..         MOV     A,?V0 + 3
   \   000580   3F           ADDC    A,R7
   \   000581   F583         MOV     DPH,A
   \   000583   A3           INC     DPTR
   \   000584   A3           INC     DPTR
   \   000585   A3           INC     DPTR
   \   000586   A3           INC     DPTR
   \   000587   A3           INC     DPTR
   \   000588   E0           MOVX    A,@DPTR
   \   000589   C0E0         PUSH    A
   \   00058B   741C         MOV     A,#0x1c
   \   00058D   12....       LCALL   ?XSTACK_DISP0_8
   \   000590   D0E0         POP     A
   \   000592   F0           MOVX    @DPTR,A
   \   000593                ; Setup parameters for call to function get16
   \   000593   EE           MOV     A,R6
   \   000594   2406         ADD     A,#0x6
   \   000596   FC           MOV     R4,A
   \   000597   EF           MOV     A,R7
   \   000598   3400         ADDC    A,#0x0
   \   00059A   FD           MOV     R5,A
   \   00059B   AA..         MOV     R2,?V0 + 2
   \   00059D   AB..         MOV     R3,?V0 + 3
   \   00059F   12....       LCALL   ??get16?relay
   \   0005A2   7420         MOV     A,#0x20
   \   0005A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A7   EA           MOV     A,R2
   \   0005A8   F0           MOVX    @DPTR,A
   \   0005A9   A3           INC     DPTR
   \   0005AA   EB           MOV     A,R3
   \   0005AB   F0           MOVX    @DPTR,A
   \   0005AC                ; Setup parameters for call to function get16
   \   0005AC   EE           MOV     A,R6
   \   0005AD   2408         ADD     A,#0x8
   \   0005AF   FC           MOV     R4,A
   \   0005B0   EF           MOV     A,R7
   \   0005B1   3400         ADDC    A,#0x0
   \   0005B3   FD           MOV     R5,A
   \   0005B4   AA..         MOV     R2,?V0 + 2
   \   0005B6   AB..         MOV     R3,?V0 + 3
   \   0005B8   12....       LCALL   ??get16?relay
   \   0005BB   7422         MOV     A,#0x22
   \   0005BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C0   EA           MOV     A,R2
   \   0005C1   F0           MOVX    @DPTR,A
   \   0005C2   A3           INC     DPTR
   \   0005C3   EB           MOV     A,R3
   \   0005C4   F0           MOVX    @DPTR,A
   \   0005C5                ; Setup parameters for call to function get16
   \   0005C5   EE           MOV     A,R6
   \   0005C6   240A         ADD     A,#0xa
   \   0005C8   FC           MOV     R4,A
   \   0005C9   EF           MOV     A,R7
   \   0005CA   3400         ADDC    A,#0x0
   \   0005CC   FD           MOV     R5,A
   \   0005CD   AA..         MOV     R2,?V0 + 2
   \   0005CF   AB..         MOV     R3,?V0 + 3
   \   0005D1   12....       LCALL   ??get16?relay
   \   0005D4   7410         MOV     A,#0x10
   \   0005D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0005D9   EA           MOV     A,R2
   \   0005DA   F0           MOVX    @DPTR,A
   \   0005DB   A3           INC     DPTR
   \   0005DC   EB           MOV     A,R3
   \   0005DD   F0           MOVX    @DPTR,A
   \   0005DE   E5..         MOV     A,?V0 + 2
   \   0005E0   2E           ADD     A,R6
   \   0005E1   F8           MOV     R0,A
   \   0005E2   E5..         MOV     A,?V0 + 3
   \   0005E4   3F           ADDC    A,R7
   \   0005E5   F9           MOV     R1,A
   \   0005E6   E8           MOV     A,R0
   \   0005E7   240D         ADD     A,#0xd
   \   0005E9   F582         MOV     DPL,A
   \   0005EB   E9           MOV     A,R1
   \   0005EC   3400         ADDC    A,#0x0
   \   0005EE   F583         MOV     DPH,A
   \   0005F0   E0           MOVX    A,@DPTR
   \   0005F1   C0E0         PUSH    A
   \   0005F3   741D         MOV     A,#0x1d
   \   0005F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0005F8   D0E0         POP     A
   \   0005FA   F0           MOVX    @DPTR,A
   \   0005FB                ; Setup parameters for call to function get16
   \   0005FB   EE           MOV     A,R6
   \   0005FC   240E         ADD     A,#0xe
   \   0005FE   FC           MOV     R4,A
   \   0005FF   EF           MOV     A,R7
   \   000600   3400         ADDC    A,#0x0
   \   000602   FD           MOV     R5,A
   \   000603   AA..         MOV     R2,?V0 + 2
   \   000605   AB..         MOV     R3,?V0 + 3
   \   000607   12....       LCALL   ??get16?relay
   \   00060A   741E         MOV     A,#0x1e
   \   00060C   12....       LCALL   ?XSTACK_DISP0_8
   \   00060F   EA           MOV     A,R2
   \   000610   F0           MOVX    @DPTR,A
   \   000611   A3           INC     DPTR
   \   000612   EB           MOV     A,R3
   \   000613   F0           MOVX    @DPTR,A
   \   000614   02....       LJMP    ??dio_input_4 & 0xFFFF
   \                     ??dio_input_11:
   \   000617   7420         MOV     A,#0x20
   \   000619   65..         XRL     A,?V0 + 0
   \   00061B   7004         JNZ     ??dio_input_17
   \   00061D   7400         MOV     A,#0x0
   \   00061F   65..         XRL     A,?V0 + 1
   \                     ??dio_input_17:
   \   000621   7003         JNZ     $+5
   \   000623   02....       LJMP    ??dio_input_3 & 0xFFFF
   \   000626   8016         SJMP    ??dio_input_1
    402              default:
    403                PRINTF("RPL: Unsupported suboption type in DIO: %u\n",
    404          	(unsigned)subopt_type);
    405              }
    406            }
    407          
    408          #ifdef RPL_DEBUG_DIO_INPUT
    409            RPL_DEBUG_DIO_INPUT(&from, &dio);
    410          #endif
    411          
    412            rpl_process_dio(&from, &dio);
   \                     ??dio_input_5:
   \   000628                ; Setup parameters for call to function rpl_process_dio
   \   000628   85..82       MOV     DPL,?XSP + 0
   \   00062B   85..83       MOV     DPH,?XSP + 1
   \   00062E   AC82         MOV     R4,DPL
   \   000630   AD83         MOV     R5,DPH
   \   000632   7457         MOV     A,#0x57
   \   000634   12....       LCALL   ?XSTACK_DISP0_8
   \   000637   AA82         MOV     R2,DPL
   \   000639   AB83         MOV     R3,DPH
   \   00063B   12....       LCALL   ??rpl_process_dio?relay
    413          }
   \                     ??dio_input_1:
   \   00063E   7467         MOV     A,#0x67
   \   000640   12....       LCALL   ?DEALLOC_XSTACK8
   \   000643   7F08         MOV     R7,#0x8
   \   000645   02....       LJMP    ?BANKED_LEAVE_XDATA
    414          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void
    416          dio_output(rpl_instance_t *instance, uip_ipaddr_t *uc_addr)
   \                     dio_output:
    417          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   8C..         MOV     ?V0 + 4,R4
   \   000010   8D..         MOV     ?V0 + 5,R5
    418            unsigned char *buffer;
    419            int pos;
    420            rpl_dag_t *dag = instance->current_dag;
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   85..83       MOV     DPH,?V0 + 1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 3,A
    421          #if !RPL_LEAF_ONLY
    422            uip_ipaddr_t addr;
    423          #endif /* !RPL_LEAF_ONLY */
    424          
    425          #if RPL_LEAF_ONLY
    426            /* In leaf mode, we send DIO message only as unicasts in response to 
    427               unicast DIS messages. */
    428            if(uc_addr == NULL) {
    429              PRINTF("RPL: LEAF ONLY have multicast addr: skip dio_output\n");
    430              return;
    431            }
    432          #endif /* RPL_LEAF_ONLY */
    433          
    434            /* DAG Information Object */
    435            pos = 0;
   \   000028   75..00       MOV     ?V0 + 6,#0x0
   \   00002B   75..00       MOV     ?V0 + 7,#0x0
    436          
    437            buffer = UIP_ICMP_PAYLOAD;
   \   00002E   90....       MOV     DPTR,#uip_ext_len
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   7900         MOV     R1,#0x0
   \   000035   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000037   28           ADD     A,R0
   \   000038   FE           MOV     R6,A
   \   000039   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   00003B   39           ADDC    A,R1
   \   00003C   FF           MOV     R7,A
    438            buffer[pos++] = instance->instance_id;
   \   00003D   E5..         MOV     A,?V0 + 0
   \   00003F   247B         ADD     A,#0x7b
   \   000041   F582         MOV     DPL,A
   \   000043   E5..         MOV     A,?V0 + 1
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   EE           MOV     A,R6
   \   00004D   25..         ADD     A,?V0 + 6
   \   00004F   F582         MOV     DPL,A
   \   000051   EF           MOV     A,R7
   \   000052   35..         ADDC    A,?V0 + 7
   \   000054   F583         MOV     DPH,A
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E5..         MOV     A,?V0 + 6
   \   00005B   2401         ADD     A,#0x1
   \   00005D   F5..         MOV     ?V0 + 6,A
   \   00005F   E5..         MOV     A,?V0 + 7
   \   000061   3400         ADDC    A,#0x0
   \   000063   F5..         MOV     ?V0 + 7,A
    439            buffer[pos++] = dag->version;
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   2412         ADD     A,#0x12
   \   000069   F582         MOV     DPL,A
   \   00006B   E5..         MOV     A,?V0 + 3
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C0E0         PUSH    A
   \   000074   EE           MOV     A,R6
   \   000075   25..         ADD     A,?V0 + 6
   \   000077   F582         MOV     DPL,A
   \   000079   EF           MOV     A,R7
   \   00007A   35..         ADDC    A,?V0 + 7
   \   00007C   F583         MOV     DPH,A
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   E5..         MOV     A,?V0 + 6
   \   000083   2401         ADD     A,#0x1
   \   000085   F5..         MOV     ?V0 + 6,A
   \   000087   E5..         MOV     A,?V0 + 7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F5..         MOV     ?V0 + 7,A
    440          
    441          #if RPL_LEAF_ONLY
    442            PRINTF("RPL: LEAF ONLY DIO rank set to INFINITE_RANK\n");
    443            set16(buffer, pos, INFINITE_RANK);
    444          #else /* RPL_LEAF_ONLY */
    445            set16(buffer, pos, dag->rank);
   \   00008D                ; Setup parameters for call to function set16
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   2419         ADD     A,#0x19
   \   000091   F582         MOV     DPL,A
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   3400         ADDC    A,#0x0
   \   000097   F583         MOV     DPH,A
   \   000099   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009C   AC..         MOV     R4,?V0 + 6
   \   00009E   AD..         MOV     R5,?V0 + 7
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??set16?relay
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
    446          #endif /* RPL_LEAF_ONLY */
    447            pos += 2;
   \   0000AC   E5..         MOV     A,?V0 + 6
   \   0000AE   2402         ADD     A,#0x2
   \   0000B0   F5..         MOV     ?V0 + 6,A
   \   0000B2   E5..         MOV     A,?V0 + 7
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   F5..         MOV     ?V0 + 7,A
    448          
    449            buffer[pos] = 0;
   \   0000B8   EE           MOV     A,R6
   \   0000B9   25..         ADD     A,?V0 + 6
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   35..         ADDC    A,?V0 + 7
   \   0000C0   F583         MOV     DPH,A
   \   0000C2   7400         MOV     A,#0x0
   \   0000C4   F0           MOVX    @DPTR,A
    450            if(dag->grounded) {
   \   0000C5   E5..         MOV     A,?V0 + 2
   \   0000C7   2413         ADD     A,#0x13
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   E5..         MOV     A,?V0 + 3
   \   0000CD   3400         ADDC    A,#0x0
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   600E         JZ      ??dio_output_0
    451              buffer[pos] |= RPL_DIO_GROUNDED;
   \   0000D4   EE           MOV     A,R6
   \   0000D5   25..         ADD     A,?V0 + 6
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   EF           MOV     A,R7
   \   0000DA   35..         ADDC    A,?V0 + 7
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   D2E7         SETB    0xE0 /* A   */.7
   \   0000E1   F0           MOVX    @DPTR,A
    452            }
    453          
    454            buffer[pos] |= instance->mop << RPL_DIO_MOP_SHIFT;
   \                     ??dio_output_0:
   \   0000E2   E5..         MOV     A,?V0 + 0
   \   0000E4   247E         ADD     A,#0x7e
   \   0000E6   F582         MOV     DPL,A
   \   0000E8   E5..         MOV     A,?V0 + 1
   \   0000EA   3400         ADDC    A,#0x0
   \   0000EC   F583         MOV     DPH,A
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   33           RLC     A
   \   0000F0   33           RLC     A
   \   0000F1   33           RLC     A
   \   0000F2   54F8         ANL     A,#0xf8
   \   0000F4   F8           MOV     R0,A
   \   0000F5   EE           MOV     A,R6
   \   0000F6   25..         ADD     A,?V0 + 6
   \   0000F8   F582         MOV     DPL,A
   \   0000FA   EF           MOV     A,R7
   \   0000FB   35..         ADDC    A,?V0 + 7
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   48           ORL     A,R0
   \   000101   F0           MOVX    @DPTR,A
    455            buffer[pos] |= dag->preference & RPL_DIO_PREFERENCE_MASK;
   \   000102   E5..         MOV     A,?V0 + 2
   \   000104   2414         ADD     A,#0x14
   \   000106   F582         MOV     DPL,A
   \   000108   E5..         MOV     A,?V0 + 3
   \   00010A   3400         ADDC    A,#0x0
   \   00010C   F583         MOV     DPH,A
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   5407         ANL     A,#0x7
   \   000111   F8           MOV     R0,A
   \   000112   EE           MOV     A,R6
   \   000113   25..         ADD     A,?V0 + 6
   \   000115   F582         MOV     DPL,A
   \   000117   EF           MOV     A,R7
   \   000118   35..         ADDC    A,?V0 + 7
   \   00011A   F583         MOV     DPH,A
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   48           ORL     A,R0
   \   00011E   F0           MOVX    @DPTR,A
    456            pos++;
   \   00011F   E5..         MOV     A,?V0 + 6
   \   000121   2401         ADD     A,#0x1
   \   000123   F5..         MOV     ?V0 + 6,A
   \   000125   E5..         MOV     A,?V0 + 7
   \   000127   3400         ADDC    A,#0x0
   \   000129   F5..         MOV     ?V0 + 7,A
    457          
    458            buffer[pos++] = instance->dtsn_out;
   \   00012B   E5..         MOV     A,?V0 + 0
   \   00012D   247D         ADD     A,#0x7d
   \   00012F   F582         MOV     DPL,A
   \   000131   E5..         MOV     A,?V0 + 1
   \   000133   3400         ADDC    A,#0x0
   \   000135   F583         MOV     DPH,A
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   EE           MOV     A,R6
   \   00013B   25..         ADD     A,?V0 + 6
   \   00013D   F582         MOV     DPL,A
   \   00013F   EF           MOV     A,R7
   \   000140   35..         ADDC    A,?V0 + 7
   \   000142   F583         MOV     DPH,A
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   E5..         MOV     A,?V0 + 6
   \   000149   2401         ADD     A,#0x1
   \   00014B   F5..         MOV     ?V0 + 6,A
   \   00014D   E5..         MOV     A,?V0 + 7
   \   00014F   3400         ADDC    A,#0x0
   \   000151   F5..         MOV     ?V0 + 7,A
    459          
    460            /* always request new DAO to refresh route */
    461            RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
   \   000153   E5..         MOV     A,?V0 + 0
   \   000155   247D         ADD     A,#0x7d
   \   000157   F582         MOV     DPL,A
   \   000159   E5..         MOV     A,?V0 + 1
   \   00015B   3400         ADDC    A,#0x0
   \   00015D   F583         MOV     DPH,A
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C3           CLR     C
   \   000161   9480         SUBB    A,#-0x80
   \   000163   4012         JC      ??dio_output_1
   \   000165   E5..         MOV     A,?V0 + 0
   \   000167   247D         ADD     A,#0x7d
   \   000169   F582         MOV     DPL,A
   \   00016B   E5..         MOV     A,?V0 + 1
   \   00016D   3400         ADDC    A,#0x0
   \   00016F   F583         MOV     DPH,A
   \   000171   E0           MOVX    A,@DPTR
   \   000172   2401         ADD     A,#0x1
   \   000174   F0           MOVX    @DPTR,A
   \   000175   8022         SJMP    ??dio_output_2
   \                     ??dio_output_1:
   \   000177   E5..         MOV     A,?V0 + 0
   \   000179   247D         ADD     A,#0x7d
   \   00017B   F582         MOV     DPL,A
   \   00017D   E5..         MOV     A,?V0 + 1
   \   00017F   3400         ADDC    A,#0x0
   \   000181   F583         MOV     DPH,A
   \   000183   E0           MOVX    A,@DPTR
   \   000184   2401         ADD     A,#0x1
   \   000186   547F         ANL     A,#0x7f
   \   000188   C0E0         PUSH    A
   \   00018A   E5..         MOV     A,?V0 + 0
   \   00018C   247D         ADD     A,#0x7d
   \   00018E   F582         MOV     DPL,A
   \   000190   E5..         MOV     A,?V0 + 1
   \   000192   3400         ADDC    A,#0x0
   \   000194   F583         MOV     DPH,A
   \   000196   D0E0         POP     A
   \   000198   F0           MOVX    @DPTR,A
    462          
    463            /* reserved 2 bytes */
    464            buffer[pos++] = 0; /* flags */
   \                     ??dio_output_2:
   \   000199   EE           MOV     A,R6
   \   00019A   25..         ADD     A,?V0 + 6
   \   00019C   F582         MOV     DPL,A
   \   00019E   EF           MOV     A,R7
   \   00019F   35..         ADDC    A,?V0 + 7
   \   0001A1   F583         MOV     DPH,A
   \   0001A3   7400         MOV     A,#0x0
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   E5..         MOV     A,?V0 + 6
   \   0001A8   2401         ADD     A,#0x1
   \   0001AA   F5..         MOV     ?V0 + 6,A
   \   0001AC   E5..         MOV     A,?V0 + 7
   \   0001AE   3400         ADDC    A,#0x0
   \   0001B0   F5..         MOV     ?V0 + 7,A
    465            buffer[pos++] = 0; /* reserved */
   \   0001B2   EE           MOV     A,R6
   \   0001B3   25..         ADD     A,?V0 + 6
   \   0001B5   F582         MOV     DPL,A
   \   0001B7   EF           MOV     A,R7
   \   0001B8   35..         ADDC    A,?V0 + 7
   \   0001BA   F583         MOV     DPH,A
   \   0001BC   7400         MOV     A,#0x0
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   E5..         MOV     A,?V0 + 6
   \   0001C1   2401         ADD     A,#0x1
   \   0001C3   F5..         MOV     ?V0 + 6,A
   \   0001C5   E5..         MOV     A,?V0 + 7
   \   0001C7   3400         ADDC    A,#0x0
   \   0001C9   F5..         MOV     ?V0 + 7,A
    466          
    467            memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
   \   0001CB                ; Setup parameters for call to function memcpy
   \   0001CB   75..10       MOV     ?V0 + 8,#0x10
   \   0001CE   75..00       MOV     ?V0 + 9,#0x0
   \   0001D1   78..         MOV     R0,#?V0 + 8
   \   0001D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D6   AC..         MOV     R4,?V0 + 2
   \   0001D8   AD..         MOV     R5,?V0 + 3
   \   0001DA   EE           MOV     A,R6
   \   0001DB   25..         ADD     A,?V0 + 6
   \   0001DD   FA           MOV     R2,A
   \   0001DE   EF           MOV     A,R7
   \   0001DF   35..         ADDC    A,?V0 + 7
   \   0001E1   FB           MOV     R3,A
   \   0001E2   12....       LCALL   ??memcpy?relay
   \   0001E5   7402         MOV     A,#0x2
   \   0001E7   12....       LCALL   ?DEALLOC_XSTACK8
    468            pos += 16;
   \   0001EA   E5..         MOV     A,?V0 + 6
   \   0001EC   2410         ADD     A,#0x10
   \   0001EE   F5..         MOV     ?V0 + 6,A
   \   0001F0   E5..         MOV     A,?V0 + 7
   \   0001F2   3400         ADDC    A,#0x0
   \   0001F4   F5..         MOV     ?V0 + 7,A
    469          
    470          #if !RPL_LEAF_ONLY
    471            if(instance->mc.type != RPL_DAG_MC_NONE) {
   \   0001F6   85..82       MOV     DPL,?V0 + 0
   \   0001F9   85..83       MOV     DPH,?V0 + 1
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   7003         JNZ     $+5
   \   0001FF   02....       LJMP    ??dio_output_3 & 0xFFFF
    472              instance->of->update_metric_container(instance);
   \   000202                ; Setup parameters for indirect call
   \   000202   AA..         MOV     R2,?V0 + 0
   \   000204   AB..         MOV     R3,?V0 + 1
   \   000206   85..82       MOV     DPL,?V0 + 0
   \   000209   85..83       MOV     DPH,?V0 + 1
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   F8           MOV     R0,A
   \   000215   A3           INC     DPTR
   \   000216   E0           MOVX    A,@DPTR
   \   000217   C8           XCH     A,R0
   \   000218   240A         ADD     A,#0xa
   \   00021A   F582         MOV     DPL,A
   \   00021C   E8           MOV     A,R0
   \   00021D   3400         ADDC    A,#0x0
   \   00021F   F583         MOV     DPH,A
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F8           MOV     R0,A
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F583         MOV     DPH,A
   \   000227   8882         MOV     DPL,R0
   \   000229   12....       LCALL   ?CALL_IND
    473          
    474              buffer[pos++] = RPL_OPTION_DAG_METRIC_CONTAINER;
   \   00022C   EE           MOV     A,R6
   \   00022D   25..         ADD     A,?V0 + 6
   \   00022F   F582         MOV     DPL,A
   \   000231   EF           MOV     A,R7
   \   000232   35..         ADDC    A,?V0 + 7
   \   000234   F583         MOV     DPH,A
   \   000236   7402         MOV     A,#0x2
   \   000238   F0           MOVX    @DPTR,A
   \   000239   E5..         MOV     A,?V0 + 6
   \   00023B   2401         ADD     A,#0x1
   \   00023D   F5..         MOV     ?V0 + 6,A
   \   00023F   E5..         MOV     A,?V0 + 7
   \   000241   3400         ADDC    A,#0x0
   \   000243   F5..         MOV     ?V0 + 7,A
    475              buffer[pos++] = 6;
   \   000245   EE           MOV     A,R6
   \   000246   25..         ADD     A,?V0 + 6
   \   000248   F582         MOV     DPL,A
   \   00024A   EF           MOV     A,R7
   \   00024B   35..         ADDC    A,?V0 + 7
   \   00024D   F583         MOV     DPH,A
   \   00024F   7406         MOV     A,#0x6
   \   000251   F0           MOVX    @DPTR,A
   \   000252   E5..         MOV     A,?V0 + 6
   \   000254   2401         ADD     A,#0x1
   \   000256   F5..         MOV     ?V0 + 6,A
   \   000258   E5..         MOV     A,?V0 + 7
   \   00025A   3400         ADDC    A,#0x0
   \   00025C   F5..         MOV     ?V0 + 7,A
    476              buffer[pos++] = instance->mc.type;
   \   00025E   85..82       MOV     DPL,?V0 + 0
   \   000261   85..83       MOV     DPH,?V0 + 1
   \   000264   E0           MOVX    A,@DPTR
   \   000265   C0E0         PUSH    A
   \   000267   EE           MOV     A,R6
   \   000268   25..         ADD     A,?V0 + 6
   \   00026A   F582         MOV     DPL,A
   \   00026C   EF           MOV     A,R7
   \   00026D   35..         ADDC    A,?V0 + 7
   \   00026F   F583         MOV     DPH,A
   \   000271   D0E0         POP     A
   \   000273   F0           MOVX    @DPTR,A
   \   000274   E5..         MOV     A,?V0 + 6
   \   000276   2401         ADD     A,#0x1
   \   000278   F5..         MOV     ?V0 + 6,A
   \   00027A   E5..         MOV     A,?V0 + 7
   \   00027C   3400         ADDC    A,#0x0
   \   00027E   F5..         MOV     ?V0 + 7,A
    477              buffer[pos++] = instance->mc.flags >> 1;
   \   000280   85..82       MOV     DPL,?V0 + 0
   \   000283   85..83       MOV     DPH,?V0 + 1
   \   000286   A3           INC     DPTR
   \   000287   E0           MOVX    A,@DPTR
   \   000288   C3           CLR     C
   \   000289   13           RRC     A
   \   00028A   C0E0         PUSH    A
   \   00028C   EE           MOV     A,R6
   \   00028D   25..         ADD     A,?V0 + 6
   \   00028F   F582         MOV     DPL,A
   \   000291   EF           MOV     A,R7
   \   000292   35..         ADDC    A,?V0 + 7
   \   000294   F583         MOV     DPH,A
   \   000296   D0E0         POP     A
   \   000298   F0           MOVX    @DPTR,A
   \   000299   E5..         MOV     A,?V0 + 6
   \   00029B   2401         ADD     A,#0x1
   \   00029D   F5..         MOV     ?V0 + 6,A
   \   00029F   E5..         MOV     A,?V0 + 7
   \   0002A1   3400         ADDC    A,#0x0
   \   0002A3   F5..         MOV     ?V0 + 7,A
    478              buffer[pos] = (instance->mc.flags & 1) << 7;
   \   0002A5   85..82       MOV     DPL,?V0 + 0
   \   0002A8   85..83       MOV     DPH,?V0 + 1
   \   0002AB   A3           INC     DPTR
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002AF   E4           CLR     A
   \   0002B0   33           RLC     A
   \   0002B1   13           RRC     A
   \   0002B2   13           RRC     A
   \   0002B3   5480         ANL     A,#0x80
   \   0002B5   C0E0         PUSH    A
   \   0002B7   EE           MOV     A,R6
   \   0002B8   25..         ADD     A,?V0 + 6
   \   0002BA   F582         MOV     DPL,A
   \   0002BC   EF           MOV     A,R7
   \   0002BD   35..         ADDC    A,?V0 + 7
   \   0002BF   F583         MOV     DPH,A
   \   0002C1   D0E0         POP     A
   \   0002C3   F0           MOVX    @DPTR,A
    479              buffer[pos++] |= (instance->mc.aggr << 4) | instance->mc.prec;
   \   0002C4   A8..         MOV     R0,?V0 + 6
   \   0002C6   A9..         MOV     R1,?V0 + 7
   \   0002C8   E8           MOV     A,R0
   \   0002C9   2401         ADD     A,#0x1
   \   0002CB   F5..         MOV     ?V0 + 6,A
   \   0002CD   E9           MOV     A,R1
   \   0002CE   3400         ADDC    A,#0x0
   \   0002D0   F5..         MOV     ?V0 + 7,A
   \   0002D2   85..82       MOV     DPL,?V0 + 0
   \   0002D5   85..83       MOV     DPH,?V0 + 1
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   FA           MOV     R2,A
   \   0002DD   85..82       MOV     DPL,?V0 + 0
   \   0002E0   85..83       MOV     DPH,?V0 + 1
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   C4           SWAP    A
   \   0002E7   54F0         ANL     A,#0xf0
   \   0002E9   4A           ORL     A,R2
   \   0002EA   FA           MOV     R2,A
   \   0002EB   EE           MOV     A,R6
   \   0002EC   28           ADD     A,R0
   \   0002ED   F582         MOV     DPL,A
   \   0002EF   EF           MOV     A,R7
   \   0002F0   39           ADDC    A,R1
   \   0002F1   F583         MOV     DPH,A
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   4A           ORL     A,R2
   \   0002F5   F0           MOVX    @DPTR,A
    480              if(instance->mc.type == RPL_DAG_MC_ETX) {
   \   0002F6   85..82       MOV     DPL,?V0 + 0
   \   0002F9   85..83       MOV     DPH,?V0 + 1
   \   0002FC   E0           MOVX    A,@DPTR
   \   0002FD   6407         XRL     A,#0x7
   \   0002FF   6003         JZ      $+5
   \   000301   02....       LJMP    ??dio_output_4 & 0xFFFF
    481                buffer[pos++] = 2;
   \   000304   EE           MOV     A,R6
   \   000305   25..         ADD     A,?V0 + 6
   \   000307   F582         MOV     DPL,A
   \   000309   EF           MOV     A,R7
   \   00030A   35..         ADDC    A,?V0 + 7
   \   00030C   F583         MOV     DPH,A
   \   00030E   7402         MOV     A,#0x2
   \   000310   F0           MOVX    @DPTR,A
   \   000311   E5..         MOV     A,?V0 + 6
   \   000313   2401         ADD     A,#0x1
   \   000315   F5..         MOV     ?V0 + 6,A
   \   000317   E5..         MOV     A,?V0 + 7
   \   000319   3400         ADDC    A,#0x0
   \   00031B   F5..         MOV     ?V0 + 7,A
    482                set16(buffer, pos, instance->mc.obj.etx);
   \   00031D                ; Setup parameters for call to function set16
   \   00031D   85..82       MOV     DPL,?V0 + 0
   \   000320   85..83       MOV     DPH,?V0 + 1
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   A3           INC     DPTR
   \   000326   A3           INC     DPTR
   \   000327   A3           INC     DPTR
   \   000328   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00032B   AC..         MOV     R4,?V0 + 6
   \   00032D   AD..         MOV     R5,?V0 + 7
   \   00032F   EE           MOV     A,R6
   \   000330   FA           MOV     R2,A
   \   000331   EF           MOV     A,R7
   \   000332   FB           MOV     R3,A
   \   000333   12....       LCALL   ??set16?relay
   \   000336   7402         MOV     A,#0x2
   \   000338   12....       LCALL   ?DEALLOC_XSTACK8
    483                pos += 2;
   \   00033B   E5..         MOV     A,?V0 + 6
   \   00033D   2402         ADD     A,#0x2
   \   00033F   F5..         MOV     ?V0 + 6,A
   \   000341   E5..         MOV     A,?V0 + 7
   \   000343   3400         ADDC    A,#0x0
   \   000345   F5..         MOV     ?V0 + 7,A
    484              } else if(instance->mc.type == RPL_DAG_MC_ENERGY) {
    485                buffer[pos++] = 2;
    486                buffer[pos++] = instance->mc.obj.energy.flags;
    487                buffer[pos++] = instance->mc.obj.energy.energy_est;
    488              } else {
    489                PRINTF("RPL: Unable to send DIO because of unhandled DAG MC type %u\n",
    490          	(unsigned)instance->mc.type);
    491                return;
    492              }
    493            }
    494          #endif /* !RPL_LEAF_ONLY */
    495          
    496            /* Always add a DAG configuration option. */
    497            buffer[pos++] = RPL_OPTION_DAG_CONF;
   \                     ??dio_output_3:
   \   000347   EE           MOV     A,R6
   \   000348   25..         ADD     A,?V0 + 6
   \   00034A   F582         MOV     DPL,A
   \   00034C   EF           MOV     A,R7
   \   00034D   35..         ADDC    A,?V0 + 7
   \   00034F   F583         MOV     DPH,A
   \   000351   7404         MOV     A,#0x4
   \   000353   F0           MOVX    @DPTR,A
   \   000354   E5..         MOV     A,?V0 + 6
   \   000356   2401         ADD     A,#0x1
   \   000358   F5..         MOV     ?V0 + 6,A
   \   00035A   E5..         MOV     A,?V0 + 7
   \   00035C   3400         ADDC    A,#0x0
   \   00035E   F5..         MOV     ?V0 + 7,A
    498            buffer[pos++] = 14;
   \   000360   EE           MOV     A,R6
   \   000361   25..         ADD     A,?V0 + 6
   \   000363   F582         MOV     DPL,A
   \   000365   EF           MOV     A,R7
   \   000366   35..         ADDC    A,?V0 + 7
   \   000368   F583         MOV     DPH,A
   \   00036A   740E         MOV     A,#0xe
   \   00036C   F0           MOVX    @DPTR,A
   \   00036D   E5..         MOV     A,?V0 + 6
   \   00036F   2401         ADD     A,#0x1
   \   000371   F5..         MOV     ?V0 + 6,A
   \   000373   E5..         MOV     A,?V0 + 7
   \   000375   3400         ADDC    A,#0x0
   \   000377   F5..         MOV     ?V0 + 7,A
    499            buffer[pos++] = 0; /* No Auth, PCS = 0 */
   \   000379   EE           MOV     A,R6
   \   00037A   25..         ADD     A,?V0 + 6
   \   00037C   F582         MOV     DPL,A
   \   00037E   EF           MOV     A,R7
   \   00037F   35..         ADDC    A,?V0 + 7
   \   000381   F583         MOV     DPH,A
   \   000383   7400         MOV     A,#0x0
   \   000385   F0           MOVX    @DPTR,A
   \   000386   E5..         MOV     A,?V0 + 6
   \   000388   2401         ADD     A,#0x1
   \   00038A   F5..         MOV     ?V0 + 6,A
   \   00038C   E5..         MOV     A,?V0 + 7
   \   00038E   3400         ADDC    A,#0x0
   \   000390   F5..         MOV     ?V0 + 7,A
    500            buffer[pos++] = instance->dio_intdoubl;
   \   000392   E5..         MOV     A,?V0 + 0
   \   000394   247F         ADD     A,#0x7f
   \   000396   F582         MOV     DPL,A
   \   000398   E5..         MOV     A,?V0 + 1
   \   00039A   3400         ADDC    A,#0x0
   \   00039C   F583         MOV     DPH,A
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   C0E0         PUSH    A
   \   0003A1   EE           MOV     A,R6
   \   0003A2   25..         ADD     A,?V0 + 6
   \   0003A4   F582         MOV     DPL,A
   \   0003A6   EF           MOV     A,R7
   \   0003A7   35..         ADDC    A,?V0 + 7
   \   0003A9   F583         MOV     DPH,A
   \   0003AB   D0E0         POP     A
   \   0003AD   F0           MOVX    @DPTR,A
   \   0003AE   E5..         MOV     A,?V0 + 6
   \   0003B0   2401         ADD     A,#0x1
   \   0003B2   F5..         MOV     ?V0 + 6,A
   \   0003B4   E5..         MOV     A,?V0 + 7
   \   0003B6   3400         ADDC    A,#0x0
   \   0003B8   F5..         MOV     ?V0 + 7,A
    501            buffer[pos++] = instance->dio_intmin;
   \   0003BA   E5..         MOV     A,?V0 + 0
   \   0003BC   2480         ADD     A,#-0x80
   \   0003BE   F582         MOV     DPL,A
   \   0003C0   E5..         MOV     A,?V0 + 1
   \   0003C2   3400         ADDC    A,#0x0
   \   0003C4   F583         MOV     DPH,A
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   C0E0         PUSH    A
   \   0003C9   EE           MOV     A,R6
   \   0003CA   25..         ADD     A,?V0 + 6
   \   0003CC   F582         MOV     DPL,A
   \   0003CE   EF           MOV     A,R7
   \   0003CF   35..         ADDC    A,?V0 + 7
   \   0003D1   F583         MOV     DPH,A
   \   0003D3   D0E0         POP     A
   \   0003D5   F0           MOVX    @DPTR,A
   \   0003D6   E5..         MOV     A,?V0 + 6
   \   0003D8   2401         ADD     A,#0x1
   \   0003DA   F5..         MOV     ?V0 + 6,A
   \   0003DC   E5..         MOV     A,?V0 + 7
   \   0003DE   3400         ADDC    A,#0x0
   \   0003E0   F5..         MOV     ?V0 + 7,A
    502            buffer[pos++] = instance->dio_redundancy;
   \   0003E2   E5..         MOV     A,?V0 + 0
   \   0003E4   2481         ADD     A,#-0x7f
   \   0003E6   F582         MOV     DPL,A
   \   0003E8   E5..         MOV     A,?V0 + 1
   \   0003EA   3400         ADDC    A,#0x0
   \   0003EC   F583         MOV     DPH,A
   \   0003EE   E0           MOVX    A,@DPTR
   \   0003EF   C0E0         PUSH    A
   \   0003F1   EE           MOV     A,R6
   \   0003F2   25..         ADD     A,?V0 + 6
   \   0003F4   F582         MOV     DPL,A
   \   0003F6   EF           MOV     A,R7
   \   0003F7   35..         ADDC    A,?V0 + 7
   \   0003F9   F583         MOV     DPH,A
   \   0003FB   D0E0         POP     A
   \   0003FD   F0           MOVX    @DPTR,A
   \   0003FE   E5..         MOV     A,?V0 + 6
   \   000400   2401         ADD     A,#0x1
   \   000402   F5..         MOV     ?V0 + 6,A
   \   000404   E5..         MOV     A,?V0 + 7
   \   000406   3400         ADDC    A,#0x0
   \   000408   F5..         MOV     ?V0 + 7,A
    503            set16(buffer, pos, instance->max_rankinc);
   \   00040A                ; Setup parameters for call to function set16
   \   00040A   E5..         MOV     A,?V0 + 0
   \   00040C   2486         ADD     A,#-0x7a
   \   00040E   F582         MOV     DPL,A
   \   000410   E5..         MOV     A,?V0 + 1
   \   000412   3400         ADDC    A,#0x0
   \   000414   F583         MOV     DPH,A
   \   000416   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000419   AC..         MOV     R4,?V0 + 6
   \   00041B   AD..         MOV     R5,?V0 + 7
   \   00041D   EE           MOV     A,R6
   \   00041E   FA           MOV     R2,A
   \   00041F   EF           MOV     A,R7
   \   000420   FB           MOV     R3,A
   \   000421   12....       LCALL   ??set16?relay
   \   000424   7402         MOV     A,#0x2
   \   000426   12....       LCALL   ?DEALLOC_XSTACK8
    504            pos += 2;
   \   000429   E5..         MOV     A,?V0 + 6
   \   00042B   2402         ADD     A,#0x2
   \   00042D   F5..         MOV     ?V0 + 6,A
   \   00042F   E5..         MOV     A,?V0 + 7
   \   000431   3400         ADDC    A,#0x0
   \   000433   F5..         MOV     ?V0 + 7,A
    505            set16(buffer, pos, instance->min_hoprankinc);
   \   000435                ; Setup parameters for call to function set16
   \   000435   E5..         MOV     A,?V0 + 0
   \   000437   2488         ADD     A,#-0x78
   \   000439   F582         MOV     DPL,A
   \   00043B   E5..         MOV     A,?V0 + 1
   \   00043D   3400         ADDC    A,#0x0
   \   00043F   F583         MOV     DPH,A
   \   000441   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000444   AC..         MOV     R4,?V0 + 6
   \   000446   AD..         MOV     R5,?V0 + 7
   \   000448   EE           MOV     A,R6
   \   000449   FA           MOV     R2,A
   \   00044A   EF           MOV     A,R7
   \   00044B   FB           MOV     R3,A
   \   00044C   12....       LCALL   ??set16?relay
   \   00044F   7402         MOV     A,#0x2
   \   000451   12....       LCALL   ?DEALLOC_XSTACK8
    506            pos += 2;
   \   000454   E5..         MOV     A,?V0 + 6
   \   000456   2402         ADD     A,#0x2
   \   000458   F5..         MOV     ?V0 + 6,A
   \   00045A   E5..         MOV     A,?V0 + 7
   \   00045C   3400         ADDC    A,#0x0
   \   00045E   F5..         MOV     ?V0 + 7,A
    507            /* OCP is in the DAG_CONF option */
    508            set16(buffer, pos, instance->of->ocp);
   \   000460                ; Setup parameters for call to function set16
   \   000460   85..82       MOV     DPL,?V0 + 0
   \   000463   85..83       MOV     DPH,?V0 + 1
   \   000466   A3           INC     DPTR
   \   000467   A3           INC     DPTR
   \   000468   A3           INC     DPTR
   \   000469   A3           INC     DPTR
   \   00046A   A3           INC     DPTR
   \   00046B   A3           INC     DPTR
   \   00046C   A3           INC     DPTR
   \   00046D   E0           MOVX    A,@DPTR
   \   00046E   F8           MOV     R0,A
   \   00046F   A3           INC     DPTR
   \   000470   E0           MOVX    A,@DPTR
   \   000471   C8           XCH     A,R0
   \   000472   240C         ADD     A,#0xc
   \   000474   F582         MOV     DPL,A
   \   000476   E8           MOV     A,R0
   \   000477   3400         ADDC    A,#0x0
   \   000479   F583         MOV     DPH,A
   \   00047B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00047E   AC..         MOV     R4,?V0 + 6
   \   000480   AD..         MOV     R5,?V0 + 7
   \   000482   EE           MOV     A,R6
   \   000483   FA           MOV     R2,A
   \   000484   EF           MOV     A,R7
   \   000485   FB           MOV     R3,A
   \   000486   12....       LCALL   ??set16?relay
   \   000489   7402         MOV     A,#0x2
   \   00048B   12....       LCALL   ?DEALLOC_XSTACK8
    509            pos += 2;
   \   00048E   E5..         MOV     A,?V0 + 6
   \   000490   2402         ADD     A,#0x2
   \   000492   F5..         MOV     ?V0 + 6,A
   \   000494   E5..         MOV     A,?V0 + 7
   \   000496   3400         ADDC    A,#0x0
   \   000498   F5..         MOV     ?V0 + 7,A
    510            buffer[pos++] = 0; /* reserved */
   \   00049A   EE           MOV     A,R6
   \   00049B   25..         ADD     A,?V0 + 6
   \   00049D   F582         MOV     DPL,A
   \   00049F   EF           MOV     A,R7
   \   0004A0   35..         ADDC    A,?V0 + 7
   \   0004A2   F583         MOV     DPH,A
   \   0004A4   7400         MOV     A,#0x0
   \   0004A6   F0           MOVX    @DPTR,A
   \   0004A7   E5..         MOV     A,?V0 + 6
   \   0004A9   2401         ADD     A,#0x1
   \   0004AB   F5..         MOV     ?V0 + 6,A
   \   0004AD   E5..         MOV     A,?V0 + 7
   \   0004AF   3400         ADDC    A,#0x0
   \   0004B1   F5..         MOV     ?V0 + 7,A
    511            buffer[pos++] = instance->default_lifetime;
   \   0004B3   E5..         MOV     A,?V0 + 0
   \   0004B5   2482         ADD     A,#-0x7e
   \   0004B7   F582         MOV     DPL,A
   \   0004B9   E5..         MOV     A,?V0 + 1
   \   0004BB   3400         ADDC    A,#0x0
   \   0004BD   F583         MOV     DPH,A
   \   0004BF   E0           MOVX    A,@DPTR
   \   0004C0   C0E0         PUSH    A
   \   0004C2   EE           MOV     A,R6
   \   0004C3   25..         ADD     A,?V0 + 6
   \   0004C5   F582         MOV     DPL,A
   \   0004C7   EF           MOV     A,R7
   \   0004C8   35..         ADDC    A,?V0 + 7
   \   0004CA   F583         MOV     DPH,A
   \   0004CC   D0E0         POP     A
   \   0004CE   F0           MOVX    @DPTR,A
   \   0004CF   E5..         MOV     A,?V0 + 6
   \   0004D1   2401         ADD     A,#0x1
   \   0004D3   F5..         MOV     ?V0 + 6,A
   \   0004D5   E5..         MOV     A,?V0 + 7
   \   0004D7   3400         ADDC    A,#0x0
   \   0004D9   F5..         MOV     ?V0 + 7,A
    512            set16(buffer, pos, instance->lifetime_unit);
   \   0004DB                ; Setup parameters for call to function set16
   \   0004DB   E5..         MOV     A,?V0 + 0
   \   0004DD   248A         ADD     A,#-0x76
   \   0004DF   F582         MOV     DPL,A
   \   0004E1   E5..         MOV     A,?V0 + 1
   \   0004E3   3400         ADDC    A,#0x0
   \   0004E5   F583         MOV     DPH,A
   \   0004E7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0004EA   AC..         MOV     R4,?V0 + 6
   \   0004EC   AD..         MOV     R5,?V0 + 7
   \   0004EE   EE           MOV     A,R6
   \   0004EF   FA           MOV     R2,A
   \   0004F0   EF           MOV     A,R7
   \   0004F1   FB           MOV     R3,A
   \   0004F2   12....       LCALL   ??set16?relay
   \   0004F5   7402         MOV     A,#0x2
   \   0004F7   12....       LCALL   ?DEALLOC_XSTACK8
    513            pos += 2;
   \   0004FA   E5..         MOV     A,?V0 + 6
   \   0004FC   2402         ADD     A,#0x2
   \   0004FE   F5..         MOV     ?V0 + 6,A
   \   000500   E5..         MOV     A,?V0 + 7
   \   000502   3400         ADDC    A,#0x0
   \   000504   F5..         MOV     ?V0 + 7,A
    514          
    515            /* Check if we have a prefix to send also. */
    516            if(dag->prefix_info.length > 0) {
   \   000506   E5..         MOV     A,?V0 + 2
   \   000508   2435         ADD     A,#0x35
   \   00050A   F582         MOV     DPL,A
   \   00050C   E5..         MOV     A,?V0 + 3
   \   00050E   3400         ADDC    A,#0x0
   \   000510   F583         MOV     DPH,A
   \   000512   E0           MOVX    A,@DPTR
   \   000513   C3           CLR     C
   \   000514   9401         SUBB    A,#0x1
   \   000516   5003         JNC     $+5
   \   000518   02....       LJMP    ??dio_output_5 & 0xFFFF
    517              buffer[pos++] = RPL_OPTION_PREFIX_INFO;
   \   00051B   EE           MOV     A,R6
   \   00051C   25..         ADD     A,?V0 + 6
   \   00051E   F582         MOV     DPL,A
   \   000520   EF           MOV     A,R7
   \   000521   35..         ADDC    A,?V0 + 7
   \   000523   F583         MOV     DPH,A
   \   000525   7408         MOV     A,#0x8
   \   000527   F0           MOVX    @DPTR,A
   \   000528   E5..         MOV     A,?V0 + 6
   \   00052A   2401         ADD     A,#0x1
   \   00052C   F5..         MOV     ?V0 + 6,A
   \   00052E   E5..         MOV     A,?V0 + 7
   \   000530   3400         ADDC    A,#0x0
   \   000532   F5..         MOV     ?V0 + 7,A
    518              buffer[pos++] = 30; /* always 30 bytes + 2 long */
   \   000534   EE           MOV     A,R6
   \   000535   25..         ADD     A,?V0 + 6
   \   000537   F582         MOV     DPL,A
   \   000539   EF           MOV     A,R7
   \   00053A   35..         ADDC    A,?V0 + 7
   \   00053C   F583         MOV     DPH,A
   \   00053E   741E         MOV     A,#0x1e
   \   000540   F0           MOVX    @DPTR,A
   \   000541   E5..         MOV     A,?V0 + 6
   \   000543   2401         ADD     A,#0x1
   \   000545   F5..         MOV     ?V0 + 6,A
   \   000547   E5..         MOV     A,?V0 + 7
   \   000549   3400         ADDC    A,#0x0
   \   00054B   F5..         MOV     ?V0 + 7,A
    519              buffer[pos++] = dag->prefix_info.length;
   \   00054D   E5..         MOV     A,?V0 + 2
   \   00054F   2435         ADD     A,#0x35
   \   000551   F582         MOV     DPL,A
   \   000553   E5..         MOV     A,?V0 + 3
   \   000555   3400         ADDC    A,#0x0
   \   000557   F583         MOV     DPH,A
   \   000559   E0           MOVX    A,@DPTR
   \   00055A   C0E0         PUSH    A
   \   00055C   EE           MOV     A,R6
   \   00055D   25..         ADD     A,?V0 + 6
   \   00055F   F582         MOV     DPL,A
   \   000561   EF           MOV     A,R7
   \   000562   35..         ADDC    A,?V0 + 7
   \   000564   F583         MOV     DPH,A
   \   000566   D0E0         POP     A
   \   000568   F0           MOVX    @DPTR,A
   \   000569   E5..         MOV     A,?V0 + 6
   \   00056B   2401         ADD     A,#0x1
   \   00056D   F5..         MOV     ?V0 + 6,A
   \   00056F   E5..         MOV     A,?V0 + 7
   \   000571   3400         ADDC    A,#0x0
   \   000573   F5..         MOV     ?V0 + 7,A
    520              buffer[pos++] = dag->prefix_info.flags;
   \   000575   E5..         MOV     A,?V0 + 2
   \   000577   2436         ADD     A,#0x36
   \   000579   F582         MOV     DPL,A
   \   00057B   E5..         MOV     A,?V0 + 3
   \   00057D   3400         ADDC    A,#0x0
   \   00057F   F583         MOV     DPH,A
   \   000581   E0           MOVX    A,@DPTR
   \   000582   C0E0         PUSH    A
   \   000584   EE           MOV     A,R6
   \   000585   25..         ADD     A,?V0 + 6
   \   000587   F582         MOV     DPL,A
   \   000589   EF           MOV     A,R7
   \   00058A   35..         ADDC    A,?V0 + 7
   \   00058C   F583         MOV     DPH,A
   \   00058E   D0E0         POP     A
   \   000590   F0           MOVX    @DPTR,A
   \   000591   E5..         MOV     A,?V0 + 6
   \   000593   2401         ADD     A,#0x1
   \   000595   F5..         MOV     ?V0 + 6,A
   \   000597   E5..         MOV     A,?V0 + 7
   \   000599   3400         ADDC    A,#0x0
   \   00059B   F5..         MOV     ?V0 + 7,A
    521              set32(buffer, pos, dag->prefix_info.lifetime);
   \   00059D                ; Setup parameters for call to function set32
   \   00059D   E5..         MOV     A,?V0 + 2
   \   00059F   2431         ADD     A,#0x31
   \   0005A1   F582         MOV     DPL,A
   \   0005A3   E5..         MOV     A,?V0 + 3
   \   0005A5   3400         ADDC    A,#0x0
   \   0005A7   F583         MOV     DPH,A
   \   0005A9   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0005AC   AC..         MOV     R4,?V0 + 6
   \   0005AE   AD..         MOV     R5,?V0 + 7
   \   0005B0   EE           MOV     A,R6
   \   0005B1   FA           MOV     R2,A
   \   0005B2   EF           MOV     A,R7
   \   0005B3   FB           MOV     R3,A
   \   0005B4   12....       LCALL   ??set32?relay
   \   0005B7   7404         MOV     A,#0x4
   \   0005B9   12....       LCALL   ?DEALLOC_XSTACK8
    522              pos += 4;
   \   0005BC   E5..         MOV     A,?V0 + 6
   \   0005BE   2404         ADD     A,#0x4
   \   0005C0   F5..         MOV     ?V0 + 6,A
   \   0005C2   E5..         MOV     A,?V0 + 7
   \   0005C4   3400         ADDC    A,#0x0
   \   0005C6   F5..         MOV     ?V0 + 7,A
    523              set32(buffer, pos, dag->prefix_info.lifetime);
   \   0005C8                ; Setup parameters for call to function set32
   \   0005C8   E5..         MOV     A,?V0 + 2
   \   0005CA   2431         ADD     A,#0x31
   \   0005CC   F582         MOV     DPL,A
   \   0005CE   E5..         MOV     A,?V0 + 3
   \   0005D0   3400         ADDC    A,#0x0
   \   0005D2   F583         MOV     DPH,A
   \   0005D4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0005D7   AC..         MOV     R4,?V0 + 6
   \   0005D9   AD..         MOV     R5,?V0 + 7
   \   0005DB   EE           MOV     A,R6
   \   0005DC   FA           MOV     R2,A
   \   0005DD   EF           MOV     A,R7
   \   0005DE   FB           MOV     R3,A
   \   0005DF   12....       LCALL   ??set32?relay
   \   0005E2   7404         MOV     A,#0x4
   \   0005E4   12....       LCALL   ?DEALLOC_XSTACK8
    524              pos += 4;
   \   0005E7   E5..         MOV     A,?V0 + 6
   \   0005E9   2404         ADD     A,#0x4
   \   0005EB   F5..         MOV     ?V0 + 6,A
   \   0005ED   E5..         MOV     A,?V0 + 7
   \   0005EF   3400         ADDC    A,#0x0
   \   0005F1   F5..         MOV     ?V0 + 7,A
    525              memset(&buffer[pos], 0, 4);
   \   0005F3                ; Setup parameters for call to function memset
   \   0005F3   75..04       MOV     ?V0 + 0,#0x4
   \   0005F6   75..00       MOV     ?V0 + 1,#0x0
   \   0005F9   78..         MOV     R0,#?V0 + 0
   \   0005FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005FE   7C00         MOV     R4,#0x0
   \   000600   7D00         MOV     R5,#0x0
   \   000602   EE           MOV     A,R6
   \   000603   25..         ADD     A,?V0 + 6
   \   000605   FA           MOV     R2,A
   \   000606   EF           MOV     A,R7
   \   000607   35..         ADDC    A,?V0 + 7
   \   000609   FB           MOV     R3,A
   \   00060A   12....       LCALL   ??memset?relay
   \   00060D   7402         MOV     A,#0x2
   \   00060F   12....       LCALL   ?DEALLOC_XSTACK8
    526              pos += 4;
   \   000612   E5..         MOV     A,?V0 + 6
   \   000614   2404         ADD     A,#0x4
   \   000616   F5..         MOV     ?V0 + 6,A
   \   000618   E5..         MOV     A,?V0 + 7
   \   00061A   3400         ADDC    A,#0x0
   \   00061C   F5..         MOV     ?V0 + 7,A
    527              memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);
   \   00061E                ; Setup parameters for call to function memcpy
   \   00061E   75..10       MOV     ?V0 + 0,#0x10
   \   000621   75..00       MOV     ?V0 + 1,#0x0
   \   000624   78..         MOV     R0,#?V0 + 0
   \   000626   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000629   E5..         MOV     A,?V0 + 2
   \   00062B   2421         ADD     A,#0x21
   \   00062D   FC           MOV     R4,A
   \   00062E   E5..         MOV     A,?V0 + 3
   \   000630   3400         ADDC    A,#0x0
   \   000632   FD           MOV     R5,A
   \   000633   EE           MOV     A,R6
   \   000634   25..         ADD     A,?V0 + 6
   \   000636   FA           MOV     R2,A
   \   000637   EF           MOV     A,R7
   \   000638   35..         ADDC    A,?V0 + 7
   \   00063A   FB           MOV     R3,A
   \   00063B   12....       LCALL   ??memcpy?relay
   \   00063E   7402         MOV     A,#0x2
   \   000640   12....       LCALL   ?DEALLOC_XSTACK8
    528              pos += 16;
   \   000643   E5..         MOV     A,?V0 + 6
   \   000645   2410         ADD     A,#0x10
   \   000647   F5..         MOV     ?V0 + 6,A
   \   000649   E5..         MOV     A,?V0 + 7
   \   00064B   3400         ADDC    A,#0x0
   \   00064D   F5..         MOV     ?V0 + 7,A
    529              PRINTF("RPL: Sending prefix info in DIO for ");
    530              PRINT6ADDR(&dag->prefix_info.prefix);
    531              PRINTF("\n");
    532            } else {
    533              PRINTF("RPL: No prefix to announce (len %d)\n",
    534                     dag->prefix_info.length);
    535            }
    536          
    537          #if RPL_LEAF_ONLY
    538          #if (DEBUG) & DEBUG_PRINT
    539            if(uc_addr == NULL) {
    540              PRINTF("RPL: LEAF ONLY sending unicast-DIO from multicast-DIO\n");
    541            }
    542          #endif /* DEBUG_PRINT */
    543            PRINTF("RPL: Sending unicast-DIO with rank %u to ",
    544                (unsigned)dag->rank);
    545            PRINT6ADDR(uc_addr);
    546            PRINTF("\n");
    547            uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
    548          #else /* RPL_LEAF_ONLY */
    549            /* Unicast requests get unicast replies! */
    550            if(uc_addr == NULL) {
   \                     ??dio_output_5:
   \   00064F   E5..         MOV     A,?V0 + 4
   \   000651   45..         ORL     A,?V0 + 5
   \   000653   6003         JZ      $+5
   \   000655   02....       LJMP    ??dio_output_6 & 0xFFFF
    551              PRINTF("RPL: Sending a multicast-DIO with rank %u\n",
    552                  (unsigned)instance->current_dag->rank);
    553              uip_create_linklocal_rplnodes_mcast(&addr);
   \   000658   85..82       MOV     DPL,?XSP + 0
   \   00065B   85..83       MOV     DPH,?XSP + 1
   \   00065E   74FF         MOV     A,#-0x1
   \   000660   F0           MOVX    @DPTR,A
   \   000661   A3           INC     DPTR
   \   000662   7402         MOV     A,#0x2
   \   000664   F0           MOVX    @DPTR,A
   \   000665   7402         MOV     A,#0x2
   \   000667   12....       LCALL   ?XSTACK_DISP0_8
   \   00066A   7400         MOV     A,#0x0
   \   00066C   F0           MOVX    @DPTR,A
   \   00066D   A3           INC     DPTR
   \   00066E   7400         MOV     A,#0x0
   \   000670   F0           MOVX    @DPTR,A
   \   000671   7404         MOV     A,#0x4
   \   000673   12....       LCALL   ?XSTACK_DISP0_8
   \   000676   7400         MOV     A,#0x0
   \   000678   F0           MOVX    @DPTR,A
   \   000679   A3           INC     DPTR
   \   00067A   7400         MOV     A,#0x0
   \   00067C   F0           MOVX    @DPTR,A
   \   00067D   7406         MOV     A,#0x6
   \   00067F   12....       LCALL   ?XSTACK_DISP0_8
   \   000682   7400         MOV     A,#0x0
   \   000684   F0           MOVX    @DPTR,A
   \   000685   A3           INC     DPTR
   \   000686   7400         MOV     A,#0x0
   \   000688   F0           MOVX    @DPTR,A
   \   000689   7408         MOV     A,#0x8
   \   00068B   12....       LCALL   ?XSTACK_DISP0_8
   \   00068E   7400         MOV     A,#0x0
   \   000690   F0           MOVX    @DPTR,A
   \   000691   A3           INC     DPTR
   \   000692   7400         MOV     A,#0x0
   \   000694   F0           MOVX    @DPTR,A
   \   000695   740A         MOV     A,#0xa
   \   000697   12....       LCALL   ?XSTACK_DISP0_8
   \   00069A   7400         MOV     A,#0x0
   \   00069C   F0           MOVX    @DPTR,A
   \   00069D   A3           INC     DPTR
   \   00069E   7400         MOV     A,#0x0
   \   0006A0   F0           MOVX    @DPTR,A
   \   0006A1   740C         MOV     A,#0xc
   \   0006A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0006A6   7400         MOV     A,#0x0
   \   0006A8   F0           MOVX    @DPTR,A
   \   0006A9   A3           INC     DPTR
   \   0006AA   7400         MOV     A,#0x0
   \   0006AC   F0           MOVX    @DPTR,A
   \   0006AD   740E         MOV     A,#0xe
   \   0006AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0006B2   7400         MOV     A,#0x0
   \   0006B4   F0           MOVX    @DPTR,A
   \   0006B5   A3           INC     DPTR
   \   0006B6   741A         MOV     A,#0x1a
   \   0006B8   F0           MOVX    @DPTR,A
    554              uip_icmp6_send(&addr, ICMP6_RPL, RPL_CODE_DIO, pos);
   \   0006B9                ; Setup parameters for call to function uip_icmp6_send
   \   0006B9   78..         MOV     R0,#?V0 + 6
   \   0006BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006BE   75..01       MOV     ?V0 + 0,#0x1
   \   0006C1   75..00       MOV     ?V0 + 1,#0x0
   \   0006C4   78..         MOV     R0,#?V0 + 0
   \   0006C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006C9   7C9B         MOV     R4,#-0x65
   \   0006CB   7D00         MOV     R5,#0x0
   \   0006CD   7404         MOV     A,#0x4
   \   0006CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0006D2   AA82         MOV     R2,DPL
   \   0006D4   AB83         MOV     R3,DPH
   \   0006D6   12....       LCALL   ??uip_icmp6_send?relay
   \   0006D9   7404         MOV     A,#0x4
   \   0006DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006DE   02....       LJMP    ??dio_output_7 & 0xFFFF
    555            } else {
   \                     ??dio_output_4:
   \   0006E1   85..82       MOV     DPL,?V0 + 0
   \   0006E4   85..83       MOV     DPH,?V0 + 1
   \   0006E7   E0           MOVX    A,@DPTR
   \   0006E8   6402         XRL     A,#0x2
   \   0006EA   706B         JNZ     ??dio_output_8
   \   0006EC   EE           MOV     A,R6
   \   0006ED   25..         ADD     A,?V0 + 6
   \   0006EF   F582         MOV     DPL,A
   \   0006F1   EF           MOV     A,R7
   \   0006F2   35..         ADDC    A,?V0 + 7
   \   0006F4   F583         MOV     DPH,A
   \   0006F6   7402         MOV     A,#0x2
   \   0006F8   F0           MOVX    @DPTR,A
   \   0006F9   E5..         MOV     A,?V0 + 6
   \   0006FB   2401         ADD     A,#0x1
   \   0006FD   F5..         MOV     ?V0 + 6,A
   \   0006FF   E5..         MOV     A,?V0 + 7
   \   000701   3400         ADDC    A,#0x0
   \   000703   F5..         MOV     ?V0 + 7,A
   \   000705   85..82       MOV     DPL,?V0 + 0
   \   000708   85..83       MOV     DPH,?V0 + 1
   \   00070B   A3           INC     DPTR
   \   00070C   A3           INC     DPTR
   \   00070D   A3           INC     DPTR
   \   00070E   A3           INC     DPTR
   \   00070F   A3           INC     DPTR
   \   000710   E0           MOVX    A,@DPTR
   \   000711   C0E0         PUSH    A
   \   000713   EE           MOV     A,R6
   \   000714   25..         ADD     A,?V0 + 6
   \   000716   F582         MOV     DPL,A
   \   000718   EF           MOV     A,R7
   \   000719   35..         ADDC    A,?V0 + 7
   \   00071B   F583         MOV     DPH,A
   \   00071D   D0E0         POP     A
   \   00071F   F0           MOVX    @DPTR,A
   \   000720   E5..         MOV     A,?V0 + 6
   \   000722   2401         ADD     A,#0x1
   \   000724   F5..         MOV     ?V0 + 6,A
   \   000726   E5..         MOV     A,?V0 + 7
   \   000728   3400         ADDC    A,#0x0
   \   00072A   F5..         MOV     ?V0 + 7,A
   \   00072C   85..82       MOV     DPL,?V0 + 0
   \   00072F   85..83       MOV     DPH,?V0 + 1
   \   000732   A3           INC     DPTR
   \   000733   A3           INC     DPTR
   \   000734   A3           INC     DPTR
   \   000735   A3           INC     DPTR
   \   000736   A3           INC     DPTR
   \   000737   A3           INC     DPTR
   \   000738   E0           MOVX    A,@DPTR
   \   000739   C0E0         PUSH    A
   \   00073B   EE           MOV     A,R6
   \   00073C   25..         ADD     A,?V0 + 6
   \   00073E   F582         MOV     DPL,A
   \   000740   EF           MOV     A,R7
   \   000741   35..         ADDC    A,?V0 + 7
   \   000743   F583         MOV     DPH,A
   \   000745   D0E0         POP     A
   \   000747   F0           MOVX    @DPTR,A
   \   000748   E5..         MOV     A,?V0 + 6
   \   00074A   2401         ADD     A,#0x1
   \   00074C   F5..         MOV     ?V0 + 6,A
   \   00074E   E5..         MOV     A,?V0 + 7
   \   000750   3400         ADDC    A,#0x0
   \   000752   F5..         MOV     ?V0 + 7,A
   \   000754   02....       LJMP    ??dio_output_3 & 0xFFFF
   \                     ??dio_output_8:
   \   000757   8020         SJMP    ??dio_output_7
    556              PRINTF("RPL: Sending unicast-DIO with rank %u to ",
    557                  (unsigned)instance->current_dag->rank);
    558              PRINT6ADDR(uc_addr);
    559              PRINTF("\n");
    560              uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
   \                     ??dio_output_6:
   \   000759                ; Setup parameters for call to function uip_icmp6_send
   \   000759   78..         MOV     R0,#?V0 + 6
   \   00075B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00075E   75..01       MOV     ?V0 + 0,#0x1
   \   000761   75..00       MOV     ?V0 + 1,#0x0
   \   000764   78..         MOV     R0,#?V0 + 0
   \   000766   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000769   7C9B         MOV     R4,#-0x65
   \   00076B   7D00         MOV     R5,#0x0
   \   00076D   AA..         MOV     R2,?V0 + 4
   \   00076F   AB..         MOV     R3,?V0 + 5
   \   000771   12....       LCALL   ??uip_icmp6_send?relay
   \   000774   7404         MOV     A,#0x4
   \   000776   12....       LCALL   ?DEALLOC_XSTACK8
    561            }
    562          #endif /* RPL_LEAF_ONLY */
    563          }
   \                     ??dio_output_7:
   \   000779   7410         MOV     A,#0x10
   \   00077B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00077E   7F0A         MOV     R7,#0xa
   \   000780   02....       LJMP    ?BANKED_LEAVE_XDATA
    564          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          static void
    566          dao_input(void)
   \                     dao_input:
    567          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV     A,#-0x24
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    568            uip_ipaddr_t dao_sender_addr;
    569            rpl_dag_t *dag;
    570            rpl_instance_t *instance;
    571            unsigned char *buffer;
    572            uint16_t sequence;
    573            uint8_t instance_id;
    574            uint8_t lifetime;
    575            uint8_t prefixlen;
    576            uint8_t flags;
    577            uint8_t subopt_type;
    578            /*
    579            uint8_t pathcontrol;
    580            uint8_t pathsequence;
    581            */
    582            uip_ipaddr_t prefix;
    583            uip_ds6_route_t *rep;
    584            uint8_t buffer_length;
    585            int pos;
    586            int len;
    587            int i;
    588            int learned_from;
    589            rpl_parent_t *p;
    590          
    591            prefixlen = 0;
   \   00000A   75..00       MOV     ?V0 + 6,#0x0
    592          
    593            uip_ipaddr_copy(&dao_sender_addr, &UIP_IP_BUF->srcipaddr);
   \   00000D                ; Setup parameters for call to function memcpy
   \   00000D   75..10       MOV     ?V0 + 0,#0x10
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   7C..         MOV     R4,#(uip_aligned_buf + 8) & 0xff
   \   00001A   7D..         MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
   \   00001C   7406         MOV     A,#0x6
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
   \   000025   12....       LCALL   ??memcpy?relay
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
    594          
    595            /* Destination Advertisement Object */
    596            PRINTF("RPL: Received a DAO from ");
    597            PRINT6ADDR(&dao_sender_addr);
    598            PRINTF("\n");
    599          
    600            buffer = UIP_ICMP_PAYLOAD;
   \   00002D   90....       MOV     DPTR,#uip_ext_len
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000036   28           ADD     A,R0
   \   000037   F5..         MOV     ?V0 + 4,A
   \   000039   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   00003B   39           ADDC    A,R1
   \   00003C   F5..         MOV     ?V0 + 5,A
    601            buffer_length = uip_len - uip_l3_icmp_hdr_len;
   \   00003E   90....       MOV     DPTR,#uip_ext_len
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   242C         ADD     A,#0x2c
   \   000047   F8           MOV     R0,A
   \   000048   E9           MOV     A,R1
   \   000049   3400         ADDC    A,#0x0
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#uip_len
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FA           MOV     R2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FB           MOV     R3,A
   \   000054   EA           MOV     A,R2
   \   000055   C3           CLR     C
   \   000056   98           SUBB    A,R0
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   F0           MOVX    @DPTR,A
    602          
    603            pos = 0;
   \   00005E   7E00         MOV     R6,#0x0
   \   000060   7F00         MOV     R7,#0x0
    604            instance_id = buffer[pos++];
   \   000062   E5..         MOV     A,?V0 + 4
   \   000064   2E           ADD     A,R6
   \   000065   F582         MOV     DPL,A
   \   000067   E5..         MOV     A,?V0 + 5
   \   000069   3F           ADDC    A,R7
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   EE           MOV     A,R6
   \   00006F   2401         ADD     A,#0x1
   \   000071   FE           MOV     R6,A
   \   000072   EF           MOV     A,R7
   \   000073   3400         ADDC    A,#0x0
   \   000075   FF           MOV     R7,A
    605          
    606            instance = rpl_get_instance(instance_id);
   \   000076                ; Setup parameters for call to function rpl_get_instance
   \   000076   12....       LCALL   ??rpl_get_instance?relay
   \   000079   8A..         MOV     ?V0 + 0,R2
   \   00007B   8B..         MOV     ?V0 + 1,R3
   \   00007D   85....       MOV     ?V0 + 14,?V0 + 0
   \   000080   85....       MOV     ?V0 + 15,?V0 + 1
    607            if(instance == NULL) {
   \   000083   E5..         MOV     A,?V0 + 14
   \   000085   45..         ORL     A,?V0 + 15
   \   000087   7003         JNZ     $+5
   \   000089   02....       LJMP    ??dao_input_0 & 0xFFFF
    608              PRINTF("RPL: Ignoring a DAO for an unknown RPL instance(%u)\n",
    609                     instance_id);
    610              return;
    611            }
    612          
    613            lifetime = instance->default_lifetime;
   \   00008C   E5..         MOV     A,?V0 + 14
   \   00008E   2482         ADD     A,#-0x7e
   \   000090   F582         MOV     DPL,A
   \   000092   E5..         MOV     A,?V0 + 15
   \   000094   3400         ADDC    A,#0x0
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F5..         MOV     ?V0 + 8,A
    614          
    615            flags = buffer[pos++];
   \   00009B   E5..         MOV     A,?V0 + 4
   \   00009D   2E           ADD     A,R6
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E5..         MOV     A,?V0 + 5
   \   0000A2   3F           ADDC    A,R7
   \   0000A3   F583         MOV     DPH,A
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   C0E0         PUSH    A
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   EE           MOV     A,R6
   \   0000B1   2401         ADD     A,#0x1
   \   0000B3   FE           MOV     R6,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FF           MOV     R7,A
    616            /* reserved */
    617            pos++;
   \   0000B8   EE           MOV     A,R6
   \   0000B9   2401         ADD     A,#0x1
   \   0000BB   FE           MOV     R6,A
   \   0000BC   EF           MOV     A,R7
   \   0000BD   3400         ADDC    A,#0x0
   \   0000BF   FF           MOV     R7,A
    618            sequence = buffer[pos++];
   \   0000C0   E5..         MOV     A,?V0 + 4
   \   0000C2   2E           ADD     A,R6
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   E5..         MOV     A,?V0 + 5
   \   0000C7   3F           ADDC    A,R7
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F5..         MOV     ?V0 + 0,A
   \   0000CD   75..00       MOV     ?V0 + 1,#0x0
   \   0000D0   EE           MOV     A,R6
   \   0000D1   2401         ADD     A,#0x1
   \   0000D3   FE           MOV     R6,A
   \   0000D4   EF           MOV     A,R7
   \   0000D5   3400         ADDC    A,#0x0
   \   0000D7   FF           MOV     R7,A
    619          
    620            dag = instance->current_dag;
   \   0000D8   85..82       MOV     DPL,?V0 + 14
   \   0000DB   85..83       MOV     DPH,?V0 + 15
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F5..         MOV     ?V0 + 12,A
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F5..         MOV     ?V0 + 13,A
    621            /* Is the DAGID present? */
    622            if(flags & RPL_DAO_D_FLAG) {
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000F6   5034         JNC     ??dao_input_1
    623              if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
   \   0000F8                ; Setup parameters for call to function memcmp
   \   0000F8   75..10       MOV     ?V0 + 2,#0x10
   \   0000FB   75..00       MOV     ?V0 + 3,#0x0
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   E5..         MOV     A,?V0 + 4
   \   000105   2E           ADD     A,R6
   \   000106   FC           MOV     R4,A
   \   000107   E5..         MOV     A,?V0 + 5
   \   000109   3F           ADDC    A,R7
   \   00010A   FD           MOV     R5,A
   \   00010B   AA..         MOV     R2,?V0 + 12
   \   00010D   AB..         MOV     R3,?V0 + 13
   \   00010F   12....       LCALL   ??memcmp?relay
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   8A..         MOV     ?V0 + 2,R2
   \   000119   8B..         MOV     ?V0 + 3,R3
   \   00011B   E5..         MOV     A,?V0 + 2
   \   00011D   45..         ORL     A,?V0 + 3
   \   00011F   6003         JZ      $+5
   \   000121   02....       LJMP    ??dao_input_0 & 0xFFFF
    624                PRINTF("RPL: Ignoring a DAO for a DAG different from ours\n");
    625                return;
    626              }
    627              pos += 16;
   \   000124   EE           MOV     A,R6
   \   000125   2410         ADD     A,#0x10
   \   000127   FE           MOV     R6,A
   \   000128   EF           MOV     A,R7
   \   000129   3400         ADDC    A,#0x0
   \   00012B   FF           MOV     R7,A
    628            } else {
    629              /* Perhaps, there are verification to do but ... */
    630            }
    631          
    632            /* Check if there are any RPL options present. */
    633            for(i = pos; i < buffer_length; i += len) {
   \                     ??dao_input_1:
   \   00012C   8E..         MOV     ?V0 + 2,R6
   \   00012E   8F..         MOV     ?V0 + 3,R7
   \   000130   801E         SJMP    ??dao_input_2
    634              subopt_type = buffer[i];
    635              if(subopt_type == RPL_OPTION_PAD1) {
    636                len = 1;
    637              } else {
    638                /* The option consists of a two-byte header and a payload. */
    639                len = 2 + buffer[i + 1];
    640              }
    641          
    642              switch(subopt_type) {
    643              case RPL_OPTION_TARGET:
    644                /* Handle the target option. */
    645                prefixlen = buffer[i + 3];
    646                memset(&prefix, 0, sizeof(prefix));
    647                memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);
    648                break;
    649              case RPL_OPTION_TRANSIT:
    650                /* The path sequence and control are ignored. */
    651                /*      pathcontrol = buffer[i + 3];
    652                        pathsequence = buffer[i + 4];*/
    653                lifetime = buffer[i + 5];
   \                     ??dao_input_3:
   \   000132   E5..         MOV     A,?V0 + 4
   \   000134   25..         ADD     A,?V0 + 2
   \   000136   F582         MOV     DPL,A
   \   000138   E5..         MOV     A,?V0 + 5
   \   00013A   35..         ADDC    A,?V0 + 3
   \   00013C   F583         MOV     DPH,A
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F5..         MOV     ?V0 + 8,A
    654                /* The parent address is also ignored. */
    655                break;
   \                     ??dao_input_4:
   \   000146   E5..         MOV     A,?V0 + 2
   \   000148   2E           ADD     A,R6
   \   000149   F5..         MOV     ?V0 + 2,A
   \   00014B   E5..         MOV     A,?V0 + 3
   \   00014D   3F           ADDC    A,R7
   \   00014E   F5..         MOV     ?V0 + 3,A
   \                     ??dao_input_2:
   \   000150   85..82       MOV     DPL,?XSP + 0
   \   000153   85..83       MOV     DPH,?XSP + 1
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F8           MOV     R0,A
   \   000158   7900         MOV     R1,#0x0
   \   00015A   C3           CLR     C
   \   00015B   E5..         MOV     A,?V0 + 2
   \   00015D   98           SUBB    A,R0
   \   00015E   E5..         MOV     A,?V0 + 3
   \   000160   99           SUBB    A,R1
   \   000161   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000163   65D0         XRL     A,PSW
   \   000165   33           RLC     A
   \   000166   4003         JC      $+5
   \   000168   02....       LJMP    ??dao_input_5 & 0xFFFF
   \   00016B   E5..         MOV     A,?V0 + 4
   \   00016D   25..         ADD     A,?V0 + 2
   \   00016F   F582         MOV     DPL,A
   \   000171   E5..         MOV     A,?V0 + 5
   \   000173   35..         ADDC    A,?V0 + 3
   \   000175   F583         MOV     DPH,A
   \   000177   E0           MOVX    A,@DPTR
   \   000178   FA           MOV     R2,A
   \   000179   EA           MOV     A,R2
   \   00017A   7006         JNZ     ??dao_input_6
   \   00017C   7E01         MOV     R6,#0x1
   \   00017E   7F00         MOV     R7,#0x0
   \   000180   8018         SJMP    ??dao_input_7
   \                     ??dao_input_6:
   \   000182   E5..         MOV     A,?V0 + 4
   \   000184   25..         ADD     A,?V0 + 2
   \   000186   F582         MOV     DPL,A
   \   000188   E5..         MOV     A,?V0 + 5
   \   00018A   35..         ADDC    A,?V0 + 3
   \   00018C   F583         MOV     DPH,A
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F8           MOV     R0,A
   \   000191   7900         MOV     R1,#0x0
   \   000193   2402         ADD     A,#0x2
   \   000195   FE           MOV     R6,A
   \   000196   E9           MOV     A,R1
   \   000197   3400         ADDC    A,#0x0
   \   000199   FF           MOV     R7,A
   \                     ??dao_input_7:
   \   00019A   EA           MOV     A,R2
   \   00019B   24FB         ADD     A,#-0x5
   \   00019D   6005         JZ      ??dao_input_8
   \   00019F   14           DEC     A
   \   0001A0   6090         JZ      ??dao_input_3
   \   0001A2   80A2         SJMP    ??dao_input_4
   \                     ??dao_input_8:
   \   0001A4   E5..         MOV     A,?V0 + 4
   \   0001A6   25..         ADD     A,?V0 + 2
   \   0001A8   F582         MOV     DPL,A
   \   0001AA   E5..         MOV     A,?V0 + 5
   \   0001AC   35..         ADDC    A,?V0 + 3
   \   0001AE   F583         MOV     DPH,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V0 + 6,A
   \   0001B6                ; Setup parameters for call to function memset
   \   0001B6   75..10       MOV     ?V0 + 10,#0x10
   \   0001B9   75..00       MOV     ?V0 + 11,#0x0
   \   0001BC   78..         MOV     R0,#?V0 + 10
   \   0001BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C1   7C00         MOV     R4,#0x0
   \   0001C3   7D00         MOV     R5,#0x0
   \   0001C5   7416         MOV     A,#0x16
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   AA82         MOV     R2,DPL
   \   0001CC   AB83         MOV     R3,DPH
   \   0001CE   12....       LCALL   ??memset?relay
   \   0001D1   7402         MOV     A,#0x2
   \   0001D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D6   7402         MOV     A,#0x2
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   EA           MOV     A,R2
   \   0001DC   F0           MOVX    @DPTR,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   EB           MOV     A,R3
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0                ; Setup parameters for call to function memcpy
   \   0001E0   85....       MOV     ?V0 + 10,?V0 + 6
   \   0001E3   75..00       MOV     ?V0 + 11,#0x0
   \   0001E6   E5..         MOV     A,?V0 + 10
   \   0001E8   2407         ADD     A,#0x7
   \   0001EA   F8           MOV     R0,A
   \   0001EB   E5..         MOV     A,?V0 + 11
   \   0001ED   3400         ADDC    A,#0x0
   \   0001EF   F9           MOV     R1,A
   \   0001F0   7A08         MOV     R2,#0x8
   \   0001F2   7B00         MOV     R3,#0x0
   \   0001F4   12....       LCALL   ?S_DIV_MOD
   \   0001F7   88..         MOV     ?V0 + 10,R0
   \   0001F9   89..         MOV     ?V0 + 11,R1
   \   0001FB   78..         MOV     R0,#?V0 + 10
   \   0001FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000200   E5..         MOV     A,?V0 + 4
   \   000202   25..         ADD     A,?V0 + 2
   \   000204   F8           MOV     R0,A
   \   000205   E5..         MOV     A,?V0 + 5
   \   000207   35..         ADDC    A,?V0 + 3
   \   000209   F9           MOV     R1,A
   \   00020A   E8           MOV     A,R0
   \   00020B   2404         ADD     A,#0x4
   \   00020D   FC           MOV     R4,A
   \   00020E   E9           MOV     A,R1
   \   00020F   3400         ADDC    A,#0x0
   \   000211   FD           MOV     R5,A
   \   000212   7404         MOV     A,#0x4
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   E0           MOVX    A,@DPTR
   \   000218   FA           MOV     R2,A
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   FB           MOV     R3,A
   \   00021C   12....       LCALL   ??memcpy?relay
   \   00021F   7402         MOV     A,#0x2
   \   000221   12....       LCALL   ?DEALLOC_XSTACK8
   \   000224   02....       LJMP    ??dao_input_4 & 0xFFFF
    656              }
    657            }
    658          
    659            PRINTF("RPL: DAO lifetime: %u, prefix length: %u prefix: ",
    660                    (unsigned)lifetime, (unsigned)prefixlen);
    661            PRINT6ADDR(&prefix);
    662            PRINTF("\n");
    663          
    664            rep = uip_ds6_route_lookup(&prefix);
   \                     ??dao_input_5:
   \   000227                ; Setup parameters for call to function uip_ds6_route_lookup
   \   000227   7414         MOV     A,#0x14
   \   000229   12....       LCALL   ?XSTACK_DISP0_8
   \   00022C   AA82         MOV     R2,DPL
   \   00022E   AB83         MOV     R3,DPH
   \   000230   12....       LCALL   ??uip_ds6_route_lookup?relay
   \   000233   8A..         MOV     ?V0 + 4,R2
   \   000235   8B..         MOV     ?V0 + 5,R3
   \   000237   85....       MOV     ?V0 + 2,?V0 + 4
   \   00023A   85....       MOV     ?V0 + 3,?V0 + 5
    665          
    666            if(lifetime == RPL_ZERO_LIFETIME) {
   \   00023D   E5..         MOV     A,?V0 + 8
   \   00023F   6003         JZ      $+5
   \   000241   02....       LJMP    ??dao_input_9 & 0xFFFF
    667              PRINTF("RPL: No-Path DAO received\n");
    668              /* No-Path DAO received; invoke the route purging routine. */
    669              if(rep != NULL &&
    670                 rep->state.nopath_received == 0 &&
    671                 rep->length == prefixlen &&
    672                 uip_ds6_route_nexthop(rep) != NULL &&
    673                 uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
   \   000244   E5..         MOV     A,?V0 + 2
   \   000246   45..         ORL     A,?V0 + 3
   \   000248   7003         JNZ     $+5
   \   00024A   02....       LJMP    ??dao_input_0 & 0xFFFF
   \   00024D   E5..         MOV     A,?V0 + 2
   \   00024F   241B         ADD     A,#0x1b
   \   000251   F582         MOV     DPL,A
   \   000253   E5..         MOV     A,?V0 + 3
   \   000255   3400         ADDC    A,#0x0
   \   000257   F583         MOV     DPH,A
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   6003         JZ      $+5
   \   00025C   02....       LJMP    ??dao_input_0 & 0xFFFF
   \   00025F   E5..         MOV     A,?V0 + 2
   \   000261   241C         ADD     A,#0x1c
   \   000263   F582         MOV     DPL,A
   \   000265   E5..         MOV     A,?V0 + 3
   \   000267   3400         ADDC    A,#0x0
   \   000269   F583         MOV     DPH,A
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   65..         XRL     A,?V0 + 6
   \   00026E   707A         JNZ     ??dao_input_10
   \   000270                ; Setup parameters for call to function uip_ds6_route_nexthop
   \   000270   AA..         MOV     R2,?V0 + 2
   \   000272   AB..         MOV     R3,?V0 + 3
   \   000274   12....       LCALL   ??uip_ds6_route_nexthop?relay
   \   000277   8A..         MOV     ?V0 + 0,R2
   \   000279   8B..         MOV     ?V0 + 1,R3
   \   00027B   E5..         MOV     A,?V0 + 0
   \   00027D   45..         ORL     A,?V0 + 1
   \   00027F   6069         JZ      ??dao_input_10
   \   000281                ; Setup parameters for call to function memcmp
   \   000281   75..10       MOV     ?V0 + 0,#0x10
   \   000284   75..00       MOV     ?V0 + 1,#0x0
   \   000287   78..         MOV     R0,#?V0 + 0
   \   000289   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028C   7406         MOV     A,#0x6
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   AC82         MOV     R4,DPL
   \   000293   AD83         MOV     R5,DPH
   \   000295   FF           MOV     R7,A
   \   000296   E582         MOV     A,DPL
   \   000298   AE82         MOV     R6,DPL
   \   00029A   E583         MOV     A,DPH
   \   00029C   AF83         MOV     R7,DPH
   \   00029E                ; Setup parameters for call to function uip_ds6_route_nexthop
   \   00029E   AA..         MOV     R2,?V0 + 2
   \   0002A0   AB..         MOV     R3,?V0 + 3
   \   0002A2   12....       LCALL   ??uip_ds6_route_nexthop?relay
   \   0002A5   FD           MOV     R5,A
   \   0002A6   EE           MOV     A,R6
   \   0002A7   FC           MOV     R4,A
   \   0002A8   EF           MOV     A,R7
   \   0002A9   FD           MOV     R5,A
   \   0002AA   12....       LCALL   ??memcmp?relay
   \   0002AD   7402         MOV     A,#0x2
   \   0002AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B2   8A..         MOV     ?V0 + 0,R2
   \   0002B4   8B..         MOV     ?V0 + 1,R3
   \   0002B6   E5..         MOV     A,?V0 + 0
   \   0002B8   45..         ORL     A,?V0 + 1
   \   0002BA   702E         JNZ     ??dao_input_10
    674                PRINTF("RPL: Setting expiration timer for prefix ");
    675                PRINT6ADDR(&prefix);
    676                PRINTF("\n");
    677                rep->state.nopath_received = 1;
   \   0002BC   E5..         MOV     A,?V0 + 2
   \   0002BE   241B         ADD     A,#0x1b
   \   0002C0   F582         MOV     DPL,A
   \   0002C2   E5..         MOV     A,?V0 + 3
   \   0002C4   3400         ADDC    A,#0x0
   \   0002C6   F583         MOV     DPH,A
   \   0002C8   7401         MOV     A,#0x1
   \   0002CA   F0           MOVX    @DPTR,A
    678                rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;
   \   0002CB   7C3C         MOV     R4,#0x3c
   \   0002CD   7D00         MOV     R5,#0x0
   \   0002CF   7E00         MOV     R6,#0x0
   \   0002D1   7F00         MOV     R7,#0x0
   \   0002D3   E5..         MOV     A,?V0 + 2
   \   0002D5   2414         ADD     A,#0x14
   \   0002D7   F582         MOV     DPL,A
   \   0002D9   E5..         MOV     A,?V0 + 3
   \   0002DB   3400         ADDC    A,#0x0
   \   0002DD   F583         MOV     DPH,A
   \   0002DF   EC           MOV     A,R4
   \   0002E0   F0           MOVX    @DPTR,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   ED           MOV     A,R5
   \   0002E3   F0           MOVX    @DPTR,A
   \   0002E4   A3           INC     DPTR
   \   0002E5   EE           MOV     A,R6
   \   0002E6   F0           MOVX    @DPTR,A
   \   0002E7   A3           INC     DPTR
   \   0002E8   EF           MOV     A,R7
   \   0002E9   F0           MOVX    @DPTR,A
    679              }
    680              return;
   \                     ??dao_input_10:
   \   0002EA   02....       LJMP    ??dao_input_0 & 0xFFFF
    681            }
    682          
    683            learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
    684                           RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
   \                     ??dao_input_9:
   \   0002ED   7404         MOV     A,#0x4
   \   0002EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   64FF         XRL     A,#0xff
   \   0002F5   7006         JNZ     ??dao_input_11
   \   0002F7   7E02         MOV     R6,#0x2
   \   0002F9   7F00         MOV     R7,#0x0
   \   0002FB   8004         SJMP    ??dao_input_12
   \                     ??dao_input_11:
   \   0002FD   7E01         MOV     R6,#0x1
   \   0002FF   7F00         MOV     R7,#0x0
    685          
    686            PRINTF("RPL: DAO from %s\n",
    687                   learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
    688            if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
   \                     ??dao_input_12:
   \   000301   7401         MOV     A,#0x1
   \   000303   6E           XRL     A,R6
   \   000304   7003         JNZ     ??dao_input_13
   \   000306   7400         MOV     A,#0x0
   \   000308   6F           XRL     A,R7
   \                     ??dao_input_13:
   \   000309   6003         JZ      $+5
   \   00030B   02....       LJMP    ??dao_input_14 & 0xFFFF
    689              /* Check whether this is a DAO forwarding loop. */
    690              p = rpl_find_parent(dag, &dao_sender_addr);
   \   00030E                ; Setup parameters for call to function rpl_find_parent
   \   00030E   7404         MOV     A,#0x4
   \   000310   12....       LCALL   ?XSTACK_DISP0_8
   \   000313   AC82         MOV     R4,DPL
   \   000315   AD83         MOV     R5,DPH
   \   000317   AA..         MOV     R2,?V0 + 12
   \   000319   AB..         MOV     R3,?V0 + 13
   \   00031B   12....       LCALL   ??rpl_find_parent?relay
   \   00031E   8A..         MOV     ?V0 + 2,R2
   \   000320   8B..         MOV     ?V0 + 3,R3
   \   000322   AC..         MOV     R4,?V0 + 2
   \   000324   AD..         MOV     R5,?V0 + 3
    691              /* check if this is a new DAO registration with an "illegal" rank */
    692              /* if we already route to this node it is likely */
    693              if(p != NULL &&
    694                 DAG_RANK(p->rank, instance) < DAG_RANK(dag->rank, instance)) {
   \   000326   EC           MOV     A,R4
   \   000327   4D           ORL     A,R5
   \   000328   607B         JZ      ??dao_input_15
   \   00032A   8C82         MOV     DPL,R4
   \   00032C   8D83         MOV     DPH,R5
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   A3           INC     DPTR
   \   000332   E0           MOVX    A,@DPTR
   \   000333   F8           MOV     R0,A
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   F9           MOV     R1,A
   \   000337   E5..         MOV     A,?V0 + 14
   \   000339   2488         ADD     A,#-0x78
   \   00033B   F582         MOV     DPL,A
   \   00033D   E5..         MOV     A,?V0 + 15
   \   00033F   3400         ADDC    A,#0x0
   \   000341   F583         MOV     DPH,A
   \   000343   E0           MOVX    A,@DPTR
   \   000344   FA           MOV     R2,A
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   FB           MOV     R3,A
   \   000348   12....       LCALL   ?US_DIV_MOD
   \   00034B   88..         MOV     ?V0 + 4,R0
   \   00034D   89..         MOV     ?V0 + 5,R1
   \   00034F   E5..         MOV     A,?V0 + 12
   \   000351   2419         ADD     A,#0x19
   \   000353   F582         MOV     DPL,A
   \   000355   E5..         MOV     A,?V0 + 13
   \   000357   3400         ADDC    A,#0x0
   \   000359   F583         MOV     DPH,A
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   F8           MOV     R0,A
   \   00035D   A3           INC     DPTR
   \   00035E   E0           MOVX    A,@DPTR
   \   00035F   F9           MOV     R1,A
   \   000360   E5..         MOV     A,?V0 + 14
   \   000362   2488         ADD     A,#-0x78
   \   000364   F582         MOV     DPL,A
   \   000366   E5..         MOV     A,?V0 + 15
   \   000368   3400         ADDC    A,#0x0
   \   00036A   F583         MOV     DPH,A
   \   00036C   E0           MOVX    A,@DPTR
   \   00036D   FA           MOV     R2,A
   \   00036E   A3           INC     DPTR
   \   00036F   E0           MOVX    A,@DPTR
   \   000370   FB           MOV     R3,A
   \   000371   12....       LCALL   ?US_DIV_MOD
   \   000374   88..         MOV     ?V0 + 2,R0
   \   000376   89..         MOV     ?V0 + 3,R1
   \   000378   C3           CLR     C
   \   000379   E5..         MOV     A,?V0 + 4
   \   00037B   95..         SUBB    A,?V0 + 2
   \   00037D   E5..         MOV     A,?V0 + 5
   \   00037F   95..         SUBB    A,?V0 + 3
   \   000381   5022         JNC     ??dao_input_15
    695                PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n",
    696                    DAG_RANK(p->rank, instance), DAG_RANK(dag->rank, instance));
    697                p->rank = INFINITE_RANK;
   \   000383   8C82         MOV     DPL,R4
   \   000385   8D83         MOV     DPH,R5
   \   000387   A3           INC     DPTR
   \   000388   A3           INC     DPTR
   \   000389   A3           INC     DPTR
   \   00038A   A3           INC     DPTR
   \   00038B   74FF         MOV     A,#-0x1
   \   00038D   F0           MOVX    @DPTR,A
   \   00038E   A3           INC     DPTR
   \   00038F   74FF         MOV     A,#-0x1
   \   000391   F0           MOVX    @DPTR,A
    698                p->updated = 1;
   \   000392   8C82         MOV     DPL,R4
   \   000394   8D83         MOV     DPH,R5
   \   000396   A3           INC     DPTR
   \   000397   A3           INC     DPTR
   \   000398   A3           INC     DPTR
   \   000399   A3           INC     DPTR
   \   00039A   A3           INC     DPTR
   \   00039B   A3           INC     DPTR
   \   00039C   A3           INC     DPTR
   \   00039D   A3           INC     DPTR
   \   00039E   A3           INC     DPTR
   \   00039F   7401         MOV     A,#0x1
   \   0003A1   F0           MOVX    @DPTR,A
    699                return;
   \   0003A2   02....       LJMP    ??dao_input_0 & 0xFFFF
    700              }
    701          
    702              /* If we get the DAO from our parent, we also have a loop. */
    703              if(p != NULL && p == dag->preferred_parent) {
   \                     ??dao_input_15:
   \   0003A5   EC           MOV     A,R4
   \   0003A6   4D           ORL     A,R5
   \   0003A7   603B         JZ      ??dao_input_14
   \   0003A9   E5..         MOV     A,?V0 + 12
   \   0003AB   2417         ADD     A,#0x17
   \   0003AD   F582         MOV     DPL,A
   \   0003AF   E5..         MOV     A,?V0 + 13
   \   0003B1   3400         ADDC    A,#0x0
   \   0003B3   F583         MOV     DPH,A
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   F8           MOV     R0,A
   \   0003B7   A3           INC     DPTR
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   F9           MOV     R1,A
   \   0003BA   EC           MOV     A,R4
   \   0003BB   68           XRL     A,R0
   \   0003BC   7002         JNZ     ??dao_input_16
   \   0003BE   ED           MOV     A,R5
   \   0003BF   69           XRL     A,R1
   \                     ??dao_input_16:
   \   0003C0   7022         JNZ     ??dao_input_14
    704                PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n");
    705                p->rank = INFINITE_RANK;
   \   0003C2   8C82         MOV     DPL,R4
   \   0003C4   8D83         MOV     DPH,R5
   \   0003C6   A3           INC     DPTR
   \   0003C7   A3           INC     DPTR
   \   0003C8   A3           INC     DPTR
   \   0003C9   A3           INC     DPTR
   \   0003CA   74FF         MOV     A,#-0x1
   \   0003CC   F0           MOVX    @DPTR,A
   \   0003CD   A3           INC     DPTR
   \   0003CE   74FF         MOV     A,#-0x1
   \   0003D0   F0           MOVX    @DPTR,A
    706                p->updated = 1;
   \   0003D1   8C82         MOV     DPL,R4
   \   0003D3   8D83         MOV     DPH,R5
   \   0003D5   A3           INC     DPTR
   \   0003D6   A3           INC     DPTR
   \   0003D7   A3           INC     DPTR
   \   0003D8   A3           INC     DPTR
   \   0003D9   A3           INC     DPTR
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   A3           INC     DPTR
   \   0003DD   A3           INC     DPTR
   \   0003DE   7401         MOV     A,#0x1
   \   0003E0   F0           MOVX    @DPTR,A
    707                return;
   \   0003E1   02....       LJMP    ??dao_input_0 & 0xFFFF
    708              }
    709            }
    710          
    711            PRINTF("RPL: adding DAO route\n");
    712            rep = rpl_add_route(dag, &prefix, prefixlen, &dao_sender_addr);
   \                     ??dao_input_14:
   \   0003E4                ; Setup parameters for call to function rpl_add_route
   \   0003E4   7404         MOV     A,#0x4
   \   0003E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E9   8582..       MOV     ?V0 + 2,DPL
   \   0003EC   8583..       MOV     ?V0 + 3,DPH
   \   0003EF   78..         MOV     R0,#?V0 + 2
   \   0003F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003F4   75..00       MOV     ?V0 + 7,#0x0
   \   0003F7   78..         MOV     R0,#?V0 + 6
   \   0003F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FC   7418         MOV     A,#0x18
   \   0003FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000401   AC82         MOV     R4,DPL
   \   000403   AD83         MOV     R5,DPH
   \   000405   AA..         MOV     R2,?V0 + 12
   \   000407   AB..         MOV     R3,?V0 + 13
   \   000409   12....       LCALL   ??rpl_add_route?relay
   \   00040C   7404         MOV     A,#0x4
   \   00040E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000411   8A..         MOV     ?V0 + 4,R2
   \   000413   8B..         MOV     ?V0 + 5,R3
   \   000415   85....       MOV     ?V0 + 2,?V0 + 4
   \   000418   85....       MOV     ?V0 + 3,?V0 + 5
    713            if(rep == NULL) {
   \   00041B   E5..         MOV     A,?V0 + 2
   \   00041D   45..         ORL     A,?V0 + 3
   \   00041F   7003         JNZ     $+5
   \   000421   02....       LJMP    ??dao_input_0 & 0xFFFF
    714              RPL_STAT(rpl_stats.mem_overflows++);
    715              PRINTF("RPL: Could not add a route after receiving a DAO\n");
    716              return;
    717            }
    718          
    719            rep->state.lifetime = RPL_LIFETIME(instance, lifetime);
   \   000424   E5..         MOV     A,?V0 + 14
   \   000426   248A         ADD     A,#-0x76
   \   000428   F582         MOV     DPL,A
   \   00042A   E5..         MOV     A,?V0 + 15
   \   00042C   3400         ADDC    A,#0x0
   \   00042E   F583         MOV     DPH,A
   \   000430   E0           MOVX    A,@DPTR
   \   000431   F5..         MOV     ?V0 + 4,A
   \   000433   A3           INC     DPTR
   \   000434   E0           MOVX    A,@DPTR
   \   000435   F5..         MOV     ?V0 + 5,A
   \   000437   E4           CLR     A
   \   000438   F5..         MOV     ?V0 + 6,A
   \   00043A   F5..         MOV     ?V0 + 7,A
   \   00043C   E4           CLR     A
   \   00043D   F5..         MOV     ?V0 + 9,A
   \   00043F   F5..         MOV     ?V0 + 10,A
   \   000441   F5..         MOV     ?V0 + 11,A
   \   000443   78..         MOV     R0,#?V0 + 4
   \   000445   79..         MOV     R1,#?V0 + 8
   \   000447   12....       LCALL   ?L_MUL
   \   00044A   AA..         MOV     R2,?V0 + 4
   \   00044C   AB..         MOV     R3,?V0 + 5
   \   00044E   AC..         MOV     R4,?V0 + 6
   \   000450   AD..         MOV     R5,?V0 + 7
   \   000452   E5..         MOV     A,?V0 + 2
   \   000454   2414         ADD     A,#0x14
   \   000456   F582         MOV     DPL,A
   \   000458   E5..         MOV     A,?V0 + 3
   \   00045A   3400         ADDC    A,#0x0
   \   00045C   F583         MOV     DPH,A
   \   00045E   E5..         MOV     A,?V0 + 4
   \   000460   F0           MOVX    @DPTR,A
   \   000461   A3           INC     DPTR
   \   000462   E5..         MOV     A,?V0 + 5
   \   000464   F0           MOVX    @DPTR,A
   \   000465   A3           INC     DPTR
   \   000466   E5..         MOV     A,?V0 + 6
   \   000468   F0           MOVX    @DPTR,A
   \   000469   A3           INC     DPTR
   \   00046A   E5..         MOV     A,?V0 + 7
   \   00046C   F0           MOVX    @DPTR,A
    720            rep->state.learned_from = learned_from;
   \   00046D   EE           MOV     A,R6
   \   00046E   C0E0         PUSH    A
   \   000470   E5..         MOV     A,?V0 + 2
   \   000472   241A         ADD     A,#0x1a
   \   000474   F582         MOV     DPL,A
   \   000476   E5..         MOV     A,?V0 + 3
   \   000478   3400         ADDC    A,#0x0
   \   00047A   F583         MOV     DPH,A
   \   00047C   D0E0         POP     A
   \   00047E   F0           MOVX    @DPTR,A
    721          
    722            if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
   \   00047F   7401         MOV     A,#0x1
   \   000481   6E           XRL     A,R6
   \   000482   7003         JNZ     ??dao_input_17
   \   000484   7400         MOV     A,#0x0
   \   000486   6F           XRL     A,R7
   \                     ??dao_input_17:
   \   000487   6003         JZ      $+5
   \   000489   02....       LJMP    ??dao_input_0 & 0xFFFF
    723              if(dag->preferred_parent != NULL &&
    724                 rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
   \   00048C   E5..         MOV     A,?V0 + 12
   \   00048E   2417         ADD     A,#0x17
   \   000490   F582         MOV     DPL,A
   \   000492   E5..         MOV     A,?V0 + 13
   \   000494   3400         ADDC    A,#0x0
   \   000496   F583         MOV     DPH,A
   \   000498   E0           MOVX    A,@DPTR
   \   000499   F8           MOV     R0,A
   \   00049A   A3           INC     DPTR
   \   00049B   E0           MOVX    A,@DPTR
   \   00049C   F9           MOV     R1,A
   \   00049D   E8           MOV     A,R0
   \   00049E   49           ORL     A,R1
   \   00049F   6064         JZ      ??dao_input_18
   \   0004A1                ; Setup parameters for call to function rpl_get_parent_ipaddr
   \   0004A1   E5..         MOV     A,?V0 + 12
   \   0004A3   2417         ADD     A,#0x17
   \   0004A5   F582         MOV     DPL,A
   \   0004A7   E5..         MOV     A,?V0 + 13
   \   0004A9   3400         ADDC    A,#0x0
   \   0004AB   F583         MOV     DPH,A
   \   0004AD   E0           MOVX    A,@DPTR
   \   0004AE   FA           MOV     R2,A
   \   0004AF   A3           INC     DPTR
   \   0004B0   E0           MOVX    A,@DPTR
   \   0004B1   FB           MOV     R3,A
   \   0004B2   12....       LCALL   ??rpl_get_parent_ipaddr?relay
   \   0004B5   8A..         MOV     ?V0 + 2,R2
   \   0004B7   8B..         MOV     ?V0 + 3,R3
   \   0004B9   E5..         MOV     A,?V0 + 2
   \   0004BB   45..         ORL     A,?V0 + 3
   \   0004BD   6046         JZ      ??dao_input_18
    725                PRINTF("RPL: Forwarding DAO to parent ");
    726                PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
    727                PRINTF("\n");
    728                uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
    729                               ICMP6_RPL, RPL_CODE_DAO, buffer_length);
   \   0004BF                ; Setup parameters for call to function uip_icmp6_send
   \   0004BF   85..82       MOV     DPL,?XSP + 0
   \   0004C2   85..83       MOV     DPH,?XSP + 1
   \   0004C5   E0           MOVX    A,@DPTR
   \   0004C6   F5..         MOV     ?V0 + 2,A
   \   0004C8   75..00       MOV     ?V0 + 3,#0x0
   \   0004CB   78..         MOV     R0,#?V0 + 2
   \   0004CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004D0   75..02       MOV     ?V0 + 2,#0x2
   \   0004D3   75..00       MOV     ?V0 + 3,#0x0
   \   0004D6   78..         MOV     R0,#?V0 + 2
   \   0004D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004DB   7C9B         MOV     R4,#-0x65
   \   0004DD   7D00         MOV     R5,#0x0
   \   0004DF   FF           MOV     R7,A
   \   0004E0   EC           MOV     A,R4
   \   0004E1   FE           MOV     R6,A
   \   0004E2   ED           MOV     A,R5
   \   0004E3   FF           MOV     R7,A
   \   0004E4                ; Setup parameters for call to function rpl_get_parent_ipaddr
   \   0004E4   E5..         MOV     A,?V0 + 12
   \   0004E6   2417         ADD     A,#0x17
   \   0004E8   F582         MOV     DPL,A
   \   0004EA   E5..         MOV     A,?V0 + 13
   \   0004EC   3400         ADDC    A,#0x0
   \   0004EE   F583         MOV     DPH,A
   \   0004F0   E0           MOVX    A,@DPTR
   \   0004F1   FA           MOV     R2,A
   \   0004F2   A3           INC     DPTR
   \   0004F3   E0           MOVX    A,@DPTR
   \   0004F4   FB           MOV     R3,A
   \   0004F5   12....       LCALL   ??rpl_get_parent_ipaddr?relay
   \   0004F8   FD           MOV     R5,A
   \   0004F9   EE           MOV     A,R6
   \   0004FA   FC           MOV     R4,A
   \   0004FB   EF           MOV     A,R7
   \   0004FC   FD           MOV     R5,A
   \   0004FD   12....       LCALL   ??uip_icmp6_send?relay
   \   000500   7404         MOV     A,#0x4
   \   000502   12....       LCALL   ?DEALLOC_XSTACK8
    730              }
    731              if(flags & RPL_DAO_K_FLAG) {
   \                     ??dao_input_18:
   \   000505   7401         MOV     A,#0x1
   \   000507   12....       LCALL   ?XSTACK_DISP0_8
   \   00050A   E0           MOVX    A,@DPTR
   \   00050B   A2E7         MOV     C,0xE0 /* A   */.7
   \   00050D   5012         JNC     ??dao_input_0
    732                dao_ack_output(instance, &dao_sender_addr, sequence);
   \   00050F                ; Setup parameters for call to function dao_ack_output
   \   00050F   A9..         MOV     R1,?V0 + 0
   \   000511   7404         MOV     A,#0x4
   \   000513   12....       LCALL   ?XSTACK_DISP0_8
   \   000516   AC82         MOV     R4,DPL
   \   000518   AD83         MOV     R5,DPH
   \   00051A   AA..         MOV     R2,?V0 + 14
   \   00051C   AB..         MOV     R3,?V0 + 15
   \   00051E   12....       LCALL   ??dao_ack_output?relay
    733              }
    734            }
    735          }
   \                     ??dao_input_0:
   \   000521   7424         MOV     A,#0x24
   \   000523   12....       LCALL   ?DEALLOC_XSTACK8
   \   000526   7F10         MOV     R7,#0x10
   \   000528   02....       LJMP    ?BANKED_LEAVE_XDATA
    736          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    737          void
    738          dao_output(rpl_parent_t *parent, uint8_t lifetime)
   \                     dao_output:
    739          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
    740            /* Destination Advertisement Object */
    741            uip_ipaddr_t prefix;
    742          
    743            if(get_global_addr(&prefix) == 0) {
   \   000010                ; Setup parameters for call to function get_global_addr
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??get_global_addr?relay
   \   00001D   8A..         MOV     ?V0 + 2,R2
   \   00001F   8B..         MOV     ?V0 + 3,R3
   \   000021   E5..         MOV     A,?V0 + 2
   \   000023   45..         ORL     A,?V0 + 3
   \   000025   6013         JZ      ??dao_output_0
    744              PRINTF("RPL: No global address set for this node - suppressing DAO\n");
    745              return;
    746            }
    747          
    748            /* Sending a DAO with own prefix as target */
    749            dao_output_target(parent, &prefix, lifetime);
   \   000027                ; Setup parameters for call to function dao_output_target
   \   000027   A9..         MOV     R1,?V0 + 0
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   AC82         MOV     R4,DPL
   \   000031   AD83         MOV     R5,DPH
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??dao_output_target?relay
    750          }
   \                     ??dao_output_0:
   \   00003A   7410         MOV     A,#0x10
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   7F04         MOV     R7,#0x4
   \   000041   02....       LJMP    ?BANKED_LEAVE_XDATA
    751          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          void
    753          dao_output_target(rpl_parent_t *parent, uip_ipaddr_t *prefix, uint8_t lifetime)
   \                     dao_output_target:
    754          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   89..         MOV     ?V0 + 4,R1
    755            rpl_dag_t *dag;
    756            rpl_instance_t *instance;
    757            unsigned char *buffer;
    758            uint8_t prefixlen;
    759            int pos;
    760          
    761            /* Destination Advertisement Object */
    762          
    763            if(parent == NULL) {
   \   00000F   E5..         MOV     A,?V0 + 0
   \   000011   45..         ORL     A,?V0 + 1
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??dao_output_target_0 & 0xFFFF
    764              PRINTF("RPL dao_output_target error parent NULL\n");
    765              return;
    766            }
    767          
    768            dag = parent->dag;
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FC           MOV     R4,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FD           MOV     R5,A
    769            if(dag == NULL) {
   \   000025   EC           MOV     A,R4
   \   000026   4D           ORL     A,R5
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??dao_output_target_0 & 0xFFFF
    770              PRINTF("RPL dao_output_target error dag NULL\n");
    771              return;
    772            }
    773          
    774            instance = dag->instance;
   \   00002C   EC           MOV     A,R4
   \   00002D   241B         ADD     A,#0x1b
   \   00002F   F582         MOV     DPL,A
   \   000031   ED           MOV     A,R5
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
    775          
    776            if(instance == NULL) {
   \   00003B   E8           MOV     A,R0
   \   00003C   49           ORL     A,R1
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??dao_output_target_0 & 0xFFFF
    777              PRINTF("RPL dao_output_target error instance NULL\n");
    778              return;
    779            }
    780            if(prefix == NULL) {
   \   000042   E5..         MOV     A,?V0 + 2
   \   000044   45..         ORL     A,?V0 + 3
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??dao_output_target_0 & 0xFFFF
    781              PRINTF("RPL dao_output_target error prefix NULL\n");
    782              return;
    783            }
    784          #ifdef RPL_DEBUG_DAO_OUTPUT
    785            RPL_DEBUG_DAO_OUTPUT(parent);
    786          #endif
    787          
    788            buffer = UIP_ICMP_PAYLOAD;
   \   00004B   90....       MOV     DPTR,#uip_ext_len
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   7B00         MOV     R3,#0x0
   \   000052   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000054   2A           ADD     A,R2
   \   000055   FE           MOV     R6,A
   \   000056   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   000058   3B           ADDC    A,R3
   \   000059   FF           MOV     R7,A
    789          
    790            RPL_LOLLIPOP_INCREMENT(dao_sequence);
   \   00005A   90....       MOV     DPTR,#dao_sequence
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C3           CLR     C
   \   00005F   9480         SUBB    A,#-0x80
   \   000061   4009         JC      ??dao_output_target_1
   \   000063   90....       MOV     DPTR,#dao_sequence
   \   000066   E0           MOVX    A,@DPTR
   \   000067   2401         ADD     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   800C         SJMP    ??dao_output_target_2
   \                     ??dao_output_target_1:
   \   00006C   90....       MOV     DPTR,#dao_sequence
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   2401         ADD     A,#0x1
   \   000072   547F         ANL     A,#0x7f
   \   000074   90....       MOV     DPTR,#dao_sequence
   \   000077   F0           MOVX    @DPTR,A
    791            pos = 0;
   \                     ??dao_output_target_2:
   \   000078   75..00       MOV     ?V0 + 6,#0x0
   \   00007B   75..00       MOV     ?V0 + 7,#0x0
    792          
    793            buffer[pos++] = instance->instance_id;
   \   00007E   E8           MOV     A,R0
   \   00007F   247B         ADD     A,#0x7b
   \   000081   F582         MOV     DPL,A
   \   000083   E9           MOV     A,R1
   \   000084   3400         ADDC    A,#0x0
   \   000086   F583         MOV     DPH,A
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C0E0         PUSH    A
   \   00008B   EE           MOV     A,R6
   \   00008C   25..         ADD     A,?V0 + 6
   \   00008E   F582         MOV     DPL,A
   \   000090   EF           MOV     A,R7
   \   000091   35..         ADDC    A,?V0 + 7
   \   000093   F583         MOV     DPH,A
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   E5..         MOV     A,?V0 + 6
   \   00009A   2401         ADD     A,#0x1
   \   00009C   F5..         MOV     ?V0 + 6,A
   \   00009E   E5..         MOV     A,?V0 + 7
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F5..         MOV     ?V0 + 7,A
    794            buffer[pos] = 0;
   \   0000A4   EE           MOV     A,R6
   \   0000A5   25..         ADD     A,?V0 + 6
   \   0000A7   F582         MOV     DPL,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   35..         ADDC    A,?V0 + 7
   \   0000AC   F583         MOV     DPH,A
   \   0000AE   7400         MOV     A,#0x0
   \   0000B0   F0           MOVX    @DPTR,A
    795          #if RPL_DAO_SPECIFY_DAG
    796            buffer[pos] |= RPL_DAO_D_FLAG;
   \   0000B1   EE           MOV     A,R6
   \   0000B2   25..         ADD     A,?V0 + 6
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   35..         ADDC    A,?V0 + 7
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   D2E6         SETB    0xE0 /* A   */.6
   \   0000BE   F0           MOVX    @DPTR,A
    797          #endif /* RPL_DAO_SPECIFY_DAG */
    798          #if RPL_CONF_DAO_ACK
    799            buffer[pos] |= RPL_DAO_K_FLAG;
    800          #endif /* RPL_CONF_DAO_ACK */
    801            ++pos;
   \   0000BF   E5..         MOV     A,?V0 + 6
   \   0000C1   2401         ADD     A,#0x1
   \   0000C3   F5..         MOV     ?V0 + 6,A
   \   0000C5   E5..         MOV     A,?V0 + 7
   \   0000C7   3400         ADDC    A,#0x0
   \   0000C9   F5..         MOV     ?V0 + 7,A
    802            buffer[pos++] = 0; /* reserved */
   \   0000CB   EE           MOV     A,R6
   \   0000CC   25..         ADD     A,?V0 + 6
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   35..         ADDC    A,?V0 + 7
   \   0000D3   F583         MOV     DPH,A
   \   0000D5   7400         MOV     A,#0x0
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   E5..         MOV     A,?V0 + 6
   \   0000DA   2401         ADD     A,#0x1
   \   0000DC   F5..         MOV     ?V0 + 6,A
   \   0000DE   E5..         MOV     A,?V0 + 7
   \   0000E0   3400         ADDC    A,#0x0
   \   0000E2   F5..         MOV     ?V0 + 7,A
    803            buffer[pos++] = dao_sequence;
   \   0000E4   90....       MOV     DPTR,#dao_sequence
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C0E0         PUSH    A
   \   0000EA   EE           MOV     A,R6
   \   0000EB   25..         ADD     A,?V0 + 6
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   35..         ADDC    A,?V0 + 7
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   D0E0         POP     A
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   E5..         MOV     A,?V0 + 6
   \   0000F9   2401         ADD     A,#0x1
   \   0000FB   F5..         MOV     ?V0 + 6,A
   \   0000FD   E5..         MOV     A,?V0 + 7
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   F5..         MOV     ?V0 + 7,A
    804          #if RPL_DAO_SPECIFY_DAG
    805            memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
   \   000103                ; Setup parameters for call to function memcpy
   \   000103   75..10       MOV     ?V0 + 8,#0x10
   \   000106   75..00       MOV     ?V0 + 9,#0x0
   \   000109   78..         MOV     R0,#?V0 + 8
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   EE           MOV     A,R6
   \   00010F   25..         ADD     A,?V0 + 6
   \   000111   FA           MOV     R2,A
   \   000112   EF           MOV     A,R7
   \   000113   35..         ADDC    A,?V0 + 7
   \   000115   FB           MOV     R3,A
   \   000116   12....       LCALL   ??memcpy?relay
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
    806            pos+=sizeof(dag->dag_id);
   \   00011E   E5..         MOV     A,?V0 + 6
   \   000120   2410         ADD     A,#0x10
   \   000122   F5..         MOV     ?V0 + 6,A
   \   000124   E5..         MOV     A,?V0 + 7
   \   000126   3400         ADDC    A,#0x0
   \   000128   F5..         MOV     ?V0 + 7,A
    807          #endif /* RPL_DAO_SPECIFY_DAG */
    808          
    809            /* create target subopt */
    810            prefixlen = sizeof(*prefix) * CHAR_BIT;
   \   00012A   75..80       MOV     ?V0 + 8,#-0x80
    811            buffer[pos++] = RPL_OPTION_TARGET;
   \   00012D   EE           MOV     A,R6
   \   00012E   25..         ADD     A,?V0 + 6
   \   000130   F582         MOV     DPL,A
   \   000132   EF           MOV     A,R7
   \   000133   35..         ADDC    A,?V0 + 7
   \   000135   F583         MOV     DPH,A
   \   000137   7405         MOV     A,#0x5
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   E5..         MOV     A,?V0 + 6
   \   00013C   2401         ADD     A,#0x1
   \   00013E   F5..         MOV     ?V0 + 6,A
   \   000140   E5..         MOV     A,?V0 + 7
   \   000142   3400         ADDC    A,#0x0
   \   000144   F5..         MOV     ?V0 + 7,A
    812            buffer[pos++] = 2 + ((prefixlen + 7) / CHAR_BIT);
   \   000146   85....       MOV     ?V0 + 10,?V0 + 8
   \   000149   75..00       MOV     ?V0 + 11,#0x0
   \   00014C   E5..         MOV     A,?V0 + 10
   \   00014E   2407         ADD     A,#0x7
   \   000150   F8           MOV     R0,A
   \   000151   E5..         MOV     A,?V0 + 11
   \   000153   3400         ADDC    A,#0x0
   \   000155   F9           MOV     R1,A
   \   000156   7A08         MOV     R2,#0x8
   \   000158   7B00         MOV     R3,#0x0
   \   00015A   12....       LCALL   ?S_DIV_MOD
   \   00015D   E8           MOV     A,R0
   \   00015E   2402         ADD     A,#0x2
   \   000160   C0E0         PUSH    A
   \   000162   EE           MOV     A,R6
   \   000163   25..         ADD     A,?V0 + 6
   \   000165   F582         MOV     DPL,A
   \   000167   EF           MOV     A,R7
   \   000168   35..         ADDC    A,?V0 + 7
   \   00016A   F583         MOV     DPH,A
   \   00016C   D0E0         POP     A
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   E5..         MOV     A,?V0 + 6
   \   000171   2401         ADD     A,#0x1
   \   000173   F5..         MOV     ?V0 + 6,A
   \   000175   E5..         MOV     A,?V0 + 7
   \   000177   3400         ADDC    A,#0x0
   \   000179   F5..         MOV     ?V0 + 7,A
    813            buffer[pos++] = 0; /* reserved */
   \   00017B   EE           MOV     A,R6
   \   00017C   25..         ADD     A,?V0 + 6
   \   00017E   F582         MOV     DPL,A
   \   000180   EF           MOV     A,R7
   \   000181   35..         ADDC    A,?V0 + 7
   \   000183   F583         MOV     DPH,A
   \   000185   7400         MOV     A,#0x0
   \   000187   F0           MOVX    @DPTR,A
   \   000188   E5..         MOV     A,?V0 + 6
   \   00018A   2401         ADD     A,#0x1
   \   00018C   F5..         MOV     ?V0 + 6,A
   \   00018E   E5..         MOV     A,?V0 + 7
   \   000190   3400         ADDC    A,#0x0
   \   000192   F5..         MOV     ?V0 + 7,A
    814            buffer[pos++] = prefixlen;
   \   000194   E5..         MOV     A,?V0 + 8
   \   000196   EE           MOV     A,R6
   \   000197   25..         ADD     A,?V0 + 6
   \   000199   F582         MOV     DPL,A
   \   00019B   EF           MOV     A,R7
   \   00019C   35..         ADDC    A,?V0 + 7
   \   00019E   F583         MOV     DPH,A
   \   0001A0   E5..         MOV     A,?V0 + 8
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   E5..         MOV     A,?V0 + 6
   \   0001A5   2401         ADD     A,#0x1
   \   0001A7   F5..         MOV     ?V0 + 6,A
   \   0001A9   E5..         MOV     A,?V0 + 7
   \   0001AB   3400         ADDC    A,#0x0
   \   0001AD   F5..         MOV     ?V0 + 7,A
    815            memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);
   \   0001AF                ; Setup parameters for call to function memcpy
   \   0001AF   85....       MOV     ?V0 + 10,?V0 + 8
   \   0001B2   75..00       MOV     ?V0 + 11,#0x0
   \   0001B5   E5..         MOV     A,?V0 + 10
   \   0001B7   2407         ADD     A,#0x7
   \   0001B9   F8           MOV     R0,A
   \   0001BA   E5..         MOV     A,?V0 + 11
   \   0001BC   3400         ADDC    A,#0x0
   \   0001BE   F9           MOV     R1,A
   \   0001BF   7A08         MOV     R2,#0x8
   \   0001C1   7B00         MOV     R3,#0x0
   \   0001C3   12....       LCALL   ?S_DIV_MOD
   \   0001C6   88..         MOV     ?V0 + 10,R0
   \   0001C8   89..         MOV     ?V0 + 11,R1
   \   0001CA   78..         MOV     R0,#?V0 + 10
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CF   AC..         MOV     R4,?V0 + 2
   \   0001D1   AD..         MOV     R5,?V0 + 3
   \   0001D3   EE           MOV     A,R6
   \   0001D4   25..         ADD     A,?V0 + 6
   \   0001D6   FA           MOV     R2,A
   \   0001D7   EF           MOV     A,R7
   \   0001D8   35..         ADDC    A,?V0 + 7
   \   0001DA   FB           MOV     R3,A
   \   0001DB   12....       LCALL   ??memcpy?relay
   \   0001DE   7402         MOV     A,#0x2
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
    816            pos += ((prefixlen + 7) / CHAR_BIT);
   \   0001E3   75..00       MOV     ?V0 + 9,#0x0
   \   0001E6   E5..         MOV     A,?V0 + 8
   \   0001E8   2407         ADD     A,#0x7
   \   0001EA   F8           MOV     R0,A
   \   0001EB   E5..         MOV     A,?V0 + 9
   \   0001ED   3400         ADDC    A,#0x0
   \   0001EF   F9           MOV     R1,A
   \   0001F0   7A08         MOV     R2,#0x8
   \   0001F2   7B00         MOV     R3,#0x0
   \   0001F4   12....       LCALL   ?S_DIV_MOD
   \   0001F7   88..         MOV     ?V0 + 2,R0
   \   0001F9   89..         MOV     ?V0 + 3,R1
   \   0001FB   E5..         MOV     A,?V0 + 6
   \   0001FD   25..         ADD     A,?V0 + 2
   \   0001FF   F5..         MOV     ?V0 + 6,A
   \   000201   E5..         MOV     A,?V0 + 7
   \   000203   35..         ADDC    A,?V0 + 3
   \   000205   F5..         MOV     ?V0 + 7,A
    817          
    818            /* Create a transit information sub-option. */
    819            buffer[pos++] = RPL_OPTION_TRANSIT;
   \   000207   EE           MOV     A,R6
   \   000208   25..         ADD     A,?V0 + 6
   \   00020A   F582         MOV     DPL,A
   \   00020C   EF           MOV     A,R7
   \   00020D   35..         ADDC    A,?V0 + 7
   \   00020F   F583         MOV     DPH,A
   \   000211   7406         MOV     A,#0x6
   \   000213   F0           MOVX    @DPTR,A
   \   000214   E5..         MOV     A,?V0 + 6
   \   000216   2401         ADD     A,#0x1
   \   000218   F5..         MOV     ?V0 + 6,A
   \   00021A   E5..         MOV     A,?V0 + 7
   \   00021C   3400         ADDC    A,#0x0
   \   00021E   F5..         MOV     ?V0 + 7,A
    820            buffer[pos++] = 4;
   \   000220   EE           MOV     A,R6
   \   000221   25..         ADD     A,?V0 + 6
   \   000223   F582         MOV     DPL,A
   \   000225   EF           MOV     A,R7
   \   000226   35..         ADDC    A,?V0 + 7
   \   000228   F583         MOV     DPH,A
   \   00022A   7404         MOV     A,#0x4
   \   00022C   F0           MOVX    @DPTR,A
   \   00022D   E5..         MOV     A,?V0 + 6
   \   00022F   2401         ADD     A,#0x1
   \   000231   F5..         MOV     ?V0 + 6,A
   \   000233   E5..         MOV     A,?V0 + 7
   \   000235   3400         ADDC    A,#0x0
   \   000237   F5..         MOV     ?V0 + 7,A
    821            buffer[pos++] = 0; /* flags - ignored */
   \   000239   EE           MOV     A,R6
   \   00023A   25..         ADD     A,?V0 + 6
   \   00023C   F582         MOV     DPL,A
   \   00023E   EF           MOV     A,R7
   \   00023F   35..         ADDC    A,?V0 + 7
   \   000241   F583         MOV     DPH,A
   \   000243   7400         MOV     A,#0x0
   \   000245   F0           MOVX    @DPTR,A
   \   000246   E5..         MOV     A,?V0 + 6
   \   000248   2401         ADD     A,#0x1
   \   00024A   F5..         MOV     ?V0 + 6,A
   \   00024C   E5..         MOV     A,?V0 + 7
   \   00024E   3400         ADDC    A,#0x0
   \   000250   F5..         MOV     ?V0 + 7,A
    822            buffer[pos++] = 0; /* path control - ignored */
   \   000252   EE           MOV     A,R6
   \   000253   25..         ADD     A,?V0 + 6
   \   000255   F582         MOV     DPL,A
   \   000257   EF           MOV     A,R7
   \   000258   35..         ADDC    A,?V0 + 7
   \   00025A   F583         MOV     DPH,A
   \   00025C   7400         MOV     A,#0x0
   \   00025E   F0           MOVX    @DPTR,A
   \   00025F   E5..         MOV     A,?V0 + 6
   \   000261   2401         ADD     A,#0x1
   \   000263   F5..         MOV     ?V0 + 6,A
   \   000265   E5..         MOV     A,?V0 + 7
   \   000267   3400         ADDC    A,#0x0
   \   000269   F5..         MOV     ?V0 + 7,A
    823            buffer[pos++] = 0; /* path seq - ignored */
   \   00026B   EE           MOV     A,R6
   \   00026C   25..         ADD     A,?V0 + 6
   \   00026E   F582         MOV     DPL,A
   \   000270   EF           MOV     A,R7
   \   000271   35..         ADDC    A,?V0 + 7
   \   000273   F583         MOV     DPH,A
   \   000275   7400         MOV     A,#0x0
   \   000277   F0           MOVX    @DPTR,A
   \   000278   E5..         MOV     A,?V0 + 6
   \   00027A   2401         ADD     A,#0x1
   \   00027C   F5..         MOV     ?V0 + 6,A
   \   00027E   E5..         MOV     A,?V0 + 7
   \   000280   3400         ADDC    A,#0x0
   \   000282   F5..         MOV     ?V0 + 7,A
    824            buffer[pos++] = lifetime;
   \   000284   E5..         MOV     A,?V0 + 4
   \   000286   EE           MOV     A,R6
   \   000287   25..         ADD     A,?V0 + 6
   \   000289   F582         MOV     DPL,A
   \   00028B   EF           MOV     A,R7
   \   00028C   35..         ADDC    A,?V0 + 7
   \   00028E   F583         MOV     DPH,A
   \   000290   E5..         MOV     A,?V0 + 4
   \   000292   F0           MOVX    @DPTR,A
   \   000293   E5..         MOV     A,?V0 + 6
   \   000295   2401         ADD     A,#0x1
   \   000297   F5..         MOV     ?V0 + 6,A
   \   000299   E5..         MOV     A,?V0 + 7
   \   00029B   3400         ADDC    A,#0x0
   \   00029D   F5..         MOV     ?V0 + 7,A
    825          
    826            PRINTF("RPL: Sending DAO with prefix ");
    827            PRINT6ADDR(prefix);
    828            PRINTF(" to ");
    829            PRINT6ADDR(rpl_get_parent_ipaddr(parent));
    830            PRINTF("\n");
    831          
    832            if(rpl_get_parent_ipaddr(parent) != NULL) {
   \   00029F                ; Setup parameters for call to function rpl_get_parent_ipaddr
   \   00029F   AA..         MOV     R2,?V0 + 0
   \   0002A1   AB..         MOV     R3,?V0 + 1
   \   0002A3   12....       LCALL   ??rpl_get_parent_ipaddr?relay
   \   0002A6   8A..         MOV     ?V0 + 2,R2
   \   0002A8   8B..         MOV     ?V0 + 3,R3
   \   0002AA   E5..         MOV     A,?V0 + 2
   \   0002AC   45..         ORL     A,?V0 + 3
   \   0002AE   602D         JZ      ??dao_output_target_0
    833              uip_icmp6_send(rpl_get_parent_ipaddr(parent), ICMP6_RPL, RPL_CODE_DAO, pos);
   \   0002B0                ; Setup parameters for call to function uip_icmp6_send
   \   0002B0   78..         MOV     R0,#?V0 + 6
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B5   75..02       MOV     ?V0 + 2,#0x2
   \   0002B8   75..00       MOV     ?V0 + 3,#0x0
   \   0002BB   78..         MOV     R0,#?V0 + 2
   \   0002BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C0   7C9B         MOV     R4,#-0x65
   \   0002C2   7D00         MOV     R5,#0x0
   \   0002C4   FF           MOV     R7,A
   \   0002C5   EC           MOV     A,R4
   \   0002C6   FE           MOV     R6,A
   \   0002C7   ED           MOV     A,R5
   \   0002C8   FF           MOV     R7,A
   \   0002C9                ; Setup parameters for call to function rpl_get_parent_ipaddr
   \   0002C9   AA..         MOV     R2,?V0 + 0
   \   0002CB   AB..         MOV     R3,?V0 + 1
   \   0002CD   12....       LCALL   ??rpl_get_parent_ipaddr?relay
   \   0002D0   FD           MOV     R5,A
   \   0002D1   EE           MOV     A,R6
   \   0002D2   FC           MOV     R4,A
   \   0002D3   EF           MOV     A,R7
   \   0002D4   FD           MOV     R5,A
   \   0002D5   12....       LCALL   ??uip_icmp6_send?relay
   \   0002D8   7404         MOV     A,#0x4
   \   0002DA   12....       LCALL   ?DEALLOC_XSTACK8
    834            }
    835          }
   \                     ??dao_output_target_0:
   \   0002DD   7F0C         MOV     R7,#0xc
   \   0002DF   02....       LJMP    ?BANKED_LEAVE_XDATA
    836          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    837          static void
    838          dao_ack_input(void)
   \                     dao_ack_input:
    839          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    840          #if DEBUG
    841            unsigned char *buffer;
    842            uint8_t buffer_length;
    843            uint8_t instance_id;
    844            uint8_t sequence;
    845            uint8_t status;
    846          
    847            buffer = UIP_ICMP_PAYLOAD;
    848            buffer_length = uip_len - uip_l3_icmp_hdr_len;
    849          
    850            instance_id = buffer[0];
    851            sequence = buffer[2];
    852            status = buffer[3];
    853          
    854            PRINTF("RPL: Received a DAO ACK with sequence number %d and status %d from ",
    855              sequence, status);
    856            PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
    857            PRINTF("\n");
    858          #endif /* DEBUG */
    859          }
   \   000000   02....       LJMP    ?BRET
    860          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          void
    862          dao_ack_output(rpl_instance_t *instance, uip_ipaddr_t *dest, uint8_t sequence)
   \                     dao_ack_output:
    863          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   89..         MOV     ?V0 + 0,R1
    864            unsigned char *buffer;
    865          
    866            PRINTF("RPL: Sending a DAO ACK with sequence number %d to ", sequence);
    867            PRINT6ADDR(dest);
    868            PRINTF("\n");
    869          
    870            buffer = UIP_ICMP_PAYLOAD;
   \   00000F   90....       MOV     DPTR,#uip_ext_len
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   7900         MOV     R1,#0x0
   \   000016   74..         MOV     A,#(uip_aligned_buf + 44) & 0xff
   \   000018   28           ADD     A,R0
   \   000019   F8           MOV     R0,A
   \   00001A   74..         MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
   \   00001C   39           ADDC    A,R1
   \   00001D   F9           MOV     R1,A
    871          
    872            buffer[0] = instance->instance_id;
   \   00001E   EE           MOV     A,R6
   \   00001F   247B         ADD     A,#0x7b
   \   000021   F582         MOV     DPL,A
   \   000023   EF           MOV     A,R7
   \   000024   3400         ADDC    A,#0x0
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   F0           MOVX    @DPTR,A
    873            buffer[1] = 0;
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    874            buffer[2] = sequence;
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E5..         MOV     A,?V0 + 0
   \   000040   F0           MOVX    @DPTR,A
    875            buffer[3] = 0;
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
    876          
    877            uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
   \   00004B                ; Setup parameters for call to function uip_icmp6_send
   \   00004B   75..04       MOV     ?V0 + 2,#0x4
   \   00004E   75..00       MOV     ?V0 + 3,#0x0
   \   000051   78..         MOV     R0,#?V0 + 2
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75..03       MOV     ?V0 + 2,#0x3
   \   000059   75..00       MOV     ?V0 + 3,#0x0
   \   00005C   78..         MOV     R0,#?V0 + 2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C9B         MOV     R4,#-0x65
   \   000063   7D00         MOV     R5,#0x0
   \   000065   12....       LCALL   ??uip_icmp6_send?relay
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    878          }
   \   00006D   7F04         MOV     R7,#0x4
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    879          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void
    881          uip_rpl_input(void)
   \                     uip_rpl_input:
    882          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    883            PRINTF("Received an RPL control message\n");
    884            switch(UIP_ICMP_BUF->icode) {
   \   000004   90....       MOV     DPTR,#uip_ext_len
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   7900         MOV     R1,#0x0
   \   00000B   74..         MOV     A,#uip_aligned_buf & 0xff
   \   00000D   28           ADD     A,R0
   \   00000E   F8           MOV     R0,A
   \   00000F   74..         MOV     A,#(uip_aligned_buf >> 8) & 0xff
   \   000011   39           ADDC    A,R1
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   2429         ADD     A,#0x29
   \   000016   F582         MOV     DPL,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6010         JZ      ??uip_rpl_input_0
   \   000020   14           DEC     A
   \   000021   6008         JZ      ??uip_rpl_input_1
   \   000023   14           DEC     A
   \   000024   600F         JZ      ??uip_rpl_input_2
   \   000026   14           DEC     A
   \   000027   6011         JZ      ??uip_rpl_input_3
   \   000029   8012         SJMP    ??uip_rpl_input_4
    885            case RPL_CODE_DIO:
    886              dio_input();
   \                     ??uip_rpl_input_1:
   \   00002B                ; Setup parameters for call to function dio_input
   \   00002B   12....       LCALL   ??dio_input?relay
    887              break;
   \   00002E   800D         SJMP    ??uip_rpl_input_4
    888            case RPL_CODE_DIS:
    889              dis_input();
   \                     ??uip_rpl_input_0:
   \   000030                ; Setup parameters for call to function dis_input
   \   000030   12....       LCALL   ??dis_input?relay
    890              break;
   \   000033   8008         SJMP    ??uip_rpl_input_4
    891            case RPL_CODE_DAO:
    892              dao_input();
   \                     ??uip_rpl_input_2:
   \   000035                ; Setup parameters for call to function dao_input
   \   000035   12....       LCALL   ??dao_input?relay
    893              break;
   \   000038   8003         SJMP    ??uip_rpl_input_4
    894            case RPL_CODE_DAO_ACK:
    895              dao_ack_input();
   \                     ??uip_rpl_input_3:
   \   00003A                ; Setup parameters for call to function dao_ack_input
   \   00003A   12....       LCALL   ??dao_ack_input?relay
    896              break;
    897            default:
    898              PRINTF("RPL: received an unknown ICMP6 code (%u)\n", UIP_ICMP_BUF->icode);
    899              break;
    900            }
    901          
    902            uip_len = 0;
   \                     ??uip_rpl_input_4:
   \   00003D   90....       MOV     DPTR,#uip_len
   \   000040   7400         MOV     A,#0x0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
    903          }
   \   000047   D083         POP     DPH
   \   000049   D082         POP     DPL
   \   00004B   02....       LJMP    ?BRET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_258:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_258>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for dao_sequence>`:
   \   000000   F0           DB 240

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_258>`:
   \   000000   58020000     DD 600

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get_global_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get_global_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get32?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??set32?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    set32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??set16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    set16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dis_input?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dis_input

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dis_output?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dis_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dio_input?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dio_input

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dio_output?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dio_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dao_input?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dao_input

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dao_output?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dao_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dao_output_target?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dao_output_target

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dao_ack_input?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dao_ack_input

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??dao_ack_output?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    dao_ack_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uip_rpl_input?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uip_rpl_input
    904          #endif /* UIP_CONF_IPV6 */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  dao_ack_input
       1      0     76  dao_ack_output
                          0 0  16 -> uip_icmp6_send
       1      0     64  dao_input
                          0 0  60 -> dao_ack_output
                          0 0  62 -> memcmp
                          0 0  62 -> memcpy
                          0 0  62 -> memset
                          0 0  64 -> rpl_add_route
                          0 0  60 -> rpl_find_parent
                          0 0  60 -> rpl_get_instance
                          0 0  60 -> rpl_get_parent_ipaddr
                          0 0  64 -> rpl_get_parent_ipaddr
                          0 0  60 -> uip_ds6_route_lookup
                          0 0  60 -> uip_ds6_route_nexthop
                          0 0  62 -> uip_ds6_route_nexthop
                          0 0  64 -> uip_icmp6_send
       0      0     28  dao_output
                          0 0  28 -> dao_output_target
                          0 0  28 -> get_global_addr
       1      0     52  dao_output_target
                          0 0  22 -> memcpy
                          0 0  20 -> rpl_get_parent_ipaddr
                          0 0  24 -> rpl_get_parent_ipaddr
                          0 0  24 -> uip_icmp6_send
       1      0    123  dio_input
                          0 0 119 -> get16
                          0 0 119 -> get32
                          0 0 121 -> memcpy
                          0 0 121 -> memset
                          0 0 120 -> packetbuf_addr
                          0 0 119 -> rpl_process_dio
                          0 0 123 -> stimer_set
                          0 0 120 -> uip_ds6_nbr_add
                          0 0 119 -> uip_ds6_nbr_lookup
       1      0     48  dio_output
                          0 0  36 -> memcpy
                          0 0  36 -> memset
                          0 0  36 -> set16
                          0 0  38 -> set32
                          0 0  38 -> uip_icmp6_send
       0      0     10  dis_input
                          0 0  10 -> dio_output
                          0 0  10 -> rpl_reset_dio_timer
       1      0     30  dis_output
                          0 0  30 -> uip_icmp6_send
       2      0    119  get16
       0      0    135  get32
       0      0     40  get_global_addr
                          0 0  12 -> memcpy
       1      0     45  set16
       1      0     54  set32
       2      0      0  uip_rpl_input
                          2 0   0 -> dao_ack_input
                          2 0   0 -> dao_input
                          2 0   0 -> dio_input
                          2 0   0 -> dis_input


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for __Constant_258>
       1  ?<Initializer for dao_sequence>
       6  ??dao_ack_input?relay
       6  ??dao_ack_output?relay
       6  ??dao_input?relay
       6  ??dao_output?relay
       6  ??dao_output_target?relay
       6  ??dio_input?relay
       6  ??dio_output?relay
       6  ??dis_input?relay
       6  ??dis_output?relay
       6  ??get16?relay
       6  ??get32?relay
       6  ??get_global_addr?relay
       6  ??set16?relay
       6  ??set32?relay
       6  ??uip_rpl_input?relay
       4  __Constant_258
       3  dao_ack_input
     114  dao_ack_output
    1323  dao_input
      68  dao_output
     738  dao_output_target
       1  dao_sequence
    1608  dio_input
    1923  dio_output
      88  dis_input
     194  dis_output
      45  get16
     138  get32
     277  get_global_addr
      70  set16
     153  set32
      78  uip_rpl_input

 
 6 820 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_I
     5 bytes in segment XDATA_ID
 
 6 911 bytes of CODE  memory (+ 4 bytes shared)
     1 byte  of XDATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
