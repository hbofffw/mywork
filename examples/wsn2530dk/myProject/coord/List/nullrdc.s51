///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:50 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\mac\nullrdc.c           /
//    Command line       =  D:\myWork\myWork\core\net\mac\nullrdc.c -D        /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\nullrdc.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nullrdc

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??channel_check_interval?relay,0203H
        FUNCTION ??init?relay,0203H
        FUNCTION ??off?relay,0203H
        FUNCTION ??on?relay,0203H
        FUNCTION ??packet_input?relay,0203H
        FUNCTION ??send_list?relay,0203H
        FUNCTION ??send_one_packet?relay,0203H
        FUNCTION ??send_packet?relay,0203H
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        FUNCTION channel_check_interval,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION init,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC nullrdc_driver
        FUNCTION off,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION on,0603H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION packet_input,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION send_list,021603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION send_one_packet,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        FUNCTION send_packet,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
mac_call_sent_callback SYMBOL "mac_call_sent_callback"
??mac_call_sent_callback?relay SYMBOL "?relay", mac_call_sent_callback
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
packetbuf_addr      SYMBOL "packetbuf_addr"
??packetbuf_addr?relay SYMBOL "?relay", packetbuf_addr
packetbuf_attr      SYMBOL "packetbuf_attr"
??packetbuf_attr?relay SYMBOL "?relay", packetbuf_attr
packetbuf_datalen   SYMBOL "packetbuf_datalen"
??packetbuf_datalen?relay SYMBOL "?relay", packetbuf_datalen
packetbuf_dataptr   SYMBOL "packetbuf_dataptr"
??packetbuf_dataptr?relay SYMBOL "?relay", packetbuf_dataptr
packetbuf_hdrptr    SYMBOL "packetbuf_hdrptr"
??packetbuf_hdrptr?relay SYMBOL "?relay", packetbuf_hdrptr
packetbuf_set_addr  SYMBOL "packetbuf_set_addr"
??packetbuf_set_addr?relay SYMBOL "?relay", packetbuf_set_addr
packetbuf_set_attr  SYMBOL "packetbuf_set_attr"
??packetbuf_set_attr?relay SYMBOL "?relay", packetbuf_set_attr
packetbuf_totlen    SYMBOL "packetbuf_totlen"
??packetbuf_totlen?relay SYMBOL "?relay", packetbuf_totlen
queuebuf_to_packetbuf SYMBOL "queuebuf_to_packetbuf"
??queuebuf_to_packetbuf?relay SYMBOL "?relay", queuebuf_to_packetbuf
rimeaddr_cmp        SYMBOL "rimeaddr_cmp"
??rimeaddr_cmp?relay SYMBOL "?relay", rimeaddr_cmp
rimeaddr_copy       SYMBOL "rimeaddr_copy"
??rimeaddr_copy?relay SYMBOL "?relay", rimeaddr_copy
watchdog_periodic   SYMBOL "watchdog_periodic"
??watchdog_periodic?relay SYMBOL "?relay", watchdog_periodic

        EXTERN ??mac_call_sent_callback?relay
        FUNCTION ??mac_call_sent_callback?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??packetbuf_addr?relay
        FUNCTION ??packetbuf_addr?relay,00H
        EXTERN ??packetbuf_attr?relay
        FUNCTION ??packetbuf_attr?relay,00H
        EXTERN ??packetbuf_datalen?relay
        FUNCTION ??packetbuf_datalen?relay,00H
        EXTERN ??packetbuf_dataptr?relay
        FUNCTION ??packetbuf_dataptr?relay,00H
        EXTERN ??packetbuf_hdrptr?relay
        FUNCTION ??packetbuf_hdrptr?relay,00H
        EXTERN ??packetbuf_set_addr?relay
        FUNCTION ??packetbuf_set_addr?relay,00H
        EXTERN ??packetbuf_set_attr?relay
        FUNCTION ??packetbuf_set_attr?relay,00H
        EXTERN ??packetbuf_totlen?relay
        FUNCTION ??packetbuf_totlen?relay,00H
        EXTERN ??queuebuf_to_packetbuf?relay
        FUNCTION ??queuebuf_to_packetbuf?relay,00H
        EXTERN ??rimeaddr_cmp?relay
        FUNCTION ??rimeaddr_cmp?relay,00H
        EXTERN ??rimeaddr_copy?relay
        FUNCTION ??rimeaddr_copy?relay,00H
        EXTERN ??watchdog_periodic?relay
        FUNCTION ??watchdog_periodic?relay,00H
        EXTERN cc2530_rf_driver
        EXTERN framer_802154
        EXTERN mac_call_sent_callback
        FUNCTION mac_call_sent_callback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nullmac_driver
        EXTERN packetbuf_addr
        FUNCTION packetbuf_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_attr
        FUNCTION packetbuf_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_datalen
        FUNCTION packetbuf_datalen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_dataptr
        FUNCTION packetbuf_dataptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_hdrptr
        FUNCTION packetbuf_hdrptr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_addr
        FUNCTION packetbuf_set_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_attr
        FUNCTION packetbuf_set_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_totlen
        FUNCTION packetbuf_totlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_to_packetbuf
        FUNCTION queuebuf_to_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_cmp
        FUNCTION rimeaddr_cmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_copy
        FUNCTION rimeaddr_copy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_node_addr
        EXTERN rimeaddr_null
        EXTERN watchdog_periodic
        FUNCTION watchdog_periodic,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1
// D:\myWork\myWork\core\net\mac\nullrdc.c
//    1 /*
//    2  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         A null RDC implementation that uses framer for headers.
//   36  * \author
//   37  *         Adam Dunkels <adam@sics.se>
//   38  *         Niclas Finne <nfi@sics.se>
//   39  */
//   40 
//   41 #include "net/mac/nullrdc.h"
//   42 #include "net/packetbuf.h"
//   43 #include "net/queuebuf.h"
//   44 #include "net/netstack.h"
//   45 #include "net/rime/rimestats.h"
//   46 #include <string.h>
//   47 
//   48 #if CONTIKI_TARGET_COOJA
//   49 #include "lib/simEnvChange.h"
//   50 #endif /* CONTIKI_TARGET_COOJA */
//   51 
//   52 #define DEBUG 0
//   53 #if DEBUG
//   54 #include <stdio.h>
//   55 #define PRINTF(...) printf(__VA_ARGS__)
//   56 #else
//   57 #define PRINTF(...)
//   58 #endif
//   59 
//   60 #ifdef NULLRDC_CONF_ADDRESS_FILTER
//   61 #define NULLRDC_ADDRESS_FILTER NULLRDC_CONF_ADDRESS_FILTER
//   62 #else
//   63 #define NULLRDC_ADDRESS_FILTER 1
//   64 #endif /* NULLRDC_CONF_ADDRESS_FILTER */
//   65 
//   66 #ifndef NULLRDC_802154_AUTOACK
//   67 #ifdef NULLRDC_CONF_802154_AUTOACK
//   68 #define NULLRDC_802154_AUTOACK NULLRDC_CONF_802154_AUTOACK
//   69 #else
//   70 #define NULLRDC_802154_AUTOACK 0
//   71 #endif /* NULLRDC_CONF_802154_AUTOACK */
//   72 #endif /* NULLRDC_802154_AUTOACK */
//   73 
//   74 #ifndef NULLRDC_802154_AUTOACK_HW
//   75 #ifdef NULLRDC_CONF_802154_AUTOACK_HW
//   76 #define NULLRDC_802154_AUTOACK_HW NULLRDC_CONF_802154_AUTOACK_HW
//   77 #else
//   78 #define NULLRDC_802154_AUTOACK_HW 0
//   79 #endif /* NULLRDC_CONF_802154_AUTOACK_HW */
//   80 #endif /* NULLRDC_802154_AUTOACK_HW */
//   81 
//   82 #if NULLRDC_802154_AUTOACK
//   83 #include "sys/rtimer.h"
//   84 #include "dev/watchdog.h"
//   85 
//   86 #ifdef NULLRDC_CONF_ACK_WAIT_TIME
//   87 #define ACK_WAIT_TIME NULLRDC_CONF_ACK_WAIT_TIME
//   88 #else /* NULLRDC_CONF_ACK_WAIT_TIME */
//   89 #define ACK_WAIT_TIME                      RTIMER_SECOND / 2500
//   90 #endif /* NULLRDC_CONF_ACK_WAIT_TIME */
//   91 #ifdef NULLRDC_CONF_AFTER_ACK_DETECTED_WAIT_TIME
//   92 #define AFTER_ACK_DETECTED_WAIT_TIME NULLRDC_CONF_AFTER_ACK_DETECTED_WAIT_TIME
//   93 #else /* NULLRDC_CONF_AFTER_ACK_DETECTED_WAIT_TIME */
//   94 #define AFTER_ACK_DETECTED_WAIT_TIME       RTIMER_SECOND / 1500
//   95 #endif /* NULLRDC_CONF_AFTER_ACK_DETECTED_WAIT_TIME */
//   96 #endif /* NULLRDC_802154_AUTOACK */
//   97 
//   98 #ifdef NULLRDC_CONF_SEND_802154_ACK
//   99 #define NULLRDC_SEND_802154_ACK NULLRDC_CONF_SEND_802154_ACK
//  100 #else /* NULLRDC_CONF_SEND_802154_ACK */
//  101 #define NULLRDC_SEND_802154_ACK 0
//  102 #endif /* NULLRDC_CONF_SEND_802154_ACK */
//  103 
//  104 #if NULLRDC_SEND_802154_ACK
//  105 #include "net/mac/frame802154.h"
//  106 #endif /* NULLRDC_SEND_802154_ACK */
//  107 
//  108 #define ACK_LEN 3
//  109 
//  110 #if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
//  111 struct seqno {
//  112   rimeaddr_t sender;
//  113   uint8_t seqno;
//  114 };
//  115 
//  116 #ifdef NETSTACK_CONF_MAC_SEQNO_HISTORY
//  117 #define MAX_SEQNOS NETSTACK_CONF_MAC_SEQNO_HISTORY
//  118 #else /* NETSTACK_CONF_MAC_SEQNO_HISTORY */
//  119 #define MAX_SEQNOS 8
//  120 #endif /* NETSTACK_CONF_MAC_SEQNO_HISTORY */
//  121 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 static struct seqno received_seqnos[MAX_SEQNOS];
received_seqnos:
        DS 24
        REQUIRE __INIT_XDATA_Z
//  123 #endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */
//  124 
//  125 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 static int
//  127 send_one_packet(mac_callback_t sent, void *ptr)
send_one_packet:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function send_one_packet
        CODE
//  128 {
        FUNCALL send_one_packet, packetbuf_set_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_set_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_hdrptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, packetbuf_totlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, watchdog_periodic
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, watchdog_periodic
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_one_packet, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
//  129   int ret;
//  130   int last_sent_ok = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  131 
//  132   packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &rimeaddr_node_addr);
        ; Setup parameters for call to function packetbuf_set_addr
        MOV     R2,#rimeaddr_node_addr & 0xff
        MOV     R3,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     R1,#0x18
        LCALL   ??packetbuf_set_addr?relay
//  133 #if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
//  134   packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
        ; Setup parameters for call to function packetbuf_set_attr
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0xb
        LCALL   ??packetbuf_set_attr?relay
//  135 #endif /* NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW */
//  136 
//  137   if(NETSTACK_FRAMER.create() < 0) {
        ; Setup parameters for indirect call
        MOV     DPTR,#framer_802154
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,#0x0
        MOV     A,?V0 + 3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??send_one_packet_0
//  138     /* Failed to allocate space for headers */
//  139     PRINTF("nullrdc: send failed, too large header\n");
//  140     ret = MAC_TX_ERR_FATAL;
        MOV     ?V0 + 8,#0x5
        MOV     ?V0 + 9,#0x0
        LJMP    ??send_one_packet_1 & 0xFFFF
//  141   } else {
//  142 
//  143 #ifdef NETSTACK_ENCRYPT
//  144     NETSTACK_ENCRYPT();
//  145 #endif /* NETSTACK_ENCRYPT */
//  146 
//  147 #if NULLRDC_802154_AUTOACK
//  148     int is_broadcast;
//  149     uint8_t dsn;
//  150     dsn = ((uint8_t *)packetbuf_hdrptr())[2] & 0xff;
??send_one_packet_0:
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  151 
//  152     NETSTACK_RADIO.prepare(packetbuf_hdrptr(), packetbuf_totlen());
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
        ; Setup parameters for call to function packetbuf_hdrptr
        LCALL   ??packetbuf_hdrptr?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#cc2530_rf_driver + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  153 
//  154     is_broadcast = rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  155                                 &rimeaddr_null);
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
//  156 
//  157     if(NETSTACK_RADIO.receiving_packet() ||
//  158        (!is_broadcast && NETSTACK_RADIO.pending_packet())) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??send_one_packet_2
        MOV     A,R6
        ORL     A,R7
        JNZ     ??send_one_packet_3
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JZ      ??send_one_packet_3
//  159 
//  160       /* Currently receiving a packet over air or the radio has
//  161          already received a packet that needs to be read before
//  162          sending with auto ack. */
//  163       ret = MAC_TX_COLLISION;
??send_one_packet_2:
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        LJMP    ??send_one_packet_1 & 0xFFFF
//  164     } else {
//  165       if(!is_broadcast) {
//  166         RIMESTATS_ADD(reliabletx);
//  167       }
//  168 
//  169       switch(NETSTACK_RADIO.transmit(packetbuf_totlen())) {
??send_one_packet_3:
        ; Setup parameters for call to function packetbuf_totlen
        LCALL   ??packetbuf_totlen?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R0,#?V0 + 8
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for send_one_packet>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??send_one_packet_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??send_one_packet_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??send_one_packet_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??send_one_packet_6
        CODE
//  170       case RADIO_TX_OK:
//  171         if(is_broadcast) {
??send_one_packet_5:
        MOV     A,R6
        ORL     A,R7
        JZ      ??send_one_packet_7
//  172           ret = MAC_TX_OK;
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        LJMP    ??send_one_packet_1 & 0xFFFF
//  173         } else {
//  174           rtimer_clock_t wt;
//  175 
//  176           /* Check for ack */
//  177           wt = RTIMER_NOW();
??send_one_packet_7:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
//  178           watchdog_periodic();
        ; Setup parameters for call to function watchdog_periodic
        LCALL   ??watchdog_periodic?relay
//  179           while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + ACK_WAIT_TIME)) {
??send_one_packet_8:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0x6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_one_packet_8
//  180 #if CONTIKI_TARGET_COOJA
//  181             simProcessRunValue = 1;
//  182             cooja_mt_yield();
//  183 #endif /* CONTIKI_TARGET_COOJA */
//  184           }
//  185 
//  186           ret = MAC_TX_NOACK;
        MOV     ?V0 + 8,#0x2
        MOV     ?V0 + 9,#0x0
//  187           if(NETSTACK_RADIO.receiving_packet() ||
//  188              NETSTACK_RADIO.pending_packet() ||
//  189              NETSTACK_RADIO.channel_clear() == 0) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     ??send_one_packet_9
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     ??send_one_packet_9
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      $+5
        LJMP    ??send_one_packet_1 & 0xFFFF
//  190             int len;
//  191             uint8_t ackbuf[ACK_LEN];
//  192 
//  193             if(AFTER_ACK_DETECTED_WAIT_TIME > 0) {
//  194               wt = RTIMER_NOW();
??send_one_packet_9:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
//  195               watchdog_periodic();
        ; Setup parameters for call to function watchdog_periodic
        LCALL   ??watchdog_periodic?relay
//  196               while(RTIMER_CLOCK_LT(RTIMER_NOW(),
//  197                                     wt + AFTER_ACK_DETECTED_WAIT_TIME)) {
??send_one_packet_10:
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,R1
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0xa
        MOV     R0,A
        MOV     A,R1
        SUBB    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x0
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??send_one_packet_10
//  198       #if CONTIKI_TARGET_COOJA
//  199                   simProcessRunValue = 1;
//  200                   cooja_mt_yield();
//  201       #endif /* CONTIKI_TARGET_COOJA */
//  202               }
//  203             }
//  204 
//  205             if(NETSTACK_RADIO.pending_packet()) {
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      ??send_one_packet_1
//  206               len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
        ; Setup parameters for indirect call
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#cc2530_rf_driver + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R0,?V0 + 8
        MOV     R1,?V0 + 9
//  207               if(len == ACK_LEN && ackbuf[2] == dsn) {
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??send_one_packet_11
        MOV     A,#0x0
        XRL     A,R1
??send_one_packet_11:
        JNZ     ??send_one_packet_12
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??send_one_packet_12
//  208                 /* Ack received */
//  209                 RIMESTATS_ADD(ackrx);
//  210                 ret = MAC_TX_OK;
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        SJMP    ??send_one_packet_1
//  211               } else {
//  212                 /* Not an ack or ack not for us: collision */
//  213                 ret = MAC_TX_COLLISION;
??send_one_packet_12:
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
//  214               }
//  215             }
//  216           } else {
//  217 	    PRINTF("nullrdc tx noack\n");
//  218 	  }
//  219         }
//  220         break;
        SJMP    ??send_one_packet_1
//  221       case RADIO_TX_COLLISION:
//  222         ret = MAC_TX_COLLISION;
??send_one_packet_6:
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
//  223         break;
        SJMP    ??send_one_packet_1
//  224       default:
//  225         ret = MAC_TX_ERR;
??send_one_packet_4:
        MOV     ?V0 + 8,#0x4
        MOV     ?V0 + 9,#0x0
//  226         break;
//  227       }
//  228     }
//  229 
//  230 #else /* ! NULLRDC_802154_AUTOACK */
//  231 
//  232     switch(NETSTACK_RADIO.send(packetbuf_hdrptr(), packetbuf_totlen())) {
//  233     case RADIO_TX_OK:
//  234       ret = MAC_TX_OK;
//  235       break;
//  236     case RADIO_TX_COLLISION:
//  237       ret = MAC_TX_COLLISION;
//  238       break;
//  239     case RADIO_TX_NOACK:
//  240       ret = MAC_TX_NOACK;
//  241       break;
//  242     default:
//  243       ret = MAC_TX_ERR;
//  244       break;
//  245     }
//  246 
//  247 #endif /* ! NULLRDC_802154_AUTOACK */
//  248   }
//  249   if(ret == MAC_TX_OK) {
??send_one_packet_1:
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??send_one_packet_13
//  250     last_sent_ok = 1;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
//  251   }
//  252   mac_call_sent_callback(sent, ptr, ret, 1);
??send_one_packet_13:
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
//  253   return last_sent_ok;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  254 }
//  255 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  256 static void
//  257 send_packet(mac_callback_t sent, void *ptr)
send_packet:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function send_packet
        CODE
//  258 {
        FUNCALL send_packet, send_one_packet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  259   send_one_packet(sent, ptr);
        ; Setup parameters for call to function send_one_packet
        LCALL   ??send_one_packet?relay
//  260 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  261 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  262 static void
//  263 send_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
send_list:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function send_list
        CODE
//  264 {
        FUNCALL send_list, queuebuf_to_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_list, send_one_packet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??send_list_0
//  265   while(buf_list != NULL) {
//  266     /* We backup the next pointer, as it may be nullified by
//  267      * mac_call_sent_callback() */
//  268     struct rdc_buf_list *next = buf_list->next;
//  269     int last_sent_ok;
//  270 
//  271     queuebuf_to_packetbuf(buf_list->buf);
//  272     last_sent_ok = send_one_packet(sent, ptr);
//  273 
//  274     /* If packet transmission was not successful, we should back off and let
//  275      * upper layers retransmit, rather than potentially sending out-of-order
//  276      * packet fragments. */
//  277     if(!last_sent_ok) {
//  278       return;
//  279     }
//  280     buf_list = next;
??send_list_1:
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
??send_list_0:
        MOV     A,R0
        ORL     A,R1
        JZ      ??send_list_2
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function queuebuf_to_packetbuf
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_to_packetbuf?relay
        ; Setup parameters for call to function send_one_packet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??send_one_packet?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,?V0 + 4
        ORL     A,R1
        JNZ     ??send_list_1
//  281   }
//  282 }
??send_list_2:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  283 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 static void
//  285 packet_input(void)
packet_input:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function packet_input
        CODE
//  286 {
        FUNCALL packet_input, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_dataptr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_datalen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_input, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  287   int original_datalen;
//  288   uint8_t *original_dataptr;
//  289 
//  290   original_datalen = packetbuf_datalen();
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  291   original_dataptr = packetbuf_dataptr();
        ; Setup parameters for call to function packetbuf_dataptr
        LCALL   ??packetbuf_dataptr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  292 #ifdef NETSTACK_DECRYPT
//  293     NETSTACK_DECRYPT();
//  294 #endif /* NETSTACK_DECRYPT */
//  295 
//  296 #if NULLRDC_802154_AUTOACK
//  297   if(packetbuf_datalen() == ACK_LEN) {
        ; Setup parameters for call to function packetbuf_datalen
        LCALL   ??packetbuf_datalen?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0x3
        XRL     A,?V0 + 2
        JNZ     ??packet_input_0
        MOV     A,#0x0
        XRL     A,?V0 + 3
??packet_input_0:
        JNZ     $+5
        LJMP    ??packet_input_1 & 0xFFFF
//  298     /* Ignore ack packets */
//  299     PRINTF("nullrdc: ignored ack\n"); 
//  300   } else
//  301 #endif /* NULLRDC_802154_AUTOACK */
//  302   if(NETSTACK_FRAMER.parse() < 0) {
        ; Setup parameters for indirect call
        MOV     DPTR,#framer_802154 + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x0
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??packet_input_1 & 0xFFFF
//  303     PRINTF("nullrdc: failed to parse %u\n", packetbuf_datalen());
//  304 #if NULLRDC_ADDRESS_FILTER
//  305   } else if(!rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  306                                          &rimeaddr_node_addr) &&
//  307             !rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
//  308                           &rimeaddr_null)) {
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_node_addr & 0xff
        MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??packet_input_2
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,#rimeaddr_null & 0xff
        MOV     R5,#(rimeaddr_null >> 8) & 0xff
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??packet_input_1 & 0xFFFF
//  309     PRINTF("nullrdc: not for us\n");
//  310 #endif /* NULLRDC_ADDRESS_FILTER */
//  311   } else {
//  312     int duplicate = 0;
??packet_input_2:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  313 
//  314 #if NULLRDC_802154_AUTOACK || NULLRDC_802154_AUTOACK_HW
//  315     /* Check for duplicate packet by comparing the sequence number
//  316        of the incoming packet with the last few ones we saw. */
//  317     int i;
//  318     for(i = 0; i < MAX_SEQNOS; ++i) {
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        LJMP    ??packet_input_3 & 0xFFFF
//  319       if(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno &&
//  320          rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
//  321                       &received_seqnos[i].sender)) {
??packet_input_4:
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xd
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R4,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#(received_seqnos + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((received_seqnos + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        XRL     A,R2
        JNZ     ??packet_input_5
        MOV     A,R1
        XRL     A,R3
??packet_input_5:
        JNZ     ??packet_input_6
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#received_seqnos & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(received_seqnos >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x18
        LCALL   ??packetbuf_addr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      ??packet_input_6
//  322         /* Drop the packet. */
//  323         PRINTF("nullrdc: drop duplicate link layer packet %u\n",
//  324                packetbuf_attr(PACKETBUF_ATTR_PACKET_ID));
//  325         duplicate = 1;
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
//  326       }
//  327     }
??packet_input_6:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??packet_input_3:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x8
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??packet_input_4 & 0xFFFF
//  328     if(!duplicate) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??packet_input_7 & 0xFFFF
//  329       for(i = MAX_SEQNOS - 1; i > 0; --i) {
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        SJMP    ??packet_input_8
//  330         memcpy(&received_seqnos[i], &received_seqnos[i - 1],
//  331                sizeof(struct seqno));
??packet_input_9:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x3
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(received_seqnos + 253) & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#((received_seqnos - 3) >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x3
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#received_seqnos & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(received_seqnos >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  332       }
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
??packet_input_8:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x1
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??packet_input_9
//  333       received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xd
        LCALL   ??packetbuf_attr?relay
        MOV     A,R2
        MOV     DPTR,#received_seqnos + 2
        MOVX    @DPTR,A
//  334       rimeaddr_copy(&received_seqnos[0].sender,
//  335                     packetbuf_addr(PACKETBUF_ADDR_SENDER));
        ; Setup parameters for call to function rimeaddr_copy
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x18
        LCALL   ??packetbuf_addr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#received_seqnos & 0xff
        MOV     R3,#(received_seqnos >> 8) & 0xff
        LCALL   ??rimeaddr_copy?relay
//  336     }
//  337 #endif /* NULLRDC_802154_AUTOACK */
//  338 
//  339 #if NULLRDC_SEND_802154_ACK
//  340     {
//  341       frame802154_t info154;
//  342       frame802154_parse(original_dataptr, original_datalen, &info154);
//  343       if(info154.fcf.frame_type == FRAME802154_DATAFRAME &&
//  344          info154.fcf.ack_required != 0 &&
//  345          rimeaddr_cmp((rimeaddr_t *)&info154.dest_addr,
//  346                       &rimeaddr_node_addr)) {
//  347         uint8_t ackdata[ACK_LEN] = {0, 0, 0};
//  348 
//  349         ackdata[0] = FRAME802154_ACKFRAME;
//  350         ackdata[1] = 0;
//  351         ackdata[2] = info154.seq;
//  352         NETSTACK_RADIO.send(ackdata, ACK_LEN);
//  353       }
//  354     }
//  355 #endif /* NULLRDC_SEND_ACK */
//  356     if(!duplicate) {
??packet_input_7:
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??packet_input_1
//  357       NETSTACK_MAC.input();
        ; Setup parameters for indirect call
        MOV     DPTR,#nullmac_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  358     }
//  359   }
//  360 }
??packet_input_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  361 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  362 static int
//  363 on(void)
on:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function on
        CODE
//  364 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  365   return NETSTACK_RADIO.on();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 16
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  366 }
//  367 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  368 static int
//  369 off(int keep_radio_on)
off:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function off
        CODE
//  370 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  371   if(keep_radio_on) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??off_0
//  372     return NETSTACK_RADIO.on();
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 16
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        SJMP    ??off_1
//  373   } else {
//  374     return NETSTACK_RADIO.off();
??off_0:
        ; Setup parameters for indirect call
        MOV     DPTR,#cc2530_rf_driver + 18
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??off_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  375   }
//  376 }
//  377 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  378 static unsigned short
//  379 channel_check_interval(void)
channel_check_interval:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function channel_check_interval
        CODE
//  380 {
        ; Saved register size: 0
        ; Auto size: 0
//  381   return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock6
//  382 }
//  383 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  384 static void
//  385 init(void)
init:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function init
        CODE
//  386 {
        FUNCALL init, on
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  387   on();
        ; Setup parameters for call to function on
        LCALL   ??on?relay
//  388 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock7

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "nullrdc">`:
        DS 8
        REQUIRE `?<Initializer for <Constant "nullrdc">>`
        REQUIRE __INIT_XDATA_I
//  389 /*---------------------------------------------------------------------------*/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//  390 const struct rdc_driver nullrdc_driver = {
nullrdc_driver:
        DS 16
        REQUIRE `?<Initializer for nullrdc_driver>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "nullrdc">>`:
        DB "nullrdc"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for nullrdc_driver>`:
        DATA16
        DW `?<Constant "nullrdc">`
        DW ??init?relay
        DW ??send_packet?relay
        DW ??send_list?relay
        DW ??packet_input?relay
        DW ??on?relay
        DW ??off?relay
        DW ??channel_check_interval?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_one_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_one_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_list?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_list

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??packet_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packet_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??on?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    on

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??channel_check_interval?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    channel_check_interval

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    init

        END
//  391   "nullrdc",
//  392   init,
//  393   send_packet,
//  394   send_list,
//  395   packet_input,
//  396   on,
//  397   off,
//  398   channel_check_interval,
//  399 };
//  400 /*---------------------------------------------------------------------------*/
// 
// 1 381 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    24 bytes in segment XDATA_I
//    24 bytes in segment XDATA_ID
//    24 bytes in segment XDATA_Z
// 
// 1 453 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//    48 bytes of XDATA memory
//
//Errors: none
//Warnings: none
