###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:55 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\cpu\cc253x\dev\watchdog.c         #
#    Command line       =  D:\myWork\myWork\cpu\cc253x\dev\watchdog.c -D      #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\watchdog.lst                                #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\watchdog.r51                                 #
#                                                                             #
#                                                                             #
###############################################################################


   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
D:\myWork\myWork\cpu\cc253x\dev\watchdog.c
      1          /*
      2           * Copyright (c) 2010, Loughborough University - Computer Science
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the Contiki operating system.
     30           */
     31          
     32          /**
     33           * \file
     34           *         Hardware-dependent functions for the cc253x watchdog.
     35           *
     36           *         This file contains an ISR and must reside in the HOME bank.
     37           *
     38           * \author
     39           *         George Oikonomou - <oikonomou@users.sourceforge.net>
     40           *         YoCiHou - < www.iotdev.net >
     41           */
     42          
     43          #include "cc253x.h"
     44          #include "sfr-bits.h"
     45          #include "contiki-conf.h"
     46          
     47          #define WDT_TIMEOUT_MIN    (WDCTL_INT1 | WDCTL_INT0)
     48          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     49          void
     50          watchdog_init(void)
   \                     watchdog_init:
     51          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     52            WDCTL = 0; /* IDLE, Max Interval */
   \   000000   75C900       MOV     0xc9,#0x0
     53          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE WDCTL
     54          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          void
     56          watchdog_start(void)
   \                     watchdog_start:
     57          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     58            WDCTL |= WDCTL_MODE1; /* Start in Watchdog mode */
   \   000000   43C908       ORL     0xc9,#0x8
     59          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE WDCTL
     60          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          void
     62          watchdog_periodic(void)
   \                     watchdog_periodic:
     63          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     64            /* Write the 'clear' sequence while maintaining mode and interval setting */
     65            WDCTL = (WDCTL & 0x0F) | WDCTL_CLR3 | WDCTL_CLR1;
   \   000000   E5C9         MOV     A,0xc9
   \   000002   540F         ANL     A,#0xf
   \   000004   44A0         ORL     A,#0xa0
   \   000006   F5C9         MOV     0xc9,A
     66            WDCTL = (WDCTL & 0x0F) | WDCTL_CLR2 | WDCTL_CLR0;
   \   000008   E5C9         MOV     A,0xc9
   \   00000A   540F         ANL     A,#0xf
   \   00000C   4450         ORL     A,#0x50
   \   00000E   F5C9         MOV     0xc9,A
     67          }
   \   000010   02....       LJMP    ?BRET
   \   000013                REQUIRE WDCTL
     68          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     69          void
     70          watchdog_reboot(void)
   \                     watchdog_reboot:
     71          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     72            WDCTL = WDT_TIMEOUT_MIN;
   \   000000   75C903       MOV     0xc9,#0x3
     73            /* Dis-acknowledge all interrupts while we wait for the dog to bark */
     74            DISABLE_INTERRUPTS();
   \   000003   C2AF         CLR     0xa8.7
     75          
     76            WDCTL |= WDCTL_MODE1; /* Just in case it's not started... */
   \   000005   43C908       ORL     0xc9,#0x8
     77          
     78            /* NOP till the dog barks... */
     79            while(1) {
     80              asm("nop");
   \                     ??watchdog_reboot_0:
   \   000008   00           nop
   \   000009   80FD         SJMP    ??watchdog_reboot_0
   \   00000B                REQUIRE WDCTL
   \   00000B                REQUIRE _A_IEN0
     81            }
     82          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??watchdog_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    watchdog_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??watchdog_start?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    watchdog_start

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??watchdog_periodic?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    watchdog_periodic

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??watchdog_reboot?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    watchdog_reboot

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  watchdog_init
       0      0      0  watchdog_periodic
       0      0      0  watchdog_reboot
       0      0      0  watchdog_start


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??watchdog_init?relay
       6  ??watchdog_periodic?relay
       6  ??watchdog_reboot?relay
       6  ??watchdog_start?relay
       1  WDCTL
       1  _A_IEN0
       6  watchdog_init
      19  watchdog_periodic
      11  watchdog_reboot
       6  watchdog_start

 
 42 bytes in segment BANKED_CODE
 24 bytes in segment BANK_RELAYS
  2 bytes in segment SFR_AN
 
 66 bytes of CODE memory
  0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
