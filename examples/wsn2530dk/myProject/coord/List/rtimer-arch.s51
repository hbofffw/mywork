///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:42 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\cpu\cc253x\rtimer-arch.c         /
//    Command line       =  D:\myWork\myWork\cpu\cc253x\rtimer-arch.c -D      /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\rtimer-arch.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `rtimer-arch`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?V0

        PUBLIC ??rtimer_arch_init?relay
        FUNCTION ??rtimer_arch_init?relay,0203H
        PUBLIC ??rtimer_arch_schedule?relay
        FUNCTION ??rtimer_arch_schedule?relay,0203H
        PUBWEAK `??rtimer_isr??INTVEC 75`
        PUBWEAK T1CC1H
        PUBWEAK T1CC1L
        PUBWEAK T1CCTL1
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK T1STAT
        PUBWEAK _A_IEN1
        PUBWEAK _A_TIMIF
        PUBLIC rtimer_arch_init
        FUNCTION rtimer_arch_init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC rtimer_arch_schedule
        FUNCTION rtimer_arch_schedule,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC rtimer_isr
        FUNCTION rtimer_isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
rtimer_run_next     SYMBOL "rtimer_run_next"
??rtimer_run_next?relay SYMBOL "?relay", rtimer_run_next
rtimer_arch_init    SYMBOL "rtimer_arch_init"
??rtimer_arch_init?relay SYMBOL "?relay", rtimer_arch_init
rtimer_arch_schedule SYMBOL "rtimer_arch_schedule"
??rtimer_arch_schedule?relay SYMBOL "?relay", rtimer_arch_schedule
rtimer_isr          SYMBOL "rtimer_isr"
`??rtimer_isr??INTVEC 75` SYMBOL "??INTVEC 75", rtimer_isr

        EXTERN ??rtimer_run_next?relay
        FUNCTION ??rtimer_run_next?relay,00H
        EXTERN energest_current_mode
        EXTERN energest_current_time
        EXTERN energest_total_time
        EXTERN rtimer_run_next
        FUNCTION rtimer_run_next,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dcH
// unsigned char volatile __sfr T1CC1L
T1CC1L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ddH
// unsigned char volatile __sfr T1CC1H
T1CC1H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e6H
// unsigned char volatile __sfr T1CCTL1
T1CCTL1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0afH
// unsigned char volatile __sfr T1STAT
T1STAT:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d8H
// union <unnamed> volatile __sfr _A_TIMIF
_A_TIMIF:
        DATA8
        DS 1
// D:\myWork\myWork\cpu\cc253x\rtimer-arch.c
//    1 /*
//    2  * Copyright (c) 2010, Loughborough University - Computer Science
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         Hardware-dependent functions used to support the
//   36  *         contiki rtimer module.
//   37  *
//   38  *         clock_init() has set our tick speed prescaler already, so we
//   39  *         are ticking with 500 kHz freq.
//   40  *
//   41  *         Contiki typedefs rtimer_clock_t as unsigned short (16bit)
//   42  *         It thus makes sense to use the 16bit timer (Timer 1)
//   43  *
//   44  *         This file contains an ISR and must reside in the HOME bank
//   45  *
//   46  * \author
//   47  *         George Oikonomou - <oikonomou@users.sourceforge.net>
//   48  */
//   49 
//   50 #include "sys/rtimer.h"
//   51 #include "sfr-bits.h"
//   52 #include "cc253x.h"
//   53 #include "sys/energest.h"
//   54 
//   55 #include "debug.h"
//   56 #include <stdio.h>
//   57 
//   58 #define RT_MODE_COMPARE() do { T1CCTL1 |= T1CCTL_MODE; } while(0)
//   59 #define RT_MODE_CAPTURE() do { T1CCTL1 &= ~T1CCTL_MODE; } while(0)
//   60 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void
//   62 rtimer_arch_init(void)
rtimer_arch_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function rtimer_arch_init
        CODE
//   63 {
        ; Saved register size: 0
        ; Auto size: 0
//   64   /*
//   65    * - Free running mode
//   66    * - Prescale by 32:
//   67    *   Tick Speed has been prescaled to 500 kHz already in clock_init()
//   68    *   We further prescale by 32 resulting in 15625 Hz for this timer.
//   69    */
//   70   T1CTL = (T1CTL_DIV1 | T1CTL_MODE0);
        MOV     0xe4,#0x9
//   71 
//   72   T1STAT = 0;
        MOV     0xaf,#0x0
//   73 
//   74   /* Timer 1, Channel 1. Compare Mode (0x04), Interrupt mask on (0x40) */
//   75   T1CCTL1 = T1CCTL_MODE | T1CCTL_IM;
        MOV     0xe6,#0x44
//   76 
//   77   /* Interrupt Mask Flags: No interrupt on overflow */
//   78   OVFIM = 0;
        CLR     0xd8.6
//   79 
//   80   /* Acknowledge Timer 1 Interrupts */
//   81   T1IE = 1;
        SETB    0xb8.1
//   82 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
        REQUIRE T1CTL
        REQUIRE T1STAT
        REQUIRE T1CCTL1
        REQUIRE _A_TIMIF
        REQUIRE _A_IEN1
//   83 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 void
//   85 rtimer_arch_schedule(rtimer_clock_t t)
rtimer_arch_schedule:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function rtimer_arch_schedule
        CODE
//   86 {
        ; Saved register size: 0
        ; Auto size: 0
//   87   /* Switch to capture mode before writing T1CC1x and
//   88    * set the compare mode values so we can get an interrupt after t */
//   89   RT_MODE_CAPTURE();
        ANL     0xe6,#0xfb
//   90   T1CC1L = (unsigned char)t;
        MOV     A,R2
        MOV     0xdc,A
//   91   T1CC1H = (unsigned char)(t >> 8);
        CLR     A
        MOV     A,R3
        MOV     R2,A
        MOV     0xdd,A
//   92   RT_MODE_COMPARE();
        ORL     0xe6,#0x4
//   93 
//   94   /* Turn on compare mode interrupt */
//   95   T1STAT = 0;
        MOV     0xaf,#0x0
//   96   T1CCTL1 |= T1CCTL_IM;
        ORL     0xe6,#0x40
//   97 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
        REQUIRE T1CCTL1
        REQUIRE T1CC1L
        REQUIRE T1CC1H
        REQUIRE T1STAT
//   98 /*---------------------------------------------------------------------------*/
//   99 /* avoid referencing bits, we don't call code which use them */
//  100 #pragma save
//  101 #if CC_CONF_OPTIMIZE_STACK_SIZE
//  102 #pragma exclude bits
//  103 #endif
//  104 #pragma vector = T1_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  105 __interrupt void rtimer_isr(void)
rtimer_isr:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI Function rtimer_isr
        CODE
//  106 {
        FUNCALL rtimer_isr, rtimer_run_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV     A,#-0x11
        LCALL   ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
//  107   T1IE = 0; /* Ignore Timer 1 Interrupts */
        CLR     0xb8.1
//  108   ENERGEST_ON(ENERGEST_TYPE_IRQ);
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#energest_current_time + 4
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#energest_current_mode + 2
        MOV     A,#0x1
        MOVX    @DPTR,A
//  109 
//  110   /* No more interrupts from Channel 1 till next rtimer_arch_schedule() call */
//  111   T1STAT &= ~T1STAT_CH1IF;
        ANL     0xaf,#0xfd
//  112   T1CCTL1 &= ~T1CCTL_IM;
        ANL     0xe6,#0xbf
//  113 
//  114   rtimer_run_next();
        ; Setup parameters for call to function rtimer_run_next
        LCALL   ??rtimer_run_next?relay
//  115 
//  116   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
        MOV     DPTR,#energest_current_mode + 2
        MOVX    A,@DPTR
        JZ      ??rtimer_isr_0
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#energest_current_time + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#energest_total_time + 8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
        MOV     DPTR,#energest_current_mode + 2
        MOV     A,#0x0
        MOVX    @DPTR,A
//  117   T1IE = 1; /* Acknowledge Timer 1 Interrupts */
??rtimer_isr_0:
        SETB    0xb8.1
//  118 }
        MOV     R7,#0x4
        LJMP    ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock2
        REQUIRE _A_IEN1
        REQUIRE T1CNTL
        REQUIRE T1CNTH
        REQUIRE T1STAT
        REQUIRE T1CCTL1

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??rtimer_isr??INTVEC 75`:
        LJMP       (rtimer_isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rtimer_arch_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rtimer_arch_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rtimer_arch_schedule?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rtimer_arch_schedule

        END
//  119 #pragma restore
// 
//  39 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 119 bytes in segment NEAR_CODE
//   9 bytes in segment SFR_AN
// 
// 170 bytes of CODE memory (+ 3 bytes shared)
//   0 bytes of DATA memory (+ 9 bytes shared)
//
//Errors: none
//Warnings: 2
