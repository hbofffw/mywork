///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:51 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\sys\stimer.c                /
//    Command line       =  D:\myWork\myWork\core\sys\stimer.c -D             /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\stimer.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME stimer

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB
        EXTERN ?L_SUB_X
        EXTERN ?UL_GE_X
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I

        PUBLIC ??stimer_elapsed?relay
        FUNCTION ??stimer_elapsed?relay,0203H
        PUBLIC ??stimer_expired?relay
        FUNCTION ??stimer_expired?relay,0203H
        PUBLIC ??stimer_remaining?relay
        FUNCTION ??stimer_remaining?relay,0203H
        PUBLIC ??stimer_reset?relay
        FUNCTION ??stimer_reset?relay,0203H
        PUBLIC ??stimer_restart?relay
        FUNCTION ??stimer_restart?relay,0203H
        PUBLIC ??stimer_set?relay
        FUNCTION ??stimer_set?relay,0203H
        PUBWEAK __Constant_7fffffff
        PUBLIC stimer_elapsed
        FUNCTION stimer_elapsed,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC stimer_expired
        FUNCTION stimer_expired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC stimer_remaining
        FUNCTION stimer_remaining,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC stimer_reset
        FUNCTION stimer_reset,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC stimer_restart
        FUNCTION stimer_restart,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC stimer_set
        FUNCTION stimer_set,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
clock_seconds       SYMBOL "clock_seconds"
??clock_seconds?relay SYMBOL "?relay", clock_seconds
stimer_elapsed      SYMBOL "stimer_elapsed"
??stimer_elapsed?relay SYMBOL "?relay", stimer_elapsed
stimer_expired      SYMBOL "stimer_expired"
??stimer_expired?relay SYMBOL "?relay", stimer_expired
stimer_remaining    SYMBOL "stimer_remaining"
??stimer_remaining?relay SYMBOL "?relay", stimer_remaining
stimer_reset        SYMBOL "stimer_reset"
??stimer_reset?relay SYMBOL "?relay", stimer_reset
stimer_restart      SYMBOL "stimer_restart"
??stimer_restart?relay SYMBOL "?relay", stimer_restart
stimer_set          SYMBOL "stimer_set"
??stimer_set?relay  SYMBOL "?relay", stimer_set

        EXTERN ??clock_seconds?relay
        FUNCTION ??clock_seconds?relay,00H
        EXTERN clock_seconds
        FUNCTION clock_seconds,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\myWork\myWork\core\sys\stimer.c
//    1 /**
//    2  * \addtogroup stimer
//    3  * @{
//    4  */
//    5 
//    6 /**
//    7  * \file
//    8  * Timer of seconds library implementation.
//    9  * \author
//   10  * Adam Dunkels <adam@sics.se>, Nicolas Tsiftes <nvt@sics.se>
//   11  */
//   12 
//   13 /*
//   14  * Copyright (c) 2004, 2008, Swedish Institute of Computer Science.
//   15  * All rights reserved.
//   16  *
//   17  * Redistribution and use in source and binary forms, with or without
//   18  * modification, are permitted provided that the following conditions
//   19  * are met:
//   20  * 1. Redistributions of source code must retain the above copyright
//   21  *    notice, this list of conditions and the following disclaimer.
//   22  * 2. Redistributions in binary form must reproduce the above copyright
//   23  *    notice, this list of conditions and the following disclaimer in the
//   24  *    documentation and/or other materials provided with the distribution.
//   25  * 3. Neither the name of the Institute nor the names of its contributors
//   26  *    may be used to endorse or promote products derived from this software
//   27  *    without specific prior written permission.
//   28  *
//   29  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   30  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   31  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   32  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   33  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   34  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   35  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   36  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   37  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   38  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   39  * SUCH DAMAGE.
//   40  *
//   41  * This file is part of the Contiki operating system.
//   42  *
//   43  * Author: Adam Dunkels <adam@sics.se>, Nicolas Tsiftes <nvt@sics.se>
//   44  *
//   45  */
//   46 
//   47 #include "contiki-conf.h"
//   48 #include "sys/clock.h"
//   49 #include "sys/stimer.h"
//   50 
//   51 #define SCLOCK_GEQ(a, b)	((unsigned long)((a) - (b)) < \ 
//   52 				((unsigned long)(~((unsigned long)0)) >> 1))
//   53 
//   54 /*---------------------------------------------------------------------------*/
//   55 /**
//   56  * Set a timer.
//   57  *
//   58  * This function is used to set a timer for a time sometime in the
//   59  * future. The function stimer_expired() will evaluate to true after
//   60  * the timer has expired.
//   61  *
//   62  * \param t A pointer to the timer
//   63  * \param interval The interval before the timer expires.
//   64  *
//   65  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   66 void
//   67 stimer_set(struct stimer *t, unsigned long interval)
stimer_set:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function stimer_set
        CODE
//   68 {
        FUNCALL stimer_set, clock_seconds
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//   69   t->interval = interval;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//   70   t->start = clock_seconds();
        ; Setup parameters for call to function clock_seconds
        LCALL   ??clock_seconds?relay
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XSTORE_R2345
//   71 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   72 /*---------------------------------------------------------------------------*/
//   73 /**
//   74  * Reset the timer with the same interval.
//   75  *
//   76  * This function resets the timer with the same interval that was
//   77  * given to the stimer_set() function. The start point of the interval
//   78  * is the exact time that the timer last expired. Therefore, this
//   79  * function will cause the timer to be stable over time, unlike the
//   80  * stimer_restart() function.
//   81  *
//   82  * \param t A pointer to the timer.
//   83  *
//   84  * \sa stimer_restart()
//   85  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 void
//   87 stimer_reset(struct stimer *t)
stimer_reset:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function stimer_reset
        CODE
//   88 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   89   t->start += t->interval;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//   90 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   91 /*---------------------------------------------------------------------------*/
//   92 /**
//   93  * Restart the timer from the current point in time
//   94  *
//   95  * This function restarts a timer with the same interval that was
//   96  * given to the stimer_set() function. The timer will start at the
//   97  * current time.
//   98  *
//   99  * \note A periodic timer will drift if this function is used to reset
//  100  * it. For preioric timers, use the stimer_reset() function instead.
//  101  *
//  102  * \param t A pointer to the timer.
//  103  *
//  104  * \sa stimer_reset()
//  105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void
//  107 stimer_restart(struct stimer *t)
stimer_restart:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function stimer_restart
        CODE
//  108 {
        FUNCALL stimer_restart, clock_seconds
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  109   t->start = clock_seconds();
        ; Setup parameters for call to function clock_seconds
        LCALL   ??clock_seconds?relay
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XSTORE_R2345
//  110 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  111 /*---------------------------------------------------------------------------*/
//  112 /**
//  113  * Check if a timer has expired.
//  114  *
//  115  * This function tests if a timer has expired and returns true or
//  116  * false depending on its status.
//  117  *
//  118  * \param t A pointer to the timer
//  119  *
//  120  * \return Non-zero if the timer has expired, zero otherwise.
//  121  *
//  122  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 int
//  124 stimer_expired(struct stimer *t)
stimer_expired:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function stimer_expired
        CODE
//  125 {
        FUNCALL stimer_expired, clock_seconds
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  126   return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
        MOV     DPTR,#__Constant_7fffffff
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        ; Setup parameters for call to function clock_seconds
        LCALL   ??clock_seconds?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_X
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_X
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GE_X
        JC      ??stimer_expired_0
        SETB    B.0
        SJMP    ??stimer_expired_1
??stimer_expired_0:
        CLR     B.0
??stimer_expired_1:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     R3,#0x0
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  127 }
//  128 /*---------------------------------------------------------------------------*/
//  129 /**
//  130  * The time until the timer expires
//  131  *
//  132  * This function returns the time until the timer expires.
//  133  *
//  134  * \param t A pointer to the timer
//  135  *
//  136  * \return The time until the timer expires
//  137  *
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 unsigned long
//  140 stimer_remaining(struct stimer *t)
stimer_remaining:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function stimer_remaining
        CODE
//  141 {
        FUNCALL stimer_remaining, clock_seconds
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  142   return t->start + t->interval - clock_seconds();
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        ; Setup parameters for call to function clock_seconds
        LCALL   ??clock_seconds?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_SUB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  143 }
//  144 /*---------------------------------------------------------------------------*/
//  145 /**
//  146  * The time elapsed since the timer started
//  147  *
//  148  * This function returns the time elapsed.
//  149  *
//  150  * \param t A pointer to the timer
//  151  *
//  152  * \return The time elapsed since the last start of the timer
//  153  *
//  154  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  155 unsigned long
//  156 stimer_elapsed(struct stimer *t)
stimer_elapsed:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function stimer_elapsed
        CODE
//  157 {
        FUNCALL stimer_elapsed, clock_seconds
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  158   return clock_seconds() - t->start;
        ; Setup parameters for call to function clock_seconds
        LCALL   ??clock_seconds?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  159 }

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_7fffffff:
        DS 4
        REQUIRE `?<Initializer for __Constant_7fffffff>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_7fffffff>`:
        DATA32
        DD 2147483647

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_set?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_set

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_reset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_reset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_restart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_restart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_expired?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_expired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_remaining?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_remaining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stimer_elapsed?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stimer_elapsed

        END
//  160 
//  161 /*---------------------------------------------------------------------------*/
//  162 
//  163 /** @} */
// 
// 281 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   4 bytes in segment XDATA_I
//   4 bytes in segment XDATA_ID
// 
// 317 bytes of CODE  memory (+ 4 bytes shared)
//   0 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
