///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:44 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\platform\wsn2530dk\dev\adc-senso /
//                          r.c                                               /
//    Command line       =  D:\myWork\myWork\platform\wsn2530dk\dev\adc-senso /
//                          r.c -D AUTOSTART_ENABLE -D PROJECT_CONF_H -lC     /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\adc-sensor.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `adc-sensor`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I

        FUNCTION ??configure?relay,0203H
        FUNCTION ??status?relay,0203H
        FUNCTION ??value?relay,0203H
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK APCFG
        PUBWEAK _A_TCON
        PUBLIC adc_sensor
        FUNCTION configure,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION status,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION value,080603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1
// D:\myWork\myWork\platform\wsn2530dk\dev\adc-sensor.c
//    1 /*
//    2  * Copyright (c) 2011, George Oikonomou - <oikonomou@users.sourceforge.net>
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  */
//   31 
//   32 /**
//   33  * \file
//   34  *         ADC sensor module for TI SmartRF05EB devices.
//   35  *
//   36  * \author
//   37  *         George Oikonomou - <oikonomou@users.sourceforge.net>
//   38  */
//   39 #include "sfr-bits.h"
//   40 #include "cc253x.h"
//   41 #include "adc-sensor.h"
//   42 
//   43 #if ADC_SENSOR_ON
//   44 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   45 static int
//   46 value(int type)
value:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function value
        CODE
//   47 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   48   uint16_t reading;
//   49   /*
//   50    * For single-shot AD conversions, we may only write to ADCCON3[3:0] once
//   51    * (This write triggers the conversion). We thus use the variable 'command'
//   52    * to store intermediate steps (reference, decimation rate, input channel)
//   53    */
//   54   uint8_t command;
//   55 
//   56   /* 1.25V ref, max decimation rate */
//   57   command = ADCCON3_EDIV1 | ADCCON3_EDIV0;
        MOV     ?V0 + 0,#0x30
//   58 
//   59   /* Clear the Interrupt Flag */
//   60   ADCIF = 0;
        CLR     0x88.5
//   61 
//   62   /* Depending on the desired reading, append the input bits to 'command' and
//   63    * enable the corresponding input channel in ADCCFG if necessary */
//   64   switch(type) {
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for value>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??value_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??value_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??value_2
        CODE
//   65 #if TEMP_SENSOR_ON
//   66   case ADC_SENSOR_TYPE_TEMP:
//   67     command |= ADCCON3_ECH3 | ADCCON3_ECH2 | ADCCON3_ECH1;
??value_0:
        ORL     ?V0 + 0,#0xe
//   68     break;
//   69 #endif
//   70 #if VDD_SENSOR_ON
//   71   case ADC_SENSOR_TYPE_VDD:
//   72     command |= ADCCON3_ECH3 | ADCCON3_ECH2 | ADCCON3_ECH1 | ADCCON3_ECH0;
//   73     break;
//   74 #endif
//   75   default:
//   76     /* If the sensor is not present or disabled in conf, return -1 */
//   77     return -1;
//   78   }
//   79 
//   80   /* Writing in bits 3:0 of ADCCON3 will trigger a single conversion */
//   81   ADCCON3 = command;
??value_3:
        MOV     0xb6,?V0 + 0
//   82 
//   83   /*
//   84    * When the conversion is complete, the ADC interrupt flag is set. We don't
//   85    * use an ISR here, we just wait on the flag and clear it afterwards.
//   86    */
//   87   while(!ADCIF);
??value_4:
        MOV     C,0x88.5
        JNC     ??value_4
//   88 
//   89   /* Clear the Interrupt Flag */
//   90   ADCIF = 0;
        CLR     0x88.5
//   91 
//   92   reading = ADCL;
        MOV     A,0xba
        MOV     R2,A
        MOV     R3,#0x0
//   93   reading |= (((uint8_t) ADCH) << 8);
        MOV     A,0xbb
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R0
        ORL     A,R2
        MOV     R2,A
        MOV     A,R1
        ORL     A,R3
        MOV     R3,A
//   94   /* 12-bit decimation rate: 4 LS bits are noise */
//   95   reading >>= 4;
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//   96 
//   97   return reading;
??value_5:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
??value_1:
        ORL     ?V0 + 0,#0xf
        SJMP    ??value_3
??value_2:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??value_5
          CFI EndBlock cfiBlock0
        REQUIRE _A_TCON
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
//   98 }
//   99 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  100 static int
//  101 status(int type)
status:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function status
        CODE
//  102 {
        ; Saved register size: 0
        ; Auto size: 0
//  103   return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  104 }
//  105 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 static int
//  107 configure(int type, int value)
configure:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function configure
        CODE
//  108 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  109   switch(type) {
        MOV     A,#-0x80
        XRL     A,R2
        JNZ     ??configure_0
        MOV     A,#0x0
        XRL     A,R3
??configure_0:
        JNZ     ??configure_1
//  110   case SENSORS_HW_INIT:
//  111 #if TEMP_SENSOR_ON
//  112     /* Connect temperature sensor to the SoC */
//  113     ATEST = 1;
        MOV     DPTR,#0x61bd
        MOV     A,#0x1
        MOVX    @DPTR,A
//  114     TESTREG0 = 1;
        MOV     DPTR,#0x624b
        MOV     A,#0x1
        MOVX    @DPTR,A
//  115 #endif
//  116     APCFG = 0; /* Disables Input Channels */
        MOV     0xf2,#0x0
//  117     break;
//  118   }
//  119   return 1;
??configure_1:
        MOV     R2,#0x1
        MOV     R3,#0x0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
        REQUIRE APCFG
//  120 }

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
`?<Constant "ADC">`:
        DS 4
        REQUIRE `?<Initializer for <Constant "ADC">>`
        REQUIRE __INIT_XDATA_I
//  121 /*---------------------------------------------------------------------------*/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//  122 SENSORS_SENSOR(adc_sensor, ADC_SENSOR, value, configure, status);
adc_sensor:
        DS 8
        REQUIRE `?<Initializer for adc_sensor>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ADC">>`:
        DB "ADC"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for adc_sensor>`:
        DATA16
        DW `?<Constant "ADC">`
        DW ??value?relay
        DW ??configure?relay
        DW ??status?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??value?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    value

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??status?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    status

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??configure?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    configure

        END
//  123 #endif /* ADC_SENSOR_ON */
// 
// 142 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//  12 bytes in segment XDATA_I
//  12 bytes in segment XDATA_ID
// 
// 172 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 5 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
