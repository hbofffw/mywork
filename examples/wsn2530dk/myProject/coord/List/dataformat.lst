###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:47 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\data #
#                          format\dataformat.c                                #
#    Command line       =  D:\myWork\myWork\examples\wsn2530dk\myProject\data #
#                          format\dataformat.c -D AUTOSTART_ENABLE -D         #
#                          PROJECT_CONF_H -lC D:\myWork\myWork\examples\wsn25 #
#                          30dk\myProject\coord\List\ -lA                     #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ --diag_suppress Pa050,Pa082,Pe550          #
#                          --diag_warning Pe144 -o D:\myWork\myWork\examples\ #
#                          wsn2530dk\myProject\coord\Obj\ -e --no_cse         #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 16        #
#                          --preinclude D:\myWork\myWork\examples\wsn2530dk\m #
#                          yProject\..\..\..\cpu\cc253x\cc253x.h -I           #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\dataformat.lst                              #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\dataformat.r51                               #
#                                                                             #
#                                                                             #
###############################################################################


   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1
D:\myWork\myWork\examples\wsn2530dk\myProject\dataformat\dataformat.c
      1          /******created by dongbo huang*****/
      2          
      3          #include "dataformat.h"

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   static list_t packetbuf_list
   \                     packetbuf_list:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for packetbuf_list>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static void *__xdata packetbuf_list_list
   \                     packetbuf_list_list:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   static struct memb packetbuf_memb
   \                     packetbuf_memb:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for packetbuf_memb>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static char packetbuf_memb_memb_count[5]
   \                     packetbuf_memb_memb_count:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static struct packetbufListStruct packetbuf_memb_memb_mem[5]
   \                     packetbuf_memb_memb_mem:
   \   000000                DS 660
   \   000294                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   static list_t information_list
   \                     information_list:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for information_list>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static void *__xdata information_list_list
   \                     information_list_list:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \   static struct memb information_memb
   \                     information_memb:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for information_memb>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static char information_memb_memb_count[10]
   \                     information_memb_memb_count:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static struct informationListStruct information_memb_memb_mem[10]
   \                     information_memb_memb_mem:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static int sleepingCMD
   \                     sleepingCMD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
      4          
      5          
      6          #include "contiki.h"
      7          #include "soc.h"
      8          #include "stack.h"
      9          #include "sys/clock.h"
     10          #include "sys/autostart.h"
     11          #include "dev/serial-line.h"
     12          #include "dev/slip.h"
     13          #include "dev/leds.h"
     14          #include "dev/io-arch.h"
     15          #include "dev/dma.h"
     16          #include "dev/cc2530-rf.h"
     17          #include "dev/watchdog.h"
     18          #include "dev/clock-isr.h"
     19          #include "dev/port2.h"
     20          #include "dev/lpm.h"
     21          #include "dev/button-sensor.h"
     22          #include "dev/adc-sensor.h"
     23          #include "dev/leds-arch.h"
     24          #include "net/rime.h"
     25          #include "net/netstack.h"
     26          #include "net/mac/frame802154.h"
     27          //#include "net/mac/csma.h"
     28          #include "net/rime/route.h" //for routing table
     29          
     30          #include "sys/ctimer.h"
     31          
     32          #include "lib/random.h"
     33          
     34          #include "debug.h"
     35          #include "cc253x.h"
     36          #include "sfr-bits.h"
     37          #include "contiki-lib.h"
     38          #include "contiki-net.h"
     39          
     40          #include <stdio.h> /* For printf() */
     41          #include <string.h>
     42          
     43          #define DEBUG 0  //default :0 by dongbo huang
     44          #if DEBUG
     45          #include "debug.h"
     46          #define PUTSTRING(...) putstring(__VA_ARGS__)
     47          #define PUTHEX(...) puthex(__VA_ARGS__)
     48          #else
     49          #define PUTSTRING(...)
     50          #define PUTHEX(...)
     51          #endif
     52          
     53          
     54          //--------------------------------parameters setting--------------------------------//
     55          //for sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          static uint8_t mac_dsn;
   \                     mac_dsn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     57          
     58          /***************reserved for complicated network situation********************/
     59          //for broadcasting retransmission flag，当转发过一次hello后，标志hello flag标志位设为1，即之后不再处理Hello广播包

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     60          static int helloRetrans_flag=0;
   \                     helloRetrans_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     61          //同理

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          static int sleepRetrans_flag=0;
   \                     sleepRetrans_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     63          //hop count flag
     64          //static int hopCount_flag=0;
     65          //route table, maybe use pointer list?
     66          //static tableContent route[3]; 
     67          /****************************************************************************/
     68          //in our case use only one address to up data

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          static rimeaddr_t upGoingNode;
   \                     upGoingNode:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     70          //-------------------------
     71          
     72          //-------parameters for packetbuf list handle---------

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          packetbufListStruct_t *packetBufCache;
   \                     packetBufCache:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     74          //----------------------------------------------------
     75          
     76          ////////////////////////////////////end of parameters setting////////////////////////////////////////////
     77          
     78          
     79          
     80          
     81          //--------------------------------function setting---------------------------------------//
     82          
     83          
     84          
     85          //-------for address identification, for sensor to identify whether the incoming packet is broadcast or unicast---------

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          int is_broadcast_addr(uint8_t *addr)
   \                     is_broadcast_addr:
     87          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     88              int i = 2;
   \   000004   7802         MOV     R0,#0x2
   \   000006   7900         MOV     R1,#0x0
     89              while(i-- > 0) {
   \                     ??is_broadcast_addr_0:
   \   000008   E8           MOV     A,R0
   \   000009   FC           MOV     R4,A
   \   00000A   E9           MOV     A,R1
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   24FF         ADD     A,#-0x1
   \   00000F   F8           MOV     R0,A
   \   000010   ED           MOV     A,R5
   \   000011   34FF         ADDC    A,#-0x1
   \   000013   F9           MOV     R1,A
   \   000014   C3           CLR     C
   \   000015   EC           MOV     A,R4
   \   000016   9401         SUBB    A,#0x1
   \   000018   ED           MOV     A,R5
   \   000019   9400         SUBB    A,#0x0
   \   00001B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001D   65D0         XRL     A,PSW
   \   00001F   33           RLC     A
   \   000020   4013         JC      ??is_broadcast_addr_1
     90                  if(addr[i] != 0xff) {
   \   000022   EA           MOV     A,R2
   \   000023   28           ADD     A,R0
   \   000024   F582         MOV     DPL,A
   \   000026   EB           MOV     A,R3
   \   000027   39           ADDC    A,R1
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   64FF         XRL     A,#0xff
   \   00002D   60D9         JZ      ??is_broadcast_addr_0
     91                      return 0;
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   8004         SJMP    ??is_broadcast_addr_2
     92                  }
     93              }
     94              return 1;
   \                     ??is_broadcast_addr_1:
   \   000035   7A01         MOV     R2,#0x1
   \   000037   7B00         MOV     R3,#0x0
   \                     ??is_broadcast_addr_2:
   \   000039   D083         POP     DPH
   \   00003B   D082         POP     DPL
   \   00003D   02....       LJMP    ?BRET
     95          }
     96          
     97          //ignore the incoming pakcet sent by itself

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          int is_myAddr(uint8_t *addr)
   \                     is_myAddr:
     99          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    100              int flag = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    101              int i = 2;
   \   000009   7C02         MOV     R4,#0x2
   \   00000B   7D00         MOV     R5,#0x0
    102              while(i-->0)
    103              {
    104                  if(addr[i]!=rimeaddr_node_addr.u8[i])
    105                      flag += 0;
   \                     ??is_myAddr_0:
   \   00000D   EC           MOV     A,R4
   \   00000E   FE           MOV     R6,A
   \   00000F   ED           MOV     A,R5
   \   000010   FF           MOV     R7,A
   \   000011   EE           MOV     A,R6
   \   000012   24FF         ADD     A,#-0x1
   \   000014   FC           MOV     R4,A
   \   000015   EF           MOV     A,R7
   \   000016   34FF         ADDC    A,#-0x1
   \   000018   FD           MOV     R5,A
   \   000019   C3           CLR     C
   \   00001A   EE           MOV     A,R6
   \   00001B   9401         SUBB    A,#0x1
   \   00001D   EF           MOV     A,R7
   \   00001E   9400         SUBB    A,#0x0
   \   000020   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000022   65D0         XRL     A,PSW
   \   000024   33           RLC     A
   \   000025   4022         JC      ??is_myAddr_1
   \   000027   EA           MOV     A,R2
   \   000028   2C           ADD     A,R4
   \   000029   F582         MOV     DPL,A
   \   00002B   EB           MOV     A,R3
   \   00002C   3D           ADDC    A,R5
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FE           MOV     R6,A
   \   000031   74..         MOV     A,#rimeaddr_node_addr & 0xff
   \   000033   2C           ADD     A,R4
   \   000034   F582         MOV     DPL,A
   \   000036   74..         MOV     A,#(rimeaddr_node_addr >> 8) & 0xff
   \   000038   3D           ADDC    A,R5
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6E           XRL     A,R6
   \   00003D   70CE         JNZ     ??is_myAddr_0
    106                  else
    107                      flag += 1;
   \   00003F   E8           MOV     A,R0
   \   000040   2401         ADD     A,#0x1
   \   000042   F8           MOV     R0,A
   \   000043   E9           MOV     A,R1
   \   000044   3400         ADDC    A,#0x0
   \   000046   F9           MOV     R1,A
   \   000047   80C4         SJMP    ??is_myAddr_0
    108              }
    109              return flag;
   \                     ??is_myAddr_1:
   \   000049   E8           MOV     A,R0
   \   00004A   FA           MOV     R2,A
   \   00004B   E9           MOV     A,R1
   \   00004C   FB           MOV     R3,A
   \   00004D   7F01         MOV     R7,#0x1
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA
    110          }
    111          //------------------------------------------
    112          
    113          //----------------for input method---------------
    114          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          int sensor_incomingPacketProcessing()
   \                     sensor_incomingPacketProcessing:
    116          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    117              frame802154_t frame;
    118              int flag=0;                   //function return flag
   \   00000A   75..00       MOV     ?V0 + 0,#0x0
   \   00000D   75..00       MOV     ?V0 + 1,#0x0
    119              int len;  
    120              len = cc2530_rf_driver.pending_packet(); //original. physical layer knows there's a integral packet received.
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   12....       LCALL   ?CALL_IND
   \   00001E   8A..         MOV     ?V0 + 2,R2
   \   000020   8B..         MOV     ?V0 + 3,R3
   \   000022   AE..         MOV     R6,?V0 + 2
   \   000024   AF..         MOV     R7,?V0 + 3
    121              if(len)
   \   000026   E5..         MOV     A,?V0 + 2
   \   000028   4F           ORL     A,R7
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??sensor_incomingPacketProcessing_0 & 0xFFFF
    122              {
    123                  packetbuf_clear();
   \   00002E                ; Setup parameters for call to function packetbuf_clear
   \   00002E   12....       LCALL   ??packetbuf_clear?relay
    124                  len = cc2530_rf_driver.read(packetbuf_dataptr(),PACKETBUF_SIZE);
   \   000031                ; Setup parameters for call to function packetbuf_dataptr
   \   000031   12....       LCALL   ??packetbuf_dataptr?relay
   \   000034   8A..         MOV     ?V0 + 2,R2
   \   000036   8B..         MOV     ?V0 + 3,R3
   \   000038   AA..         MOV     R2,?V0 + 2
   \   00003A   AB..         MOV     R3,?V0 + 3
   \   00003C                ; Setup parameters for indirect call
   \   00003C   7C80         MOV     R4,#-0x80
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   90....       MOV     DPTR,#cc2530_rf_driver + 8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F583         MOV     DPH,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   12....       LCALL   ?CALL_IND
   \   00004E   8A..         MOV     ?V0 + 2,R2
   \   000050   8B..         MOV     ?V0 + 3,R3
   \   000052   AE..         MOV     R6,?V0 + 2
   \   000054   AF..         MOV     R7,?V0 + 3
    125                  packetbuf_set_datalen(len);
   \   000056                ; Setup parameters for call to function packetbuf_set_datalen
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??packetbuf_set_datalen?relay
    126                  if(frame802154_parse(packetbuf_dataptr(), len, &frame) &&
    127                          packetbuf_hdrreduce(len - frame.payload_len))
   \   00005D                ; Setup parameters for call to function frame802154_parse
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   8582..       MOV     ?V0 + 2,DPL
   \   000066   8583..       MOV     ?V0 + 3,DPH
   \   000069   78..         MOV     R0,#?V0 + 2
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV     A,R6
   \   00006F   FC           MOV     R4,A
   \   000070   EF           MOV     A,R7
   \   000071   FD           MOV     R5,A
   \   000072   FF           MOV     R7,A
   \   000073   EC           MOV     A,R4
   \   000074   FE           MOV     R6,A
   \   000075   ED           MOV     A,R5
   \   000076   FF           MOV     R7,A
   \   000077                ; Setup parameters for call to function packetbuf_dataptr
   \   000077   12....       LCALL   ??packetbuf_dataptr?relay
   \   00007A   FD           MOV     R5,A
   \   00007B   EE           MOV     A,R6
   \   00007C   FC           MOV     R4,A
   \   00007D   EF           MOV     A,R7
   \   00007E   FD           MOV     R5,A
   \   00007F   12....       LCALL   ??frame802154_parse?relay
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   8A..         MOV     ?V0 + 2,R2
   \   000089   8B..         MOV     ?V0 + 3,R3
   \   00008B   E5..         MOV     A,?V0 + 2
   \   00008D   45..         ORL     A,?V0 + 3
   \   00008F   7003         JNZ     $+5
   \   000091   02....       LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
   \   000094                ; Setup parameters for call to function packetbuf_hdrreduce
   \   000094   742F         MOV     A,#0x2f
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F8           MOV     R0,A
   \   00009B   7900         MOV     R1,#0x0
   \   00009D   EE           MOV     A,R6
   \   00009E   C3           CLR     C
   \   00009F   98           SUBB    A,R0
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   99           SUBB    A,R1
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??packetbuf_hdrreduce?relay
   \   0000A7   8A..         MOV     ?V0 + 2,R2
   \   0000A9   8B..         MOV     ?V0 + 3,R3
   \   0000AB   E5..         MOV     A,?V0 + 2
   \   0000AD   45..         ORL     A,?V0 + 3
   \   0000AF   7003         JNZ     $+5
   \   0000B1   02....       LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
    128                  {
    129                      if(is_broadcast_addr(frame.dest_addr) && !is_myAddr(frame.src_addr))
   \   0000B4                ; Setup parameters for call to function is_broadcast_addr
   \   0000B4   740B         MOV     A,#0xb
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   AA82         MOV     R2,DPL
   \   0000BB   AB83         MOV     R3,DPH
   \   0000BD   12....       LCALL   ??is_broadcast_addr?relay
   \   0000C0   8A..         MOV     ?V0 + 2,R2
   \   0000C2   8B..         MOV     ?V0 + 3,R3
   \   0000C4   E5..         MOV     A,?V0 + 2
   \   0000C6   45..         ORL     A,?V0 + 3
   \   0000C8   7003         JNZ     $+5
   \   0000CA   02....       LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
   \   0000CD                ; Setup parameters for call to function is_myAddr
   \   0000CD   7415         MOV     A,#0x15
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   \   0000D6   12....       LCALL   ??is_myAddr?relay
   \   0000D9   8A..         MOV     ?V0 + 2,R2
   \   0000DB   8B..         MOV     ?V0 + 3,R3
   \   0000DD   E5..         MOV     A,?V0 + 2
   \   0000DF   45..         ORL     A,?V0 + 3
   \   0000E1   6003         JZ      $+5
   \   0000E3   02....       LJMP    ??sensor_incomingPacketProcessing_1 & 0xFFFF
    130                      {
    131                          if(helloRetrans_flag == 0)
   \   0000E6   90....       MOV     DPTR,#helloRetrans_flag
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F9           MOV     R1,A
   \   0000EE   E8           MOV     A,R0
   \   0000EF   49           ORL     A,R1
   \   0000F0   6003         JZ      $+5
   \   0000F2   02....       LJMP    ??sensor_incomingPacketProcessing_2 & 0xFFFF
    132                          {
    133                              cumt_instruction *inst;
    134                              //remember the upgoing node address
    135                              rimeaddr_copy(&upGoingNode,(rimeaddr_t*) &frame.src_addr);
   \   0000F5                ; Setup parameters for call to function rimeaddr_copy
   \   0000F5   7415         MOV     A,#0x15
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   AC82         MOV     R4,DPL
   \   0000FC   AD83         MOV     R5,DPH
   \   0000FE   7A..         MOV     R2,#upGoingNode & 0xff
   \   000100   7B..         MOV     R3,#(upGoingNode >> 8) & 0xff
   \   000102   12....       LCALL   ??rimeaddr_copy?relay
    136                              inst = (cumt_instruction*)frame.payload;
   \   000105   742D         MOV     A,#0x2d
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FE           MOV     R6,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FF           MOV     R7,A
    137                              if(inst->instructionType == HELLOMSG)
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   705E         JNZ     ??sensor_incomingPacketProcessing_2
    138                              {
    139                                  PUTSTRING("hello received!\r\n");
    140                                  leds_off(LEDS_ALL);
   \   000119                ; Setup parameters for call to function leds_off
   \   000119   7903         MOV     R1,#0x3
   \   00011B   12....       LCALL   ??leds_off?relay
    141                                  leds_on(LEDS_GREEN);
   \   00011E                ; Setup parameters for call to function leds_on
   \   00011E   7902         MOV     R1,#0x2
   \   000120   12....       LCALL   ??leds_on?relay
    142                                  helloRetrans_flag = 1;   //has already forwarded hello instruction, next time when hello instruction comes, it will drop it 
   \   000123   90....       MOV     DPTR,#helloRetrans_flag
   \   000126   7401         MOV     A,#0x1
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   7400         MOV     A,#0x0
   \   00012C   F0           MOVX    @DPTR,A
    143                                  inst->hopCount++;
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   2401         ADD     A,#0x1
   \   000136   F0           MOVX    @DPTR,A
    144                                  dataInpack(upGoingNode); //add the data packet to the list of sensor node, wait for a spare time to rebroadcast
                                         ^
Warning[Pe223]: function "dataInpack" declared implicitly
   \   000137                ; Setup parameters for call to function dataInpack
   \   000137   90....       MOV     DPTR,#upGoingNode
   \   00013A   7402         MOV     A,#0x2
   \   00013C   12....       LCALL   ?PUSH_XSTACK8_X
   \   00013F   12....       LCALL   ??dataInpack?relay
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
    145                                  if(buildBufflist((uint8_t *)inst, sizeof(*inst), rimeaddr_null))  //add the instruction packet to the packet list, wait for a spare time to broadcast
   \   000147                ; Setup parameters for call to function buildBufflist
   \   000147   90....       MOV     DPTR,#rimeaddr_null
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?PUSH_XSTACK8_X
   \   00014F   7C04         MOV     R4,#0x4
   \   000151   7D00         MOV     R5,#0x0
   \   000153   EE           MOV     A,R6
   \   000154   FA           MOV     R2,A
   \   000155   EF           MOV     A,R7
   \   000156   FB           MOV     R3,A
   \   000157   12....       LCALL   ??buildBufflist?relay
   \   00015A   7402         MOV     A,#0x2
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   8A..         MOV     ?V0 + 2,R2
   \   000161   8B..         MOV     ?V0 + 3,R3
   \   000163   E5..         MOV     A,?V0 + 2
   \   000165   45..         ORL     A,?V0 + 3
   \   000167   600A         JZ      ??sensor_incomingPacketProcessing_3
    146                                  {
    147                                      helloRetrans_flag = 1;
   \   000169   90....       MOV     DPTR,#helloRetrans_flag
   \   00016C   7401         MOV     A,#0x1
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   A3           INC     DPTR
   \   000170   7400         MOV     A,#0x0
   \   000172   F0           MOVX    @DPTR,A
    148                                  }
    149                                  inst = NULL;
   \                     ??sensor_incomingPacketProcessing_3:
   \   000173   7E00         MOV     R6,#0x0
   \   000175   7F00         MOV     R7,#0x0
    150                              }
    151                          }
    152                          if(sleepRetrans_flag == 0)
   \                     ??sensor_incomingPacketProcessing_2:
   \   000177   90....       MOV     DPTR,#sleepRetrans_flag
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F8           MOV     R0,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F9           MOV     R1,A
   \   00017F   E8           MOV     A,R0
   \   000180   49           ORL     A,R1
   \   000181   7055         JNZ     ??sensor_incomingPacketProcessing_4
    153                          {
    154                              cumt_instruction *inst;
    155                              inst = (cumt_instruction *)frame.payload;
   \   000183   742D         MOV     A,#0x2d
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   E0           MOVX    A,@DPTR
   \   000189   F8           MOV     R0,A
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F9           MOV     R1,A
   \   00018D   E8           MOV     A,R0
   \   00018E   FE           MOV     R6,A
   \   00018F   E9           MOV     A,R1
   \   000190   FF           MOV     R7,A
    156                              PUTSTRING("sleep cmd received! \r\n");
    157                              if(inst->instructionType == SLEEPMSG)
   \   000191   8E82         MOV     DPL,R6
   \   000193   8F83         MOV     DPH,R7
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   64FF         XRL     A,#0xff
   \   00019B   703B         JNZ     ??sensor_incomingPacketProcessing_4
    158                              {
    159                                  if(broadcastForward(frame.payload, frame.payload_len));
   \   00019D                ; Setup parameters for call to function broadcastForward
   \   00019D   742F         MOV     A,#0x2f
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   FC           MOV     R4,A
   \   0001A4   7D00         MOV     R5,#0x0
   \   0001A6   742D         MOV     A,#0x2d
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   FA           MOV     R2,A
   \   0001AD   A3           INC     DPTR
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   FB           MOV     R3,A
   \   0001B0   12....       LCALL   ??broadcastForward?relay
   \   0001B3   8A..         MOV     ?V0 + 0,R2
   \   0001B5   8B..         MOV     ?V0 + 1,R3
   \   0001B7   85....       MOV     ?V0 + 2,?V0 + 0
   \   0001BA   85....       MOV     ?V0 + 3,?V0 + 1
    160                                  {
    161                                      inst=NULL;
   \   0001BD   7E00         MOV     R6,#0x0
   \   0001BF   7F00         MOV     R7,#0x0
    162                                      sleepRetrans_flag = 1;  //should be 1, already forwarded sleep instruction, ignore the other incoming sleep instruction 
   \   0001C1   90....       MOV     DPTR,#sleepRetrans_flag
   \   0001C4   7401         MOV     A,#0x1
   \   0001C6   F0           MOVX    @DPTR,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   7400         MOV     A,#0x0
   \   0001CA   F0           MOVX    @DPTR,A
    163                                      flag = 1;
   \   0001CB   75..01       MOV     ?V0 + 0,#0x1
   \   0001CE   75..00       MOV     ?V0 + 1,#0x0
    164                                      PUTSTRING("into sleep mode\r\n");
    165                                      process_setSleepCMD(1);
   \   0001D1                ; Setup parameters for call to function process_setSleepCMD
   \   0001D1   7A01         MOV     R2,#0x1
   \   0001D3   7B00         MOV     R3,#0x0
   \   0001D5   12....       LCALL   ??process_setSleepCMD?relay
    166                                  }
    167                              }
    168                          }
    169                          if(rimeaddr_cmp((rimeaddr_t *)&frame.dest_addr, &rimeaddr_node_addr))
   \                     ??sensor_incomingPacketProcessing_4:
   \   0001D8                ; Setup parameters for call to function rimeaddr_cmp
   \   0001D8   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   0001DA   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   0001DC   740B         MOV     A,#0xb
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   AA82         MOV     R2,DPL
   \   0001E3   AB83         MOV     R3,DPH
   \   0001E5   12....       LCALL   ??rimeaddr_cmp?relay
   \   0001E8   8A..         MOV     ?V0 + 2,R2
   \   0001EA   8B..         MOV     ?V0 + 3,R3
   \   0001EC   E5..         MOV     A,?V0 + 2
   \   0001EE   45..         ORL     A,?V0 + 3
   \   0001F0   6033         JZ      ??sensor_incomingPacketProcessing_1
    170                          {
    171                              PUTSTRING("some one send data on me");
    172                              if(buildBufflist(frame.payload, frame.payload_len, upGoingNode))
   \   0001F2                ; Setup parameters for call to function buildBufflist
   \   0001F2   90....       MOV     DPTR,#upGoingNode
   \   0001F5   7402         MOV     A,#0x2
   \   0001F7   12....       LCALL   ?PUSH_XSTACK8_X
   \   0001FA   7431         MOV     A,#0x31
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FC           MOV     R4,A
   \   000201   7D00         MOV     R5,#0x0
   \   000203   742F         MOV     A,#0x2f
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   E0           MOVX    A,@DPTR
   \   000209   FA           MOV     R2,A
   \   00020A   A3           INC     DPTR
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   FB           MOV     R3,A
   \   00020D   12....       LCALL   ??buildBufflist?relay
   \   000210   7402         MOV     A,#0x2
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
   \   000215   8A..         MOV     ?V0 + 2,R2
   \   000217   8B..         MOV     ?V0 + 3,R3
   \   000219   E5..         MOV     A,?V0 + 2
   \   00021B   45..         ORL     A,?V0 + 3
   \   00021D   6006         JZ      ??sensor_incomingPacketProcessing_1
    173                              {
    174                                  flag = 1;
   \   00021F   75..01       MOV     ?V0 + 0,#0x1
   \   000222   75..00       MOV     ?V0 + 1,#0x0
    175                              }
    176                          }
    177                      }
    178                  }            //data for me 
    179                  packetbuf_clear();
   \                     ??sensor_incomingPacketProcessing_1:
   \   000225                ; Setup parameters for call to function packetbuf_clear
   \   000225   12....       LCALL   ??packetbuf_clear?relay
    180              }
    181              return flag;
   \                     ??sensor_incomingPacketProcessing_0:
   \   000228   AA..         MOV     R2,?V0 + 0
   \   00022A   AB..         MOV     R3,?V0 + 1
   \   00022C   7430         MOV     A,#0x30
   \   00022E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000231   7F04         MOV     R7,#0x4
   \   000233   02....       LJMP    ?BANKED_LEAVE_XDATA
    182          }
    183          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          int sink_incomingPacketProcessing(void)
   \                     sink_incomingPacketProcessing:
    185          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    186              int len;
    187              int flag = 0;
   \   00000A   75..00       MOV     ?V0 + 0,#0x0
   \   00000D   75..00       MOV     ?V0 + 1,#0x0
    188              len = cc2530_rf_driver.pending_packet();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   12....       LCALL   ?CALL_IND
   \   00001E   8A..         MOV     ?V0 + 2,R2
   \   000020   8B..         MOV     ?V0 + 3,R3
   \   000022   AA..         MOV     R2,?V0 + 2
   \   000024   AB..         MOV     R3,?V0 + 3
    189              if(len)
   \   000026   E5..         MOV     A,?V0 + 2
   \   000028   4B           ORL     A,R3
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??sink_incomingPacketProcessing_0 & 0xFFFF
    190              {
    191                  frame802154_t frame;
    192                  cumt_information *sensorData;
    193                  //PUTSTRING("packet income\r\n");
    194                  packetbuf_clear();
   \   00002E                ; Setup parameters for call to function packetbuf_clear
   \   00002E   12....       LCALL   ??packetbuf_clear?relay
    195                  len = cc2530_rf_driver.read(packetbuf_dataptr(),PACKETBUF_SIZE);
   \   000031                ; Setup parameters for call to function packetbuf_dataptr
   \   000031   12....       LCALL   ??packetbuf_dataptr?relay
   \   000034   8A..         MOV     ?V0 + 2,R2
   \   000036   8B..         MOV     ?V0 + 3,R3
   \   000038   AA..         MOV     R2,?V0 + 2
   \   00003A   AB..         MOV     R3,?V0 + 3
   \   00003C                ; Setup parameters for indirect call
   \   00003C   7C80         MOV     R4,#-0x80
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   90....       MOV     DPTR,#cc2530_rf_driver + 8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F583         MOV     DPH,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   12....       LCALL   ?CALL_IND
   \   00004E   8A..         MOV     ?V0 + 2,R2
   \   000050   8B..         MOV     ?V0 + 3,R3
   \   000052   AA..         MOV     R2,?V0 + 2
   \   000054   AB..         MOV     R3,?V0 + 3
    196                  packetbuf_set_datalen(len);
   \   000056                ; Setup parameters for call to function packetbuf_set_datalen
   \   000056   12....       LCALL   ??packetbuf_set_datalen?relay
    197                  if(frame802154_parse(packetbuf_dataptr(), packetbuf_datalen(), &frame) && packetbuf_hdrreduce(packetbuf_datalen() - frame.payload_len))
   \   000059                ; Setup parameters for call to function packetbuf_datalen
   \   000059   12....       LCALL   ??packetbuf_datalen?relay
   \   00005C   8A..         MOV     ?V0 + 2,R2
   \   00005E   8B..         MOV     ?V0 + 3,R3
   \   000060   AC..         MOV     R4,?V0 + 2
   \   000062   AD..         MOV     R5,?V0 + 3
   \   000064                ; Setup parameters for call to function frame802154_parse
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   8582..       MOV     ?V0 + 2,DPL
   \   00006D   8583..       MOV     ?V0 + 3,DPH
   \   000070   78..         MOV     R0,#?V0 + 2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   FF           MOV     R7,A
   \   000076   EC           MOV     A,R4
   \   000077   FE           MOV     R6,A
   \   000078   ED           MOV     A,R5
   \   000079   FF           MOV     R7,A
   \   00007A                ; Setup parameters for call to function packetbuf_dataptr
   \   00007A   12....       LCALL   ??packetbuf_dataptr?relay
   \   00007D   FD           MOV     R5,A
   \   00007E   EE           MOV     A,R6
   \   00007F   FC           MOV     R4,A
   \   000080   EF           MOV     A,R7
   \   000081   FD           MOV     R5,A
   \   000082   12....       LCALL   ??frame802154_parse?relay
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   8A..         MOV     ?V0 + 2,R2
   \   00008C   8B..         MOV     ?V0 + 3,R3
   \   00008E   E5..         MOV     A,?V0 + 2
   \   000090   45..         ORL     A,?V0 + 3
   \   000092   7003         JNZ     $+5
   \   000094   02....       LJMP    ??sink_incomingPacketProcessing_0 & 0xFFFF
   \   000097                ; Setup parameters for call to function packetbuf_datalen
   \   000097   12....       LCALL   ??packetbuf_datalen?relay
   \   00009A   8A..         MOV     ?V0 + 2,R2
   \   00009C   8B..         MOV     ?V0 + 3,R3
   \   00009E   A8..         MOV     R0,?V0 + 2
   \   0000A0   A9..         MOV     R1,?V0 + 3
   \   0000A2                ; Setup parameters for call to function packetbuf_hdrreduce
   \   0000A2   742F         MOV     A,#0x2f
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FA           MOV     R2,A
   \   0000A9   7B00         MOV     R3,#0x0
   \   0000AB   E5..         MOV     A,?V0 + 2
   \   0000AD   C3           CLR     C
   \   0000AE   9A           SUBB    A,R2
   \   0000AF   FA           MOV     R2,A
   \   0000B0   E5..         MOV     A,?V0 + 3
   \   0000B2   9B           SUBB    A,R3
   \   0000B3   FB           MOV     R3,A
   \   0000B4   12....       LCALL   ??packetbuf_hdrreduce?relay
   \   0000B7   8A..         MOV     ?V0 + 2,R2
   \   0000B9   8B..         MOV     ?V0 + 3,R3
   \   0000BB   E5..         MOV     A,?V0 + 2
   \   0000BD   45..         ORL     A,?V0 + 3
   \   0000BF   6058         JZ      ??sink_incomingPacketProcessing_0
    198                  {
    199                      if(rimeaddr_cmp((rimeaddr_t *)&frame.dest_addr, &rimeaddr_node_addr)&& !rimeaddr_cmp((rimeaddr_t *)&frame.src_addr, &rimeaddr_node_addr)) //incoming packet address is for sink node
   \   0000C1                ; Setup parameters for call to function rimeaddr_cmp
   \   0000C1   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   0000C3   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   0000C5   740B         MOV     A,#0xb
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   AA82         MOV     R2,DPL
   \   0000CC   AB83         MOV     R3,DPH
   \   0000CE   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000D1   8A..         MOV     ?V0 + 2,R2
   \   0000D3   8B..         MOV     ?V0 + 3,R3
   \   0000D5   E5..         MOV     A,?V0 + 2
   \   0000D7   45..         ORL     A,?V0 + 3
   \   0000D9   603E         JZ      ??sink_incomingPacketProcessing_0
   \   0000DB                ; Setup parameters for call to function rimeaddr_cmp
   \   0000DB   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   0000DD   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   0000DF   7415         MOV     A,#0x15
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV     R2,DPL
   \   0000E6   AB83         MOV     R3,DPH
   \   0000E8   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000EB   8A..         MOV     ?V0 + 2,R2
   \   0000ED   8B..         MOV     ?V0 + 3,R3
   \   0000EF   E5..         MOV     A,?V0 + 2
   \   0000F1   45..         ORL     A,?V0 + 3
   \   0000F3   7024         JNZ     ??sink_incomingPacketProcessing_0
    200                      {
    201                          sensorData = (cumt_information *)frame.payload;
   \   0000F5   742D         MOV     A,#0x2d
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   8882         MOV     DPL,R0
   \   000101   8983         MOV     DPH,R1
    202                          toInformationList(*sensorData); //add the data packet to the packet list of sink node, wait for a spare time to send to the computer
   \   000103                ; Setup parameters for call to function toInformationList
   \   000103   7406         MOV     A,#0x6
   \   000105   12....       LCALL   ?PUSH_XSTACK8_X
   \   000108   12....       LCALL   ??toInformationList?relay
   \   00010B   7406         MOV     A,#0x6
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
    203                          packetbuf_clear();
   \   000110                ; Setup parameters for call to function packetbuf_clear
   \   000110   12....       LCALL   ??packetbuf_clear?relay
    204                          flag = 1;
   \   000113   75..01       MOV     ?V0 + 0,#0x1
   \   000116   75..00       MOV     ?V0 + 1,#0x0
    205                      }
    206                  }
    207              }
    208              return flag;
   \                     ??sink_incomingPacketProcessing_0:
   \   000119   AA..         MOV     R2,?V0 + 0
   \   00011B   AB..         MOV     R3,?V0 + 1
   \   00011D   7430         MOV     A,#0x30
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000122   7F04         MOV     R7,#0x4
   \   000124   02....       LJMP    ?BANKED_LEAVE_XDATA
    209          }
    210          
    211          //-----------------------------------------------
    212          
    213          //-------------------list processing-------------------------
    214          
    215          
    216          //--------------for outgoing packet --------------
    217          //sensor 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          int buildBufflist(uint8_t *payload, int payload_len, rimeaddr_t nxthop)
   \                     buildBufflist:
    219          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    220              int flag=0;
   \   000012   75..00       MOV     ?V0 + 2,#0x0
   \   000015   75..00       MOV     ?V0 + 3,#0x0
    221              int hdrlen;
    222          
    223              //--------------------this part is to set the 820.15.4 frame-------------------------------
    224              packetbuf_clear();
   \   000018                ; Setup parameters for call to function packetbuf_clear
   \   000018   12....       LCALL   ??packetbuf_clear?relay
    225              packetbuf_copyfrom(payload,payload_len);
   \   00001B                ; Setup parameters for call to function packetbuf_copyfrom
   \   00001B   AC..         MOV     R4,?V0 + 0
   \   00001D   AD..         MOV     R5,?V0 + 1
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ??packetbuf_copyfrom?relay
    226              frame802154_t frm;
    227              frm.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
   \   000026   7407         MOV     A,#0x7
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    228              frm.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
   \   00002E   7405         MOV     A,#0x5
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7402         MOV     A,#0x2
   \   000035   F0           MOVX    @DPTR,A
    229              frm.fcf.frame_type = FRAME802154_DATAFRAME;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
    230              frm.fcf.security_enabled = 0;
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
    231              frm.fcf.frame_pending = 1;
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   7401         MOV     A,#0x1
   \   00004E   F0           MOVX    @DPTR,A
    232              frm.fcf.panid_compression = 0;
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7400         MOV     A,#0x0
   \   000056   F0           MOVX    @DPTR,A
    233              frm.fcf.frame_version = FRAME802154_IEEE802154_2006; //another choice: FRAME802154_IEEE802154_2003
   \   000057   7406         MOV     A,#0x6
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    234              if(mac_dsn == 0)
   \   00005F   90....       MOV     DPTR,#mac_dsn
   \   000062   E0           MOVX    A,@DPTR
   \   000063   7015         JNZ     ??buildBufflist_0
    235              {
    236                  mac_dsn = random_rand() % 256;
   \   000065                ; Setup parameters for call to function random_rand
   \   000065   12....       LCALL   ??random_rand?relay
   \   000068   EA           MOV     A,R2
   \   000069   F8           MOV     R0,A
   \   00006A   EB           MOV     A,R3
   \   00006B   F9           MOV     R1,A
   \   00006C   7A00         MOV     R2,#0x0
   \   00006E   7B01         MOV     R3,#0x1
   \   000070   12....       LCALL   ?US_DIV_MOD
   \   000073   EA           MOV     A,R2
   \   000074   90....       MOV     DPTR,#mac_dsn
   \   000077   F0           MOVX    @DPTR,A
   \   000078   8007         SJMP    ??buildBufflist_1
    237              }
    238              else
    239              {
    240                  mac_dsn++;
   \                     ??buildBufflist_0:
   \   00007A   90....       MOV     DPTR,#mac_dsn
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   2401         ADD     A,#0x1
   \   000080   F0           MOVX    @DPTR,A
    241              }
    242          
    243              frm.seq=mac_dsn;
   \                     ??buildBufflist_1:
   \   000081   90....       MOV     DPTR,#mac_dsn
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   7408         MOV     A,#0x8
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   D0E0         POP     A
   \   00008E   F0           MOVX    @DPTR,A
    244              frm.dest_pid = IEEE802154_PANID;
   \   00008F   7409         MOV     A,#0x9
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   7449         MOV     A,#0x49
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   7454         MOV     A,#0x54
   \   00009A   F0           MOVX    @DPTR,A
    245              frm.src_pid = IEEE802154_PANID;
   \   00009B   7413         MOV     A,#0x13
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   7449         MOV     A,#0x49
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   7454         MOV     A,#0x54
   \   0000A6   F0           MOVX    @DPTR,A
    246              if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
   \   0000A7                ; Setup parameters for call to function rimeaddr_cmp
   \   0000A7   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   0000A9   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   0000AB   743E         MOV     A,#0x3e
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000B7   8A..         MOV     ?V0 + 0,R2
   \   0000B9   8B..         MOV     ?V0 + 1,R3
   \   0000BB   E5..         MOV     A,?V0 + 0
   \   0000BD   45..         ORL     A,?V0 + 1
   \   0000BF   601A         JZ      ??buildBufflist_2
    247              {
    248                  frm.fcf.ack_required = 0;
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   7400         MOV     A,#0x0
   \   0000C8   F0           MOVX    @DPTR,A
    249                  frm.dest_addr[0] = 0xFF;
   \   0000C9   740B         MOV     A,#0xb
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   74FF         MOV     A,#-0x1
   \   0000D0   F0           MOVX    @DPTR,A
    250                  frm.dest_addr[1] = 0xFF;
   \   0000D1   740C         MOV     A,#0xc
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   74FF         MOV     A,#-0x1
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   801D         SJMP    ??buildBufflist_3
    251              }
    252              else
    253              {
    254                  frm.fcf.ack_required = 1;
   \                     ??buildBufflist_2:
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   7401         MOV     A,#0x1
   \   0000E2   F0           MOVX    @DPTR,A
    255                  rimeaddr_copy((rimeaddr_t *)&frm.dest_addr, &nxthop);  
   \   0000E3                ; Setup parameters for call to function rimeaddr_copy
   \   0000E3   743E         MOV     A,#0x3e
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   AC82         MOV     R4,DPL
   \   0000EA   AD83         MOV     R5,DPH
   \   0000EC   740B         MOV     A,#0xb
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   AA82         MOV     R2,DPL
   \   0000F3   AB83         MOV     R3,DPH
   \   0000F5   12....       LCALL   ??rimeaddr_copy?relay
    256              }
    257          
    258              rimeaddr_copy((rimeaddr_t *)&frm.src_addr, &rimeaddr_node_addr);
   \                     ??buildBufflist_3:
   \   0000F8                ; Setup parameters for call to function rimeaddr_copy
   \   0000F8   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   0000FA   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   0000FC   7415         MOV     A,#0x15
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   AA82         MOV     R2,DPL
   \   000103   AB83         MOV     R3,DPH
   \   000105   12....       LCALL   ??rimeaddr_copy?relay
    259              frm.payload = packetbuf_dataptr();
   \   000108                ; Setup parameters for call to function packetbuf_dataptr
   \   000108   12....       LCALL   ??packetbuf_dataptr?relay
   \   00010B   742D         MOV     A,#0x2d
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   EA           MOV     A,R2
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   EB           MOV     A,R3
   \   000114   F0           MOVX    @DPTR,A
    260              frm.payload_len = packetbuf_datalen();
   \   000115                ; Setup parameters for call to function packetbuf_datalen
   \   000115   12....       LCALL   ??packetbuf_datalen?relay
   \   000118   EA           MOV     A,R2
   \   000119   C0E0         PUSH    A
   \   00011B   742F         MOV     A,#0x2f
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   D0E0         POP     A
   \   000122   F0           MOVX    @DPTR,A
    261              //-----------------------end of frame setting----------------------------------------
    262          
    263              hdrlen = frame802154_hdrlen(&frm);
   \   000123                ; Setup parameters for call to function frame802154_hdrlen
   \   000123   85..82       MOV     DPL,?XSP + 0
   \   000126   85..83       MOV     DPH,?XSP + 1
   \   000129   AA82         MOV     R2,DPL
   \   00012B   AB83         MOV     R3,DPH
   \   00012D   12....       LCALL   ??frame802154_hdrlen?relay
   \   000130   8A..         MOV     ?V0 + 4,R2
   \   000132   8B..         MOV     ?V0 + 5,R3
   \   000134   85....       MOV     ?V0 + 0,?V0 + 4
   \   000137   85....       MOV     ?V0 + 1,?V0 + 5
    264              if(packetbuf_hdralloc(hdrlen))
   \   00013A                ; Setup parameters for call to function packetbuf_hdralloc
   \   00013A   AA..         MOV     R2,?V0 + 0
   \   00013C   AB..         MOV     R3,?V0 + 1
   \   00013E   12....       LCALL   ??packetbuf_hdralloc?relay
   \   000141   8A..         MOV     ?V0 + 4,R2
   \   000143   8B..         MOV     ?V0 + 5,R3
   \   000145   E5..         MOV     A,?V0 + 4
   \   000147   45..         ORL     A,?V0 + 5
   \   000149   7003         JNZ     $+5
   \   00014B   02....       LJMP    ??buildBufflist_4 & 0xFFFF
    265              {
    266                  //-----------------create the output buff, add it to the list-------------------//
    267                  //for list item operation and mem allocation
    268                  packetbufListStruct_t *cache;
    269                  cache = memb_alloc(&packetbuf_memb);
   \   00014E                ; Setup parameters for call to function memb_alloc
   \   00014E   7A..         MOV     R2,#packetbuf_memb & 0xff
   \   000150   7B..         MOV     R3,#(packetbuf_memb >> 8) & 0xff
   \   000152   12....       LCALL   ??memb_alloc?relay
   \   000155   8A..         MOV     ?V0 + 2,R2
   \   000157   8B..         MOV     ?V0 + 3,R3
   \   000159   AE..         MOV     R6,?V0 + 2
   \   00015B   AF..         MOV     R7,?V0 + 3
    270                  //create buff
    271                  frame802154_create(&frm, packetbuf_hdrptr(), hdrlen);
   \   00015D                ; Setup parameters for call to function frame802154_create
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162                ; Setup parameters for call to function packetbuf_hdrptr
   \   000162   12....       LCALL   ??packetbuf_hdrptr?relay
   \   000165   EA           MOV     A,R2
   \   000166   FC           MOV     R4,A
   \   000167   EB           MOV     A,R3
   \   000168   FD           MOV     R5,A
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   AA82         MOV     R2,DPL
   \   000170   AB83         MOV     R3,DPH
   \   000172   12....       LCALL   ??frame802154_create?relay
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
    272                  int i;
    273                  uint8_t *bufTmp;
    274                  bufTmp = (uint8_t *)packetbuf_hdrptr();
   \   00017A                ; Setup parameters for call to function packetbuf_hdrptr
   \   00017A   12....       LCALL   ??packetbuf_hdrptr?relay
   \   00017D   8A..         MOV     ?V0 + 0,R2
   \   00017F   8B..         MOV     ?V0 + 1,R3
   \   000181   85....       MOV     ?V0 + 2,?V0 + 0
   \   000184   85....       MOV     ?V0 + 3,?V0 + 1
    275                  for(i = 0; i<packetbuf_totlen(); i++)
   \   000187   75..00       MOV     ?V0 + 0,#0x0
   \   00018A   75..00       MOV     ?V0 + 1,#0x0
   \   00018D   802A         SJMP    ??buildBufflist_5
    276                  {
    277                      cache->packetbuf[i] = bufTmp[i]; 
   \                     ??buildBufflist_6:
   \   00018F   E5..         MOV     A,?V0 + 2
   \   000191   25..         ADD     A,?V0 + 0
   \   000193   F582         MOV     DPL,A
   \   000195   E5..         MOV     A,?V0 + 3
   \   000197   35..         ADDC    A,?V0 + 1
   \   000199   F583         MOV     DPH,A
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   C0E0         PUSH    A
   \   00019E   EE           MOV     A,R6
   \   00019F   25..         ADD     A,?V0 + 0
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   EF           MOV     A,R7
   \   0001A4   35..         ADDC    A,?V0 + 1
   \   0001A6   F583         MOV     DPH,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   D0E0         POP     A
   \   0001AC   F0           MOVX    @DPTR,A
    278                  }
   \   0001AD   E5..         MOV     A,?V0 + 0
   \   0001AF   2401         ADD     A,#0x1
   \   0001B1   F5..         MOV     ?V0 + 0,A
   \   0001B3   E5..         MOV     A,?V0 + 1
   \   0001B5   3400         ADDC    A,#0x0
   \   0001B7   F5..         MOV     ?V0 + 1,A
   \                     ??buildBufflist_5:
   \   0001B9                ; Setup parameters for call to function packetbuf_totlen
   \   0001B9   12....       LCALL   ??packetbuf_totlen?relay
   \   0001BC   8A..         MOV     ?V0 + 4,R2
   \   0001BE   8B..         MOV     ?V0 + 5,R3
   \   0001C0   C3           CLR     C
   \   0001C1   E5..         MOV     A,?V0 + 0
   \   0001C3   95..         SUBB    A,?V0 + 4
   \   0001C5   E5..         MOV     A,?V0 + 1
   \   0001C7   95..         SUBB    A,?V0 + 5
   \   0001C9   40C4         JC      ??buildBufflist_6
    279                  cache->dataLen = packetbuf_totlen();
   \   0001CB                ; Setup parameters for call to function packetbuf_totlen
   \   0001CB   12....       LCALL   ??packetbuf_totlen?relay
   \   0001CE   EE           MOV     A,R6
   \   0001CF   2482         ADD     A,#-0x7e
   \   0001D1   F582         MOV     DPL,A
   \   0001D3   EF           MOV     A,R7
   \   0001D4   3400         ADDC    A,#0x0
   \   0001D6   F583         MOV     DPH,A
   \   0001D8   EA           MOV     A,R2
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   EB           MOV     A,R3
   \   0001DC   F0           MOVX    @DPTR,A
    280                  list_add(packetbuf_list,cache);
   \   0001DD                ; Setup parameters for call to function list_add
   \   0001DD   EE           MOV     A,R6
   \   0001DE   FC           MOV     R4,A
   \   0001DF   EF           MOV     A,R7
   \   0001E0   FD           MOV     R5,A
   \   0001E1   90....       MOV     DPTR,#packetbuf_list
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   FA           MOV     R2,A
   \   0001E6   A3           INC     DPTR
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   FB           MOV     R3,A
   \   0001E9   12....       LCALL   ??list_add?relay
    281                  //---------------------------------------------------------------------//
    282                  packetbuf_clear();
   \   0001EC                ; Setup parameters for call to function packetbuf_clear
   \   0001EC   12....       LCALL   ??packetbuf_clear?relay
    283                  flag=1;
   \   0001EF   75..01       MOV     ?V0 + 2,#0x1
   \   0001F2   75..00       MOV     ?V0 + 3,#0x0
    284              }
    285              return flag;
   \                     ??buildBufflist_4:
   \   0001F5   AA..         MOV     R2,?V0 + 2
   \   0001F7   AB..         MOV     R3,?V0 + 3
   \   0001F9   7430         MOV     A,#0x30
   \   0001FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FE   7F06         MOV     R7,#0x6
   \   000200   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          }
    287          
    288          //sensor send one item in the list

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          int sensor_popAndSendItemOfList()
   \                     sensor_popAndSendItemOfList:
    290          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    291              int flag = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   75..00       MOV     ?V0 + 1,#0x0
    292              packetbufListStruct_t *pop;
    293              if(list_length(packetbuf_list) != 0)
   \   00000B                ; Setup parameters for call to function list_length
   \   00000B   90....       MOV     DPTR,#packetbuf_list
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ??list_length?relay
   \   000016   8A..         MOV     ?V0 + 2,R2
   \   000018   8B..         MOV     ?V0 + 3,R3
   \   00001A   E5..         MOV     A,?V0 + 2
   \   00001C   45..         ORL     A,?V0 + 3
   \   00001E   6013         JZ      ??sensor_popAndSendItemOfList_0
    294                  pop = (packetbufListStruct_t *)list_pop(packetbuf_list);
   \   000020                ; Setup parameters for call to function list_pop
   \   000020   90....       MOV     DPTR,#packetbuf_list
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   ??list_pop?relay
   \   00002B   8A..         MOV     ?V0 + 2,R2
   \   00002D   8B..         MOV     ?V0 + 3,R3
   \   00002F   AE..         MOV     R6,?V0 + 2
   \   000031   AF..         MOV     R7,?V0 + 3
    295              if(sendPacket(pop->packetbuf, pop->dataLen))
   \                     ??sensor_popAndSendItemOfList_0:
   \   000033                ; Setup parameters for call to function sendPacket
   \   000033   EE           MOV     A,R6
   \   000034   2482         ADD     A,#-0x7e
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   EE           MOV     A,R6
   \   000043   2402         ADD     A,#0x2
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??sendPacket?relay
   \   00004D   8A..         MOV     ?V0 + 2,R2
   \   00004F   8B..         MOV     ?V0 + 3,R3
   \   000051   E5..         MOV     A,?V0 + 2
   \   000053   45..         ORL     A,?V0 + 3
   \   000055   6006         JZ      ??sensor_popAndSendItemOfList_1
    296              {
    297                  flag = 1;
   \   000057   75..01       MOV     ?V0 + 0,#0x1
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
    298              }
    299              //free the item from the mem
    300              memb_free(&packetbuf_memb, pop);
   \                     ??sensor_popAndSendItemOfList_1:
   \   00005D                ; Setup parameters for call to function memb_free
   \   00005D   EE           MOV     A,R6
   \   00005E   FC           MOV     R4,A
   \   00005F   EF           MOV     A,R7
   \   000060   FD           MOV     R5,A
   \   000061   7A..         MOV     R2,#packetbuf_memb & 0xff
   \   000063   7B..         MOV     R3,#(packetbuf_memb >> 8) & 0xff
   \   000065   12....       LCALL   ??memb_free?relay
   \   000068   E9           MOV     A,R1
    301              return flag;
   \   000069   AA..         MOV     R2,?V0 + 0
   \   00006B   AB..         MOV     R3,?V0 + 1
   \   00006D   7F04         MOV     R7,#0x4
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    302          }
    303          
    304          //for sink node to handel temperature packets, CAN NOT be directly called

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void toInformationList(cumt_information tmp) 
   \                     toInformationList:
    306          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    307              informationListStruct_t *cache;
    308              cache = memb_alloc(&information_memb);
   \   000005                ; Setup parameters for call to function memb_alloc
   \   000005   7A..         MOV     R2,#information_memb & 0xff
   \   000007   7B..         MOV     R3,#(information_memb >> 8) & 0xff
   \   000009   12....       LCALL   ??memb_alloc?relay
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   A8..         MOV     R0,?V0 + 0
   \   000012   A9..         MOV     R1,?V0 + 1
    309              cache->tmpData = tmp;
   \   000014   740A         MOV     A,#0xa
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E8           MOV     A,R0
   \   00001A   2402         ADD     A,#0x2
   \   00001C   FC           MOV     R4,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FD           MOV     R5,A
   \   000021   7406         MOV     A,#0x6
   \   000023   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    310              list_add(information_list, cache);
   \   000026                ; Setup parameters for call to function list_add
   \   000026   E8           MOV     A,R0
   \   000027   FC           MOV     R4,A
   \   000028   E9           MOV     A,R1
   \   000029   FD           MOV     R5,A
   \   00002A   90....       MOV     DPTR,#information_list
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??list_add?relay
    311          }
   \   000035   7F02         MOV     R7,#0x2
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    312          
    313          //print item from list

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          void sink_printItemOfList(void)
   \                     sink_printItemOfList:
    315          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    316              cumt_information sensorData;
    317              informationListStruct_t *pop;
    318              if(list_length(information_list) != 0)
   \   00000A                ; Setup parameters for call to function list_length
   \   00000A   90....       MOV     DPTR,#information_list
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FB           MOV     R3,A
   \   000012   12....       LCALL   ??list_length?relay
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   45..         ORL     A,?V0 + 1
   \   00001D   6013         JZ      ??sink_printItemOfList_0
    319                  pop = (informationListStruct_t *)list_pop(information_list);
   \   00001F                ; Setup parameters for call to function list_pop
   \   00001F   90....       MOV     DPTR,#information_list
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??list_pop?relay
   \   00002A   8A..         MOV     ?V0 + 0,R2
   \   00002C   8B..         MOV     ?V0 + 1,R3
   \   00002E   AE..         MOV     R6,?V0 + 0
   \   000030   AF..         MOV     R7,?V0 + 1
    320              sensorData = pop->tmpData;
   \                     ??sink_printItemOfList_0:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   C082         PUSH    DPL
   \   00003A   C083         PUSH    DPH
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   AC82         MOV     R4,DPL
   \   000044   AD83         MOV     R5,DPH
   \   000046   D083         POP     DPH
   \   000048   D082         POP     DPL
   \   00004A   7406         MOV     A,#0x6
   \   00004C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    321              putstring("Frome node ");
   \   00004F                ; Setup parameters for call to function putstring
   \   00004F   7A..         MOV     R2,#`?<Constant "Frome node ">` & 0xff
   \   000051   7B..         MOV     R3,#(`?<Constant "Frome node ">` >> 8) & 0xff
   \   000053   12....       LCALL   ??putstring?relay
    322              puthex(sensorData.startAddr[0]);
   \   000056                ; Setup parameters for call to function puthex
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??puthex?relay
    323              puthex(sensorData.startAddr[1]);
   \   000061                ; Setup parameters for call to function puthex
   \   000061   7401         MOV     A,#0x1
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??puthex?relay
    324              putstring(": ");
   \   00006B                ; Setup parameters for call to function putstring
   \   00006B   7A..         MOV     R2,#`?<Constant ": ">` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant ": ">` >> 8) & 0xff
   \   00006F   12....       LCALL   ??putstring?relay
    325              printf("temperature = %d.%d, ", sensorData.temperature[0], sensorData.temperature[1]);
   \   000072                ; Setup parameters for call to function printf
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V0 + 0,A
   \   00007A   75..00       MOV     ?V0 + 1,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7404         MOV     A,#0x4
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 0,A
   \   00008A   75..00       MOV     ?V0 + 1,#0x0
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7A..         MOV     R2,#`?<Constant "temperature = %d.%d, ">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "temperature = %d.%d, ">` >> 8) & 0xff
   \   000096   12....       LCALL   ??printf?relay
   \   000099   7404         MOV     A,#0x4
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    326              printf("voltage remained = %d.%d \r\n", sensorData.vdd[0], sensorData.vdd[1]);
   \   00009E                ; Setup parameters for call to function printf
   \   00009E   7405         MOV     A,#0x5
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F5..         MOV     ?V0 + 0,A
   \   0000A6   75..00       MOV     ?V0 + 1,#0x0
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7406         MOV     A,#0x6
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   75..00       MOV     ?V0 + 1,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   7A..         MOV     R2,#`?<Constant "voltage remained = %d...">` & 0xff
   \   0000C0   7B..         MOV     R3,#(`?<Constant "voltage remained = %d...">` >> 8) & 0xff
   \   0000C2   12....       LCALL   ??printf?relay
   \   0000C5   7404         MOV     A,#0x4
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    327              memb_free(&information_memb, pop);
   \   0000CA                ; Setup parameters for call to function memb_free
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FC           MOV     R4,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FD           MOV     R5,A
   \   0000CE   7A..         MOV     R2,#information_memb & 0xff
   \   0000D0   7B..         MOV     R3,#(information_memb >> 8) & 0xff
   \   0000D2   12....       LCALL   ??memb_free?relay
   \   0000D5   E9           MOV     A,R1
    328          }
   \   0000D6   7406         MOV     A,#0x6
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   7F02         MOV     R7,#0x2
   \   0000DD   02....       LJMP    ?BANKED_LEAVE_XDATA
    329          
    330          
    331          //for sensor or sink node know the length of corresponding list

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          int getpacketbufListLength(void)
   \                     getpacketbufListLength:
    333          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    334              return list_length(packetbuf_list);
   \   000004                ; Setup parameters for call to function list_length
   \   000004   90....       MOV     DPTR,#packetbuf_list
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ??list_length?relay
   \   00000F   D083         POP     DPH
   \   000011   D082         POP     DPL
   \   000013   02....       LJMP    ?BRET
    335          }
    336          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          int getInformationListLength(void)
   \                     getInformationListLength:
    338          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    339              return list_length(information_list);
   \   000004                ; Setup parameters for call to function list_length
   \   000004   90....       MOV     DPTR,#information_list
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ??list_length?relay
   \   00000F   D083         POP     DPH
   \   000011   D082         POP     DPL
   \   000013   02....       LJMP    ?BRET
    340          }
    341          //------------------------------------------------------------------------------------
    342          
    343          //----------------------------for outgoing packet--------------------------------------
    344          //CAN NOT be directly called

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          int sendPacket(void *datatogo, int datalen)
   \                     sendPacket:
    346          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    347              int flag=0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   \   000010   75..00       MOV     ?V0 + 1,#0x0
    348              clock_time_t waitTime;
    349              int backoffs=0;
   \   000013   7E00         MOV     R6,#0x0
   \   000015   7F00         MOV     R7,#0x0
    350              int sendStatus;
    351              waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
   \   000017   75..10       MOV     ?V0 + 8,#0x10
   \   00001A   75..00       MOV     ?V0 + 9,#0x0
   \   00001D   8042         SJMP    ??sendPacket_0
    352              //send with csma
    353              do
    354              {
    355                  while(cc2530_rf_driver.channel_clear() == 0)
    356                  {
    357                      waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??sendPacket_1:
   \   00001F                ; Setup parameters for call to function random_rand
   \   00001F   12....       LCALL   ??random_rand?relay
   \   000022   EA           MOV     A,R2
   \   000023   F8           MOV     R0,A
   \   000024   EB           MOV     A,R3
   \   000025   F9           MOV     R1,A
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   EF           MOV     A,R7
   \   000029   FB           MOV     R3,A
   \   00002A   EA           MOV     A,R2
   \   00002B   85..F0       MOV     B,?V0 + 8
   \   00002E   A4           MUL     AB
   \   00002F   CA           XCH     A,R2
   \   000030   ACF0         MOV     R4,B
   \   000032   85..F0       MOV     B,?V0 + 9
   \   000035   A4           MUL     AB
   \   000036   2C           ADD     A,R4
   \   000037   FC           MOV     R4,A
   \   000038   85..F0       MOV     B,?V0 + 8
   \   00003B   EB           MOV     A,R3
   \   00003C   A4           MUL     AB
   \   00003D   2C           ADD     A,R4
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ?US_DIV_MOD
   \   000042   8A..         MOV     ?V0 + 4,R2
   \   000044   8B..         MOV     ?V0 + 5,R3
   \   000046   E5..         MOV     A,?V0 + 8
   \   000048   25..         ADD     A,?V0 + 4
   \   00004A   F5..         MOV     ?V0 + 8,A
   \   00004C   E5..         MOV     A,?V0 + 9
   \   00004E   35..         ADDC    A,?V0 + 5
   \   000050   F5..         MOV     ?V0 + 9,A
    358                      backoffs ++;
   \   000052   EE           MOV     A,R6
   \   000053   2401         ADD     A,#0x1
   \   000055   FE           MOV     R6,A
   \   000056   EF           MOV     A,R7
   \   000057   3400         ADDC    A,#0x0
   \   000059   FF           MOV     R7,A
    359                      clock_wait(waitTime);
   \   00005A                ; Setup parameters for call to function clock_wait
   \   00005A   AA..         MOV     R2,?V0 + 8
   \   00005C   AB..         MOV     R3,?V0 + 9
   \   00005E   12....       LCALL   ??clock_wait?relay
    360                  }
   \                     ??sendPacket_0:
   \   000061                ; Setup parameters for indirect call
   \   000061   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F583         MOV     DPH,A
   \   00006A   8882         MOV     DPL,R0
   \   00006C   12....       LCALL   ?CALL_IND
   \   00006F   8A..         MOV     ?V0 + 4,R2
   \   000071   8B..         MOV     ?V0 + 5,R3
   \   000073   E5..         MOV     A,?V0 + 4
   \   000075   45..         ORL     A,?V0 + 5
   \   000077   60A6         JZ      ??sendPacket_1
    361                  sendStatus = cc2530_rf_driver.send(datatogo, datalen);
   \   000079                ; Setup parameters for indirect call
   \   000079   AC..         MOV     R4,?V0 + 2
   \   00007B   AD..         MOV     R5,?V0 + 3
   \   00007D   AA..         MOV     R2,?V0 + 6
   \   00007F   AB..         MOV     R3,?V0 + 7
   \   000081   90....       MOV     DPTR,#cc2530_rf_driver + 6
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F8           MOV     R0,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F583         MOV     DPH,A
   \   00008A   8882         MOV     DPL,R0
   \   00008C   12....       LCALL   ?CALL_IND
   \   00008F   8A..         MOV     ?V0 + 10,R2
   \   000091   8B..         MOV     ?V0 + 11,R3
   \   000093   85....       MOV     ?V0 + 4,?V0 + 10
   \   000096   85....       MOV     ?V0 + 5,?V0 + 11
    362                  if(backoffs >5)
   \   000099   C3           CLR     C
   \   00009A   EE           MOV     A,R6
   \   00009B   9406         SUBB    A,#0x6
   \   00009D   EF           MOV     A,R7
   \   00009E   9400         SUBB    A,#0x0
   \   0000A0   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000A2   65D0         XRL     A,PSW
   \   0000A4   33           RLC     A
   \   0000A5   4004         JC      ??sendPacket_2
    363                      backoffs=5;
   \   0000A7   7E05         MOV     R6,#0x5
   \   0000A9   7F00         MOV     R7,#0x0
    364                  if(sendStatus == RADIO_TX_OK)
   \                     ??sendPacket_2:
   \   0000AB   E5..         MOV     A,?V0 + 4
   \   0000AD   45..         ORL     A,?V0 + 5
   \   0000AF   7011         JNZ     ??sendPacket_3
    365                  {
    366                      backoffs = 0;
   \   0000B1   7E00         MOV     R6,#0x0
   \   0000B3   7F00         MOV     R7,#0x0
    367                      flag = 1;
   \   0000B5   75..01       MOV     ?V0 + 0,#0x1
   \   0000B8   75..00       MOV     ?V0 + 1,#0x0
    368                      //indicate the status is OK
    369                      leds_on(LEDS_RED);
   \   0000BB                ; Setup parameters for call to function leds_on
   \   0000BB   7901         MOV     R1,#0x1
   \   0000BD   12....       LCALL   ??leds_on?relay
   \   0000C0   8042         SJMP    ??sendPacket_4
    370                  }
    371                  else
    372                  {
    373                      PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
    374                      waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??sendPacket_3:
   \   0000C2                ; Setup parameters for call to function random_rand
   \   0000C2   12....       LCALL   ??random_rand?relay
   \   0000C5   EA           MOV     A,R2
   \   0000C6   F8           MOV     R0,A
   \   0000C7   EB           MOV     A,R3
   \   0000C8   F9           MOV     R1,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   EA           MOV     A,R2
   \   0000CE   85..F0       MOV     B,?V0 + 8
   \   0000D1   A4           MUL     AB
   \   0000D2   CA           XCH     A,R2
   \   0000D3   ACF0         MOV     R4,B
   \   0000D5   85..F0       MOV     B,?V0 + 9
   \   0000D8   A4           MUL     AB
   \   0000D9   2C           ADD     A,R4
   \   0000DA   FC           MOV     R4,A
   \   0000DB   85..F0       MOV     B,?V0 + 8
   \   0000DE   EB           MOV     A,R3
   \   0000DF   A4           MUL     AB
   \   0000E0   2C           ADD     A,R4
   \   0000E1   FB           MOV     R3,A
   \   0000E2   12....       LCALL   ?US_DIV_MOD
   \   0000E5   8A..         MOV     ?V0 + 10,R2
   \   0000E7   8B..         MOV     ?V0 + 11,R3
   \   0000E9   E5..         MOV     A,?V0 + 8
   \   0000EB   25..         ADD     A,?V0 + 10
   \   0000ED   F5..         MOV     ?V0 + 8,A
   \   0000EF   E5..         MOV     A,?V0 + 9
   \   0000F1   35..         ADDC    A,?V0 + 11
   \   0000F3   F5..         MOV     ?V0 + 9,A
    375                      backoffs++;
   \   0000F5   EE           MOV     A,R6
   \   0000F6   2401         ADD     A,#0x1
   \   0000F8   FE           MOV     R6,A
   \   0000F9   EF           MOV     A,R7
   \   0000FA   3400         ADDC    A,#0x0
   \   0000FC   FF           MOV     R7,A
    376                      clock_wait(waitTime);
   \   0000FD                ; Setup parameters for call to function clock_wait
   \   0000FD   AA..         MOV     R2,?V0 + 8
   \   0000FF   AB..         MOV     R3,?V0 + 9
   \   000101   12....       LCALL   ??clock_wait?relay
    377                  }
    378              }while(sendStatus != RADIO_TX_OK);
   \                     ??sendPacket_4:
   \   000104   E5..         MOV     A,?V0 + 4
   \   000106   45..         ORL     A,?V0 + 5
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??sendPacket_0 & 0xFFFF
    379              return flag;
   \   00010D   AA..         MOV     R2,?V0 + 0
   \   00010F   AB..         MOV     R3,?V0 + 1
   \   000111   7F0C         MOV     R7,#0xc
   \   000113   02....       LJMP    ?BANKED_LEAVE_XDATA
    380          }
    381          //CAN NOT be directly called, only for sleep instruction

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          int broadcastForward(uint8_t* overAir, int payloadLen)
   \                     broadcastForward:
    383          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    384              if(buildAndSendFrame(overAir,payloadLen,rimeaddr_null))
   \   000005                ; Setup parameters for call to function buildAndSendFrame
   \   000005   90....       MOV     DPTR,#rimeaddr_null
   \   000008   7402         MOV     A,#0x2
   \   00000A   12....       LCALL   ?PUSH_XSTACK8_X
   \   00000D   12....       LCALL   ??buildAndSendFrame?relay
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?DEALLOC_XSTACK8
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   45..         ORL     A,?V0 + 1
   \   00001D   6006         JZ      ??broadcastForward_0
    385                  return 1;
   \   00001F   7A01         MOV     R2,#0x1
   \   000021   7B00         MOV     R3,#0x0
   \   000023   8004         SJMP    ??broadcastForward_1
    386              else
    387                  return 0;
   \                     ??broadcastForward_0:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??broadcastForward_1:
   \   000029   7F02         MOV     R7,#0x2
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          }
    389          
    390          //csma timebase

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          clock_time_t default_timebase(void)
   \                     default_timebase:
    392          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    393              clock_time_t time=0;
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
    394              /* The retransmission time must be proportional to the channel
    395                 check interval of the underlying radio duty cycling layer.*/
    396              //   time = NETSTACK_RDC.channel_check_interval();
    397          
    398              /* If the radio duty cycle has no channel check interval (i.e., it
    399                 does not turn the radio off), we make the retransmission time
    400                 proportional to the configured MAC channel check rate.*/
    401              if(time == 0) {
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??default_timebase_0
    402                  time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
   \   000008   7A10         MOV     R2,#0x10
   \   00000A   7B00         MOV     R3,#0x0
    403              }
    404              return time;
   \                     ??default_timebase_0:
   \   00000C   02....       LJMP    ?BRET
    405          }
    406          
    407          //for sink node broadcasting instructions

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          int buildAndSendFrame(uint8_t* payload, int payloadLen,  rimeaddr_t nxthop)
   \                     buildAndSendFrame:
    409          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   8C..         MOV     ?V0 + 4,R4
   \   000010   8D..         MOV     ?V0 + 5,R5
    410              int flag=0;
   \   000012   75..00       MOV     ?V0 + 0,#0x0
   \   000015   75..00       MOV     ?V0 + 1,#0x0
    411              int len;
    412              int sendStatus;
    413          
    414              clock_time_t waitTime; 
    415              int backoffs = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
    416          
    417              //-----------------------------------802.15.4 frame buiding----------------------------------------------------
    418              packetbuf_clear();
   \   00001C                ; Setup parameters for call to function packetbuf_clear
   \   00001C   12....       LCALL   ??packetbuf_clear?relay
    419              packetbuf_copyfrom(payload,payloadLen);
   \   00001F                ; Setup parameters for call to function packetbuf_copyfrom
   \   00001F   AC..         MOV     R4,?V0 + 4
   \   000021   AD..         MOV     R5,?V0 + 5
   \   000023   AA..         MOV     R2,?V0 + 2
   \   000025   AB..         MOV     R3,?V0 + 3
   \   000027   12....       LCALL   ??packetbuf_copyfrom?relay
    420              frame802154_t frm;
    421              frm.fcf.src_addr_mode = FRAME802154_SHORTADDRMODE;
   \   00002A   7407         MOV     A,#0x7
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7402         MOV     A,#0x2
   \   000031   F0           MOVX    @DPTR,A
    422              frm.fcf.dest_addr_mode = FRAME802154_SHORTADDRMODE;
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7402         MOV     A,#0x2
   \   000039   F0           MOVX    @DPTR,A
    423              frm.fcf.frame_type = FRAME802154_DATAFRAME;
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    424              frm.fcf.security_enabled = 0;
   \   000043   7401         MOV     A,#0x1
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
    425              frm.fcf.frame_pending = 1;
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    426              frm.fcf.panid_compression = 0;
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   7400         MOV     A,#0x0
   \   00005A   F0           MOVX    @DPTR,A
    427              frm.fcf.frame_version = FRAME802154_IEEE802154_2006; //another choice: FRAME802154_IEEE802154_2003
   \   00005B   7406         MOV     A,#0x6
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7401         MOV     A,#0x1
   \   000062   F0           MOVX    @DPTR,A
    428              if(mac_dsn == 0)
   \   000063   90....       MOV     DPTR,#mac_dsn
   \   000066   E0           MOVX    A,@DPTR
   \   000067   7015         JNZ     ??buildAndSendFrame_0
    429              {
    430                  mac_dsn = random_rand() % 256;
   \   000069                ; Setup parameters for call to function random_rand
   \   000069   12....       LCALL   ??random_rand?relay
   \   00006C   EA           MOV     A,R2
   \   00006D   F8           MOV     R0,A
   \   00006E   EB           MOV     A,R3
   \   00006F   F9           MOV     R1,A
   \   000070   7A00         MOV     R2,#0x0
   \   000072   7B01         MOV     R3,#0x1
   \   000074   12....       LCALL   ?US_DIV_MOD
   \   000077   EA           MOV     A,R2
   \   000078   90....       MOV     DPTR,#mac_dsn
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   8007         SJMP    ??buildAndSendFrame_1
    431              }
    432              else
    433              {
    434                  mac_dsn++;
   \                     ??buildAndSendFrame_0:
   \   00007E   90....       MOV     DPTR,#mac_dsn
   \   000081   E0           MOVX    A,@DPTR
   \   000082   2401         ADD     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
    435              }
    436              frm.seq=mac_dsn;
   \                     ??buildAndSendFrame_1:
   \   000085   90....       MOV     DPTR,#mac_dsn
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C0E0         PUSH    A
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
    437              frm.dest_pid = IEEE802154_PANID;
   \   000093   7409         MOV     A,#0x9
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   7449         MOV     A,#0x49
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   7454         MOV     A,#0x54
   \   00009E   F0           MOVX    @DPTR,A
    438              frm.src_pid = IEEE802154_PANID;
   \   00009F   7413         MOV     A,#0x13
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   7449         MOV     A,#0x49
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   7454         MOV     A,#0x54
   \   0000AA   F0           MOVX    @DPTR,A
    439              if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
   \   0000AB                ; Setup parameters for call to function rimeaddr_cmp
   \   0000AB   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   0000AD   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   0000AF   7440         MOV     A,#0x40
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   AA82         MOV     R2,DPL
   \   0000B6   AB83         MOV     R3,DPH
   \   0000B8   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000BB   8A..         MOV     ?V0 + 2,R2
   \   0000BD   8B..         MOV     ?V0 + 3,R3
   \   0000BF   E5..         MOV     A,?V0 + 2
   \   0000C1   45..         ORL     A,?V0 + 3
   \   0000C3   601A         JZ      ??buildAndSendFrame_2
    440              {
    441                  frm.fcf.ack_required = 0;
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   7400         MOV     A,#0x0
   \   0000CC   F0           MOVX    @DPTR,A
    442                  frm.dest_addr[0] = 0xFF;
   \   0000CD   740B         MOV     A,#0xb
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   74FF         MOV     A,#-0x1
   \   0000D4   F0           MOVX    @DPTR,A
    443                  frm.dest_addr[1] = 0xFF;
   \   0000D5   740C         MOV     A,#0xc
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   74FF         MOV     A,#-0x1
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   801D         SJMP    ??buildAndSendFrame_3
    444              }
    445              else
    446              {
    447                  frm.fcf.ack_required = 1;
   \                     ??buildAndSendFrame_2:
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   7401         MOV     A,#0x1
   \   0000E6   F0           MOVX    @DPTR,A
    448                  rimeaddr_copy((rimeaddr_t *)&frm.dest_addr, &nxthop);  
   \   0000E7                ; Setup parameters for call to function rimeaddr_copy
   \   0000E7   7440         MOV     A,#0x40
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AC82         MOV     R4,DPL
   \   0000EE   AD83         MOV     R5,DPH
   \   0000F0   740B         MOV     A,#0xb
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   AA82         MOV     R2,DPL
   \   0000F7   AB83         MOV     R3,DPH
   \   0000F9   12....       LCALL   ??rimeaddr_copy?relay
    449              }
    450          
    451              rimeaddr_copy((rimeaddr_t *)&frm.src_addr, &rimeaddr_node_addr);
   \                     ??buildAndSendFrame_3:
   \   0000FC                ; Setup parameters for call to function rimeaddr_copy
   \   0000FC   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   0000FE   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   000100   7415         MOV     A,#0x15
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   AA82         MOV     R2,DPL
   \   000107   AB83         MOV     R3,DPH
   \   000109   12....       LCALL   ??rimeaddr_copy?relay
    452              frm.payload = packetbuf_dataptr();
   \   00010C                ; Setup parameters for call to function packetbuf_dataptr
   \   00010C   12....       LCALL   ??packetbuf_dataptr?relay
   \   00010F   742D         MOV     A,#0x2d
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   EA           MOV     A,R2
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   EB           MOV     A,R3
   \   000118   F0           MOVX    @DPTR,A
    453              frm.payload_len = packetbuf_datalen();
   \   000119                ; Setup parameters for call to function packetbuf_datalen
   \   000119   12....       LCALL   ??packetbuf_datalen?relay
   \   00011C   EA           MOV     A,R2
   \   00011D   C0E0         PUSH    A
   \   00011F   742F         MOV     A,#0x2f
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
    454              //-------------------------------------end of frame building--------------------------------------------------
    455              
    456              len = frame802154_hdrlen(&frm);
   \   000127                ; Setup parameters for call to function frame802154_hdrlen
   \   000127   85..82       MOV     DPL,?XSP + 0
   \   00012A   85..83       MOV     DPH,?XSP + 1
   \   00012D   AA82         MOV     R2,DPL
   \   00012F   AB83         MOV     R3,DPH
   \   000131   12....       LCALL   ??frame802154_hdrlen?relay
   \   000134   8A..         MOV     ?V0 + 4,R2
   \   000136   8B..         MOV     ?V0 + 5,R3
   \   000138   85....       MOV     ?V0 + 2,?V0 + 4
   \   00013B   85....       MOV     ?V0 + 3,?V0 + 5
    457              if(packetbuf_hdralloc(len))
   \   00013E                ; Setup parameters for call to function packetbuf_hdralloc
   \   00013E   AA..         MOV     R2,?V0 + 2
   \   000140   AB..         MOV     R3,?V0 + 3
   \   000142   12....       LCALL   ??packetbuf_hdralloc?relay
   \   000145   8A..         MOV     ?V0 + 4,R2
   \   000147   8B..         MOV     ?V0 + 5,R3
   \   000149   E5..         MOV     A,?V0 + 4
   \   00014B   45..         ORL     A,?V0 + 5
   \   00014D   7003         JNZ     $+5
   \   00014F   02....       LJMP    ??buildAndSendFrame_4 & 0xFFFF
    458              {
    459                  frame802154_create(&frm, packetbuf_hdrptr(), len);
   \   000152                ; Setup parameters for call to function frame802154_create
   \   000152   78..         MOV     R0,#?V0 + 2
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000157                ; Setup parameters for call to function packetbuf_hdrptr
   \   000157   12....       LCALL   ??packetbuf_hdrptr?relay
   \   00015A   EA           MOV     A,R2
   \   00015B   FC           MOV     R4,A
   \   00015C   EB           MOV     A,R3
   \   00015D   FD           MOV     R5,A
   \   00015E   7402         MOV     A,#0x2
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   AA82         MOV     R2,DPL
   \   000165   AB83         MOV     R3,DPH
   \   000167   12....       LCALL   ??frame802154_create?relay
   \   00016A   7402         MOV     A,#0x2
   \   00016C   12....       LCALL   ?DEALLOC_XSTACK8
    460                  //------------------------send with csma, broadcasting or unicasting-------------------- 
    461                  if (rimeaddr_cmp(&nxthop, &rimeaddr_null))
   \   00016F                ; Setup parameters for call to function rimeaddr_cmp
   \   00016F   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   000171   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   000173   7440         MOV     A,#0x40
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   AA82         MOV     R2,DPL
   \   00017A   AB83         MOV     R3,DPH
   \   00017C   12....       LCALL   ??rimeaddr_cmp?relay
   \   00017F   8A..         MOV     ?V0 + 2,R2
   \   000181   8B..         MOV     ?V0 + 3,R3
   \   000183   E5..         MOV     A,?V0 + 2
   \   000185   45..         ORL     A,?V0 + 3
   \   000187   7003         JNZ     $+5
   \   000189   02....       LJMP    ??buildAndSendFrame_5 & 0xFFFF
    462                  {
    463                      waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
   \   00018C   75..10       MOV     ?V0 + 4,#0x10
   \   00018F   75..00       MOV     ?V0 + 5,#0x0
   \   000192   8042         SJMP    ??buildAndSendFrame_6
    464                      do
    465                      {
    466                          while(cc2530_rf_driver.channel_clear() == 0)
    467                          {
    468                              waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??buildAndSendFrame_7:
   \   000194                ; Setup parameters for call to function random_rand
   \   000194   12....       LCALL   ??random_rand?relay
   \   000197   EA           MOV     A,R2
   \   000198   F8           MOV     R0,A
   \   000199   EB           MOV     A,R3
   \   00019A   F9           MOV     R1,A
   \   00019B   EE           MOV     A,R6
   \   00019C   FA           MOV     R2,A
   \   00019D   EF           MOV     A,R7
   \   00019E   FB           MOV     R3,A
   \   00019F   EA           MOV     A,R2
   \   0001A0   85..F0       MOV     B,?V0 + 4
   \   0001A3   A4           MUL     AB
   \   0001A4   CA           XCH     A,R2
   \   0001A5   ACF0         MOV     R4,B
   \   0001A7   85..F0       MOV     B,?V0 + 5
   \   0001AA   A4           MUL     AB
   \   0001AB   2C           ADD     A,R4
   \   0001AC   FC           MOV     R4,A
   \   0001AD   85..F0       MOV     B,?V0 + 4
   \   0001B0   EB           MOV     A,R3
   \   0001B1   A4           MUL     AB
   \   0001B2   2C           ADD     A,R4
   \   0001B3   FB           MOV     R3,A
   \   0001B4   12....       LCALL   ?US_DIV_MOD
   \   0001B7   8A..         MOV     ?V0 + 2,R2
   \   0001B9   8B..         MOV     ?V0 + 3,R3
   \   0001BB   E5..         MOV     A,?V0 + 4
   \   0001BD   25..         ADD     A,?V0 + 2
   \   0001BF   F5..         MOV     ?V0 + 4,A
   \   0001C1   E5..         MOV     A,?V0 + 5
   \   0001C3   35..         ADDC    A,?V0 + 3
   \   0001C5   F5..         MOV     ?V0 + 5,A
    469                              backoffs ++;
   \   0001C7   EE           MOV     A,R6
   \   0001C8   2401         ADD     A,#0x1
   \   0001CA   FE           MOV     R6,A
   \   0001CB   EF           MOV     A,R7
   \   0001CC   3400         ADDC    A,#0x0
   \   0001CE   FF           MOV     R7,A
    470                              clock_wait(waitTime);
   \   0001CF                ; Setup parameters for call to function clock_wait
   \   0001CF   AA..         MOV     R2,?V0 + 4
   \   0001D1   AB..         MOV     R3,?V0 + 5
   \   0001D3   12....       LCALL   ??clock_wait?relay
    471                          }
   \                     ??buildAndSendFrame_6:
   \   0001D6                ; Setup parameters for indirect call
   \   0001D6   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   F8           MOV     R0,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F583         MOV     DPH,A
   \   0001DF   8882         MOV     DPL,R0
   \   0001E1   12....       LCALL   ?CALL_IND
   \   0001E4   8A..         MOV     ?V0 + 2,R2
   \   0001E6   8B..         MOV     ?V0 + 3,R3
   \   0001E8   E5..         MOV     A,?V0 + 2
   \   0001EA   45..         ORL     A,?V0 + 3
   \   0001EC   60A6         JZ      ??buildAndSendFrame_7
    472                          sendStatus = cc2530_rf_driver.send(packetbuf_hdrptr(), packetbuf_totlen());
   \   0001EE                ; Setup parameters for call to function packetbuf_totlen
   \   0001EE   12....       LCALL   ??packetbuf_totlen?relay
   \   0001F1   8A..         MOV     ?V0 + 6,R2
   \   0001F3   8B..         MOV     ?V0 + 7,R3
   \   0001F5   85....       MOV     ?V0 + 2,?V0 + 6
   \   0001F8   85....       MOV     ?V0 + 3,?V0 + 7
   \   0001FB                ; Setup parameters for call to function packetbuf_hdrptr
   \   0001FB   12....       LCALL   ??packetbuf_hdrptr?relay
   \   0001FE   8A..         MOV     ?V0 + 6,R2
   \   000200   8B..         MOV     ?V0 + 7,R3
   \   000202   AA..         MOV     R2,?V0 + 6
   \   000204   AB..         MOV     R3,?V0 + 7
   \   000206                ; Setup parameters for indirect call
   \   000206   AC..         MOV     R4,?V0 + 2
   \   000208   AD..         MOV     R5,?V0 + 3
   \   00020A   90....       MOV     DPTR,#cc2530_rf_driver + 6
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   F8           MOV     R0,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F583         MOV     DPH,A
   \   000213   8882         MOV     DPL,R0
   \   000215   12....       LCALL   ?CALL_IND
   \   000218   8A..         MOV     ?V0 + 6,R2
   \   00021A   8B..         MOV     ?V0 + 7,R3
   \   00021C   85....       MOV     ?V0 + 2,?V0 + 6
   \   00021F   85....       MOV     ?V0 + 3,?V0 + 7
    473                          if(backoffs >5)
   \   000222   C3           CLR     C
   \   000223   EE           MOV     A,R6
   \   000224   9406         SUBB    A,#0x6
   \   000226   EF           MOV     A,R7
   \   000227   9400         SUBB    A,#0x0
   \   000229   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00022B   65D0         XRL     A,PSW
   \   00022D   33           RLC     A
   \   00022E   4004         JC      ??buildAndSendFrame_8
    474                              backoffs=5;
   \   000230   7E05         MOV     R6,#0x5
   \   000232   7F00         MOV     R7,#0x0
    475                          if(sendStatus == RADIO_TX_OK)
   \                     ??buildAndSendFrame_8:
   \   000234   E5..         MOV     A,?V0 + 2
   \   000236   45..         ORL     A,?V0 + 3
   \   000238   700C         JNZ     ??buildAndSendFrame_9
    476                          {
    477                              backoffs = 0;
   \   00023A   7E00         MOV     R6,#0x0
   \   00023C   7F00         MOV     R7,#0x0
    478                              flag = 1;
   \   00023E   75..01       MOV     ?V0 + 0,#0x1
   \   000241   75..00       MOV     ?V0 + 1,#0x0
   \   000244   8042         SJMP    ??buildAndSendFrame_10
    479                          }
    480                          else
    481                          {
    482                              PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
    483                              waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??buildAndSendFrame_9:
   \   000246                ; Setup parameters for call to function random_rand
   \   000246   12....       LCALL   ??random_rand?relay
   \   000249   EA           MOV     A,R2
   \   00024A   F8           MOV     R0,A
   \   00024B   EB           MOV     A,R3
   \   00024C   F9           MOV     R1,A
   \   00024D   EE           MOV     A,R6
   \   00024E   FA           MOV     R2,A
   \   00024F   EF           MOV     A,R7
   \   000250   FB           MOV     R3,A
   \   000251   EA           MOV     A,R2
   \   000252   85..F0       MOV     B,?V0 + 4
   \   000255   A4           MUL     AB
   \   000256   CA           XCH     A,R2
   \   000257   ACF0         MOV     R4,B
   \   000259   85..F0       MOV     B,?V0 + 5
   \   00025C   A4           MUL     AB
   \   00025D   2C           ADD     A,R4
   \   00025E   FC           MOV     R4,A
   \   00025F   85..F0       MOV     B,?V0 + 4
   \   000262   EB           MOV     A,R3
   \   000263   A4           MUL     AB
   \   000264   2C           ADD     A,R4
   \   000265   FB           MOV     R3,A
   \   000266   12....       LCALL   ?US_DIV_MOD
   \   000269   8A..         MOV     ?V0 + 6,R2
   \   00026B   8B..         MOV     ?V0 + 7,R3
   \   00026D   E5..         MOV     A,?V0 + 4
   \   00026F   25..         ADD     A,?V0 + 6
   \   000271   F5..         MOV     ?V0 + 4,A
   \   000273   E5..         MOV     A,?V0 + 5
   \   000275   35..         ADDC    A,?V0 + 7
   \   000277   F5..         MOV     ?V0 + 5,A
    484                              backoffs++;
   \   000279   EE           MOV     A,R6
   \   00027A   2401         ADD     A,#0x1
   \   00027C   FE           MOV     R6,A
   \   00027D   EF           MOV     A,R7
   \   00027E   3400         ADDC    A,#0x0
   \   000280   FF           MOV     R7,A
    485                              clock_wait(waitTime);
   \   000281                ; Setup parameters for call to function clock_wait
   \   000281   AA..         MOV     R2,?V0 + 4
   \   000283   AB..         MOV     R3,?V0 + 5
   \   000285   12....       LCALL   ??clock_wait?relay
    486                          }
    487                      }while(sendStatus != RADIO_TX_OK);
   \                     ??buildAndSendFrame_10:
   \   000288   E5..         MOV     A,?V0 + 2
   \   00028A   45..         ORL     A,?V0 + 3
   \   00028C   6003         JZ      $+5
   \   00028E   02....       LJMP    ??buildAndSendFrame_6 & 0xFFFF
   \   000291   02....       LJMP    ??buildAndSendFrame_4 & 0xFFFF
    488                  }
    489                  else
    490                  {
    491                      waitTime = CLOCK_SECOND/NETSTACK_RDC_CHANNEL_CHECK_RATE;
   \                     ??buildAndSendFrame_5:
   \   000294   75..10       MOV     ?V0 + 4,#0x10
   \   000297   75..00       MOV     ?V0 + 5,#0x0
   \   00029A   8042         SJMP    ??buildAndSendFrame_11
    492                      do
    493                      {
    494                          while(cc2530_rf_driver.channel_clear() == 0)
    495                          {
    496                              waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??buildAndSendFrame_12:
   \   00029C                ; Setup parameters for call to function random_rand
   \   00029C   12....       LCALL   ??random_rand?relay
   \   00029F   EA           MOV     A,R2
   \   0002A0   F8           MOV     R0,A
   \   0002A1   EB           MOV     A,R3
   \   0002A2   F9           MOV     R1,A
   \   0002A3   EE           MOV     A,R6
   \   0002A4   FA           MOV     R2,A
   \   0002A5   EF           MOV     A,R7
   \   0002A6   FB           MOV     R3,A
   \   0002A7   EA           MOV     A,R2
   \   0002A8   85..F0       MOV     B,?V0 + 4
   \   0002AB   A4           MUL     AB
   \   0002AC   CA           XCH     A,R2
   \   0002AD   ACF0         MOV     R4,B
   \   0002AF   85..F0       MOV     B,?V0 + 5
   \   0002B2   A4           MUL     AB
   \   0002B3   2C           ADD     A,R4
   \   0002B4   FC           MOV     R4,A
   \   0002B5   85..F0       MOV     B,?V0 + 4
   \   0002B8   EB           MOV     A,R3
   \   0002B9   A4           MUL     AB
   \   0002BA   2C           ADD     A,R4
   \   0002BB   FB           MOV     R3,A
   \   0002BC   12....       LCALL   ?US_DIV_MOD
   \   0002BF   8A..         MOV     ?V0 + 2,R2
   \   0002C1   8B..         MOV     ?V0 + 3,R3
   \   0002C3   E5..         MOV     A,?V0 + 4
   \   0002C5   25..         ADD     A,?V0 + 2
   \   0002C7   F5..         MOV     ?V0 + 4,A
   \   0002C9   E5..         MOV     A,?V0 + 5
   \   0002CB   35..         ADDC    A,?V0 + 3
   \   0002CD   F5..         MOV     ?V0 + 5,A
    497                              backoffs ++;
   \   0002CF   EE           MOV     A,R6
   \   0002D0   2401         ADD     A,#0x1
   \   0002D2   FE           MOV     R6,A
   \   0002D3   EF           MOV     A,R7
   \   0002D4   3400         ADDC    A,#0x0
   \   0002D6   FF           MOV     R7,A
    498                              clock_wait(waitTime);
   \   0002D7                ; Setup parameters for call to function clock_wait
   \   0002D7   AA..         MOV     R2,?V0 + 4
   \   0002D9   AB..         MOV     R3,?V0 + 5
   \   0002DB   12....       LCALL   ??clock_wait?relay
    499                          }
   \                     ??buildAndSendFrame_11:
   \   0002DE                ; Setup parameters for indirect call
   \   0002DE   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   F8           MOV     R0,A
   \   0002E3   A3           INC     DPTR
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   F583         MOV     DPH,A
   \   0002E7   8882         MOV     DPL,R0
   \   0002E9   12....       LCALL   ?CALL_IND
   \   0002EC   8A..         MOV     ?V0 + 2,R2
   \   0002EE   8B..         MOV     ?V0 + 3,R3
   \   0002F0   E5..         MOV     A,?V0 + 2
   \   0002F2   45..         ORL     A,?V0 + 3
   \   0002F4   60A6         JZ      ??buildAndSendFrame_12
    500                          sendStatus = cc2530_rf_driver.send(packetbuf_hdrptr(), packetbuf_totlen());
   \   0002F6                ; Setup parameters for call to function packetbuf_totlen
   \   0002F6   12....       LCALL   ??packetbuf_totlen?relay
   \   0002F9   8A..         MOV     ?V0 + 6,R2
   \   0002FB   8B..         MOV     ?V0 + 7,R3
   \   0002FD   85....       MOV     ?V0 + 2,?V0 + 6
   \   000300   85....       MOV     ?V0 + 3,?V0 + 7
   \   000303                ; Setup parameters for call to function packetbuf_hdrptr
   \   000303   12....       LCALL   ??packetbuf_hdrptr?relay
   \   000306   8A..         MOV     ?V0 + 6,R2
   \   000308   8B..         MOV     ?V0 + 7,R3
   \   00030A   AA..         MOV     R2,?V0 + 6
   \   00030C   AB..         MOV     R3,?V0 + 7
   \   00030E                ; Setup parameters for indirect call
   \   00030E   AC..         MOV     R4,?V0 + 2
   \   000310   AD..         MOV     R5,?V0 + 3
   \   000312   90....       MOV     DPTR,#cc2530_rf_driver + 6
   \   000315   E0           MOVX    A,@DPTR
   \   000316   F8           MOV     R0,A
   \   000317   A3           INC     DPTR
   \   000318   E0           MOVX    A,@DPTR
   \   000319   F583         MOV     DPH,A
   \   00031B   8882         MOV     DPL,R0
   \   00031D   12....       LCALL   ?CALL_IND
   \   000320   8A..         MOV     ?V0 + 6,R2
   \   000322   8B..         MOV     ?V0 + 7,R3
   \   000324   85....       MOV     ?V0 + 2,?V0 + 6
   \   000327   85....       MOV     ?V0 + 3,?V0 + 7
    501                          if(backoffs >5)
   \   00032A   C3           CLR     C
   \   00032B   EE           MOV     A,R6
   \   00032C   9406         SUBB    A,#0x6
   \   00032E   EF           MOV     A,R7
   \   00032F   9400         SUBB    A,#0x0
   \   000331   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000333   65D0         XRL     A,PSW
   \   000335   33           RLC     A
   \   000336   4004         JC      ??buildAndSendFrame_13
    502                              backoffs=5;
   \   000338   7E05         MOV     R6,#0x5
   \   00033A   7F00         MOV     R7,#0x0
    503                          if(sendStatus == RADIO_TX_OK)
   \                     ??buildAndSendFrame_13:
   \   00033C   E5..         MOV     A,?V0 + 2
   \   00033E   45..         ORL     A,?V0 + 3
   \   000340   700C         JNZ     ??buildAndSendFrame_14
    504                          {
    505                              backoffs = 0;
   \   000342   7E00         MOV     R6,#0x0
   \   000344   7F00         MOV     R7,#0x0
    506                              flag = 1;
   \   000346   75..01       MOV     ?V0 + 0,#0x1
   \   000349   75..00       MOV     ?V0 + 1,#0x0
   \   00034C   8042         SJMP    ??buildAndSendFrame_15
    507                          }
    508                          else
    509                          {
    510                              PUTSTRING("FAILED TO SEND TRY AGAIN\r\n");
    511                              waitTime = waitTime + (random_rand()%(backoffs * waitTime));
   \                     ??buildAndSendFrame_14:
   \   00034E                ; Setup parameters for call to function random_rand
   \   00034E   12....       LCALL   ??random_rand?relay
   \   000351   EA           MOV     A,R2
   \   000352   F8           MOV     R0,A
   \   000353   EB           MOV     A,R3
   \   000354   F9           MOV     R1,A
   \   000355   EE           MOV     A,R6
   \   000356   FA           MOV     R2,A
   \   000357   EF           MOV     A,R7
   \   000358   FB           MOV     R3,A
   \   000359   EA           MOV     A,R2
   \   00035A   85..F0       MOV     B,?V0 + 4
   \   00035D   A4           MUL     AB
   \   00035E   CA           XCH     A,R2
   \   00035F   ACF0         MOV     R4,B
   \   000361   85..F0       MOV     B,?V0 + 5
   \   000364   A4           MUL     AB
   \   000365   2C           ADD     A,R4
   \   000366   FC           MOV     R4,A
   \   000367   85..F0       MOV     B,?V0 + 4
   \   00036A   EB           MOV     A,R3
   \   00036B   A4           MUL     AB
   \   00036C   2C           ADD     A,R4
   \   00036D   FB           MOV     R3,A
   \   00036E   12....       LCALL   ?US_DIV_MOD
   \   000371   8A..         MOV     ?V0 + 6,R2
   \   000373   8B..         MOV     ?V0 + 7,R3
   \   000375   E5..         MOV     A,?V0 + 4
   \   000377   25..         ADD     A,?V0 + 6
   \   000379   F5..         MOV     ?V0 + 4,A
   \   00037B   E5..         MOV     A,?V0 + 5
   \   00037D   35..         ADDC    A,?V0 + 7
   \   00037F   F5..         MOV     ?V0 + 5,A
    512                              backoffs++;
   \   000381   EE           MOV     A,R6
   \   000382   2401         ADD     A,#0x1
   \   000384   FE           MOV     R6,A
   \   000385   EF           MOV     A,R7
   \   000386   3400         ADDC    A,#0x0
   \   000388   FF           MOV     R7,A
    513                              clock_wait(waitTime);
   \   000389                ; Setup parameters for call to function clock_wait
   \   000389   AA..         MOV     R2,?V0 + 4
   \   00038B   AB..         MOV     R3,?V0 + 5
   \   00038D   12....       LCALL   ??clock_wait?relay
    514                          }
    515                      }while(sendStatus != RADIO_TX_OK);
   \                     ??buildAndSendFrame_15:
   \   000390   E5..         MOV     A,?V0 + 2
   \   000392   45..         ORL     A,?V0 + 3
   \   000394   6003         JZ      $+5
   \   000396   02....       LJMP    ??buildAndSendFrame_11 & 0xFFFF
    516                  }
    517                  //-------------------------end of sending----------------------------------------
    518              }
    519              return flag;
   \                     ??buildAndSendFrame_4:
   \   000399   AA..         MOV     R2,?V0 + 0
   \   00039B   AB..         MOV     R3,?V0 + 1
   \   00039D   7430         MOV     A,#0x30
   \   00039F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003A2   7F08         MOV     R7,#0x8
   \   0003A4   02....       LJMP    ?BANKED_LEAVE_XDATA
    520          }
    521          
    522          //for sink node 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          int instructionSend(uint8_t instruction)
   \                     instructionSend:
    524          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    525              static cumt_instruction instruc;
    526              instruc.srcAddr[0] = rimeaddr_node_addr.u8[0];
   \   000007   90....       MOV     DPTR,#rimeaddr_node_addr
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   90....       MOV     DPTR,#??instruc
   \   00000E   F0           MOVX    @DPTR,A
    527              instruc.srcAddr[1] = rimeaddr_node_addr.u8[1];
   \   00000F   90....       MOV     DPTR,#rimeaddr_node_addr + 1
   \   000012   E0           MOVX    A,@DPTR
   \   000013   90....       MOV     DPTR,#??instruc + 1
   \   000016   F0           MOVX    @DPTR,A
    528              instruc.hopCount = 0;
   \   000017   90....       MOV     DPTR,#??instruc + 2
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
    529              instruc.instructionType = instruction;
   \   00001D   EE           MOV     A,R6
   \   00001E   90....       MOV     DPTR,#??instruc + 3
   \   000021   F0           MOVX    @DPTR,A
    530              if(buildAndSendFrame((uint8_t *) &instruc,sizeof(instruc),  rimeaddr_null))
   \   000022                ; Setup parameters for call to function buildAndSendFrame
   \   000022   90....       MOV     DPTR,#rimeaddr_null
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?PUSH_XSTACK8_X
   \   00002A   7C04         MOV     R4,#0x4
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7A..         MOV     R2,#??instruc & 0xff
   \   000030   7B..         MOV     R3,#(??instruc >> 8) & 0xff
   \   000032   12....       LCALL   ??buildAndSendFrame?relay
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   8A..         MOV     ?V0 + 0,R2
   \   00003C   8B..         MOV     ?V0 + 1,R3
   \   00003E   E5..         MOV     A,?V0 + 0
   \   000040   45..         ORL     A,?V0 + 1
   \   000042   6006         JZ      ??instructionSend_0
    531                  return 1;
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   8004         SJMP    ??instructionSend_1
    532              else
    533                  return 0;
   \                     ??instructionSend_0:
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \                     ??instructionSend_1:
   \   00004E   7F02         MOV     R7,#0x2
   \   000050   02....       LJMP    ?BANKED_LEAVE_XDATA
    534          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??instruc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    535          
    536          //--------------------------------------------------
    537          
    538          //-----------------sensing--------------------
    539          //temperature

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          float getTemperature()
   \                     getTemperature:
    541          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    542              int rv;
    543              struct sensors_sensor *sensor;
    544              float sane = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   75..00       MOV     ?V0 + 2,#0x0
   \   00000E   75..00       MOV     ?V0 + 3,#0x0
    545              sensor = (struct sensors_sensor *) sensors_find(ADC_SENSOR);
   \   000011                ; Setup parameters for call to function sensors_find
   \   000011   7A..         MOV     R2,#`?<Constant "ADC">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "ADC">` >> 8) & 0xff
   \   000015   12....       LCALL   ??sensors_find?relay
   \   000018   8A..         MOV     ?V0 + 4,R2
   \   00001A   8B..         MOV     ?V0 + 5,R3
   \   00001C   85..82       MOV     DPL,?V0 + 4
   \   00001F   85..83       MOV     DPH,?V0 + 5
    546              if(sensor)
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   606D         JZ      ??getTemperature_0
    547              {
    548                  rv = sensor->value(ADC_SENSOR_TYPE_TEMP);
   \   000028                ; Setup parameters for indirect call
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F583         MOV     DPH,A
   \   000034   8882         MOV     DPL,R0
   \   000036   12....       LCALL   ?CALL_IND
   \   000039   8A..         MOV     ?V0 + 0,R2
   \   00003B   8B..         MOV     ?V0 + 1,R3
   \   00003D   A8..         MOV     R0,?V0 + 0
   \   00003F   A9..         MOV     R1,?V0 + 1
    549                  if(rv != -1)
   \   000041   74FF         MOV     A,#-0x1
   \   000043   68           XRL     A,R0
   \   000044   7003         JNZ     ??getTemperature_1
   \   000046   74FF         MOV     A,#-0x1
   \   000048   69           XRL     A,R1
   \                     ??getTemperature_1:
   \   000049   6040         JZ      ??getTemperature_2
    550                  {
    551                      sane = 11 + ((rv - 1480) / 4.5);
   \   00004B   E8           MOV     A,R0
   \   00004C   2438         ADD     A,#0x38
   \   00004E   F5..         MOV     ?V0 + 0,A
   \   000050   E9           MOV     A,R1
   \   000051   34FA         ADDC    A,#-0x6
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055   E5..         MOV     A,?V0 + 1
   \   000057   33           RLC     A
   \   000058   95E0         SUBB    A,0xE0 /* A   */
   \   00005A   F5..         MOV     ?V0 + 2,A
   \   00005C   F5..         MOV     ?V0 + 3,A
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?L_TO_FLT
   \   000063   90....       MOV     DPTR,#__Constant_40900000
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   12....       LCALL   ?L_MOV_X
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   79..         MOV     R1,#?V0 + 4
   \   00006F   12....       LCALL   ?FLT_DIV
   \   000072   90....       MOV     DPTR,#__Constant_41300000
   \   000075   78..         MOV     R0,#?V0 + 4
   \   000077   12....       LCALL   ?L_MOV_X
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   79..         MOV     R1,#?V0 + 4
   \   00007E   12....       LCALL   ?FLT_ADD
    552                      //sane = ((rv-1367.5)/4.5)-4;
    553                      return sane;
   \   000081   AA..         MOV     R2,?V0 + 0
   \   000083   AB..         MOV     R3,?V0 + 1
   \   000085   AC..         MOV     R4,?V0 + 2
   \   000087   AD..         MOV     R5,?V0 + 3
   \   000089   8012         SJMP    ??getTemperature_3
    554          
    555                  }
    556                  else
    557                  {
    558                      PUTSTRING("get TEMPERATURE value failed\r\n");
    559                      return 0;
   \                     ??getTemperature_2:
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   7B00         MOV     R3,#0x0
   \   00008F   7C00         MOV     R4,#0x0
   \   000091   7D00         MOV     R5,#0x0
   \   000093   8008         SJMP    ??getTemperature_3
    560                  }
    561              }
    562              else
    563              {
    564                  PUTSTRING("sensor API load failed(tmp)\r\n");
    565                  return 0;
   \                     ??getTemperature_0:
   \   000095   7A00         MOV     R2,#0x0
   \   000097   7B00         MOV     R3,#0x0
   \   000099   7C00         MOV     R4,#0x0
   \   00009B   7D00         MOV     R5,#0x0
   \                     ??getTemperature_3:
   \   00009D   7F08         MOV     R7,#0x8
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
    566              }
    567          }
    568          
    569          //voltage

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          float getVoltage()
   \                     getVoltage:
    571          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    572              int rv;
    573              struct sensors_sensor *sensor;
    574              float sane = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   75..00       MOV     ?V0 + 2,#0x0
   \   00000E   75..00       MOV     ?V0 + 3,#0x0
    575              sensor = (struct sensors_sensor *) sensors_find(ADC_SENSOR);
   \   000011                ; Setup parameters for call to function sensors_find
   \   000011   7A..         MOV     R2,#`?<Constant "ADC">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "ADC">` >> 8) & 0xff
   \   000015   12....       LCALL   ??sensors_find?relay
   \   000018   8A..         MOV     ?V0 + 4,R2
   \   00001A   8B..         MOV     ?V0 + 5,R3
   \   00001C   85..82       MOV     DPL,?V0 + 4
   \   00001F   85..83       MOV     DPH,?V0 + 5
    576              if(sensor)
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   6067         JZ      ??getVoltage_0
    577              {
    578                  rv = sensor->value(ADC_SENSOR_TYPE_VDD);
   \   000028                ; Setup parameters for indirect call
   \   000028   7A04         MOV     R2,#0x4
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F583         MOV     DPH,A
   \   000034   8882         MOV     DPL,R0
   \   000036   12....       LCALL   ?CALL_IND
   \   000039   8A..         MOV     ?V0 + 2,R2
   \   00003B   8B..         MOV     ?V0 + 3,R3
   \   00003D   85....       MOV     ?V0 + 0,?V0 + 2
   \   000040   85....       MOV     ?V0 + 1,?V0 + 3
    579                  if(rv != -1)
   \   000043   74FF         MOV     A,#-0x1
   \   000045   65..         XRL     A,?V0 + 0
   \   000047   7004         JNZ     ??getVoltage_1
   \   000049   74FF         MOV     A,#-0x1
   \   00004B   65..         XRL     A,?V0 + 1
   \                     ??getVoltage_1:
   \   00004D   6036         JZ      ??getVoltage_2
    580                  {
    581                      sane = rv * 3.75/2047;
   \   00004F   E5..         MOV     A,?V0 + 1
   \   000051   33           RLC     A
   \   000052   95E0         SUBB    A,0xE0 /* A   */
   \   000054   F5..         MOV     ?V0 + 2,A
   \   000056   F5..         MOV     ?V0 + 3,A
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?L_TO_FLT
   \   00005D   90....       MOV     DPTR,#__Constant_40700000
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?L_MOV_X
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   79..         MOV     R1,#?V0 + 4
   \   000069   12....       LCALL   ?FLT_MUL
   \   00006C   90....       MOV     DPTR,#__Constant_44ffe000
   \   00006F   78..         MOV     R0,#?V0 + 4
   \   000071   12....       LCALL   ?L_MOV_X
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   79..         MOV     R1,#?V0 + 4
   \   000078   12....       LCALL   ?FLT_DIV
    582                      return sane;
   \   00007B   AA..         MOV     R2,?V0 + 0
   \   00007D   AB..         MOV     R3,?V0 + 1
   \   00007F   AC..         MOV     R4,?V0 + 2
   \   000081   AD..         MOV     R5,?V0 + 3
   \   000083   8012         SJMP    ??getVoltage_3
    583                  }
    584                  else
    585                  {
    586                      PUTSTRING("get VDD value failed\r\n");
    587                      return 0;
   \                     ??getVoltage_2:
   \   000085   7A00         MOV     R2,#0x0
   \   000087   7B00         MOV     R3,#0x0
   \   000089   7C00         MOV     R4,#0x0
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   8008         SJMP    ??getVoltage_3
    588                  }
    589              }
    590              else
    591              {
    592                  PUTSTRING("sensor API load failed(vdd)\r\n");
    593                  return 0;
   \                     ??getVoltage_0:
   \   00008F   7A00         MOV     R2,#0x0
   \   000091   7B00         MOV     R3,#0x0
   \   000093   7C00         MOV     R4,#0x0
   \   000095   7D00         MOV     R5,#0x0
   \                     ??getVoltage_3:
   \   000097   7F08         MOV     R7,#0x8
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
    594              }
    595          }
    596          //-------------------end of sensing--------------------------
    597          
    598          
    599          //-----------------------sensor add data packet to the list--------------------------------------

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void sensor_dataInpack(rimeaddr_t nxthop)
   \                     sensor_dataInpack:
    601          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    602              cumt_information temperaturePkt;
    603              float tmp;
    604              float vdd;
    605              uint8_t vddInt;
    606              uint8_t vddPnt;
    607              uint8_t tmpInt;
    608              uint8_t tmpPnt;
    609              temperaturePkt.startAddr[0] = rimeaddr_node_addr.u8[0];
   \   00000A   90....       MOV     DPTR,#rimeaddr_node_addr
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
    610              temperaturePkt.startAddr[1] = rimeaddr_node_addr.u8[1];
   \   000015   90....       MOV     DPTR,#rimeaddr_node_addr + 1
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   D0E0         POP     A
   \   000022   F0           MOVX    @DPTR,A
    611              tmp = getTemperature();
   \   000023                ; Setup parameters for call to function getTemperature
   \   000023   12....       LCALL   ??getTemperature?relay
   \   000026   8A..         MOV     ?V0 + 8,R2
   \   000028   8B..         MOV     ?V0 + 9,R3
   \   00002A   8C..         MOV     ?V0 + 10,R4
   \   00002C   8D..         MOV     ?V0 + 11,R5
    612              vdd = getVoltage();
   \   00002E                ; Setup parameters for call to function getVoltage
   \   00002E   12....       LCALL   ??getVoltage?relay
   \   000031   8A..         MOV     ?V0 + 4,R2
   \   000033   8B..         MOV     ?V0 + 5,R3
   \   000035   8C..         MOV     ?V0 + 6,R4
   \   000037   8D..         MOV     ?V0 + 7,R5
    613              tmpInt = (uint8_t)((int)tmp);
   \   000039   85....       MOV     ?V0 + 0,?V0 + 8
   \   00003C   85....       MOV     ?V0 + 1,?V0 + 9
   \   00003F   85....       MOV     ?V0 + 2,?V0 + 10
   \   000042   85....       MOV     ?V0 + 3,?V0 + 11
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?FLT_TO_L
   \   00004A   E5..         MOV     A,?V0 + 0
   \   00004C   AA..         MOV     R2,?V0 + 0
    614              tmpPnt = (uint8_t)(tmp*100)%100;
   \   00004E   90....       MOV     DPTR,#__Constant_42c80000
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_MOV_X
   \   000056   78..         MOV     R0,#?V0 + 8
   \   000058   79..         MOV     R1,#?V0 + 0
   \   00005A   12....       LCALL   ?FLT_MUL
   \   00005D   78..         MOV     R0,#?V0 + 8
   \   00005F   12....       LCALL   ?FLT_TO_L
   \   000062   E5..         MOV     A,?V0 + 8
   \   000064   75F064       MOV     B,#0x64
   \   000067   84           DIV     AB
   \   000068   E5F0         MOV     A,B
   \   00006A   ABF0         MOV     R3,B
    615              vddInt = (uint8_t)((int)vdd);
   \   00006C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00006F   85....       MOV     ?V0 + 1,?V0 + 5
   \   000072   85....       MOV     ?V0 + 2,?V0 + 6
   \   000075   85....       MOV     ?V0 + 3,?V0 + 7
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?FLT_TO_L
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   AC..         MOV     R4,?V0 + 0
    616              vddPnt = (uint8_t)(vdd*100)%100;
   \   000081   90....       MOV     DPTR,#__Constant_42c80000
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?L_MOV_X
   \   000089   78..         MOV     R0,#?V0 + 4
   \   00008B   79..         MOV     R1,#?V0 + 0
   \   00008D   12....       LCALL   ?FLT_MUL
   \   000090   78..         MOV     R0,#?V0 + 4
   \   000092   12....       LCALL   ?FLT_TO_L
   \   000095   E5..         MOV     A,?V0 + 4
   \   000097   75F064       MOV     B,#0x64
   \   00009A   84           DIV     AB
   \   00009B   E5F0         MOV     A,B
   \   00009D   A8F0         MOV     R0,B
    617              temperaturePkt.temperature[0] = tmpInt;
   \   00009F   EA           MOV     A,R2
   \   0000A0   C0E0         PUSH    A
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   D0E0         POP     A
   \   0000A9   F0           MOVX    @DPTR,A
    618              temperaturePkt.temperature[1] = tmpPnt;
   \   0000AA   EB           MOV     A,R3
   \   0000AB   C0E0         PUSH    A
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
    619              temperaturePkt.vdd[0] = vddInt;
   \   0000B5   EC           MOV     A,R4
   \   0000B6   C0E0         PUSH    A
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
    620              temperaturePkt.vdd[1] = vddPnt;
   \   0000C0   E5F0         MOV     A,B
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E5F0         MOV     A,B
   \   0000C9   F0           MOVX    @DPTR,A
    621              buildBufflist((uint8_t *)&temperaturePkt, sizeof(temperaturePkt), upGoingNode);
   \   0000CA                ; Setup parameters for call to function buildBufflist
   \   0000CA   90....       MOV     DPTR,#upGoingNode
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?PUSH_XSTACK8_X
   \   0000D2   7C06         MOV     R4,#0x6
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF   12....       LCALL   ??buildBufflist?relay
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
    622          }
   \   0000E7   7406         MOV     A,#0x6
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EC   7F0C         MOV     R7,#0xc
   \   0000EE   02....       LJMP    ?BANKED_LEAVE_XDATA
    623          //------------------------------------------------------------------------------------------------
    624          
    625          //----------------------sleep mode handler----------------------

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void addSleepTimer(uint16_t sec)
   \                     addSleepTimer:
    627          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    628              uint32_t sleepTimer = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   \   00000E   75..00       MOV     ?V0 + 7,#0x0
    629              sleepTimer |= ST0;
   \   000011   E595         MOV     A,0x95
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   E4           CLR     A
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   F5..         MOV     ?V0 + 3,A
   \   00001C   78..         MOV     R0,#?V0 + 4
   \   00001E   79..         MOV     R1,#?V0 + 0
   \   000020   12....       LCALL   ?L_IOR
    630              sleepTimer |= (uint32_t)ST1 <<  8;
   \   000023   E596         MOV     A,0x96
   \   000025   F5..         MOV     ?V0 + 0,A
   \   000027   E4           CLR     A
   \   000028   F5..         MOV     ?V0 + 1,A
   \   00002A   F5..         MOV     ?V0 + 2,A
   \   00002C   F5..         MOV     ?V0 + 3,A
   \   00002E   7408         MOV     A,#0x8
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?L_SHL
   \   000035   78..         MOV     R0,#?V0 + 4
   \   000037   79..         MOV     R1,#?V0 + 0
   \   000039   12....       LCALL   ?L_IOR
    631              sleepTimer |= (uint32_t)ST2 << 16;
   \   00003C   E597         MOV     A,0x97
   \   00003E   F5..         MOV     ?V0 + 0,A
   \   000040   E4           CLR     A
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   F5..         MOV     ?V0 + 2,A
   \   000045   F5..         MOV     ?V0 + 3,A
   \   000047   7410         MOV     A,#0x10
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?L_SHL
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   79..         MOV     R1,#?V0 + 0
   \   000052   12....       LCALL   ?L_IOR
    632              sleepTimer += ((uint32_t)sec * (uint32_t)32768);
   \   000055   8A..         MOV     ?V0 + 0,R2
   \   000057   8B..         MOV     ?V0 + 1,R3
   \   000059   E4           CLR     A
   \   00005A   F5..         MOV     ?V0 + 2,A
   \   00005C   F5..         MOV     ?V0 + 3,A
   \   00005E   90....       MOV     DPTR,#__Constant_8000
   \   000061   78..         MOV     R0,#?V0 + 8
   \   000063   12....       LCALL   ?L_MOV_X
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 8
   \   00006A   12....       LCALL   ?L_MUL
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   79..         MOV     R1,#?V0 + 0
   \   000071   12....       LCALL   ?L_ADD
    633              ST2 = (uint8_t)(sleepTimer >> 16);
   \   000074   85....       MOV     ?V0 + 0,?V0 + 4
   \   000077   85....       MOV     ?V0 + 1,?V0 + 5
   \   00007A   85....       MOV     ?V0 + 2,?V0 + 6
   \   00007D   85....       MOV     ?V0 + 3,?V0 + 7
   \   000080   7410         MOV     A,#0x10
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?UL_SHR
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   F597         MOV     0x97,A
    634              ST1 = (uint8_t)(sleepTimer >> 8);
   \   00008B   85....       MOV     ?V0 + 0,?V0 + 4
   \   00008E   85....       MOV     ?V0 + 1,?V0 + 5
   \   000091   E4           CLR     A
   \   000092   E5..         MOV     A,?V0 + 1
   \   000094   F5..         MOV     ?V0 + 0,A
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   F596         MOV     0x96,A
    635              ST0 = (uint8_t) sleepTimer;
   \   00009A   E5..         MOV     A,?V0 + 4
   \   00009C   F595         MOV     0x95,A
    636          }
   \   00009E   7F0C         MOV     R7,#0xc
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A3                REQUIRE ST0
   \   0000A3                REQUIRE ST1
   \   0000A3                REQUIRE ST2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    637          void intoPM2Mode()
   \                     intoPM2Mode:
    638          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    639              helloRetrans_flag = 0;
   \   000004   90....       MOV     DPTR,#helloRetrans_flag
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    640              sleepRetrans_flag = 0;
   \   00000E   90....       MOV     DPTR,#sleepRetrans_flag
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
    641              int j;
    642              int mode = 2;
   \   000018   7802         MOV     R0,#0x2
   \   00001A   7900         MOV     R1,#0x0
    643              SLEEPCMD &= 0xFC;
   \   00001C   53BEFC       ANL     0xbe,#0xfc
    644              SLEEPCMD |= mode;
   \   00001F   E8           MOV     A,R0
   \   000020   42BE         ORL     0xbe,A
    645              for(j=0;j<4;j++);
   \   000022   7800         MOV     R0,#0x0
   \   000024   7900         MOV     R1,#0x0
   \   000026   8008         SJMP    ??intoPM2Mode_0
   \                     ??intoPM2Mode_1:
   \   000028   E8           MOV     A,R0
   \   000029   2401         ADD     A,#0x1
   \   00002B   F8           MOV     R0,A
   \   00002C   E9           MOV     A,R1
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F9           MOV     R1,A
   \                     ??intoPM2Mode_0:
   \   000030   C3           CLR     C
   \   000031   E8           MOV     A,R0
   \   000032   9404         SUBB    A,#0x4
   \   000034   E9           MOV     A,R1
   \   000035   9400         SUBB    A,#0x0
   \   000037   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000039   65D0         XRL     A,PSW
   \   00003B   33           RLC     A
   \   00003C   40EA         JC      ??intoPM2Mode_1
    646              PCON = 0x01;    
   \   00003E   758701       MOV     0x87,#0x1
    647          }
   \   000041   D083         POP     DPH
   \   000043   D082         POP     DPL
   \   000045   02....       LJMP    ?BRET
   \   000048                REQUIRE SLEEPCMD
   \   000048                REQUIRE PCON
    648          //--------------------------------------------------------------
    649          
    650          
    651          //-----------sleep flag processing---------------

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    652          int process_getSleepCMD()
   \                     process_getSleepCMD:
    653          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    654              return sleepingCMD;
   \   000004   90....       MOV     DPTR,#sleepingCMD
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   02....       LJMP    ?BRET
    655          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    656          void process_setSleepCMD(int state)
   \                     process_setSleepCMD:
    657          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    658              sleepingCMD = state;
   \   000004   90....       MOV     DPTR,#sleepingCMD
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    659          }
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Frome node ">>`:
   \   000000   46726F6D     DB "Frome node "
   \            65206E6F
   \            64652000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant ": ">>`:
   \   000000   3A2000       DB ": "

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "temperature = %d.`:
   \   000000   74656D70     DB "temperature = %d.%d, "
   \            65726174
   \            75726520
   \            3D202564
   \            2E25642C
   \            2000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "voltage remained `:
   \   000000   766F6C74     DB "voltage remained = %d.%d \015\012"
   \            61676520
   \            72656D61
   \            696E6564
   \            203D2025
   \            642E2564
   \            200D0A00

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ADC">>`:
   \   000000   41444300     DB "ADC"

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for packetbuf_list>`:
   \   000000   ....         DW packetbuf_list_list

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for packetbuf_memb>`:
   \   000000   8400         DW 132
   \   000002   0500         DW 5
   \   000004   ....         DW packetbuf_memb_memb_count
   \   000006   ....         DW packetbuf_memb_memb_mem

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for information_list>`:
   \   000000   ....         DW information_list_list

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for information_memb>`:
   \   000000   0800         DW 8
   \   000002   0A00         DW 10
   \   000004   ....         DW information_memb_memb_count
   \   000006   ....         DW information_memb_memb_mem

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_40900000>`:
   \   000000   00009040     DD 40900000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_41300000>`:
   \   000000   00003041     DD 41300000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_40700000>`:
   \   000000   00007040     DD 40700000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_44ffe000>`:
   \   000000   00E0FF44     DD 44FFE000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_42c80000>`:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_8000>`:
   \   000000   00800000     DD 32768

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??is_broadcast_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    is_broadcast_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??is_myAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    is_myAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sensor_incomingPacketProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sensor_incomingPacketProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sink_incomingPacketProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sink_incomingPacketProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??buildBufflist?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    buildBufflist

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sensor_popAndSendItemOfList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sensor_popAndSendItemOfList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??toInformationList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    toInformationList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sink_printItemOfList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sink_printItemOfList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getpacketbufListLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getpacketbufListLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getInformationListLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getInformationListLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sendPacket?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendPacket

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??broadcastForward?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    broadcastForward

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??default_timebase?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    default_timebase

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??buildAndSendFrame?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    buildAndSendFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??instructionSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    instructionSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getTemperature?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getTemperature

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??getVoltage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getVoltage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sensor_dataInpack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sensor_dataInpack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??addSleepTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    addSleepTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??intoPM2Mode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    intoPM2Mode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??process_getSleepCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    process_getSleepCMD

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??process_setSleepCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    process_setSleepCMD

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Frome node ">`:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for <Constant "Frome node ">>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant ": ">`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant ": ">>`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "temperature = %d.%d, ">`:
   \   000000                DS 22
   \   000016                REQUIRE `?<Initializer for <Constant "temperature = %d.`
   \   000016                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "voltage remained = %d...">`:
   \   000000                DS 28
   \   00001C                REQUIRE `?<Initializer for <Constant "voltage remained `
   \   00001C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "ADC">`:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for <Constant "ADC">>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_40900000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_40900000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_41300000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_41300000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_40700000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_40700000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_44ffe000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_44ffe000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_42c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_42c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_8000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_8000>`
   \   000004                REQUIRE __INIT_XDATA_I
    660          //-----------------------------------------------
    661          
    662          //----------------dongbo huang-----------------//
    663          
    664          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     20  addSleepTimer
       0      0     72  broadcastForward
                          0 0 12 -> buildAndSendFrame
       1      0     78  buildAndSendFrame
                          0 0 64 -> clock_wait
                          0 0 66 -> frame802154_create
                          0 0 64 -> frame802154_hdrlen
                          0 0 64 -> packetbuf_clear
                          0 0 64 -> packetbuf_copyfrom
                          0 0 64 -> packetbuf_datalen
                          0 0 64 -> packetbuf_dataptr
                          0 0 64 -> packetbuf_hdralloc
                          0 0 64 -> packetbuf_hdrptr
                          0 0 66 -> packetbuf_hdrptr
                          0 0 64 -> packetbuf_totlen
                          0 0 64 -> random_rand
                          0 0 64 -> rimeaddr_cmp
                          0 0 64 -> rimeaddr_copy
       1      0    126  buildBufflist
                          0 0 64 -> frame802154_create
                          0 0 62 -> frame802154_hdrlen
                          0 0 62 -> list_add
                          0 0 62 -> memb_alloc
                          0 0 62 -> packetbuf_clear
                          0 0 62 -> packetbuf_copyfrom
                          0 0 62 -> packetbuf_datalen
                          0 0 62 -> packetbuf_dataptr
                          0 0 62 -> packetbuf_hdralloc
                          0 0 62 -> packetbuf_hdrptr
                          0 0 64 -> packetbuf_hdrptr
                          0 0 62 -> packetbuf_totlen
                          0 0 62 -> random_rand
                          0 0 62 -> rimeaddr_cmp
                          0 0 62 -> rimeaddr_copy
       0      0      0  default_timebase
       2      0      0  getInformationListLength
                          2 0  0 -> list_length
       0      0     42  getTemperature
                          0 0 16 -> sensors_find
       0      0     42  getVoltage
                          0 0 16 -> sensors_find
       2      0      0  getpacketbufListLength
                          2 0  0 -> list_length
       0      0     12  instructionSend
                          0 0 12 -> buildAndSendFrame
       2      0      0  intoPM2Mode
       2      0     60  is_broadcast_addr
       0      0     69  is_myAddr
       2      0      0  process_getSleepCMD
       2      0     60  process_setSleepCMD
       0      0     32  sendPacket
                          0 0 20 -> clock_wait
                          0 0 20 -> leds_on
                          0 0 20 -> random_rand
       1      0     30  sensor_dataInpack
                          0 0 28 -> buildBufflist
                          0 0 26 -> getTemperature
                          0 0 26 -> getVoltage
       0      0     62  sensor_incomingPacketProcessing
                          0 0 60 -> broadcastForward
                          0 0 62 -> buildBufflist
                          0 0 62 -> dataInpack
                          0 0 62 -> frame802154_parse
                          0 0 60 -> is_broadcast_addr
                          0 0 60 -> is_myAddr
                          0 0 60 -> leds_off
                          0 0 60 -> leds_on
                          0 0 60 -> packetbuf_clear
                          0 0 60 -> packetbuf_dataptr
                          0 0 62 -> packetbuf_dataptr
                          0 0 60 -> packetbuf_hdrreduce
                          0 0 60 -> packetbuf_set_datalen
                          0 0 60 -> process_setSleepCMD
                          0 0 60 -> rimeaddr_cmp
                          0 0 60 -> rimeaddr_copy
       0      0     12  sensor_popAndSendItemOfList
                          0 0 12 -> list_length
                          0 0 12 -> list_pop
                          0 0 12 -> memb_free
                          0 0 12 -> sendPacket
       0      0     66  sink_incomingPacketProcessing
                          0 0 62 -> frame802154_parse
                          0 0 60 -> packetbuf_clear
                          0 0 60 -> packetbuf_datalen
                          0 0 60 -> packetbuf_dataptr
                          0 0 62 -> packetbuf_dataptr
                          0 0 60 -> packetbuf_hdrreduce
                          0 0 60 -> packetbuf_set_datalen
                          0 0 60 -> rimeaddr_cmp
                          0 0 66 -> toInformationList
       2      0     20  sink_printItemOfList
                          0 0 16 -> list_length
                          0 0 16 -> list_pop
                          0 0 16 -> memb_free
                          0 0 20 -> printf
                          0 0 16 -> puthex
                          0 0 16 -> putstring
       0      0     76  toInformationList
                          0 0 10 -> list_add
                          0 0 10 -> memb_alloc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant ": ">
       4  ?<Constant "ADC">
      12  ?<Constant "Frome node ">
      22  ?<Constant "temperature = %d.%d, ">
      28  ?<Constant "voltage remained = %d...">
       3  ?<Initializer for <Constant ": ">>
       4  ?<Initializer for <Constant "ADC">>
      12  ?<Initializer for <Constant "Frome node ">>
      22  ?<Initializer for <Constant "temperature = %d.
      28  ?<Initializer for <Constant "voltage remained
       4  ?<Initializer for __Constant_40700000>
       4  ?<Initializer for __Constant_40900000>
       4  ?<Initializer for __Constant_41300000>
       4  ?<Initializer for __Constant_42c80000>
       4  ?<Initializer for __Constant_44ffe000>
       4  ?<Initializer for __Constant_8000>
       2  ?<Initializer for information_list>
       8  ?<Initializer for information_memb>
       2  ?<Initializer for packetbuf_list>
       8  ?<Initializer for packetbuf_memb>
       6  ??addSleepTimer?relay
       6  ??broadcastForward?relay
       6  ??buildAndSendFrame?relay
       6  ??buildBufflist?relay
       6  ??default_timebase?relay
       6  ??getInformationListLength?relay
       6  ??getTemperature?relay
       6  ??getVoltage?relay
       6  ??getpacketbufListLength?relay
       6  ??instructionSend?relay
       6  ??intoPM2Mode?relay
       6  ??is_broadcast_addr?relay
       6  ??is_myAddr?relay
       6  ??process_getSleepCMD?relay
       6  ??process_setSleepCMD?relay
       6  ??sendPacket?relay
       6  ??sensor_dataInpack?relay
       6  ??sensor_incomingPacketProcessing?relay
       6  ??sensor_popAndSendItemOfList?relay
       6  ??sink_incomingPacketProcessing?relay
       6  ??sink_printItemOfList?relay
       6  ??toInformationList?relay
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       4  __Constant_40700000
       4  __Constant_40900000
       4  __Constant_41300000
       4  __Constant_42c80000
       4  __Constant_44ffe000
       4  __Constant_8000
     163  addSleepTimer
      46  broadcastForward
     935  buildAndSendFrame
     515  buildBufflist
      15  default_timebase
      22  getInformationListLength
     162  getTemperature
     156  getVoltage
      22  getpacketbufListLength
       2  helloRetrans_flag
       2  information_list
       2  information_list_list
       8  information_memb
      10  information_memb_memb_count
      80  information_memb_memb_mem
       4  instruc
      83  instructionSend
      72  intoPM2Mode
      64  is_broadcast_addr
      82  is_myAddr
       1  mac_dsn
       2  packetBufCache
       2  packetbuf_list
       2  packetbuf_list_list
       8  packetbuf_memb
       5  packetbuf_memb_memb_count
     660  packetbuf_memb_memb_mem
      19  process_getSleepCMD
      19  process_setSleepCMD
     278  sendPacket
     241  sensor_dataInpack
     566  sensor_incomingPacketProcessing
     114  sensor_popAndSendItemOfList
     295  sink_incomingPacketProcessing
     224  sink_printItemOfList
       2  sleepRetrans_flag
       2  sleepingCMD
      58  toInformationList
       2  upGoingNode

 
 4 151 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     5 bytes in segment SFR_AN
   113 bytes in segment XDATA_I
   113 bytes in segment XDATA_ID
   774 bytes in segment XDATA_Z
 
 4 372 bytes of CODE  memory (+ 24 bytes shared)
     0 bytes of DATA  memory (+  5 bytes shared)
   863 bytes of XDATA memory (+ 24 bytes shared)

Errors: none
Warnings: 1
