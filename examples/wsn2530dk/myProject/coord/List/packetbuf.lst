###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:44 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\net\packetbuf.c              #
#    Command line       =  D:\myWork\myWork\core\net\packetbuf.c -D           #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\packetbuf.lst                               #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\packetbuf.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\net\packetbuf.c
      1          /**
      2           * \addtogroup packetbuf
      3           * @{
      4           */
      5          
      6          /*
      7           * Copyright (c) 2006, Swedish Institute of Computer Science.
      8           * All rights reserved.
      9           *
     10           * Redistribution and use in source and binary forms, with or without
     11           * modification, are permitted provided that the following conditions
     12           * are met:
     13           * 1. Redistributions of source code must retain the above copyright
     14           *    notice, this list of conditions and the following disclaimer.
     15           * 2. Redistributions in binary form must reproduce the above copyright
     16           *    notice, this list of conditions and the following disclaimer in the
     17           *    documentation and/or other materials provided with the distribution.
     18           * 3. Neither the name of the Institute nor the names of its contributors
     19           *    may be used to endorse or promote products derived from this software
     20           *    without specific prior written permission.
     21           *
     22           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     23           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     25           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     26           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     28           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     29           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     30           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     31           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     32           * SUCH DAMAGE.
     33           *
     34           * This file is part of the Contiki operating system.
     35           *
     36           */
     37          
     38          /**
     39           * \file
     40           *         Rime buffer (packetbuf) management
     41           * \author
     42           *         Adam Dunkels <adam@sics.se>
     43           */
     44          
     45          #include <string.h>
     46          
     47          #include "contiki-net.h"
     48          #include "net/packetbuf.h"
     49          #include "net/rime.h"
     50          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          struct packetbuf_attr packetbuf_attrs[PACKETBUF_NUM_ATTRS];
   \                     packetbuf_attrs:
   \   000000                DS 48
   \   000030                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          struct packetbuf_addr packetbuf_addrs[PACKETBUF_NUM_ADDRS];
   \                     packetbuf_addrs:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     53          
     54          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          static uint16_t buflen, bufptr;
   \                     buflen:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     bufptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          static uint8_t hdrptr;
   \                     hdrptr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     57          
     58          /* The declarations below ensure that the packet buffer is aligned on
     59             an even 16-bit boundary. On some platforms (most notably the
     60             msp430), having apotentially misaligned packet buffer may lead to
     61             problems when accessing 16-bit values. */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          static uint16_t packetbuf_aligned[(PACKETBUF_SIZE + PACKETBUF_HDR_SIZE) / 2 + 1];
   \                     packetbuf_aligned:
   \   000000                DS 178
   \   0000B2                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     63          static uint8_t *packetbuf = (uint8_t *)packetbuf_aligned;
   \                     packetbuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for packetbuf>`
   \   000002                REQUIRE __INIT_XDATA_I
     64          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     65          static uint8_t *packetbufptr;
   \                     packetbufptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     66          
     67          #define DEBUG 0
     68          #if DEBUG
     69          #include <stdio.h>
     70          #define PRINTF(...) printf(__VA_ARGS__)
     71          #else
     72          #define PRINTF(...)
     73          #endif
     74          
     75          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     76          void
     77          packetbuf_clear(void)
   \                     packetbuf_clear:
     78          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     79            buflen = bufptr = 0;
   \   000004   7800         MOV     R0,#0x0
   \   000006   7900         MOV     R1,#0x0
   \   000008   90....       MOV     DPTR,#bufptr
   \   00000B   E8           MOV     A,R0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   90....       MOV     DPTR,#buflen
   \   000013   E8           MOV     A,R0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   E9           MOV     A,R1
   \   000017   F0           MOVX    @DPTR,A
     80            hdrptr = PACKETBUF_HDR_SIZE;
   \   000018   90....       MOV     DPTR,#hdrptr
   \   00001B   7430         MOV     A,#0x30
   \   00001D   F0           MOVX    @DPTR,A
     81          
     82            packetbufptr = &packetbuf[PACKETBUF_HDR_SIZE];
   \   00001E   90....       MOV     DPTR,#packetbuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   2430         ADD     A,#0x30
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   3400         ADDC    A,#0x0
   \   000029   F9           MOV     R1,A
   \   00002A   90....       MOV     DPTR,#packetbufptr
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
     83            packetbuf_attr_clear();
   \   000032                ; Setup parameters for call to function packetbuf_attr_clear
   \   000032   12....       LCALL   ??packetbuf_attr_clear?relay
     84          }
   \   000035   D083         POP     DPH
   \   000037   D082         POP     DPL
   \   000039   02....       LJMP    ?BRET
     85          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          void
     87          packetbuf_clear_hdr(void)
   \                     packetbuf_clear_hdr:
     88          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     89            hdrptr = PACKETBUF_HDR_SIZE;
   \   000004   90....       MOV     DPTR,#hdrptr
   \   000007   7430         MOV     A,#0x30
   \   000009   F0           MOVX    @DPTR,A
     90          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
     91          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     92          int
     93          packetbuf_copyfrom(const void *from, uint16_t len)
   \                     packetbuf_copyfrom:
     94          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
     95            uint16_t l;
     96          
     97            packetbuf_clear();
   \   00000D                ; Setup parameters for call to function packetbuf_clear
   \   00000D   12....       LCALL   ??packetbuf_clear?relay
     98            l = len > PACKETBUF_SIZE? PACKETBUF_SIZE: len;
   \   000010   C3           CLR     C
   \   000011   E5..         MOV     A,?V0 + 0
   \   000013   9481         SUBB    A,#-0x7f
   \   000015   E5..         MOV     A,?V0 + 1
   \   000017   9400         SUBB    A,#0x0
   \   000019   4008         JC      ??packetbuf_copyfrom_0
   \   00001B   75..80       MOV     ?V0 + 2,#-0x80
   \   00001E   75..00       MOV     ?V0 + 3,#0x0
   \   000021   8006         SJMP    ??packetbuf_copyfrom_1
   \                     ??packetbuf_copyfrom_0:
   \   000023   85....       MOV     ?V0 + 2,?V0 + 0
   \   000026   85....       MOV     ?V0 + 3,?V0 + 1
     99            memcpy(packetbufptr, from, l);
   \                     ??packetbuf_copyfrom_1:
   \   000029                ; Setup parameters for call to function memcpy
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   EE           MOV     A,R6
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   FD           MOV     R5,A
   \   000032   90....       MOV     DPTR,#packetbufptr
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??memcpy?relay
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    100            buflen = l;
   \   000042   90....       MOV     DPTR,#buflen
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    101            return l;
   \   00004C   AA..         MOV     R2,?V0 + 2
   \   00004E   AB..         MOV     R3,?V0 + 3
   \   000050   7F04         MOV     R7,#0x4
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
    102          }
    103          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          void
    105          packetbuf_compact(void)
   \                     packetbuf_compact:
    106          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    107            int i, len;
    108          
    109            if(packetbuf_is_reference()) {
   \   000005                ; Setup parameters for call to function packetbuf_is_reference
   \   000005   12....       LCALL   ??packetbuf_is_reference?relay
   \   000008   8A..         MOV     ?V0 + 0,R2
   \   00000A   8B..         MOV     ?V0 + 1,R3
   \   00000C   E5..         MOV     A,?V0 + 0
   \   00000E   45..         ORL     A,?V0 + 1
   \   000010   602F         JZ      ??packetbuf_compact_0
    110              memcpy(&packetbuf[PACKETBUF_HDR_SIZE], packetbuf_reference_ptr(),
    111          	   packetbuf_datalen());
   \   000012                ; Setup parameters for call to function packetbuf_datalen
   \   000012   12....       LCALL   ??packetbuf_datalen?relay
   \   000015   8A..         MOV     ?V0 + 2,R2
   \   000017   8B..         MOV     ?V0 + 3,R3
   \   000019   85....       MOV     ?V0 + 0,?V0 + 2
   \   00001C   85....       MOV     ?V0 + 1,?V0 + 3
   \   00001F                ; Setup parameters for call to function memcpy
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024                ; Setup parameters for call to function packetbuf_reference_ptr
   \   000024   12....       LCALL   ??packetbuf_reference_ptr?relay
   \   000027   EA           MOV     A,R2
   \   000028   FC           MOV     R4,A
   \   000029   EB           MOV     A,R3
   \   00002A   FD           MOV     R5,A
   \   00002B   90....       MOV     DPTR,#packetbuf
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   2430         ADD     A,#0x30
   \   000031   FA           MOV     R2,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   3400         ADDC    A,#0x0
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??memcpy?relay
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   806B         SJMP    ??packetbuf_compact_1
    112            } else if(bufptr > 0) {
   \                     ??packetbuf_compact_0:
   \   000041   90....       MOV     DPTR,#bufptr
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   49           ORL     A,R1
   \   00004B   605F         JZ      ??packetbuf_compact_1
    113              len = packetbuf_datalen() + PACKETBUF_HDR_SIZE;
   \   00004D                ; Setup parameters for call to function packetbuf_datalen
   \   00004D   12....       LCALL   ??packetbuf_datalen?relay
   \   000050   8A..         MOV     ?V0 + 0,R2
   \   000052   8B..         MOV     ?V0 + 1,R3
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   2430         ADD     A,#0x30
   \   000058   FA           MOV     R2,A
   \   000059   E5..         MOV     A,?V0 + 1
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FB           MOV     R3,A
    114              for(i = PACKETBUF_HDR_SIZE; i < len; i++) {
   \   00005E   7830         MOV     R0,#0x30
   \   000060   7900         MOV     R1,#0x0
   \   000062   8032         SJMP    ??packetbuf_compact_2
    115                packetbuf[i] = packetbuf[bufptr + i];
   \                     ??packetbuf_compact_3:
   \   000064   90....       MOV     DPTR,#bufptr
   \   000067   E0           MOVX    A,@DPTR
   \   000068   28           ADD     A,R0
   \   000069   FC           MOV     R4,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   39           ADDC    A,R1
   \   00006D   FD           MOV     R5,A
   \   00006E   90....       MOV     DPTR,#packetbuf
   \   000071   E0           MOVX    A,@DPTR
   \   000072   2C           ADD     A,R4
   \   000073   FE           MOV     R6,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   3D           ADDC    A,R5
   \   000077   8E82         MOV     DPL,R6
   \   000079   F583         MOV     DPH,A
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   C0E0         PUSH    A
   \   00007E   90....       MOV     DPTR,#packetbuf
   \   000081   E0           MOVX    A,@DPTR
   \   000082   28           ADD     A,R0
   \   000083   FC           MOV     R4,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   39           ADDC    A,R1
   \   000087   8C82         MOV     DPL,R4
   \   000089   F583         MOV     DPH,A
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
    116              }
   \   00008E   E8           MOV     A,R0
   \   00008F   2401         ADD     A,#0x1
   \   000091   F8           MOV     R0,A
   \   000092   E9           MOV     A,R1
   \   000093   3400         ADDC    A,#0x0
   \   000095   F9           MOV     R1,A
   \                     ??packetbuf_compact_2:
   \   000096   C3           CLR     C
   \   000097   E8           MOV     A,R0
   \   000098   9A           SUBB    A,R2
   \   000099   E9           MOV     A,R1
   \   00009A   9B           SUBB    A,R3
   \   00009B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00009D   65D0         XRL     A,PSW
   \   00009F   33           RLC     A
   \   0000A0   40C2         JC      ??packetbuf_compact_3
    117          
    118              bufptr = 0;
   \   0000A2   90....       MOV     DPTR,#bufptr
   \   0000A5   7400         MOV     A,#0x0
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   7400         MOV     A,#0x0
   \   0000AB   F0           MOVX    @DPTR,A
    119            }
    120          }
   \                     ??packetbuf_compact_1:
   \   0000AC   7F04         MOV     R7,#0x4
   \   0000AE   02....       LJMP    ?BANKED_LEAVE_XDATA
    121          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    122          int
    123          packetbuf_copyto_hdr(uint8_t *to)
   \                     packetbuf_copyto_hdr:
    124          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    125          #if DEBUG_LEVEL > 0
    126            {
    127              int i;
    128              PRINTF("packetbuf_write_hdr: header:\n");
    129              for(i = hdrptr; i < PACKETBUF_HDR_SIZE; ++i) {
    130                PRINTF("0x%02x, ", packetbuf[i]);
    131              }
    132              PRINTF("\n");
    133            }
    134          #endif /* DEBUG_LEVEL */
    135            memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
   \   000005                ; Setup parameters for call to function memcpy
   \   000005   90....       MOV     DPTR,#hdrptr
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   7430         MOV     A,#0x30
   \   00000E   C3           CLR     C
   \   00000F   98           SUBB    A,R0
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   7400         MOV     A,#0x0
   \   000014   99           SUBB    A,R1
   \   000015   F5..         MOV     ?V0 + 1,A
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   90....       MOV     DPTR,#hdrptr
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7900         MOV     R1,#0x0
   \   000023   90....       MOV     DPTR,#packetbuf
   \   000026   E0           MOVX    A,@DPTR
   \   000027   28           ADD     A,R0
   \   000028   FC           MOV     R4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   39           ADDC    A,R1
   \   00002C   FD           MOV     R5,A
   \   00002D   12....       LCALL   ??memcpy?relay
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    136            return PACKETBUF_HDR_SIZE - hdrptr;
   \   000035   90....       MOV     DPTR,#hdrptr
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   7430         MOV     A,#0x30
   \   00003E   C3           CLR     C
   \   00003F   98           SUBB    A,R0
   \   000040   FA           MOV     R2,A
   \   000041   7400         MOV     A,#0x0
   \   000043   99           SUBB    A,R1
   \   000044   FB           MOV     R3,A
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    137          }
    138          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          int
    140          packetbuf_copyto(void *to)
   \                     packetbuf_copyto:
    141          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    142          #if DEBUG_LEVEL > 0
    143            {
    144              int i;
    145              char buffer[1000];
    146              char *bufferptr = buffer;
    147              
    148              bufferptr[0] = 0;
    149              for(i = hdrptr; i < PACKETBUF_HDR_SIZE; ++i) {
    150                bufferptr += sprintf(bufferptr, "0x%02x, ", packetbuf[i]);
    151              }
    152              PRINTF("packetbuf_write: header: %s\n", buffer);
    153              bufferptr = buffer;
    154              bufferptr[0] = 0;
    155              for(i = bufptr; i < buflen + bufptr; ++i) {
    156                bufferptr += sprintf(bufferptr, "0x%02x, ", packetbufptr[i]);
    157              }
    158              PRINTF("packetbuf_write: data: %s\n", buffer);
    159            }
    160          #endif /* DEBUG_LEVEL */
    161            if(PACKETBUF_HDR_SIZE - hdrptr + buflen > PACKETBUF_SIZE) {
   \   000009   90....       MOV     DPTR,#hdrptr
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   7430         MOV     A,#0x30
   \   000012   C3           CLR     C
   \   000013   98           SUBB    A,R0
   \   000014   F8           MOV     R0,A
   \   000015   7400         MOV     A,#0x0
   \   000017   99           SUBB    A,R1
   \   000018   F9           MOV     R1,A
   \   000019   90....       MOV     DPTR,#buflen
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   28           ADD     A,R0
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   39           ADDC    A,R1
   \   000022   F9           MOV     R1,A
   \   000023   C3           CLR     C
   \   000024   E8           MOV     A,R0
   \   000025   9481         SUBB    A,#-0x7f
   \   000027   E9           MOV     A,R1
   \   000028   9400         SUBB    A,#0x0
   \   00002A   4007         JC      ??packetbuf_copyto_0
    162              /* Too large packet */
    163              return 0;
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   02....       LJMP    ??packetbuf_copyto_1 & 0xFFFF
    164            }
    165            memcpy(to, packetbuf + hdrptr, PACKETBUF_HDR_SIZE - hdrptr);
   \                     ??packetbuf_copyto_0:
   \   000033                ; Setup parameters for call to function memcpy
   \   000033   90....       MOV     DPTR,#hdrptr
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7430         MOV     A,#0x30
   \   00003C   C3           CLR     C
   \   00003D   98           SUBB    A,R0
   \   00003E   F5..         MOV     ?V0 + 0,A
   \   000040   7400         MOV     A,#0x0
   \   000042   99           SUBB    A,R1
   \   000043   F5..         MOV     ?V0 + 1,A
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   90....       MOV     DPTR,#hdrptr
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   7900         MOV     R1,#0x0
   \   000051   90....       MOV     DPTR,#packetbuf
   \   000054   E0           MOVX    A,@DPTR
   \   000055   28           ADD     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   39           ADDC    A,R1
   \   00005A   FD           MOV     R5,A
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   ??memcpy?relay
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    166            memcpy((uint8_t *)to + PACKETBUF_HDR_SIZE - hdrptr, packetbufptr + bufptr,
    167          	 buflen);
   \   000067                ; Setup parameters for call to function memcpy
   \   000067   90....       MOV     DPTR,#buflen
   \   00006A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00006D   90....       MOV     DPTR,#bufptr
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   90....       MOV     DPTR,#packetbufptr
   \   000078   E0           MOVX    A,@DPTR
   \   000079   28           ADD     A,R0
   \   00007A   FC           MOV     R4,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   39           ADDC    A,R1
   \   00007E   FD           MOV     R5,A
   \   00007F   90....       MOV     DPTR,#hdrptr
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   7900         MOV     R1,#0x0
   \   000086   C3           CLR     C
   \   000087   E4           CLR     A
   \   000088   98           SUBB    A,R0
   \   000089   F8           MOV     R0,A
   \   00008A   E4           CLR     A
   \   00008B   99           SUBB    A,R1
   \   00008C   F9           MOV     R1,A
   \   00008D   EE           MOV     A,R6
   \   00008E   28           ADD     A,R0
   \   00008F   F8           MOV     R0,A
   \   000090   EF           MOV     A,R7
   \   000091   39           ADDC    A,R1
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   2430         ADD     A,#0x30
   \   000096   FA           MOV     R2,A
   \   000097   E9           MOV     A,R1
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??memcpy?relay
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    168            return PACKETBUF_HDR_SIZE - hdrptr + buflen;
   \   0000A3   90....       MOV     DPTR,#hdrptr
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F8           MOV     R0,A
   \   0000A8   7900         MOV     R1,#0x0
   \   0000AA   7430         MOV     A,#0x30
   \   0000AC   C3           CLR     C
   \   0000AD   98           SUBB    A,R0
   \   0000AE   F8           MOV     R0,A
   \   0000AF   7400         MOV     A,#0x0
   \   0000B1   99           SUBB    A,R1
   \   0000B2   F9           MOV     R1,A
   \   0000B3   90....       MOV     DPTR,#buflen
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   28           ADD     A,R0
   \   0000B8   FA           MOV     R2,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   39           ADDC    A,R1
   \   0000BC   FB           MOV     R3,A
   \                     ??packetbuf_copyto_1:
   \   0000BD   7F02         MOV     R7,#0x2
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
    169          }
    170          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          int
    172          packetbuf_hdralloc(int size)
   \                     packetbuf_hdralloc:
    173          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    174            if(hdrptr >= size && packetbuf_totlen() + size <= PACKETBUF_SIZE) {
   \   000009   90....       MOV     DPTR,#hdrptr
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   C3           CLR     C
   \   000011   9E           SUBB    A,R6
   \   000012   E9           MOV     A,R1
   \   000013   9F           SUBB    A,R7
   \   000014   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000016   65D0         XRL     A,PSW
   \   000018   33           RLC     A
   \   000019   4025         JC      ??packetbuf_hdralloc_0
   \   00001B                ; Setup parameters for call to function packetbuf_totlen
   \   00001B   12....       LCALL   ??packetbuf_totlen?relay
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   2E           ADD     A,R6
   \   000025   F8           MOV     R0,A
   \   000026   E5..         MOV     A,?V0 + 1
   \   000028   3F           ADDC    A,R7
   \   000029   F9           MOV     R1,A
   \   00002A   C3           CLR     C
   \   00002B   E8           MOV     A,R0
   \   00002C   9481         SUBB    A,#-0x7f
   \   00002E   E9           MOV     A,R1
   \   00002F   9400         SUBB    A,#0x0
   \   000031   500D         JNC     ??packetbuf_hdralloc_0
    175              hdrptr -= size;
   \   000033   90....       MOV     DPTR,#hdrptr
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C3           CLR     C
   \   000038   9E           SUBB    A,R6
   \   000039   F0           MOVX    @DPTR,A
    176              return 1;
   \   00003A   7A01         MOV     R2,#0x1
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   8004         SJMP    ??packetbuf_hdralloc_1
    177            }
    178            return 0;
   \                     ??packetbuf_hdralloc_0:
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \                     ??packetbuf_hdralloc_1:
   \   000044   7F02         MOV     R7,#0x2
   \   000046   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }
    180          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void
    182          packetbuf_hdr_remove(int size)
   \                     packetbuf_hdr_remove:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            hdrptr += size;
   \   000004   90....       MOV     DPTR,#hdrptr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2A           ADD     A,R2
   \   000009   F0           MOVX    @DPTR,A
    185          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    186          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          int
    188          packetbuf_hdrreduce(int size)
   \                     packetbuf_hdrreduce:
    189          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    190            if(buflen < size) {
   \   000004   90....       MOV     DPTR,#buflen
   \   000007   C3           CLR     C
   \   000008   E0           MOVX    A,@DPTR
   \   000009   9A           SUBB    A,R2
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   9B           SUBB    A,R3
   \   00000D   5006         JNC     ??packetbuf_hdrreduce_0
    191              return 0;
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   8019         SJMP    ??packetbuf_hdrreduce_1
    192            }
    193          
    194            bufptr += size;
   \                     ??packetbuf_hdrreduce_0:
   \   000015   90....       MOV     DPTR,#bufptr
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2A           ADD     A,R2
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   3B           ADDC    A,R3
   \   00001E   F0           MOVX    @DPTR,A
    195            buflen -= size;
   \   00001F   90....       MOV     DPTR,#buflen
   \   000022   C3           CLR     C
   \   000023   E0           MOVX    A,@DPTR
   \   000024   9A           SUBB    A,R2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   9B           SUBB    A,R3
   \   000029   F0           MOVX    @DPTR,A
    196            return 1;
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \                     ??packetbuf_hdrreduce_1:
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   02....       LJMP    ?BRET
    197          }
    198          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          void
    200          packetbuf_set_datalen(uint16_t len)
   \                     packetbuf_set_datalen:
    201          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    202            PRINTF("packetbuf_set_len: len %d\n", len);
    203            buflen = len;
   \   000004   90....       MOV     DPTR,#buflen
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    204          }
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   02....       LJMP    ?BRET
    205          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void *
    207          packetbuf_dataptr(void)
   \                     packetbuf_dataptr:
    208          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    209            return (void *)(&packetbuf[bufptr + PACKETBUF_HDR_SIZE]);
   \   000004   90....       MOV     DPTR,#bufptr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   90....       MOV     DPTR,#packetbuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   28           ADD     A,R0
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   39           ADDC    A,R1
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   2430         ADD     A,#0x30
   \   000019   FA           MOV     R2,A
   \   00001A   E9           MOV     A,R1
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   FB           MOV     R3,A
   \   00001E   D083         POP     DPH
   \   000020   D082         POP     DPL
   \   000022   02....       LJMP    ?BRET
    210          }
    211          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    212          void *
    213          packetbuf_hdrptr(void)
   \                     packetbuf_hdrptr:
    214          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    215            return (void *)(&packetbuf[hdrptr]);
   \   000004   90....       MOV     DPTR,#hdrptr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   7900         MOV     R1,#0x0
   \   00000B   90....       MOV     DPTR,#packetbuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   28           ADD     A,R0
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   39           ADDC    A,R1
   \   000014   FB           MOV     R3,A
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    216          }
    217          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void
    219          packetbuf_reference(void *ptr, uint16_t len)
   \                     packetbuf_reference:
    220          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    221            packetbuf_clear();
   \   00000D                ; Setup parameters for call to function packetbuf_clear
   \   00000D   12....       LCALL   ??packetbuf_clear?relay
    222            packetbufptr = ptr;
   \   000010   90....       MOV     DPTR,#packetbufptr
   \   000013   EE           MOV     A,R6
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EF           MOV     A,R7
   \   000017   F0           MOVX    @DPTR,A
    223            buflen = len;
   \   000018   90....       MOV     DPTR,#buflen
   \   00001B   E5..         MOV     A,?V0 + 0
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   E5..         MOV     A,?V0 + 1
   \   000021   F0           MOVX    @DPTR,A
    224          }
   \   000022   7F02         MOV     R7,#0x2
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
    225          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          int
    227          packetbuf_is_reference(void)
   \                     packetbuf_is_reference:
    228          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    229            return packetbufptr != &packetbuf[PACKETBUF_HDR_SIZE];
   \   000004   90....       MOV     DPTR,#packetbufptr
   \   000007   C082         PUSH    DPL
   \   000009   C083         PUSH    DPH
   \   00000B   90....       MOV     DPTR,#packetbuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2430         ADD     A,#0x30
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   68           XRL     A,R0
   \   00001D   7003         JNZ     ??packetbuf_is_reference_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   69           XRL     A,R1
   \                     ??packetbuf_is_reference_0:
   \   000022   6004         JZ      ??packetbuf_is_reference_1
   \   000024   D2F0         SETB    B.0
   \   000026   8002         SJMP    ??packetbuf_is_reference_2
   \                     ??packetbuf_is_reference_1:
   \   000028   C2F0         CLR     B.0
   \                     ??packetbuf_is_reference_2:
   \   00002A   A2F0         MOV     C,B.0
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   FA           MOV     R2,A
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   D083         POP     DPH
   \   000033   D082         POP     DPL
   \   000035   02....       LJMP    ?BRET
    230          }
    231          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void *
    233          packetbuf_reference_ptr(void)
   \                     packetbuf_reference_ptr:
    234          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    235            return packetbufptr;
   \   000004   90....       MOV     DPTR,#packetbufptr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   02....       LJMP    ?BRET
    236          }
    237          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          uint16_t
    239          packetbuf_datalen(void)
   \                     packetbuf_datalen:
    240          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    241            return buflen;
   \   000004   90....       MOV     DPTR,#buflen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   02....       LJMP    ?BRET
    242          }
    243          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          uint8_t
    245          packetbuf_hdrlen(void)
   \                     packetbuf_hdrlen:
    246          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    247            return PACKETBUF_HDR_SIZE - hdrptr;
   \   000004   90....       MOV     DPTR,#hdrptr
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   7430         MOV     A,#0x30
   \   00000B   C3           CLR     C
   \   00000C   98           SUBB    A,R0
   \   00000D   F9           MOV     R1,A
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
    248          }
    249          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          uint16_t
    251          packetbuf_totlen(void)
   \                     packetbuf_totlen:
    252          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    253            return packetbuf_hdrlen() + packetbuf_datalen();
   \   000005                ; Setup parameters for call to function packetbuf_hdrlen
   \   000005   12....       LCALL   ??packetbuf_hdrlen?relay
   \   000008   E9           MOV     A,R1
   \   000009   F5..         MOV     ?V0 + 0,A
   \   00000B   75..00       MOV     ?V0 + 1,#0x0
   \   00000E                ; Setup parameters for call to function packetbuf_datalen
   \   00000E   12....       LCALL   ??packetbuf_datalen?relay
   \   000011   8A..         MOV     ?V0 + 2,R2
   \   000013   8B..         MOV     ?V0 + 3,R3
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   25..         ADD     A,?V0 + 2
   \   000019   FA           MOV     R2,A
   \   00001A   E5..         MOV     A,?V0 + 1
   \   00001C   35..         ADDC    A,?V0 + 3
   \   00001E   FB           MOV     R3,A
   \   00001F   7F04         MOV     R7,#0x4
   \   000021   02....       LJMP    ?BANKED_LEAVE_XDATA
    254          }
    255          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void
    257          packetbuf_attr_clear(void)
   \                     packetbuf_attr_clear:
    258          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    259            int i;
    260            for(i = 0; i < PACKETBUF_NUM_ATTRS; ++i) {
   \   000005   7E00         MOV     R6,#0x0
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8032         SJMP    ??packetbuf_attr_clear_0
    261              packetbuf_attrs[i].val = 0;
   \                     ??packetbuf_attr_clear_1:
   \   00000B   EE           MOV     A,R6
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   75F002       MOV     B,#0x2
   \   000013   A4           MUL     AB
   \   000014   C8           XCH     A,R0
   \   000015   AAF0         MOV     R2,B
   \   000017   75F000       MOV     B,#0x0
   \   00001A   A4           MUL     AB
   \   00001B   2A           ADD     A,R2
   \   00001C   FA           MOV     R2,A
   \   00001D   75F002       MOV     B,#0x2
   \   000020   E9           MOV     A,R1
   \   000021   A4           MUL     AB
   \   000022   2A           ADD     A,R2
   \   000023   F9           MOV     R1,A
   \   000024   74..         MOV     A,#packetbuf_attrs & 0xff
   \   000026   28           ADD     A,R0
   \   000027   F582         MOV     DPL,A
   \   000029   74..         MOV     A,#(packetbuf_attrs >> 8) & 0xff
   \   00002B   39           ADDC    A,R1
   \   00002C   F583         MOV     DPH,A
   \   00002E   7400         MOV     A,#0x0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   7400         MOV     A,#0x0
   \   000034   F0           MOVX    @DPTR,A
    262            }
   \   000035   EE           MOV     A,R6
   \   000036   2401         ADD     A,#0x1
   \   000038   FE           MOV     R6,A
   \   000039   EF           MOV     A,R7
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   FF           MOV     R7,A
   \                     ??packetbuf_attr_clear_0:
   \   00003D   C3           CLR     C
   \   00003E   EE           MOV     A,R6
   \   00003F   9418         SUBB    A,#0x18
   \   000041   EF           MOV     A,R7
   \   000042   9400         SUBB    A,#0x0
   \   000044   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000046   65D0         XRL     A,PSW
   \   000048   33           RLC     A
   \   000049   40C0         JC      ??packetbuf_attr_clear_1
    263            for(i = 0; i < PACKETBUF_NUM_ADDRS; ++i) {
   \   00004B   7E00         MOV     R6,#0x0
   \   00004D   7F00         MOV     R7,#0x0
   \   00004F   8030         SJMP    ??packetbuf_attr_clear_2
    264              rimeaddr_copy(&packetbuf_addrs[i].addr, &rimeaddr_null);
   \                     ??packetbuf_attr_clear_3:
   \   000051                ; Setup parameters for call to function rimeaddr_copy
   \   000051   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   000053   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   000055   EE           MOV     A,R6
   \   000056   F8           MOV     R0,A
   \   000057   EF           MOV     A,R7
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   75F002       MOV     B,#0x2
   \   00005D   A4           MUL     AB
   \   00005E   C8           XCH     A,R0
   \   00005F   AAF0         MOV     R2,B
   \   000061   75F000       MOV     B,#0x0
   \   000064   A4           MUL     AB
   \   000065   2A           ADD     A,R2
   \   000066   FA           MOV     R2,A
   \   000067   75F002       MOV     B,#0x2
   \   00006A   E9           MOV     A,R1
   \   00006B   A4           MUL     AB
   \   00006C   2A           ADD     A,R2
   \   00006D   F9           MOV     R1,A
   \   00006E   74..         MOV     A,#packetbuf_addrs & 0xff
   \   000070   28           ADD     A,R0
   \   000071   FA           MOV     R2,A
   \   000072   74..         MOV     A,#(packetbuf_addrs >> 8) & 0xff
   \   000074   39           ADDC    A,R1
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??rimeaddr_copy?relay
    265            }
   \   000079   EE           MOV     A,R6
   \   00007A   2401         ADD     A,#0x1
   \   00007C   FE           MOV     R6,A
   \   00007D   EF           MOV     A,R7
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FF           MOV     R7,A
   \                     ??packetbuf_attr_clear_2:
   \   000081   C3           CLR     C
   \   000082   EE           MOV     A,R6
   \   000083   9404         SUBB    A,#0x4
   \   000085   EF           MOV     A,R7
   \   000086   9400         SUBB    A,#0x0
   \   000088   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00008A   65D0         XRL     A,PSW
   \   00008C   33           RLC     A
   \   00008D   40C2         JC      ??packetbuf_attr_clear_3
    266          }
   \   00008F   7F01         MOV     R7,#0x1
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    267          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          void
    269          packetbuf_attr_copyto(struct packetbuf_attr *attrs,
   \                     packetbuf_attr_copyto:
    270          		    struct packetbuf_addr *addrs)
    271          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    272            memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));
   \   000009                ; Setup parameters for call to function memcpy
   \   000009   75..30       MOV     ?V0 + 0,#0x30
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C..         MOV     R4,#packetbuf_attrs & 0xff
   \   000016   7D..         MOV     R5,#(packetbuf_attrs >> 8) & 0xff
   \   000018   12....       LCALL   ??memcpy?relay
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    273            memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));
   \   000020                ; Setup parameters for call to function memcpy
   \   000020   75..08       MOV     ?V0 + 0,#0x8
   \   000023   75..00       MOV     ?V0 + 1,#0x0
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7C..         MOV     R4,#packetbuf_addrs & 0xff
   \   00002D   7D..         MOV     R5,#(packetbuf_addrs >> 8) & 0xff
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   ??memcpy?relay
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    274          }
   \   00003B   7F02         MOV     R7,#0x2
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
    275          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    276          void
    277          packetbuf_attr_copyfrom(struct packetbuf_attr *attrs,
   \                     packetbuf_attr_copyfrom:
    278          		      struct packetbuf_addr *addrs)
    279          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    280            memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));
   \   000009                ; Setup parameters for call to function memcpy
   \   000009   75..30       MOV     ?V0 + 0,#0x30
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   EA           MOV     A,R2
   \   000015   FC           MOV     R4,A
   \   000016   EB           MOV     A,R3
   \   000017   FD           MOV     R5,A
   \   000018   7A..         MOV     R2,#packetbuf_attrs & 0xff
   \   00001A   7B..         MOV     R3,#(packetbuf_attrs >> 8) & 0xff
   \   00001C   12....       LCALL   ??memcpy?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    281            memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));
   \   000024                ; Setup parameters for call to function memcpy
   \   000024   75..08       MOV     ?V0 + 0,#0x8
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   FD           MOV     R5,A
   \   000033   7A..         MOV     R2,#packetbuf_addrs & 0xff
   \   000035   7B..         MOV     R3,#(packetbuf_addrs >> 8) & 0xff
   \   000037   12....       LCALL   ??memcpy?relay
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
    282          }
   \   00003F   7F02         MOV     R7,#0x2
   \   000041   02....       LJMP    ?BANKED_LEAVE_XDATA
    283          /*---------------------------------------------------------------------------*/
    284          #if !PACKETBUF_CONF_ATTRS_INLINE

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          int
    286          packetbuf_set_attr(uint8_t type, const packetbuf_attr_t val)
   \                     packetbuf_set_attr:
    287          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    288          /*   packetbuf_attrs[type].type = type; */
    289            packetbuf_attrs[type].val = val;
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   \   000006   7D00         MOV     R5,#0x0
   \   000008   EC           MOV     A,R4
   \   000009   75F002       MOV     B,#0x2
   \   00000C   A4           MUL     AB
   \   00000D   CC           XCH     A,R4
   \   00000E   A8F0         MOV     R0,B
   \   000010   75F000       MOV     B,#0x0
   \   000013   A4           MUL     AB
   \   000014   28           ADD     A,R0
   \   000015   F8           MOV     R0,A
   \   000016   75F002       MOV     B,#0x2
   \   000019   ED           MOV     A,R5
   \   00001A   A4           MUL     AB
   \   00001B   28           ADD     A,R0
   \   00001C   FD           MOV     R5,A
   \   00001D   74..         MOV     A,#packetbuf_attrs & 0xff
   \   00001F   2C           ADD     A,R4
   \   000020   F582         MOV     DPL,A
   \   000022   74..         MOV     A,#(packetbuf_attrs >> 8) & 0xff
   \   000024   3D           ADDC    A,R5
   \   000025   F583         MOV     DPH,A
   \   000027   EA           MOV     A,R2
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    290            return 1;
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   D083         POP     DPH
   \   000032   D082         POP     DPL
   \   000034   02....       LJMP    ?BRET
    291          }
    292          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          packetbuf_attr_t
    294          packetbuf_attr(uint8_t type)
   \                     packetbuf_attr:
    295          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    296            return packetbuf_attrs[type].val;
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   \   000006   7B00         MOV     R3,#0x0
   \   000008   EA           MOV     A,R2
   \   000009   75F002       MOV     B,#0x2
   \   00000C   A4           MUL     AB
   \   00000D   CA           XCH     A,R2
   \   00000E   A8F0         MOV     R0,B
   \   000010   75F000       MOV     B,#0x0
   \   000013   A4           MUL     AB
   \   000014   28           ADD     A,R0
   \   000015   F8           MOV     R0,A
   \   000016   75F002       MOV     B,#0x2
   \   000019   EB           MOV     A,R3
   \   00001A   A4           MUL     AB
   \   00001B   28           ADD     A,R0
   \   00001C   FB           MOV     R3,A
   \   00001D   74..         MOV     A,#packetbuf_attrs & 0xff
   \   00001F   2A           ADD     A,R2
   \   000020   F582         MOV     DPL,A
   \   000022   74..         MOV     A,#(packetbuf_attrs >> 8) & 0xff
   \   000024   3B           ADDC    A,R3
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FB           MOV     R3,A
   \   00002C   D083         POP     DPH
   \   00002E   D082         POP     DPL
   \   000030   02....       LJMP    ?BRET
    297          }
    298          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          int
    300          packetbuf_set_addr(uint8_t type, const rimeaddr_t *addr)
   \                     packetbuf_set_addr:
    301          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    302          /*   packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].type = type; */
    303            rimeaddr_copy(&packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr, addr);
   \   000007                ; Setup parameters for call to function rimeaddr_copy
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   \   00000B   EE           MOV     A,R6
   \   00000C   F8           MOV     R0,A
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   E8           MOV     A,R0
   \   000010   75F002       MOV     B,#0x2
   \   000013   A4           MUL     AB
   \   000014   C8           XCH     A,R0
   \   000015   AAF0         MOV     R2,B
   \   000017   75F000       MOV     B,#0x0
   \   00001A   A4           MUL     AB
   \   00001B   2A           ADD     A,R2
   \   00001C   FA           MOV     R2,A
   \   00001D   75F002       MOV     B,#0x2
   \   000020   E9           MOV     A,R1
   \   000021   A4           MUL     AB
   \   000022   2A           ADD     A,R2
   \   000023   F9           MOV     R1,A
   \   000024   74..         MOV     A,#(packetbuf_addrs + 208) & 0xff
   \   000026   28           ADD     A,R0
   \   000027   FA           MOV     R2,A
   \   000028   74..         MOV     A,#((packetbuf_addrs - 48) >> 8) & 0xff
   \   00002A   39           ADDC    A,R1
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??rimeaddr_copy?relay
    304            return 1;
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   7B00         MOV     R3,#0x0
   \   000033   7F01         MOV     R7,#0x1
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
    305          }
    306          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          const rimeaddr_t *
    308          packetbuf_addr(uint8_t type)
   \                     packetbuf_addr:
    309          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    310            return &packetbuf_addrs[type - PACKETBUF_ADDR_FIRST].addr;
   \   000000   E9           MOV     A,R1
   \   000001   FA           MOV     R2,A
   \   000002   7B00         MOV     R3,#0x0
   \   000004   EA           MOV     A,R2
   \   000005   75F002       MOV     B,#0x2
   \   000008   A4           MUL     AB
   \   000009   CA           XCH     A,R2
   \   00000A   A8F0         MOV     R0,B
   \   00000C   75F000       MOV     B,#0x0
   \   00000F   A4           MUL     AB
   \   000010   28           ADD     A,R0
   \   000011   F8           MOV     R0,A
   \   000012   75F002       MOV     B,#0x2
   \   000015   EB           MOV     A,R3
   \   000016   A4           MUL     AB
   \   000017   28           ADD     A,R0
   \   000018   FB           MOV     R3,A
   \   000019   74..         MOV     A,#(packetbuf_addrs + 208) & 0xff
   \   00001B   2A           ADD     A,R2
   \   00001C   FA           MOV     R2,A
   \   00001D   74..         MOV     A,#((packetbuf_addrs - 48) >> 8) & 0xff
   \   00001F   3B           ADDC    A,R3
   \   000020   FB           MOV     R3,A
   \   000021   02....       LJMP    ?BRET
    311          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for packetbuf>`:
   \   000000   ....         DW packetbuf_aligned

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_clear_hdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_clear_hdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_copyfrom?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_copyfrom

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_compact?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_compact

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_copyto_hdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_copyto_hdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_copyto?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_copyto

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_hdralloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_hdralloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_hdr_remove?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_hdr_remove

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_hdrreduce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_hdrreduce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_set_datalen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_set_datalen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_dataptr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_dataptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_hdrptr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_hdrptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_reference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_reference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_is_reference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_is_reference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_reference_ptr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_reference_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_datalen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_datalen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_hdrlen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_hdrlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_totlen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_totlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_attr_clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_attr_clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_attr_copyto?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_attr_copyto

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_attr_copyfrom?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_attr_copyfrom

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_set_attr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_set_attr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_attr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_attr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_set_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_set_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packetbuf_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packetbuf_addr
    312          /*---------------------------------------------------------------------------*/
    313          #endif /* PACKETBUF_CONF_ATTRS_INLINE */
    314          /** @} */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  packetbuf_addr
       2      0      0  packetbuf_attr
       0      0      9  packetbuf_attr_clear
                          0 0  9 -> rimeaddr_copy
       0      0     12  packetbuf_attr_copyfrom
                          0 0 12 -> memcpy
       0      0     12  packetbuf_attr_copyto
                          0 0 12 -> memcpy
       2      0     12  packetbuf_clear
                          2 0  0 -> packetbuf_attr_clear
       2      0      0  packetbuf_clear_hdr
       1      0     14  packetbuf_compact
                          0 0 14 -> memcpy
                          0 0 12 -> packetbuf_datalen
                          0 0 12 -> packetbuf_is_reference
                          0 0 14 -> packetbuf_reference_ptr
       0      0     14  packetbuf_copyfrom
                          0 0 14 -> memcpy
                          0 0 12 -> packetbuf_clear
       0      0     12  packetbuf_copyto
                          0 0 12 -> memcpy
       0      0     12  packetbuf_copyto_hdr
                          0 0 12 -> memcpy
       2      0     12  packetbuf_datalen
       2      0      0  packetbuf_dataptr
       2      0      0  packetbuf_hdr_remove
       0      0     10  packetbuf_hdralloc
                          0 0 10 -> packetbuf_totlen
       2      0     12  packetbuf_hdrlen
       2      0      0  packetbuf_hdrptr
       2      0      0  packetbuf_hdrreduce
       4      0     12  packetbuf_is_reference
       0      0     10  packetbuf_reference
                          0 0 10 -> packetbuf_clear
       2      0     14  packetbuf_reference_ptr
       0      0      9  packetbuf_set_addr
                          0 0  9 -> rimeaddr_copy
       2      0      0  packetbuf_set_attr
       2      0      0  packetbuf_set_datalen
       0      0     22  packetbuf_totlen
                          0 0 12 -> packetbuf_datalen
                          0 0 12 -> packetbuf_hdrlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for packetbuf>
       6  ??packetbuf_addr?relay
       6  ??packetbuf_attr?relay
       6  ??packetbuf_attr_clear?relay
       6  ??packetbuf_attr_copyfrom?relay
       6  ??packetbuf_attr_copyto?relay
       6  ??packetbuf_clear?relay
       6  ??packetbuf_clear_hdr?relay
       6  ??packetbuf_compact?relay
       6  ??packetbuf_copyfrom?relay
       6  ??packetbuf_copyto?relay
       6  ??packetbuf_copyto_hdr?relay
       6  ??packetbuf_datalen?relay
       6  ??packetbuf_dataptr?relay
       6  ??packetbuf_hdr_remove?relay
       6  ??packetbuf_hdralloc?relay
       6  ??packetbuf_hdrlen?relay
       6  ??packetbuf_hdrptr?relay
       6  ??packetbuf_hdrreduce?relay
       6  ??packetbuf_is_reference?relay
       6  ??packetbuf_reference?relay
       6  ??packetbuf_reference_ptr?relay
       6  ??packetbuf_set_addr?relay
       6  ??packetbuf_set_attr?relay
       6  ??packetbuf_set_datalen?relay
       6  ??packetbuf_totlen?relay
       2  buflen
       2  bufptr
       1  hdrptr
       2  packetbuf
      36  packetbuf_addr
       8  packetbuf_addrs
     178  packetbuf_aligned
      51  packetbuf_attr
     148  packetbuf_attr_clear
      68  packetbuf_attr_copyfrom
      64  packetbuf_attr_copyto
      48  packetbuf_attrs
      60  packetbuf_clear
      17  packetbuf_clear_hdr
     177  packetbuf_compact
      85  packetbuf_copyfrom
     194  packetbuf_copyto
      74  packetbuf_copyto_hdr
      19  packetbuf_datalen
      37  packetbuf_dataptr
      17  packetbuf_hdr_remove
      73  packetbuf_hdralloc
      21  packetbuf_hdrlen
      28  packetbuf_hdrptr
      53  packetbuf_hdrreduce
      56  packetbuf_is_reference
      39  packetbuf_reference
      19  packetbuf_reference_ptr
      56  packetbuf_set_addr
      55  packetbuf_set_attr
      19  packetbuf_set_datalen
      36  packetbuf_totlen
       2  packetbufptr

 
 1 502 bytes in segment BANKED_CODE
   150 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   241 bytes in segment XDATA_Z
 
 1 654 bytes of CODE  memory
   243 bytes of XDATA memory

Errors: none
Warnings: none
