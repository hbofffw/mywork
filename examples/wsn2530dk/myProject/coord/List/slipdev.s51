///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:43 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\slipdev.c               /
//    Command line       =  D:\myWork\myWork\core\net\slipdev.c -D            /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\slipdev.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME slipdev

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ??slipdev_init?relay
        FUNCTION ??slipdev_init?relay,0203H
        PUBLIC ??slipdev_poll?relay
        FUNCTION ??slipdev_poll?relay,0203H
        PUBLIC ??slipdev_send?relay
        FUNCTION ??slipdev_send?relay,0203H
        PUBLIC slipdev_init
        FUNCTION slipdev_init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC slipdev_poll
        FUNCTION slipdev_poll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC slipdev_send
        FUNCTION slipdev_send,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
slipdev_char_poll   SYMBOL "slipdev_char_poll"
??slipdev_char_poll?relay SYMBOL "?relay", slipdev_char_poll
slipdev_char_put    SYMBOL "slipdev_char_put"
??slipdev_char_put?relay SYMBOL "?relay", slipdev_char_put
slipdev_init        SYMBOL "slipdev_init"
??slipdev_init?relay SYMBOL "?relay", slipdev_init
slipdev_poll        SYMBOL "slipdev_poll"
??slipdev_poll?relay SYMBOL "?relay", slipdev_poll
slipdev_send        SYMBOL "slipdev_send"
??slipdev_send?relay SYMBOL "?relay", slipdev_send

        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??slipdev_char_poll?relay
        FUNCTION ??slipdev_char_poll?relay,00H
        EXTERN ??slipdev_char_put?relay
        FUNCTION ??slipdev_char_put?relay,00H
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN slipdev_char_poll
        FUNCTION slipdev_char_poll,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN slipdev_char_put
        FUNCTION slipdev_char_put,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_aligned_buf
        EXTERN uip_appdata
        EXTERN uip_len

// D:\myWork\myWork\core\net\slipdev.c
//    1 /**
//    2  * \addtogroup uip
//    3  * @{
//    4  */
//    5 
//    6 /**
//    7  * \defgroup slip Serial Line IP (SLIP) protocol
//    8  * @{
//    9  *
//   10  * The SLIP protocol is a very simple way to transmit IP packets over
//   11  * a serial line. It does not provide any framing or error control,
//   12  * and is therefore not very widely used today.
//   13  *
//   14  * This SLIP implementation requires two functions for accessing the
//   15  * serial device: slipdev_char_poll() and slipdev_char_put(). These
//   16  * must be implemented specifically for the system on which the SLIP
//   17  * protocol is to be run.
//   18  */
//   19 
//   20 /**
//   21  * \file
//   22  * SLIP protocol implementation
//   23  * \author Adam Dunkels <adam@dunkels.com>
//   24  */
//   25 
//   26 /*
//   27  * Copyright (c) 2001, Adam Dunkels.
//   28  * All rights reserved. 
//   29  *
//   30  * Redistribution and use in source and binary forms, with or without 
//   31  * modification, are permitted provided that the following conditions 
//   32  * are met: 
//   33  * 1. Redistributions of source code must retain the above copyright 
//   34  *    notice, this list of conditions and the following disclaimer. 
//   35  * 2. Redistributions in binary form must reproduce the above copyright 
//   36  *    notice, this list of conditions and the following disclaimer in the 
//   37  *    documentation and/or other materials provided with the distribution. 
//   38  * 3. The name of the author may not be used to endorse or promote
//   39  *    products derived from this software without specific prior
//   40  *    written permission.  
//   41  *
//   42  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
//   43  * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//   44  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   45  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
//   46  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   47  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//   48  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//   49  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   50  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//   51  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   52  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
//   53  *
//   54  * This file is part of the uIP TCP/IP stack.
//   55  *
//   56  *
//   57  */
//   58 
//   59 /*
//   60  * This is a generic implementation of the SLIP protocol over an RS232
//   61  * (serial) device. 
//   62  *
//   63  * Huge thanks to Ullrich von Bassewitz <uz@cc65.org> of cc65 fame for
//   64  * and endless supply of bugfixes, insightsful comments and
//   65  * suggestions, and improvements to this code!
//   66  */
//   67 
//   68 #include "uip.h"
//   69 #include "uip-fw.h"
//   70 #include "slipdev.h"
//   71 #include <string.h>  /* For memcpy() */
//   72 
//   73 #define SLIP_END     0300
//   74 #define SLIP_ESC     0333
//   75 #define SLIP_ESC_END 0334
//   76 #define SLIP_ESC_ESC 0335
//   77 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 static uint8_t slip_buf[UIP_BUFSIZE];
slip_buf:
        DS 240
        REQUIRE __INIT_XDATA_Z
//   79 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   80 static uint16_t len, tmplen;
len:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
tmplen:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 static uint8_t lastc;
lastc:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   82 
//   83 /*-----------------------------------------------------------------------------------*/
//   84 /**
//   85  * Send the packet in the uip_buf and uip_appdata buffers using the
//   86  * SLIP protocol.
//   87  *
//   88  * The first 40 bytes of the packet (the IP and TCP headers) are read
//   89  * from the uip_buf buffer, and the following bytes (the application
//   90  * data) are read from the uip_appdata buffer.
//   91  *
//   92  * \return This function will always return UIP_FW_OK.
//   93  */
//   94 /*-----------------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   95 uint8_t
//   96 slipdev_send(void)
slipdev_send:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function slipdev_send
        CODE
//   97 {
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_send, slipdev_char_put
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   98   uint16_t i;
//   99   uint8_t *ptr;
//  100   uint8_t c;
//  101 
//  102   slipdev_char_put(SLIP_END);
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x40
        LCALL   ??slipdev_char_put?relay
//  103 
//  104   ptr = &uip_buf[UIP_LLH_LEN];
        MOV     R6,#uip_aligned_buf & 0xff
        MOV     R7,#(uip_aligned_buf >> 8) & 0xff
//  105   for(i = 0; i < uip_len; ++i) {
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??slipdev_send_0
//  106     if(i == UIP_TCPIP_HLEN) {
//  107       ptr = (char *)uip_appdata;
//  108     }
//  109     c = *ptr++;
//  110     switch(c) {
//  111     case SLIP_END:
//  112       slipdev_char_put(SLIP_ESC);
//  113       slipdev_char_put(SLIP_ESC_END);
//  114       break;
//  115     case SLIP_ESC:
//  116       slipdev_char_put(SLIP_ESC);
//  117       slipdev_char_put(SLIP_ESC_ESC);
//  118       break;
//  119     default:
//  120       slipdev_char_put(c);
??slipdev_send_1:
        ; Setup parameters for call to function slipdev_char_put
        LCALL   ??slipdev_char_put?relay
//  121       break;
??slipdev_send_2:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??slipdev_send_0:
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        JNC     ??slipdev_send_3
        MOV     A,#0x3c
        XRL     A,?V0 + 0
        JNZ     ??slipdev_send_4
        MOV     A,#0x0
        XRL     A,?V0 + 1
??slipdev_send_4:
        JNZ     ??slipdev_send_5
        MOV     DPTR,#uip_appdata
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??slipdev_send_5:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,R1
        ADD     A,#0x40
        JZ      ??slipdev_send_6
        ADD     A,#-0x1b
        JZ      ??slipdev_send_7
        SJMP    ??slipdev_send_1
??slipdev_send_6:
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x25
        LCALL   ??slipdev_char_put?relay
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x24
        LCALL   ??slipdev_char_put?relay
        SJMP    ??slipdev_send_2
??slipdev_send_7:
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x25
        LCALL   ??slipdev_char_put?relay
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x23
        LCALL   ??slipdev_char_put?relay
        SJMP    ??slipdev_send_2
//  122     }
//  123   }
//  124   slipdev_char_put(SLIP_END);
??slipdev_send_3:
        ; Setup parameters for call to function slipdev_char_put
        MOV     R1,#-0x40
        LCALL   ??slipdev_char_put?relay
//  125 
//  126   return UIP_FW_OK;
        MOV     R1,#0x0
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  127 }
//  128 /*-----------------------------------------------------------------------------------*/
//  129 /** 
//  130  * Poll the SLIP device for an available packet.
//  131  *
//  132  * This function will poll the SLIP device to see if a packet is
//  133  * available. It uses a buffer in which all avaliable bytes from the
//  134  * RS232 interface are read into. When a full packet has been read
//  135  * into the buffer, the packet is copied into the uip_buf buffer and
//  136  * the length of the packet is returned.
//  137  *
//  138  * \return The length of the packet placed in the uip_buf buffer, or
//  139  * zero if no packet is available.
//  140  */
//  141 /*-----------------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 uint16_t
//  143 slipdev_poll(void)
slipdev_poll:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function slipdev_poll
        CODE
//  144 {
        FUNCALL slipdev_poll, slipdev_char_poll
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL slipdev_poll, memcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        SJMP    ??slipdev_poll_0
//  145   uint8_t c;
//  146   
//  147   while(slipdev_char_poll(&c)) {
//  148     switch(c) {
//  149     case SLIP_ESC:
//  150       lastc = c;
??slipdev_poll_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#lastc
        MOVX    @DPTR,A
//  151       break;
??slipdev_poll_0:
        ; Setup parameters for call to function slipdev_char_poll
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??slipdev_char_poll?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??slipdev_poll_2 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??slipdev_poll_3
        ADD     A,#-0x1b
        JZ      ??slipdev_poll_1
        SJMP    ??slipdev_poll_4
//  152       
//  153     case SLIP_END:
//  154       lastc = c;
??slipdev_poll_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#lastc
        MOVX    @DPTR,A
//  155       /* End marker found, we copy our input buffer to the uip_buf
//  156 	 buffer and return the size of the packet we copied. */
//  157       memcpy(&uip_buf[UIP_LLH_LEN], slip_buf, len);
        ; Setup parameters for call to function memcpy
        MOV     DPTR,#len
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 3)
        MOV     R4,#slip_buf & 0xff
        MOV     R5,#(slip_buf >> 8) & 0xff
        MOV     R2,#uip_aligned_buf & 0xff
        MOV     R3,#(uip_aligned_buf >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
//  158       tmplen = len;
        MOV     DPTR,#len
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#tmplen
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  159       len = 0;
        MOV     DPTR,#len
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  160       return tmplen;
        MOV     DPTR,#tmplen
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LJMP    ??slipdev_poll_5 & 0xFFFF
//  161       
//  162     default:     
//  163       if(lastc == SLIP_ESC) {
??slipdev_poll_4:
        MOV     DPTR,#lastc
        MOVX    A,@DPTR
        XRL     A,#0xdb
        JNZ     ??slipdev_poll_6
//  164 	lastc = c;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#lastc
        MOVX    @DPTR,A
//  165 	/* Previous read byte was an escape byte, so this byte will be
//  166 	   interpreted differently from others. */
//  167 	switch(c) {
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x24
        JZ      ??slipdev_poll_7
        DEC     A
        JZ      ??slipdev_poll_8
        SJMP    ??slipdev_poll_9
//  168 	case SLIP_ESC_END:
//  169 	  c = SLIP_END;
??slipdev_poll_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x40
        MOVX    @DPTR,A
//  170 	  break;
        SJMP    ??slipdev_poll_9
//  171 	case SLIP_ESC_ESC:
//  172 	  c = SLIP_ESC;
??slipdev_poll_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x25
        MOVX    @DPTR,A
//  173 	  break;
        SJMP    ??slipdev_poll_9
//  174 	}
//  175       } else {
//  176 	lastc = c;
??slipdev_poll_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#lastc
        MOVX    @DPTR,A
//  177       }
//  178       
//  179       slip_buf[len] = c;
??slipdev_poll_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     DPTR,#len
        MOVX    A,@DPTR
        ADD     A,#slip_buf & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(slip_buf >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  180       ++len;
        MOV     DPTR,#len
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  181       
//  182       if(len > UIP_BUFSIZE) {
        MOV     DPTR,#len
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0xf
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??slipdev_poll_10
//  183 	len = 0;
        MOV     DPTR,#len
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  184       }
//  185     
//  186       break;
??slipdev_poll_10:
        LJMP    ??slipdev_poll_0 & 0xFFFF
//  187     }
//  188   }
//  189   return 0;
??slipdev_poll_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??slipdev_poll_5:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  190 }
//  191 /*-----------------------------------------------------------------------------------*/
//  192 /**
//  193  * Initialize the SLIP module.
//  194  *
//  195  * This function does not initialize the underlying RS232 device, but
//  196  * only the SLIP part.
//  197  */ 
//  198 /*-----------------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 void
//  200 slipdev_init(void)
slipdev_init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function slipdev_init
        CODE
//  201 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  202   lastc = len = 0;
        MOV     R0,#0x0
        MOV     R1,#0x0
        MOV     DPTR,#len
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     DPTR,#lastc
        MOVX    @DPTR,A
//  203 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??slipdev_send?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    slipdev_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??slipdev_poll?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    slipdev_poll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??slipdev_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    slipdev_init

        END
//  204 /*-----------------------------------------------------------------------------------*/
//  205 
//  206 /** @} */
//  207 /** @} */
// 
// 442 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
// 245 bytes in segment XDATA_Z
// 
// 460 bytes of CODE  memory
// 245 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
