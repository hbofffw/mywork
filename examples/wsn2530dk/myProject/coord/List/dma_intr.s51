///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:48 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\cpu\cc253x\dev\dma_intr.c        /
//    Command line       =  D:\myWork\myWork\cpu\cc253x\dev\dma_intr.c -D     /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\dma_intr.s51                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME dma_intr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        PUBWEAK `??dma_isr??INTVEC 67`
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON
        PUBLIC dma_isr
        FUNCTION dma_isr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
dma_isr             SYMBOL "dma_isr"
`??dma_isr??INTVEC 67` SYMBOL "??INTVEC 67", dma_isr


        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1
// D:\myWork\myWork\cpu\cc253x\dev\dma_intr.c
//    1 /**
//    2  * \file
//    3  *         DMA driver ISRs
//    4  * \author
//    5  *         Original: Martti Huttunen <martti@sensinode.com>
//    6  *         Port: YoCiHou - < www.iotdev.net >
//    7  *
//    8  *         DMA interrupt routines, must be stored in HOME bank
//    9  */
//   10 
//   11 #include <stdio.h>
//   12 
//   13 #include "contiki.h"
//   14 
//   15 #include "dev/dma.h"
//   16 #include "cc253x.h"
//   17 
//   18 #if DMA_ON
//   19 extern struct process *dma_callback[DMA_CHANNEL_COUNT];
//   20 #endif
//   21 
//   22 /*---------------------------------------------------------------------------*/
//   23 #ifdef HAVE_RF_DMA
//   24 extern void rf_dma_callback_isr(void);
//   25 #endif
//   26 #ifdef SPI_DMA_RX
//   27 extern void spi_rx_dma_callback(void);
//   28 #endif
//   29 /*---------------------------------------------------------------------------*/
//   30 /**
//   31  * DMA interrupt service routine.
//   32  *
//   33  * if callback defined a poll is made to that process
//   34  */
//   35 /* Avoid referencing bits, we don't call code which use them */
//   36 #pragma save
//   37 #if CC_CONF_OPTIMIZE_STACK_SIZE
//   38 #pragma exclude bits
//   39 #endif
//   40 #pragma vector = DMA_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   41 __interrupt void dma_isr(void)
dma_isr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function dma_isr
        CODE
//   42 {
        ; Saved register size: 1
        ; Auto size: 0
//   43 #if DMA_ON
//   44   uint8_t i;
//   45 #endif
//   46   EA = 0;
        CLR     0xa8.7
//   47   DMAIF = 0;
        CLR     0xc0.0
//   48 #ifdef HAVE_RF_DMA
//   49   if((DMAIRQ & 1) != 0) {
//   50     DMAIRQ = ~1;
//   51     DMAARM = 0x81;
//   52     rf_dma_callback_isr();
//   53   }
//   54 #endif
//   55 #ifdef SPI_DMA_RX
//   56   if((DMAIRQ & 0x08) != 0) {
//   57     DMAIRQ = ~(1 << 3);
//   58     spi_rx_dma_callback();
//   59   }
//   60 #endif
//   61 #if DMA_ON
//   62   for(i = 0; i < DMA_CHANNEL_COUNT; i++) {
//   63     if((DMAIRQ & (1 << i)) != 0) {
//   64       DMAIRQ = ~(1 << i);
//   65       if(dma_callback[i] != 0) {
//   66         process_poll(dma_callback[i]);
//   67       }
//   68     }
//   69   }
//   70 #endif
//   71   EA = 1;
        SETB    0xa8.7
//   72 }
        RETI
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 67
`??dma_isr??INTVEC 67`:
        LJMP       (dma_isr)

        END
//   73 #pragma restore
//   74 /*---------------------------------------------------------------------------*/
// 
// 3 bytes in segment INTVEC
// 7 bytes in segment NEAR_CODE
// 2 bytes in segment SFR_AN
// 
// 7 bytes of CODE memory (+ 3 bytes shared)
// 0 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: 2
