///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:47 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\sys\ctimer.c                /
//    Command line       =  D:\myWork\myWork\core\sys\ctimer.c -D             /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ctimer.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ctimer

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ctimer_expired?relay
        FUNCTION ??ctimer_expired?relay,0203H
        PUBLIC ??ctimer_init?relay
        FUNCTION ??ctimer_init?relay,0203H
        PUBLIC ??ctimer_reset?relay
        FUNCTION ??ctimer_reset?relay,0203H
        PUBLIC ??ctimer_restart?relay
        FUNCTION ??ctimer_restart?relay,0203H
        PUBLIC ??ctimer_set?relay
        FUNCTION ??ctimer_set?relay,0203H
        PUBLIC ??ctimer_stop?relay
        FUNCTION ??ctimer_stop?relay,0203H
        FUNCTION ??process_thread_ctimer_process?relay,0203H
        PUBLIC ctimer_expired
        FUNCTION ctimer_expired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ctimer_init
        FUNCTION ctimer_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ctimer_process
        PUBLIC ctimer_reset
        FUNCTION ctimer_reset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ctimer_restart
        FUNCTION ctimer_restart,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ctimer_set
        FUNCTION ctimer_set,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ctimer_stop
        FUNCTION ctimer_stop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION process_thread_ctimer_process,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
etimer_expired      SYMBOL "etimer_expired"
??etimer_expired?relay SYMBOL "?relay", etimer_expired
etimer_reset        SYMBOL "etimer_reset"
??etimer_reset?relay SYMBOL "?relay", etimer_reset
etimer_restart      SYMBOL "etimer_restart"
??etimer_restart?relay SYMBOL "?relay", etimer_restart
etimer_set          SYMBOL "etimer_set"
??etimer_set?relay  SYMBOL "?relay", etimer_set
etimer_stop         SYMBOL "etimer_stop"
??etimer_stop?relay SYMBOL "?relay", etimer_stop
list_add            SYMBOL "list_add"
??list_add?relay    SYMBOL "?relay", list_add
list_head           SYMBOL "list_head"
??list_head?relay   SYMBOL "?relay", list_head
list_init           SYMBOL "list_init"
??list_init?relay   SYMBOL "?relay", list_init
list_remove         SYMBOL "list_remove"
??list_remove?relay SYMBOL "?relay", list_remove
process_start       SYMBOL "process_start"
??process_start?relay SYMBOL "?relay", process_start
ctimer_expired      SYMBOL "ctimer_expired"
??ctimer_expired?relay SYMBOL "?relay", ctimer_expired
ctimer_init         SYMBOL "ctimer_init"
??ctimer_init?relay SYMBOL "?relay", ctimer_init
ctimer_reset        SYMBOL "ctimer_reset"
??ctimer_reset?relay SYMBOL "?relay", ctimer_reset
ctimer_restart      SYMBOL "ctimer_restart"
??ctimer_restart?relay SYMBOL "?relay", ctimer_restart
ctimer_set          SYMBOL "ctimer_set"
??ctimer_set?relay  SYMBOL "?relay", ctimer_set
ctimer_stop         SYMBOL "ctimer_stop"
??ctimer_stop?relay SYMBOL "?relay", ctimer_stop

        EXTERN ??etimer_expired?relay
        FUNCTION ??etimer_expired?relay,00H
        EXTERN ??etimer_reset?relay
        FUNCTION ??etimer_reset?relay,00H
        EXTERN ??etimer_restart?relay
        FUNCTION ??etimer_restart?relay,00H
        EXTERN ??etimer_set?relay
        FUNCTION ??etimer_set?relay,00H
        EXTERN ??etimer_stop?relay
        FUNCTION ??etimer_stop?relay,00H
        EXTERN ??list_add?relay
        FUNCTION ??list_add?relay,00H
        EXTERN ??list_head?relay
        FUNCTION ??list_head?relay,00H
        EXTERN ??list_init?relay
        FUNCTION ??list_init?relay,00H
        EXTERN ??list_remove?relay
        FUNCTION ??list_remove?relay,00H
        EXTERN ??process_start?relay
        FUNCTION ??process_start?relay,00H
        EXTERN etimer_expired
        FUNCTION etimer_expired,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN etimer_reset
        FUNCTION etimer_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN etimer_restart
        FUNCTION etimer_restart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN etimer_set
        FUNCTION etimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN etimer_stop
        FUNCTION etimer_stop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_add
        FUNCTION list_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_head
        FUNCTION list_head,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_init
        FUNCTION list_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_remove
        FUNCTION list_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN process_current
        EXTERN process_start
        FUNCTION process_start,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\myWork\myWork\core\sys\ctimer.c
//    1 /**
//    2  * \addtogroup ctimer
//    3  * @{
//    4  */
//    5 
//    6 /*
//    7  * Copyright (c) 2006, Swedish Institute of Computer Science.
//    8  * All rights reserved.
//    9  *
//   10  * Redistribution and use in source and binary forms, with or without
//   11  * modification, are permitted provided that the following conditions
//   12  * are met:
//   13  * 1. Redistributions of source code must retain the above copyright
//   14  *    notice, this list of conditions and the following disclaimer.
//   15  * 2. Redistributions in binary form must reproduce the above copyright
//   16  *    notice, this list of conditions and the following disclaimer in the
//   17  *    documentation and/or other materials provided with the distribution.
//   18  * 3. Neither the name of the Institute nor the names of its contributors
//   19  *    may be used to endorse or promote products derived from this software
//   20  *    without specific prior written permission.
//   21  *
//   22  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   23  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   24  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   25  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   26  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   27  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   28  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   29  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   30  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   31  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   32  * SUCH DAMAGE.
//   33  *
//   34  * This file is part of the Contiki operating system.
//   35  *
//   36  */
//   37 
//   38 /**
//   39  * \file
//   40  *         Callback timer implementation
//   41  * \author
//   42  *         Adam Dunkels <adam@sics.se>
//   43  */
//   44 
//   45 #include "sys/ctimer.h"
//   46 #include "contiki.h"
//   47 #include "lib/list.h"
//   48 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   49 LIST(ctimer_list);
ctimer_list:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ctimer_list>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static void *__xdata ctimer_list_list
ctimer_list_list:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   50 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 static char initialized;
initialized:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   52 
//   53 #define DEBUG 0
//   54 #if DEBUG
//   55 #include <stdio.h>
//   56 #define PRINTF(...) printf(__VA_ARGS__)
//   57 #else
//   58 #define PRINTF(...)
//   59 #endif
//   60 
//   61 /*---------------------------------------------------------------------------*/

        RSEG XDATA_I:XDATA:NOROOT(0)
//   62 PROCESS(ctimer_process, "Ctimer process");
ctimer_process:
        DATA8
        DS 8
        REQUIRE `?<Initializer for ctimer_process>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 PROCESS_THREAD(ctimer_process, ev, data)
process_thread_ctimer_process:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function process_thread_ctimer_process
        CODE
//   64 {
        FUNCALL process_thread_ctimer_process, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL process_thread_ctimer_process, etimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL process_thread_ctimer_process, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL process_thread_ctimer_process, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//   65   struct ctimer *c;
//   66   PROCESS_BEGIN();
        MOV     R2,#0x1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for process_thread_ctimer_process>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_ctimer_process_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        74
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_ctimer_process_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_ctimer_process_2
        CODE
//   67 
//   68   for(c = list_head(ctimer_list); c != NULL; c = c->next) {
??process_thread_ctimer_process_0:
        ; Setup parameters for call to function list_head
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        SJMP    ??process_thread_ctimer_process_3
//   69     etimer_set(&c->etimer, c->etimer.timer.interval);
??process_thread_ctimer_process_4:
        ; Setup parameters for call to function etimer_set
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_set?relay
//   70   }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??process_thread_ctimer_process_3:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??process_thread_ctimer_process_4
//   71   initialized = 1;
        MOV     DPTR,#initialized
        MOV     A,#0x1
        MOVX    @DPTR,A
//   72 
//   73   while(1) {
//   74     PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_TIMER);
??process_thread_ctimer_process_5:
        MOV     R2,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,#0x4a
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
??process_thread_ctimer_process_1:
        MOV     A,R2
        JZ      ??process_thread_ctimer_process_6
        MOV     A,#-0x78
        XRL     A,?V0 + 4
        JZ      ??process_thread_ctimer_process_7
??process_thread_ctimer_process_6:
        MOV     R1,#0x1
        LJMP    ??process_thread_ctimer_process_8 & 0xFFFF
//   75     for(c = list_head(ctimer_list); c != NULL; c = c->next) {
??process_thread_ctimer_process_7:
        ; Setup parameters for call to function list_head
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        SJMP    ??process_thread_ctimer_process_9
??process_thread_ctimer_process_10:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??process_thread_ctimer_process_9:
        MOV     A,R6
        ORL     A,R7
        JZ      ??process_thread_ctimer_process_5
//   76       if(&c->etimer == data) {
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,?V0 + 6
        XRL     A,R0
        JNZ     ??process_thread_ctimer_process_11
        MOV     A,?V0 + 7
        XRL     A,R1
??process_thread_ctimer_process_11:
        JNZ     ??process_thread_ctimer_process_10
//   77 	list_remove(ctimer_list, c);
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//   78 	PROCESS_CONTEXT_BEGIN(c->p);
        MOV     DPTR,#process_current
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#process_current
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   79 	if(c->f != NULL) {
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??process_thread_ctimer_process_12
//   80 	  c->f(c->ptr);
        ; Setup parameters for indirect call
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//   81 	}
//   82 	PROCESS_CONTEXT_END(c->p);
??process_thread_ctimer_process_12:
        MOV     DPTR,#process_current
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//   83 	break;
        LJMP    ??process_thread_ctimer_process_5 & 0xFFFF
//   84       }
//   85     }
//   86   }
//   87   PROCESS_END();
??process_thread_ctimer_process_2:
        MOV     R2,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,#0x3
??process_thread_ctimer_process_8:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   88 }
//   89 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   90 void
//   91 ctimer_init(void)
ctimer_init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ctimer_init
        CODE
//   92 {
        FUNCALL ctimer_init, list_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_init, process_start
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   93   initialized = 0;
        MOV     DPTR,#initialized
        MOV     A,#0x0
        MOVX    @DPTR,A
//   94   list_init(ctimer_list);
        ; Setup parameters for call to function list_init
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_init?relay
//   95   process_start(&ctimer_process, NULL);
        ; Setup parameters for call to function process_start
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#ctimer_process & 0xff
        MOV     R3,#(ctimer_process >> 8) & 0xff
        LCALL   ??process_start?relay
//   96 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//   97 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   98 void
//   99 ctimer_set(struct ctimer *c, clock_time_t t,
ctimer_set:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ctimer_set
        CODE
//  100 	   void (*f)(void *), void *ptr)
//  101 {
        FUNCALL ctimer_set, etimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_set, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_set, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  102   PRINTF("ctimer_set %p %u\n", c, (unsigned)t);
//  103   c->p = PROCESS_CURRENT();
        MOV     DPTR,#process_current
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  104   c->f = f;
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  105   c->ptr = ptr;
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  106   if(initialized) {
        MOV     DPTR,#initialized
        MOVX    A,@DPTR
        JZ      ??ctimer_set_0
//  107     PROCESS_CONTEXT_BEGIN(&ctimer_process);
        MOV     DPTR,#process_current
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPTR,#process_current
        MOV     A,#ctimer_process & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ctimer_process >> 8) & 0xff
        MOVX    @DPTR,A
//  108     etimer_set(&c->etimer, t);
        ; Setup parameters for call to function etimer_set
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_set?relay
//  109     PROCESS_CONTEXT_END(&ctimer_process);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPTR,#process_current
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??ctimer_set_1
//  110   } else {
//  111     c->etimer.timer.interval = t;
??ctimer_set_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  112   }
//  113 
//  114   list_remove(ctimer_list, c);
??ctimer_set_1:
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  115   list_add(ctimer_list, c);
        ; Setup parameters for call to function list_add
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  116 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  117 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 void
//  119 ctimer_reset(struct ctimer *c)
ctimer_reset:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ctimer_reset
        CODE
//  120 {
        FUNCALL ctimer_reset, etimer_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_reset, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_reset, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  121   if(initialized) {
        MOV     DPTR,#initialized
        MOVX    A,@DPTR
        JZ      ??ctimer_reset_0
//  122     PROCESS_CONTEXT_BEGIN(&ctimer_process);
        MOV     DPTR,#process_current
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPTR,#process_current
        MOV     A,#ctimer_process & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ctimer_process >> 8) & 0xff
        MOVX    @DPTR,A
//  123     etimer_reset(&c->etimer);
        ; Setup parameters for call to function etimer_reset
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_reset?relay
//  124     PROCESS_CONTEXT_END(&ctimer_process);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPTR,#process_current
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  125   }
//  126 
//  127   list_remove(ctimer_list, c);
??ctimer_reset_0:
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  128   list_add(ctimer_list, c);
        ; Setup parameters for call to function list_add
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  129 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  130 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 void
//  132 ctimer_restart(struct ctimer *c)
ctimer_restart:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ctimer_restart
        CODE
//  133 {
        FUNCALL ctimer_restart, etimer_restart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_restart, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_restart, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  134   if(initialized) {
        MOV     DPTR,#initialized
        MOVX    A,@DPTR
        JZ      ??ctimer_restart_0
//  135     PROCESS_CONTEXT_BEGIN(&ctimer_process);
        MOV     DPTR,#process_current
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPTR,#process_current
        MOV     A,#ctimer_process & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ctimer_process >> 8) & 0xff
        MOVX    @DPTR,A
//  136     etimer_restart(&c->etimer);
        ; Setup parameters for call to function etimer_restart
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_restart?relay
//  137     PROCESS_CONTEXT_END(&ctimer_process);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPTR,#process_current
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  138   }
//  139 
//  140   list_remove(ctimer_list, c);
??ctimer_restart_0:
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  141   list_add(ctimer_list, c);
        ; Setup parameters for call to function list_add
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  142 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  143 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  144 void
//  145 ctimer_stop(struct ctimer *c)
ctimer_stop:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ctimer_stop
        CODE
//  146 {
        FUNCALL ctimer_stop, etimer_stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_stop, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  147   if(initialized) {
        MOV     DPTR,#initialized
        MOVX    A,@DPTR
        JZ      ??ctimer_stop_0
//  148     etimer_stop(&c->etimer);
        ; Setup parameters for call to function etimer_stop
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_stop?relay
        SJMP    ??ctimer_stop_1
//  149   } else {
//  150     c->etimer.next = NULL;
??ctimer_stop_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  151     c->etimer.p = PROCESS_NONE;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  152   }
//  153   list_remove(ctimer_list, c);
??ctimer_stop_1:
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  154 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  155 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 int
//  157 ctimer_expired(struct ctimer *c)
ctimer_expired:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ctimer_expired
        CODE
//  158 {
        FUNCALL ctimer_expired, etimer_expired
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ctimer_expired, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  159   struct ctimer *t;
//  160   if(initialized) {
        MOV     DPTR,#initialized
        MOVX    A,@DPTR
        JZ      ??ctimer_expired_0
//  161     return etimer_expired(&c->etimer);
        ; Setup parameters for call to function etimer_expired
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??etimer_expired?relay
        SJMP    ??ctimer_expired_1
//  162   }
//  163   for(t = list_head(ctimer_list); t != NULL; t = t->next) {
??ctimer_expired_0:
        ; Setup parameters for call to function list_head
        MOV     DPTR,#ctimer_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        SJMP    ??ctimer_expired_2
??ctimer_expired_3:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
??ctimer_expired_2:
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??ctimer_expired_4
//  164     if(t == c) {
        MOV     A,R6
        XRL     A,DPL
        JNZ     ??ctimer_expired_5
        MOV     A,R7
        XRL     A,DPH
??ctimer_expired_5:
        JNZ     ??ctimer_expired_3
//  165       return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ctimer_expired_1
//  166     }
//  167   }
//  168   return 1;
??ctimer_expired_4:
        MOV     R2,#0x1
        MOV     R3,#0x0
??ctimer_expired_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  169 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ctimer_list>`:
        DATA16
        DW ctimer_list_list

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ctimer_process>`:
        DATA16
        DW 0H
        DW ??process_thread_ctimer_process?relay
        DB 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??process_thread_ctimer_process?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    process_thread_ctimer_process

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_set?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_set

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_reset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_reset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_restart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_restart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_stop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ctimer_expired?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ctimer_expired

        END
//  170 /*---------------------------------------------------------------------------*/
//  171 /** @} */
// 
// 931 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  10 bytes in segment XDATA_I
//  10 bytes in segment XDATA_ID
//   3 bytes in segment XDATA_Z
// 
// 983 bytes of CODE  memory
//  13 bytes of XDATA memory
//
//Errors: none
//Warnings: none
