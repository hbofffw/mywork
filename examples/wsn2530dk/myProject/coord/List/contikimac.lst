###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:46 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\net\mac\contikimac.c         #
#    Command line       =  D:\myWork\myWork\core\net\mac\contikimac.c -D      #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\contikimac.lst                              #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\contikimac.r51                               #
#                                                                             #
#                                                                             #
###############################################################################


   \                                 In  segment SFR_AN, at 0xe2
   \   unsigned char volatile __sfr T1CNTL
   \                     T1CNTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe3
   \   unsigned char volatile __sfr T1CNTH
   \                     T1CNTH:
   \   000000                DS 1
D:\myWork\myWork\core\net\mac\contikimac.c
      1          /*
      2           * Copyright (c) 2010, Swedish Institute of Computer Science.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the Contiki operating system.
     30           *
     31           */
     32          
     33          /**
     34           * \file
     35           *         Implementation of the ContikiMAC power-saving radio duty cycling protocol
     36           * \author
     37           *         Adam Dunkels <adam@sics.se>
     38           *         Niclas Finne <nfi@sics.se>
     39           *         Joakim Eriksson <joakime@sics.se>
     40           */
     41          
     42          #include "contiki-conf.h"
     43          #include "dev/leds.h"
     44          #include "dev/radio.h"
     45          #include "dev/watchdog.h"
     46          #include "lib/random.h"
     47          #include "net/mac/contikimac.h"
     48          #include "net/netstack.h"
     49          #include "net/rime.h"
     50          #include "sys/compower.h"
     51          #include "sys/pt.h"
     52          #include "sys/rtimer.h"
     53          
     54          
     55          #include <string.h>
     56          
     57          /* TX/RX cycles are synchronized with neighbor wake periods */
     58          #ifdef CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION
     59          #define WITH_PHASE_OPTIMIZATION      CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION
     60          #else /* CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION */
     61          #define WITH_PHASE_OPTIMIZATION      1
     62          #endif /* CONTIKIMAC_CONF_WITH_PHASE_OPTIMIZATION */
     63          /* Two byte header added to allow recovery of padded short packets */
     64          /* Wireshark will not understand such packets at present */
     65          #ifdef CONTIKIMAC_CONF_WITH_CONTIKIMAC_HEADER
     66          #define WITH_CONTIKIMAC_HEADER       CONTIKIMAC_CONF_WITH_CONTIKIMAC_HEADER
     67          #else
     68          #define WITH_CONTIKIMAC_HEADER       1
     69          #endif
     70          /* More aggressive radio sleeping when channel is busy with other traffic */
     71          #ifndef WITH_FAST_SLEEP
     72          #define WITH_FAST_SLEEP              1
     73          #endif
     74          /* Radio does CSMA and autobackoff */
     75          #ifndef RDC_CONF_HARDWARE_CSMA
     76          #define RDC_CONF_HARDWARE_CSMA       0
     77          #endif
     78          /* Radio returns TX_OK/TX_NOACK after autoack wait */
     79          #ifndef RDC_CONF_HARDWARE_ACK
     80          #define RDC_CONF_HARDWARE_ACK        0
     81          #endif
     82          /* MCU can sleep during radio off */
     83          #ifndef RDC_CONF_MCU_SLEEP
     84          #define RDC_CONF_MCU_SLEEP           0
     85          #endif
     86          
     87          #if NETSTACK_RDC_CHANNEL_CHECK_RATE >= 64
     88          #undef WITH_PHASE_OPTIMIZATION
     89          #define WITH_PHASE_OPTIMIZATION 0
     90          #endif
     91          
     92          #if WITH_CONTIKIMAC_HEADER
     93          #define CONTIKIMAC_ID 0x00
     94          
     95          struct hdr {
     96              uint8_t id;
     97              uint8_t len;
     98          };
     99          #endif /* WITH_CONTIKIMAC_HEADER */
    100          
    101          /* CYCLE_TIME for channel cca checks, in rtimer ticks. */
    102          #ifdef CONTIKIMAC_CONF_CYCLE_TIME
    103          #define CYCLE_TIME (CONTIKIMAC_CONF_CYCLE_TIME)
    104          #else
    105          #define CYCLE_TIME (RTIMER_ARCH_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE)
    106          #endif
    107          
    108          /* CHANNEL_CHECK_RATE is enforced to be a power of two.
    109           * If RTIMER_ARCH_SECOND is not also a power of two, there will be an inexact
    110           * number of channel checks per second due to the truncation of CYCLE_TIME.
    111           * This will degrade the effectiveness of phase optimization with neighbors that
    112           * do not have the same truncation error.
    113           * Define SYNC_CYCLE_STARTS to ensure an integral number of checks per second.
    114           */
    115          #if RTIMER_ARCH_SECOND & (RTIMER_ARCH_SECOND - 1)
    116          #define SYNC_CYCLE_STARTS                    1
    117          #endif
    118          
    119          /* Are we currently receiving a burst? */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          static int we_are_receiving_burst = 0;
   \                     we_are_receiving_burst:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    121          
    122          /* INTER_PACKET_DEADLINE is the maximum time a receiver waits for the
    123             next packet of a burst when FRAME_PENDING is set. */
    124          #define INTER_PACKET_DEADLINE               CLOCK_SECOND / 32
    125          
    126          /* ContikiMAC performs periodic channel checks. Each channel check
    127             consists of two or more CCA checks. CCA_COUNT_MAX is the number of
    128             CCAs to be done for each periodic channel check. The default is
    129             two.*/
    130          #ifdef CONTIKIMAC_CONF_CCA_COUNT_MAX
    131          #define CCA_COUNT_MAX                      (CONTIKIMAC_CONF_CCA_COUNT_MAX)
    132          #else
    133          #define CCA_COUNT_MAX                      2
    134          #endif
    135          
    136          /* Before starting a transmission, Contikimac checks the availability
    137             of the channel with CCA_COUNT_MAX_TX consecutive CCAs */
    138          #ifdef CONTIKIMAC_CONF_CCA_COUNT_MAX_TX
    139          #define CCA_COUNT_MAX_TX                   (CONTIKIMAC_CONF_CCA_COUNT_MAX_TX)
    140          #else
    141          #define CCA_COUNT_MAX_TX                   6
    142          #endif
    143          
    144          /* CCA_CHECK_TIME is the time it takes to perform a CCA check. */
    145          /* Note this may be zero. AVRs have 7612 ticks/sec, but block until cca is done */
    146          #ifdef CONTIKIMAC_CONF_CCA_CHECK_TIME
    147          #define CCA_CHECK_TIME                     (CONTIKIMAC_CONF_CCA_CHECK_TIME)
    148          #else
    149          #define CCA_CHECK_TIME                     RTIMER_ARCH_SECOND / 8192
    150          #endif
    151          
    152          /* CCA_SLEEP_TIME is the time between two successive CCA checks. */
    153          /* Add 1 when rtimer ticks are coarse */
    154          #if RTIMER_ARCH_SECOND > 8000
    155          #define CCA_SLEEP_TIME                     RTIMER_ARCH_SECOND / 2000
    156          #else
    157          #define CCA_SLEEP_TIME                     (RTIMER_ARCH_SECOND / 2000) + 1
    158          #endif
    159          
    160          /* CHECK_TIME is the total time it takes to perform CCA_COUNT_MAX
    161             CCAs. */
    162          #define CHECK_TIME                         (CCA_COUNT_MAX * (CCA_CHECK_TIME + CCA_SLEEP_TIME))
    163          
    164          /* CHECK_TIME_TX is the total time it takes to perform CCA_COUNT_MAX_TX
    165             CCAs. */
    166          #define CHECK_TIME_TX                      (CCA_COUNT_MAX_TX * (CCA_CHECK_TIME + CCA_SLEEP_TIME))
    167          
    168          /* LISTEN_TIME_AFTER_PACKET_DETECTED is the time that we keep checking
    169             for activity after a potential packet has been detected by a CCA
    170             check. */
    171          #define LISTEN_TIME_AFTER_PACKET_DETECTED  RTIMER_ARCH_SECOND / 80
    172          
    173          /* MAX_SILENCE_PERIODS is the maximum amount of periods (a period is
    174             CCA_CHECK_TIME + CCA_SLEEP_TIME) that we allow to be silent before
    175             we turn of the radio. */
    176          #define MAX_SILENCE_PERIODS                5
    177          
    178          /* MAX_NONACTIVITY_PERIODS is the maximum number of periods we allow
    179             the radio to be turned on without any packet being received, when
    180             WITH_FAST_SLEEP is enabled. */
    181          #define MAX_NONACTIVITY_PERIODS            10
    182          
    183          
    184          
    185          /* STROBE_TIME is the maximum amount of time a transmitted packet
    186             should be repeatedly transmitted as part of a transmission. */
    187          #define STROBE_TIME                        (CYCLE_TIME + 2 * CHECK_TIME)
    188          
    189          /* GUARD_TIME is the time before the expected phase of a neighbor that
    190             a transmitted should begin transmitting packets. */
    191          #define GUARD_TIME                         10 * CHECK_TIME + CHECK_TIME_TX
    192          
    193          /* INTER_PACKET_INTERVAL is the interval between two successive packet transmissions */
    194          #ifdef CONTIKIMAC_CONF_INTER_PACKET_INTERVAL
    195          #define INTER_PACKET_INTERVAL              CONTIKIMAC_CONF_INTER_PACKET_INTERVAL
    196          #else
    197          #define INTER_PACKET_INTERVAL              RTIMER_ARCH_SECOND / 2500
    198          #endif
    199          
    200          /* AFTER_ACK_DETECTECT_WAIT_TIME is the time to wait after a potential
    201             ACK packet has been detected until we can read it out from the
    202             radio. */
    203          #ifdef CONTIKIMAC_CONF_AFTER_ACK_DETECTECT_WAIT_TIME
    204          #define AFTER_ACK_DETECTECT_WAIT_TIME      CONTIKIMAC_CONF_AFTER_ACK_DETECTECT_WAIT_TIME
    205          #else
    206          #define AFTER_ACK_DETECTECT_WAIT_TIME      RTIMER_ARCH_SECOND / 1500
    207          #endif
    208          
    209          /* MAX_PHASE_STROBE_TIME is the time that we transmit repeated packets
    210             to a neighbor for which we have a phase lock. */
    211          #define MAX_PHASE_STROBE_TIME              RTIMER_ARCH_SECOND / 60
    212          
    213          
    214          /* SHORTEST_PACKET_SIZE is the shortest packet that ContikiMAC
    215             allows. Packets have to be a certain size to be able to be detected
    216             by two consecutive CCA checks, and here is where we define this
    217             shortest size.
    218             Padded packets will have the wrong ipv6 checksum unless CONTIKIMAC_HEADER
    219             is used (on both sides) and the receiver will ignore them.
    220             With no header, reduce to transmit a proper multicast RPL DIS. */
    221          #ifdef CONTIKIMAC_CONF_SHORTEST_PACKET_SIZE
    222          #define SHORTEST_PACKET_SIZE  CONTIKIMAC_CONF_SHORTEST_PACKET_SIZE
    223          #else
    224          #define SHORTEST_PACKET_SIZE               43
    225          #endif
    226          
    227          
    228          #define ACK_LEN 3
    229          
    230          #include <stdio.h>

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          static struct rtimer rt;
   \                     rt:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232          static struct pt pt;
   \                     pt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    233          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    234          static volatile uint8_t contikimac_is_on = 0;
   \                     contikimac_is_on:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    235          static volatile uint8_t contikimac_keep_radio_on = 0;
   \                     contikimac_keep_radio_on:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    236          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          static volatile unsigned char we_are_sending = 0;
   \                     we_are_sending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    238          static volatile unsigned char radio_is_on = 0;
   \                     radio_is_on:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    239          
    240          #define DEBUG 0
    241          #if DEBUG
    242          #include <stdio.h>
    243          #define PRINTF(...) printf(__VA_ARGS__)
    244          #define PRINTDEBUG(...) printf(__VA_ARGS__)
    245          #else
    246          #define PRINTF(...)
    247          #define PRINTDEBUG(...)
    248          #endif
    249          
    250          #if CONTIKIMAC_CONF_COMPOWER
    251          static struct compower_activity current_packet;
    252          #endif /* CONTIKIMAC_CONF_COMPOWER */
    253          
    254          #if WITH_PHASE_OPTIMIZATION
    255          
    256          #include "net/mac/phase.h"
    257          
    258          #endif /* WITH_PHASE_OPTIMIZATION */
    259          
    260          #define DEFAULT_STREAM_TIME (4 * CYCLE_TIME)
    261          
    262          #ifndef MIN
    263          #define MIN(a, b) ((a) < (b)? (a) : (b))
    264          #endif /* MIN */
    265          
    266          struct seqno {
    267              rimeaddr_t sender;
    268              uint8_t seqno;
    269          };
    270          
    271          #ifdef NETSTACK_CONF_MAC_SEQNO_HISTORY
    272          #define MAX_SEQNOS NETSTACK_CONF_MAC_SEQNO_HISTORY
    273          #else /* NETSTACK_CONF_MAC_SEQNO_HISTORY */
    274          #define MAX_SEQNOS 16
    275          #endif /* NETSTACK_CONF_MAC_SEQNO_HISTORY */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    276          static struct seqno received_seqnos[MAX_SEQNOS];
   \                     received_seqnos:
   \   000000                DS 48
   \   000030                REQUIRE __INIT_XDATA_Z
    277          
    278          #if CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT
    279          static struct timer broadcast_rate_timer;
    280          static int broadcast_rate_counter;
    281          #endif /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
    282          
    283          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284              static void
    285          on(void)
   \                     on:
    286          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    287              if(contikimac_is_on && radio_is_on == 0) {
   \   000004   90....       MOV     DPTR,#contikimac_is_on
   \   000007   E0           MOVX    A,@DPTR
   \   000008   601A         JZ      ??on_0
   \   00000A   90....       MOV     DPTR,#radio_is_on
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7014         JNZ     ??on_0
    288                  radio_is_on = 1;
   \   000010   90....       MOV     DPTR,#radio_is_on
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    289                  NETSTACK_RADIO.on();
   \   000016                ; Setup parameters for indirect call
   \   000016   90....       MOV     DPTR,#cc2530_rf_driver + 16
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F583         MOV     DPH,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   12....       LCALL   ?CALL_IND
    290              }
    291          }
   \                     ??on_0:
   \   000024   D083         POP     DPH
   \   000026   D082         POP     DPL
   \   000028   02....       LJMP    ?BRET
    292          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293              static void
    294          off(void)
   \                     off:
    295          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    296              if(contikimac_is_on && radio_is_on != 0 &&
    297                      contikimac_keep_radio_on == 0) {
   \   000004   90....       MOV     DPTR,#contikimac_is_on
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6020         JZ      ??off_0
   \   00000A   90....       MOV     DPTR,#radio_is_on
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   601A         JZ      ??off_0
   \   000010   90....       MOV     DPTR,#contikimac_keep_radio_on
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7014         JNZ     ??off_0
    298                  radio_is_on = 0;
   \   000016   90....       MOV     DPTR,#radio_is_on
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
    299                  NETSTACK_RADIO.off();
   \   00001C                ; Setup parameters for indirect call
   \   00001C   90....       MOV     DPTR,#cc2530_rf_driver + 18
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   12....       LCALL   ?CALL_IND
    300              }
    301          }
   \                     ??off_0:
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   02....       LJMP    ?BRET
    302          /*---------------------------------------------------------------------------*/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    303          static volatile rtimer_clock_t cycle_start;
   \                     cycle_start:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    304          static char powercycle(struct rtimer *t, void *ptr);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305              static void
    306          schedule_powercycle(struct rtimer *t, rtimer_clock_t time)
   \                     schedule_powercycle:
    307          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    308              int r;
    309          
    310              if(contikimac_is_on) {
   \   000005   90....       MOV     DPTR,#contikimac_is_on
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7003         JNZ     $+5
   \   00000B   02....       LJMP    ??schedule_powercycle_0 & 0xFFFF
    311          
    312                  if(RTIMER_CLOCK_LT(RTIMER_TIME(t) + time, RTIMER_NOW() + 2)) {
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   2C           ADD     A,R4
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   3D           ADDC    A,R5
   \   000018   F9           MOV     R1,A
   \   000019   E5E2         MOV     A,0xe2
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   75..00       MOV     ?V0 + 1,#0x0
   \   000020   E5E3         MOV     A,0xe3
   \   000022   FE           MOV     R6,A
   \   000023   7F00         MOV     R7,#0x0
   \   000025   E4           CLR     A
   \   000026   CE           XCH     A,R6
   \   000027   FF           MOV     R7,A
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   2E           ADD     A,R6
   \   00002B   FE           MOV     R6,A
   \   00002C   E5..         MOV     A,?V0 + 1
   \   00002E   3F           ADDC    A,R7
   \   00002F   FF           MOV     R7,A
   \   000030   EE           MOV     A,R6
   \   000031   2402         ADD     A,#0x2
   \   000033   FE           MOV     R6,A
   \   000034   EF           MOV     A,R7
   \   000035   3400         ADDC    A,#0x0
   \   000037   FF           MOV     R7,A
   \   000038   E8           MOV     A,R0
   \   000039   C3           CLR     C
   \   00003A   9E           SUBB    A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   E9           MOV     A,R1
   \   00003D   9F           SUBB    A,R7
   \   00003E   F9           MOV     R1,A
   \   00003F   C3           CLR     C
   \   000040   E8           MOV     A,R0
   \   000041   9400         SUBB    A,#0x0
   \   000043   E9           MOV     A,R1
   \   000044   9400         SUBB    A,#0x0
   \   000046   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000048   65D0         XRL     A,PSW
   \   00004A   33           RLC     A
   \   00004B   502B         JNC     ??schedule_powercycle_1
    313                      time = RTIMER_NOW() - RTIMER_TIME(t) + 2;
   \   00004D   E5E2         MOV     A,0xe2
   \   00004F   FC           MOV     R4,A
   \   000050   7D00         MOV     R5,#0x0
   \   000052   E5E3         MOV     A,0xe3
   \   000054   F8           MOV     R0,A
   \   000055   7900         MOV     R1,#0x0
   \   000057   E4           CLR     A
   \   000058   C8           XCH     A,R0
   \   000059   F9           MOV     R1,A
   \   00005A   EC           MOV     A,R4
   \   00005B   28           ADD     A,R0
   \   00005C   FC           MOV     R4,A
   \   00005D   ED           MOV     A,R5
   \   00005E   39           ADDC    A,R1
   \   00005F   FD           MOV     R5,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   EC           MOV     A,R4
   \   00006A   C3           CLR     C
   \   00006B   98           SUBB    A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   ED           MOV     A,R5
   \   00006E   99           SUBB    A,R1
   \   00006F   F9           MOV     R1,A
   \   000070   E8           MOV     A,R0
   \   000071   2402         ADD     A,#0x2
   \   000073   FC           MOV     R4,A
   \   000074   E9           MOV     A,R1
   \   000075   3400         ADDC    A,#0x0
   \   000077   FD           MOV     R5,A
    314                  }
    315          
    316                  r = rtimer_set(t, RTIMER_TIME(t) + time, 1,
    317                          (void (*)(struct rtimer *, void *))powercycle, NULL);
   \                     ??schedule_powercycle_1:
   \   000078                ; Setup parameters for call to function rtimer_set
   \   000078   E4           CLR     A
   \   000079   F5..         MOV     ?V0 + 0,A
   \   00007B   F5..         MOV     ?V0 + 1,A
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75....       MOV     ?V0 + 0,#??powercycle?relay & 0xff
   \   000085   75....       MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   75..01       MOV     ?V0 + 0,#0x1
   \   000090   75..00       MOV     ?V0 + 1,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   8A82         MOV     DPL,R2
   \   00009A   8B83         MOV     DPH,R3
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2C           ADD     A,R4
   \   00009E   FC           MOV     R4,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   3D           ADDC    A,R5
   \   0000A2   FD           MOV     R5,A
   \   0000A3   12....       LCALL   ??rtimer_set?relay
   \   0000A6   7406         MOV     A,#0x6
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   8A..         MOV     ?V0 + 0,R2
   \   0000AD   8B..         MOV     ?V0 + 1,R3
   \   0000AF   A8..         MOV     R0,?V0 + 0
   \   0000B1   A9..         MOV     R1,?V0 + 1
    318                  if(r != RTIMER_OK) {
    319                      PRINTF("schedule_powercycle: could not set rtimer\n");
    320                  }
    321              }
    322          }
   \                     ??schedule_powercycle_0:
   \   0000B3   7F02         MOV     R7,#0x2
   \   0000B5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000B8                REQUIRE T1CNTL
   \   0000B8                REQUIRE T1CNTH
    323          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324              static void
    325          schedule_powercycle_fixed(struct rtimer *t, rtimer_clock_t fixed_time)
   \                     schedule_powercycle_fixed:
    326          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    327              int r;
    328          
    329              if(contikimac_is_on) {
   \   000005   90....       MOV     DPTR,#contikimac_is_on
   \   000008   E0           MOVX    A,@DPTR
   \   000009   607B         JZ      ??schedule_powercycle_fixed_0
    330          
    331                  if(RTIMER_CLOCK_LT(fixed_time, RTIMER_NOW() + 1)) {
   \   00000B   E5E2         MOV     A,0xe2
   \   00000D   FE           MOV     R6,A
   \   00000E   7F00         MOV     R7,#0x0
   \   000010   E5E3         MOV     A,0xe3
   \   000012   F8           MOV     R0,A
   \   000013   7900         MOV     R1,#0x0
   \   000015   E4           CLR     A
   \   000016   C8           XCH     A,R0
   \   000017   F9           MOV     R1,A
   \   000018   EE           MOV     A,R6
   \   000019   28           ADD     A,R0
   \   00001A   F8           MOV     R0,A
   \   00001B   EF           MOV     A,R7
   \   00001C   39           ADDC    A,R1
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   2401         ADD     A,#0x1
   \   000021   F8           MOV     R0,A
   \   000022   E9           MOV     A,R1
   \   000023   3400         ADDC    A,#0x0
   \   000025   F9           MOV     R1,A
   \   000026   EC           MOV     A,R4
   \   000027   C3           CLR     C
   \   000028   98           SUBB    A,R0
   \   000029   F8           MOV     R0,A
   \   00002A   ED           MOV     A,R5
   \   00002B   99           SUBB    A,R1
   \   00002C   F9           MOV     R1,A
   \   00002D   C3           CLR     C
   \   00002E   E8           MOV     A,R0
   \   00002F   9400         SUBB    A,#0x0
   \   000031   E9           MOV     A,R1
   \   000032   9400         SUBB    A,#0x0
   \   000034   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000036   65D0         XRL     A,PSW
   \   000038   33           RLC     A
   \   000039   501B         JNC     ??schedule_powercycle_fixed_1
    332                      fixed_time = RTIMER_NOW() + 1;
   \   00003B   E5E2         MOV     A,0xe2
   \   00003D   FC           MOV     R4,A
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   E5E3         MOV     A,0xe3
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   E4           CLR     A
   \   000046   C8           XCH     A,R0
   \   000047   F9           MOV     R1,A
   \   000048   EC           MOV     A,R4
   \   000049   28           ADD     A,R0
   \   00004A   F8           MOV     R0,A
   \   00004B   ED           MOV     A,R5
   \   00004C   39           ADDC    A,R1
   \   00004D   F9           MOV     R1,A
   \   00004E   E8           MOV     A,R0
   \   00004F   2401         ADD     A,#0x1
   \   000051   FC           MOV     R4,A
   \   000052   E9           MOV     A,R1
   \   000053   3400         ADDC    A,#0x0
   \   000055   FD           MOV     R5,A
    333                  }
    334          
    335                  r = rtimer_set(t, fixed_time, 1,
    336                          (void (*)(struct rtimer *, void *))powercycle, NULL);
   \                     ??schedule_powercycle_fixed_1:
   \   000056                ; Setup parameters for call to function rtimer_set
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   F5..         MOV     ?V0 + 1,A
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75....       MOV     ?V0 + 0,#??powercycle?relay & 0xff
   \   000063   75....       MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..01       MOV     ?V0 + 0,#0x1
   \   00006E   75..00       MOV     ?V0 + 1,#0x0
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   12....       LCALL   ??rtimer_set?relay
   \   000079   7406         MOV     A,#0x6
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   8A..         MOV     ?V0 + 0,R2
   \   000080   8B..         MOV     ?V0 + 1,R3
   \   000082   A8..         MOV     R0,?V0 + 0
   \   000084   A9..         MOV     R1,?V0 + 1
    337                  if(r != RTIMER_OK) {
    338                      PRINTF("schedule_powercycle: could not set rtimer\n");
    339                  }
    340              }
    341          }
   \                     ??schedule_powercycle_fixed_0:
   \   000086   7F02         MOV     R7,#0x2
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00008B                REQUIRE T1CNTL
   \   00008B                REQUIRE T1CNTH
    342          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343              static void
    344          powercycle_turn_radio_off(void)
   \                     powercycle_turn_radio_off:
    345          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    346          #if CONTIKIMAC_CONF_COMPOWER
    347              uint8_t was_on = radio_is_on;
    348          #endif /* CONTIKIMAC_CONF_COMPOWER */
    349          
    350              if(we_are_sending == 0 && we_are_receiving_burst == 0) {
   \   000004   90....       MOV     DPTR,#we_are_sending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700F         JNZ     ??powercycle_turn_radio_off_0
   \   00000A   90....       MOV     DPTR,#we_are_receiving_burst
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   7003         JNZ     ??powercycle_turn_radio_off_0
    351                  off();
   \   000016                ; Setup parameters for call to function off
   \   000016   12....       LCALL   ??off?relay
    352          #if CONTIKIMAC_CONF_COMPOWER
    353                  if(was_on && !radio_is_on) {
    354                      compower_accumulate(&compower_idle_activity);
    355                  }
    356          #endif /* CONTIKIMAC_CONF_COMPOWER */
    357              }
    358          }
   \                     ??powercycle_turn_radio_off_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    359          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360              static void
    361          powercycle_turn_radio_on(void)
   \                     powercycle_turn_radio_on:
    362          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    363              if(we_are_sending == 0 && we_are_receiving_burst == 0) {
   \   000004   90....       MOV     DPTR,#we_are_sending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700F         JNZ     ??powercycle_turn_radio_on_0
   \   00000A   90....       MOV     DPTR,#we_are_receiving_burst
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   7003         JNZ     ??powercycle_turn_radio_on_0
    364                  on();
   \   000016                ; Setup parameters for call to function on
   \   000016   12....       LCALL   ??on?relay
    365              }
    366          }
   \                     ??powercycle_turn_radio_on_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    367          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368              static char
    369          powercycle(struct rtimer *t, void *ptr)
   \                     powercycle:
    370          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    371          #if SYNC_CYCLE_STARTS
    372              static volatile rtimer_clock_t sync_cycle_start;
    373              static volatile uint8_t sync_cycle_phase;
    374          #endif
    375          
    376              PT_BEGIN(&pt);
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   90....       MOV     DPTR,#pt
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 1,A
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for powercycle>_0`:
   \   00001A   0000         DW        0
   \   00001C   0400         DW        4
   \   00001E   0000         DW        0
   \   000020   ....         DW        ??powercycle_0
   \   000022   AA01         DW        426
   \   000024   ....         DW        ??powercycle_1
   \   000026   DC01         DW        476
   \   000028   ....         DW        ??powercycle_2
   \   00002A   F801         DW        504
   \   00002C   ....         DW        ??powercycle_3
   \   00002E   ....         DW        ??powercycle_4
    377          
    378          #if SYNC_CYCLE_STARTS
    379              sync_cycle_start = RTIMER_NOW();
   \                     ??powercycle_0:
   \   000030   E5E2         MOV     A,0xe2
   \   000032   FA           MOV     R2,A
   \   000033   7B00         MOV     R3,#0x0
   \   000035   E5E3         MOV     A,0xe3
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E4           CLR     A
   \   00003B   C8           XCH     A,R0
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   28           ADD     A,R0
   \   00003F   F8           MOV     R0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F9           MOV     R1,A
   \   000043   90....       MOV     DPTR,#??sync_cycle_start
   \   000046   E8           MOV     A,R0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E9           MOV     A,R1
   \   00004A   F0           MOVX    @DPTR,A
    380          #else
    381              cycle_start = RTIMER_NOW();
    382          #endif
    383          
    384              while(1) {
    385                  static uint8_t packet_seen;
    386                  static rtimer_clock_t t0;
    387                  static uint8_t count;
    388          
    389          #if SYNC_CYCLE_STARTS
    390                  /* Compute cycle start when RTIMER_ARCH_SECOND is not a multiple
    391                     of CHANNEL_CHECK_RATE */
    392                  if(sync_cycle_phase++ == NETSTACK_RDC_CHANNEL_CHECK_RATE) {
   \                     ??powercycle_5:
   \   00004B   90....       MOV     DPTR,#??sync_cycle_phase
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   7401         MOV     A,#0x1
   \   000052   28           ADD     A,R0
   \   000053   90....       MOV     DPTR,#??sync_cycle_phase
   \   000056   F0           MOVX    @DPTR,A
   \   000057   7408         MOV     A,#0x8
   \   000059   68           XRL     A,R0
   \   00005A   7024         JNZ     ??powercycle_6
    393                      sync_cycle_phase = 0;
   \   00005C   90....       MOV     DPTR,#??sync_cycle_phase
   \   00005F   7400         MOV     A,#0x0
   \   000061   F0           MOVX    @DPTR,A
    394                      sync_cycle_start += RTIMER_ARCH_SECOND;
   \   000062   90....       MOV     DPTR,#??sync_cycle_start
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2409         ADD     A,#0x9
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   343D         ADDC    A,#0x3d
   \   00006D   F0           MOVX    @DPTR,A
    395                      cycle_start = sync_cycle_start;
   \   00006E   90....       MOV     DPTR,#??sync_cycle_start
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   90....       MOV     DPTR,#cycle_start
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   8045         SJMP    ??powercycle_7
    396                  } else {
    397          #if (RTIMER_ARCH_SECOND * NETSTACK_RDC_CHANNEL_CHECK_RATE) > 65535
    398                      cycle_start = sync_cycle_start + ((unsigned long)(sync_cycle_phase*RTIMER_ARCH_SECOND))/NETSTACK_RDC_CHANNEL_CHECK_RATE;
   \                     ??powercycle_6:
   \   000080   90....       MOV     DPTR,#??sync_cycle_start
   \   000083   C082         PUSH    DPL
   \   000085   C083         PUSH    DPH
   \   000087   90....       MOV     DPTR,#??sync_cycle_phase
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F5..         MOV     ?V0 + 0,A
   \   00008D   75..00       MOV     ?V0 + 1,#0x0
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   75F009       MOV     B,#0x9
   \   000095   A4           MUL     AB
   \   000096   C5..         XCH     A,?V0 + 0
   \   000098   A8F0         MOV     R0,B
   \   00009A   75F03D       MOV     B,#0x3d
   \   00009D   A4           MUL     AB
   \   00009E   28           ADD     A,R0
   \   00009F   F8           MOV     R0,A
   \   0000A0   75F009       MOV     B,#0x9
   \   0000A3   E5..         MOV     A,?V0 + 1
   \   0000A5   A4           MUL     AB
   \   0000A6   28           ADD     A,R0
   \   0000A7   F5..         MOV     ?V0 + 1,A
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?US_SHR
   \   0000B0   D083         POP     DPH
   \   0000B2   D082         POP     DPL
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   25..         ADD     A,?V0 + 0
   \   0000B7   F8           MOV     R0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   35..         ADDC    A,?V0 + 1
   \   0000BC   F9           MOV     R1,A
   \   0000BD   90....       MOV     DPTR,#cycle_start
   \   0000C0   E8           MOV     A,R0
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E9           MOV     A,R1
   \   0000C4   F0           MOVX    @DPTR,A
    399          #else
    400                      cycle_start = sync_cycle_start + (sync_cycle_phase*RTIMER_ARCH_SECOND)/NETSTACK_RDC_CHANNEL_CHECK_RATE;
    401          #endif
    402                  }
    403          #else
    404                  cycle_start += CYCLE_TIME;
    405          #endif
    406          
    407                  packet_seen = 0;
   \                     ??powercycle_7:
   \   0000C5   90....       MOV     DPTR,#??packet_seen
   \   0000C8   7400         MOV     A,#0x0
   \   0000CA   F0           MOVX    @DPTR,A
    408          
    409                  for(count = 0; count < CCA_COUNT_MAX; ++count) {
   \   0000CB   90....       MOV     DPTR,#??count
   \   0000CE   7400         MOV     A,#0x0
   \   0000D0   F0           MOVX    @DPTR,A
   \                     ??powercycle_8:
   \   0000D1   90....       MOV     DPTR,#??count
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C3           CLR     C
   \   0000D6   9402         SUBB    A,#0x2
   \   0000D8   5057         JNC     ??powercycle_9
    410                      t0 = RTIMER_NOW();
   \   0000DA   E5E2         MOV     A,0xe2
   \   0000DC   FA           MOV     R2,A
   \   0000DD   7B00         MOV     R3,#0x0
   \   0000DF   E5E3         MOV     A,0xe3
   \   0000E1   F8           MOV     R0,A
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   E4           CLR     A
   \   0000E5   C8           XCH     A,R0
   \   0000E6   F9           MOV     R1,A
   \   0000E7   EA           MOV     A,R2
   \   0000E8   28           ADD     A,R0
   \   0000E9   F8           MOV     R0,A
   \   0000EA   EB           MOV     A,R3
   \   0000EB   39           ADDC    A,R1
   \   0000EC   F9           MOV     R1,A
   \   0000ED   90....       MOV     DPTR,#??t0
   \   0000F0   E8           MOV     A,R0
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E9           MOV     A,R1
   \   0000F4   F0           MOVX    @DPTR,A
    411                      if(we_are_sending == 0 && we_are_receiving_burst == 0) {
   \   0000F5   90....       MOV     DPTR,#we_are_sending
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6003         JZ      $+5
   \   0000FB   02....       LJMP    ??powercycle_10 & 0xFFFF
   \   0000FE   90....       MOV     DPTR,#we_are_receiving_burst
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F8           MOV     R0,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F9           MOV     R1,A
   \   000106   E8           MOV     A,R0
   \   000107   49           ORL     A,R1
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??powercycle_10 & 0xFFFF
    412                          powercycle_turn_radio_on();
   \   00010D                ; Setup parameters for call to function powercycle_turn_radio_on
   \   00010D   12....       LCALL   ??powercycle_turn_radio_on?relay
    413                          /* Check if a packet is seen in the air. If so, we keep the
    414                             radio on for a while (LISTEN_TIME_AFTER_PACKET_DETECTED) to
    415                             be able to receive the packet. We also continuously check
    416                             the radio medium to make sure that we wasn't woken up by a
    417                             false positive: a spurious radio interference that was not
    418                             caused by an incoming packet. */
    419                          if(NETSTACK_RADIO.channel_clear() == 0) {
   \   000110                ; Setup parameters for indirect call
   \   000110   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F8           MOV     R0,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F583         MOV     DPH,A
   \   000119   8882         MOV     DPL,R0
   \   00011B   12....       LCALL   ?CALL_IND
   \   00011E   8A..         MOV     ?V0 + 0,R2
   \   000120   8B..         MOV     ?V0 + 1,R3
   \   000122   E5..         MOV     A,?V0 + 0
   \   000124   45..         ORL     A,?V0 + 1
   \   000126   6003         JZ      $+5
   \   000128   02....       LJMP    ??powercycle_11 & 0xFFFF
    420                              packet_seen = 1;
   \   00012B   90....       MOV     DPTR,#??packet_seen
   \   00012E   7401         MOV     A,#0x1
   \   000130   F0           MOVX    @DPTR,A
    421                              break;
    422                          }
    423                          powercycle_turn_radio_off();
    424                      }
    425                      schedule_powercycle_fixed(t, RTIMER_NOW() + CCA_SLEEP_TIME);
    426                      PT_YIELD(&pt);
    427                  }
    428          
    429                  if(packet_seen) {
   \                     ??powercycle_9:
   \   000131   90....       MOV     DPTR,#??packet_seen
   \   000134   E0           MOVX    A,@DPTR
   \   000135   7003         JNZ     $+5
   \   000137   02....       LJMP    ??powercycle_12 & 0xFFFF
    430                      static rtimer_clock_t start;
    431                      static uint8_t silence_periods, periods;
    432                      start = RTIMER_NOW();
   \   00013A   E5E2         MOV     A,0xe2
   \   00013C   FA           MOV     R2,A
   \   00013D   7B00         MOV     R3,#0x0
   \   00013F   E5E3         MOV     A,0xe3
   \   000141   F8           MOV     R0,A
   \   000142   7900         MOV     R1,#0x0
   \   000144   E4           CLR     A
   \   000145   C8           XCH     A,R0
   \   000146   F9           MOV     R1,A
   \   000147   EA           MOV     A,R2
   \   000148   28           ADD     A,R0
   \   000149   F8           MOV     R0,A
   \   00014A   EB           MOV     A,R3
   \   00014B   39           ADDC    A,R1
   \   00014C   F9           MOV     R1,A
   \   00014D   90....       MOV     DPTR,#??start
   \   000150   E8           MOV     A,R0
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   E9           MOV     A,R1
   \   000154   F0           MOVX    @DPTR,A
    433          
    434                      periods = silence_periods = 0;
   \   000155   7400         MOV     A,#0x0
   \   000157   90....       MOV     DPTR,#??silence_periods
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B   90....       MOV     DPTR,#??periods
   \   00015E   F0           MOVX    @DPTR,A
    435                      while(we_are_sending == 0 && radio_is_on &&
    436                              RTIMER_CLOCK_LT(RTIMER_NOW(),
    437                                  (start + LISTEN_TIME_AFTER_PACKET_DETECTED))) {
   \                     ??powercycle_13:
   \   00015F   90....       MOV     DPTR,#we_are_sending
   \   000162   E0           MOVX    A,@DPTR
   \   000163   6003         JZ      $+5
   \   000165   02....       LJMP    ??powercycle_14 & 0xFFFF
   \   000168   90....       MOV     DPTR,#radio_is_on
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   7003         JNZ     $+5
   \   00016E   02....       LJMP    ??powercycle_14 & 0xFFFF
   \   000171   E5E2         MOV     A,0xe2
   \   000173   FA           MOV     R2,A
   \   000174   7B00         MOV     R3,#0x0
   \   000176   E5E3         MOV     A,0xe3
   \   000178   F8           MOV     R0,A
   \   000179   7900         MOV     R1,#0x0
   \   00017B   E4           CLR     A
   \   00017C   C8           XCH     A,R0
   \   00017D   F9           MOV     R1,A
   \   00017E   EA           MOV     A,R2
   \   00017F   28           ADD     A,R0
   \   000180   FA           MOV     R2,A
   \   000181   EB           MOV     A,R3
   \   000182   39           ADDC    A,R1
   \   000183   FB           MOV     R3,A
   \   000184   90....       MOV     DPTR,#??start
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F8           MOV     R0,A
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F9           MOV     R1,A
   \   00018C   EA           MOV     A,R2
   \   00018D   C3           CLR     C
   \   00018E   98           SUBB    A,R0
   \   00018F   F8           MOV     R0,A
   \   000190   EB           MOV     A,R3
   \   000191   99           SUBB    A,R1
   \   000192   F9           MOV     R1,A
   \   000193   E8           MOV     A,R0
   \   000194   C3           CLR     C
   \   000195   94C3         SUBB    A,#-0x3d
   \   000197   F8           MOV     R0,A
   \   000198   E9           MOV     A,R1
   \   000199   9400         SUBB    A,#0x0
   \   00019B   F9           MOV     R1,A
   \   00019C   C3           CLR     C
   \   00019D   E8           MOV     A,R0
   \   00019E   9400         SUBB    A,#0x0
   \   0001A0   E9           MOV     A,R1
   \   0001A1   9400         SUBB    A,#0x0
   \   0001A3   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001A5   65D0         XRL     A,PSW
   \   0001A7   33           RLC     A
   \   0001A8   4003         JC      $+5
   \   0001AA   02....       LJMP    ??powercycle_14 & 0xFFFF
    438          
    439                          /* Check for a number of consecutive periods of
    440                             non-activity. If we see two such periods, we turn the
    441                             radio off. Also, if a packet has been successfully
    442                             received (as indicated by the
    443                             NETSTACK_RADIO.pending_packet() function), we stop
    444                             snooping. */
    445          #if !RDC_CONF_HARDWARE_CSMA
    446                          /* A cca cycle will disrupt rx on some radios, e.g. mc1322x, rf230 */
    447                          /*TODO: Modify those drivers to just return the internal RSSI when already in rx mode */
    448                          if(NETSTACK_RADIO.channel_clear()) {
   \   0001AD                ; Setup parameters for indirect call
   \   0001AD   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F8           MOV     R0,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   8882         MOV     DPL,R0
   \   0001B8   12....       LCALL   ?CALL_IND
   \   0001BB   8A..         MOV     ?V0 + 0,R2
   \   0001BD   8B..         MOV     ?V0 + 1,R3
   \   0001BF   E5..         MOV     A,?V0 + 0
   \   0001C1   45..         ORL     A,?V0 + 1
   \   0001C3   604C         JZ      ??powercycle_15
    449                              ++silence_periods;
   \   0001C5   90....       MOV     DPTR,#??silence_periods
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   2401         ADD     A,#0x1
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC   8049         SJMP    ??powercycle_16
    450                          } else {
   \                     ??powercycle_11:
   \   0001CE                ; Setup parameters for call to function powercycle_turn_radio_off
   \   0001CE   12....       LCALL   ??powercycle_turn_radio_off?relay
   \                     ??powercycle_10:
   \   0001D1                ; Setup parameters for call to function schedule_powercycle_fixed
   \   0001D1   E5E2         MOV     A,0xe2
   \   0001D3   FA           MOV     R2,A
   \   0001D4   7B00         MOV     R3,#0x0
   \   0001D6   E5E3         MOV     A,0xe3
   \   0001D8   F8           MOV     R0,A
   \   0001D9   7900         MOV     R1,#0x0
   \   0001DB   E4           CLR     A
   \   0001DC   C8           XCH     A,R0
   \   0001DD   F9           MOV     R1,A
   \   0001DE   EA           MOV     A,R2
   \   0001DF   28           ADD     A,R0
   \   0001E0   F8           MOV     R0,A
   \   0001E1   EB           MOV     A,R3
   \   0001E2   39           ADDC    A,R1
   \   0001E3   F9           MOV     R1,A
   \   0001E4   E8           MOV     A,R0
   \   0001E5   2407         ADD     A,#0x7
   \   0001E7   FC           MOV     R4,A
   \   0001E8   E9           MOV     A,R1
   \   0001E9   3400         ADDC    A,#0x0
   \   0001EB   FD           MOV     R5,A
   \   0001EC   EE           MOV     A,R6
   \   0001ED   FA           MOV     R2,A
   \   0001EE   EF           MOV     A,R7
   \   0001EF   FB           MOV     R3,A
   \   0001F0   12....       LCALL   ??schedule_powercycle_fixed?relay
   \   0001F3   7A00         MOV     R2,#0x0
   \   0001F5   90....       MOV     DPTR,#pt
   \   0001F8   74AA         MOV     A,#-0x56
   \   0001FA   F0           MOVX    @DPTR,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   7401         MOV     A,#0x1
   \   0001FE   F0           MOVX    @DPTR,A
   \                     ??powercycle_1:
   \   0001FF   EA           MOV     A,R2
   \   000200   7005         JNZ     ??powercycle_17
   \   000202   7901         MOV     R1,#0x1
   \   000204   02....       LJMP    ??powercycle_18 & 0xFFFF
   \                     ??powercycle_17:
   \   000207   90....       MOV     DPTR,#??count
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   2401         ADD     A,#0x1
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   02....       LJMP    ??powercycle_8 & 0xFFFF
    451                              silence_periods = 0;
   \                     ??powercycle_15:
   \   000211   90....       MOV     DPTR,#??silence_periods
   \   000214   7400         MOV     A,#0x0
   \   000216   F0           MOVX    @DPTR,A
    452                          }
    453          #endif
    454          
    455                          ++periods;
   \                     ??powercycle_16:
   \   000217   90....       MOV     DPTR,#??periods
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   2401         ADD     A,#0x1
   \   00021D   F0           MOVX    @DPTR,A
    456          
    457                          if(NETSTACK_RADIO.receiving_packet()) {
   \   00021E                ; Setup parameters for indirect call
   \   00021E   90....       MOV     DPTR,#cc2530_rf_driver + 12
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F8           MOV     R0,A
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F583         MOV     DPH,A
   \   000227   8882         MOV     DPL,R0
   \   000229   12....       LCALL   ?CALL_IND
   \   00022C   8A..         MOV     ?V0 + 0,R2
   \   00022E   8B..         MOV     ?V0 + 1,R3
   \   000230   E5..         MOV     A,?V0 + 0
   \   000232   45..         ORL     A,?V0 + 1
   \   000234   6006         JZ      ??powercycle_19
    458                              silence_periods = 0;
   \   000236   90....       MOV     DPTR,#??silence_periods
   \   000239   7400         MOV     A,#0x0
   \   00023B   F0           MOVX    @DPTR,A
    459                          }
    460                          if(silence_periods > MAX_SILENCE_PERIODS) {
   \                     ??powercycle_19:
   \   00023C   90....       MOV     DPTR,#??silence_periods
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   C3           CLR     C
   \   000241   9406         SUBB    A,#0x6
   \   000243   5003         JNC     $+5
   \   000245   02....       LJMP    ??powercycle_20 & 0xFFFF
    461                              powercycle_turn_radio_off();
   \   000248                ; Setup parameters for call to function powercycle_turn_radio_off
   \   000248   12....       LCALL   ??powercycle_turn_radio_off?relay
    462                              break;
    463                          }
    464                          if(WITH_FAST_SLEEP &&
    465                                  periods > MAX_NONACTIVITY_PERIODS &&
    466                                  !(NETSTACK_RADIO.receiving_packet() ||
    467                                      NETSTACK_RADIO.pending_packet())) {
    468                              powercycle_turn_radio_off();
    469                              break;
    470                          }
    471                          if(NETSTACK_RADIO.pending_packet()) {
    472                              break;
    473                          }
    474          
    475                          schedule_powercycle(t, CCA_CHECK_TIME + CCA_SLEEP_TIME);
    476                          PT_YIELD(&pt);
    477                      }
    478                      if(radio_is_on) {
   \                     ??powercycle_14:
   \   00024B   90....       MOV     DPTR,#radio_is_on
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   606C         JZ      ??powercycle_12
    479                          if(!(NETSTACK_RADIO.receiving_packet() ||
    480                                      NETSTACK_RADIO.pending_packet()) ||
    481                                  !RTIMER_CLOCK_LT(RTIMER_NOW(),
    482                                      (start + LISTEN_TIME_AFTER_PACKET_DETECTED))) {
   \   000251                ; Setup parameters for indirect call
   \   000251   90....       MOV     DPTR,#cc2530_rf_driver + 12
   \   000254   E0           MOVX    A,@DPTR
   \   000255   F8           MOV     R0,A
   \   000256   A3           INC     DPTR
   \   000257   E0           MOVX    A,@DPTR
   \   000258   F583         MOV     DPH,A
   \   00025A   8882         MOV     DPL,R0
   \   00025C   12....       LCALL   ?CALL_IND
   \   00025F   8A..         MOV     ?V0 + 0,R2
   \   000261   8B..         MOV     ?V0 + 1,R3
   \   000263   E5..         MOV     A,?V0 + 0
   \   000265   45..         ORL     A,?V0 + 1
   \   000267   7018         JNZ     ??powercycle_21
   \   000269                ; Setup parameters for indirect call
   \   000269   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   F8           MOV     R0,A
   \   00026E   A3           INC     DPTR
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   F583         MOV     DPH,A
   \   000272   8882         MOV     DPL,R0
   \   000274   12....       LCALL   ?CALL_IND
   \   000277   8A..         MOV     ?V0 + 0,R2
   \   000279   8B..         MOV     ?V0 + 1,R3
   \   00027B   E5..         MOV     A,?V0 + 0
   \   00027D   45..         ORL     A,?V0 + 1
   \   00027F   6039         JZ      ??powercycle_22
   \                     ??powercycle_21:
   \   000281   E5E2         MOV     A,0xe2
   \   000283   FA           MOV     R2,A
   \   000284   7B00         MOV     R3,#0x0
   \   000286   E5E3         MOV     A,0xe3
   \   000288   F8           MOV     R0,A
   \   000289   7900         MOV     R1,#0x0
   \   00028B   E4           CLR     A
   \   00028C   C8           XCH     A,R0
   \   00028D   F9           MOV     R1,A
   \   00028E   EA           MOV     A,R2
   \   00028F   28           ADD     A,R0
   \   000290   FA           MOV     R2,A
   \   000291   EB           MOV     A,R3
   \   000292   39           ADDC    A,R1
   \   000293   FB           MOV     R3,A
   \   000294   90....       MOV     DPTR,#??start
   \   000297   E0           MOVX    A,@DPTR
   \   000298   F8           MOV     R0,A
   \   000299   A3           INC     DPTR
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F9           MOV     R1,A
   \   00029C   EA           MOV     A,R2
   \   00029D   C3           CLR     C
   \   00029E   98           SUBB    A,R0
   \   00029F   F8           MOV     R0,A
   \   0002A0   EB           MOV     A,R3
   \   0002A1   99           SUBB    A,R1
   \   0002A2   F9           MOV     R1,A
   \   0002A3   E8           MOV     A,R0
   \   0002A4   C3           CLR     C
   \   0002A5   94C3         SUBB    A,#-0x3d
   \   0002A7   F8           MOV     R0,A
   \   0002A8   E9           MOV     A,R1
   \   0002A9   9400         SUBB    A,#0x0
   \   0002AB   F9           MOV     R1,A
   \   0002AC   C3           CLR     C
   \   0002AD   E8           MOV     A,R0
   \   0002AE   9400         SUBB    A,#0x0
   \   0002B0   E9           MOV     A,R1
   \   0002B1   9400         SUBB    A,#0x0
   \   0002B3   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0002B5   65D0         XRL     A,PSW
   \   0002B7   33           RLC     A
   \   0002B8   4003         JC      ??powercycle_12
    483                              powercycle_turn_radio_off();
   \                     ??powercycle_22:
   \   0002BA                ; Setup parameters for call to function powercycle_turn_radio_off
   \   0002BA   12....       LCALL   ??powercycle_turn_radio_off?relay
    484                          }
    485                      }
    486                  }
    487          
    488                  if(RTIMER_CLOCK_LT(RTIMER_NOW() - cycle_start, CYCLE_TIME - CHECK_TIME * 4)) {
   \                     ??powercycle_12:
   \   0002BD   E5E2         MOV     A,0xe2
   \   0002BF   FA           MOV     R2,A
   \   0002C0   7B00         MOV     R3,#0x0
   \   0002C2   E5E3         MOV     A,0xe3
   \   0002C4   F8           MOV     R0,A
   \   0002C5   7900         MOV     R1,#0x0
   \   0002C7   E4           CLR     A
   \   0002C8   C8           XCH     A,R0
   \   0002C9   F9           MOV     R1,A
   \   0002CA   EA           MOV     A,R2
   \   0002CB   28           ADD     A,R0
   \   0002CC   FA           MOV     R2,A
   \   0002CD   EB           MOV     A,R3
   \   0002CE   39           ADDC    A,R1
   \   0002CF   FB           MOV     R3,A
   \   0002D0   90....       MOV     DPTR,#cycle_start
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   F8           MOV     R0,A
   \   0002D5   A3           INC     DPTR
   \   0002D6   E0           MOVX    A,@DPTR
   \   0002D7   F9           MOV     R1,A
   \   0002D8   EA           MOV     A,R2
   \   0002D9   C3           CLR     C
   \   0002DA   98           SUBB    A,R0
   \   0002DB   F8           MOV     R0,A
   \   0002DC   EB           MOV     A,R3
   \   0002DD   99           SUBB    A,R1
   \   0002DE   F9           MOV     R1,A
   \   0002DF   E8           MOV     A,R0
   \   0002E0   249F         ADD     A,#-0x61
   \   0002E2   F8           MOV     R0,A
   \   0002E3   E9           MOV     A,R1
   \   0002E4   34F8         ADDC    A,#-0x8
   \   0002E6   F9           MOV     R1,A
   \   0002E7   C3           CLR     C
   \   0002E8   E8           MOV     A,R0
   \   0002E9   9400         SUBB    A,#0x0
   \   0002EB   E9           MOV     A,R1
   \   0002EC   9400         SUBB    A,#0x0
   \   0002EE   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0002F0   65D0         XRL     A,PSW
   \   0002F2   33           RLC     A
   \   0002F3   4003         JC      $+5
   \   0002F5   02....       LJMP    ??powercycle_5 & 0xFFFF
    489                      /* Schedule the next powercycle interrupt, or sleep the mcu
    490                         until then.  Sleeping will not exit from this interrupt, so
    491                         ensure an occasional wake cycle or foreground processing will
    492                         be blocked until a packet is detected */
    493          #if RDC_CONF_MCU_SLEEP
    494                      static uint8_t sleepcycle;
    495                      if((sleepcycle++ < 16) && !we_are_sending && !radio_is_on) {
    496                          rtimer_arch_sleep(CYCLE_TIME - (RTIMER_NOW() - cycle_start));
    497                      } else {
    498                          sleepcycle = 0;
    499                          schedule_powercycle_fixed(t, CYCLE_TIME + cycle_start);
    500                          PT_YIELD(&pt);
    501                      }
    502          #else
    503                      schedule_powercycle_fixed(t, CYCLE_TIME + cycle_start);
   \   0002F8                ; Setup parameters for call to function schedule_powercycle_fixed
   \   0002F8   90....       MOV     DPTR,#cycle_start
   \   0002FB   E0           MOVX    A,@DPTR
   \   0002FC   24A1         ADD     A,#-0x5f
   \   0002FE   FC           MOV     R4,A
   \   0002FF   A3           INC     DPTR
   \   000300   E0           MOVX    A,@DPTR
   \   000301   3407         ADDC    A,#0x7
   \   000303   FD           MOV     R5,A
   \   000304   EE           MOV     A,R6
   \   000305   FA           MOV     R2,A
   \   000306   EF           MOV     A,R7
   \   000307   FB           MOV     R3,A
   \   000308   12....       LCALL   ??schedule_powercycle_fixed?relay
    504                      PT_YIELD(&pt);
   \   00030B   7A00         MOV     R2,#0x0
   \   00030D   90....       MOV     DPTR,#pt
   \   000310   74F8         MOV     A,#-0x8
   \   000312   F0           MOVX    @DPTR,A
   \   000313   A3           INC     DPTR
   \   000314   7401         MOV     A,#0x1
   \   000316   F0           MOVX    @DPTR,A
   \                     ??powercycle_3:
   \   000317   EA           MOV     A,R2
   \   000318   6003         JZ      $+5
   \   00031A   02....       LJMP    ??powercycle_23 & 0xFFFF
   \   00031D   7901         MOV     R1,#0x1
   \   00031F   02....       LJMP    ??powercycle_18 & 0xFFFF
   \                     ??powercycle_20:
   \   000322   90....       MOV     DPTR,#??periods
   \   000325   E0           MOVX    A,@DPTR
   \   000326   C3           CLR     C
   \   000327   940B         SUBB    A,#0xb
   \   000329   4036         JC      ??powercycle_24
   \   00032B                ; Setup parameters for indirect call
   \   00032B   90....       MOV     DPTR,#cc2530_rf_driver + 12
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F8           MOV     R0,A
   \   000330   A3           INC     DPTR
   \   000331   E0           MOVX    A,@DPTR
   \   000332   F583         MOV     DPH,A
   \   000334   8882         MOV     DPL,R0
   \   000336   12....       LCALL   ?CALL_IND
   \   000339   8A..         MOV     ?V0 + 0,R2
   \   00033B   8B..         MOV     ?V0 + 1,R3
   \   00033D   E5..         MOV     A,?V0 + 0
   \   00033F   45..         ORL     A,?V0 + 1
   \   000341   701E         JNZ     ??powercycle_24
   \   000343                ; Setup parameters for indirect call
   \   000343   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   000346   E0           MOVX    A,@DPTR
   \   000347   F8           MOV     R0,A
   \   000348   A3           INC     DPTR
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   F583         MOV     DPH,A
   \   00034C   8882         MOV     DPL,R0
   \   00034E   12....       LCALL   ?CALL_IND
   \   000351   8A..         MOV     ?V0 + 0,R2
   \   000353   8B..         MOV     ?V0 + 1,R3
   \   000355   E5..         MOV     A,?V0 + 0
   \   000357   45..         ORL     A,?V0 + 1
   \   000359   7006         JNZ     ??powercycle_24
   \   00035B                ; Setup parameters for call to function powercycle_turn_radio_off
   \   00035B   12....       LCALL   ??powercycle_turn_radio_off?relay
   \   00035E   02....       LJMP    ??powercycle_14 & 0xFFFF
   \                     ??powercycle_24:
   \   000361                ; Setup parameters for indirect call
   \   000361   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   000364   E0           MOVX    A,@DPTR
   \   000365   F8           MOV     R0,A
   \   000366   A3           INC     DPTR
   \   000367   E0           MOVX    A,@DPTR
   \   000368   F583         MOV     DPH,A
   \   00036A   8882         MOV     DPL,R0
   \   00036C   12....       LCALL   ?CALL_IND
   \   00036F   8A..         MOV     ?V0 + 0,R2
   \   000371   8B..         MOV     ?V0 + 1,R3
   \   000373   E5..         MOV     A,?V0 + 0
   \   000375   45..         ORL     A,?V0 + 1
   \   000377   6003         JZ      $+5
   \   000379   02....       LJMP    ??powercycle_14 & 0xFFFF
   \   00037C                ; Setup parameters for call to function schedule_powercycle
   \   00037C   7C08         MOV     R4,#0x8
   \   00037E   7D00         MOV     R5,#0x0
   \   000380   EE           MOV     A,R6
   \   000381   FA           MOV     R2,A
   \   000382   EF           MOV     A,R7
   \   000383   FB           MOV     R3,A
   \   000384   12....       LCALL   ??schedule_powercycle?relay
   \   000387   7A00         MOV     R2,#0x0
   \   000389   90....       MOV     DPTR,#pt
   \   00038C   74DC         MOV     A,#-0x24
   \   00038E   F0           MOVX    @DPTR,A
   \   00038F   A3           INC     DPTR
   \   000390   7401         MOV     A,#0x1
   \   000392   F0           MOVX    @DPTR,A
   \                     ??powercycle_2:
   \   000393   EA           MOV     A,R2
   \   000394   7004         JNZ     ??powercycle_25
   \   000396   7901         MOV     R1,#0x1
   \   000398   8014         SJMP    ??powercycle_18
   \                     ??powercycle_25:
   \   00039A   02....       LJMP    ??powercycle_13 & 0xFFFF
   \                     ??powercycle_23:
   \   00039D   02....       LJMP    ??powercycle_5 & 0xFFFF
    505          #endif
    506                  }
    507              }
    508          
    509              PT_END(&pt);
   \                     ??powercycle_4:
   \   0003A0   7A00         MOV     R2,#0x0
   \   0003A2   90....       MOV     DPTR,#pt
   \   0003A5   7400         MOV     A,#0x0
   \   0003A7   F0           MOVX    @DPTR,A
   \   0003A8   A3           INC     DPTR
   \   0003A9   7400         MOV     A,#0x0
   \   0003AB   F0           MOVX    @DPTR,A
   \   0003AC   7903         MOV     R1,#0x3
   \                     ??powercycle_18:
   \   0003AE   7F02         MOV     R7,#0x2
   \   0003B0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0003B3                REQUIRE T1CNTL
   \   0003B3                REQUIRE T1CNTH
    510          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??sync_cycle_start:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??sync_cycle_phase:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??packet_seen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??t0:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??start:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??silence_periods:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??periods:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    511          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512              static int
    513          broadcast_rate_drop(void)
   \                     broadcast_rate_drop:
    514          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    515          #if CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT
    516              if(!timer_expired(&broadcast_rate_timer)) {
    517                  broadcast_rate_counter++;
    518                  if(broadcast_rate_counter < CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT) {
    519                      return 0;
    520                  } else {
    521                      return 1;
    522                  }
    523              } else {
    524                  timer_set(&broadcast_rate_timer, CLOCK_SECOND);
    525                  broadcast_rate_counter = 0;
    526                  return 0;
    527              }
    528          #else /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
    529              return 0;
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   02....       LJMP    ?BRET
    530          #endif /* CONTIKIMAC_CONF_BROADCAST_RATE_LIMIT */
    531          }
    532          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533              static int
    534          send_packet(mac_callback_t mac_callback, void *mac_callback_ptr,
   \                     send_packet:
    535                  struct rdc_buf_list *buf_list,
    536                  int is_receiver_awake)
    537          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   \   00000E   8C..         MOV     ?V0 + 10,R4
   \   000010   8D..         MOV     ?V0 + 11,R5
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 8,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 9,A
    538              rtimer_clock_t t0;
    539              rtimer_clock_t encounter_time = 0;
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7400         MOV     A,#0x0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
    540              int strobes;
    541              uint8_t got_strobe_ack = 0;
   \   00002A   75..00       MOV     ?V0 + 4,#0x0
    542              int hdrlen, len;
    543              uint8_t is_broadcast = 0;
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
    544              uint8_t is_reliable = 0;
   \   000030   75..00       MOV     ?V0 + 15,#0x0
    545              uint8_t is_known_receiver = 0;
   \   000033   75..00       MOV     ?V0 + 14,#0x0
    546              uint8_t collisions;
    547              int transmit_len;
    548              int ret;
    549              uint8_t contikimac_was_on;
    550              uint8_t seqno;
    551          #if WITH_CONTIKIMAC_HEADER
    552              struct hdr *chdr;
    553          #endif /* WITH_CONTIKIMAC_HEADER */
    554          
    555              /* Exit if RDC and radio were explicitly turned off */
    556              if(!contikimac_is_on && !contikimac_keep_radio_on) {
   \   000036   90....       MOV     DPTR,#contikimac_is_on
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   700D         JNZ     ??send_packet_0
   \   00003C   90....       MOV     DPTR,#contikimac_keep_radio_on
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   7007         JNZ     ??send_packet_0
    557                  PRINTF("contikimac: radio is turned off\n");
    558                  return MAC_TX_ERR_FATAL;
   \   000042   7A05         MOV     R2,#0x5
   \   000044   7B00         MOV     R3,#0x0
   \   000046   02....       LJMP    ??send_packet_1 & 0xFFFF
    559              }
    560          
    561              if(packetbuf_totlen() == 0) {
   \                     ??send_packet_0:
   \   000049                ; Setup parameters for call to function packetbuf_totlen
   \   000049   12....       LCALL   ??packetbuf_totlen?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   45..         ORL     A,?V0 + 1
   \   000054   7007         JNZ     ??send_packet_2
    562                  PRINTF("contikimac: send_packet data len 0\n");
    563                  return MAC_TX_ERR_FATAL;
   \   000056   7A05         MOV     R2,#0x5
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   02....       LJMP    ??send_packet_1 & 0xFFFF
    564              }
    565          
    566          #if !NETSTACK_CONF_BRIDGE_MODE
    567              /* If NETSTACK_CONF_BRIDGE_MODE is set, assume PACKETBUF_ADDR_SENDER is already set. */
    568              packetbuf_set_addr(PACKETBUF_ADDR_SENDER, &rimeaddr_node_addr);
   \                     ??send_packet_2:
   \   00005D                ; Setup parameters for call to function packetbuf_set_addr
   \   00005D   7A..         MOV     R2,#rimeaddr_node_addr & 0xff
   \   00005F   7B..         MOV     R3,#(rimeaddr_node_addr >> 8) & 0xff
   \   000061   7918         MOV     R1,#0x18
   \   000063   12....       LCALL   ??packetbuf_set_addr?relay
    569          #endif
    570              if(rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER), &rimeaddr_null)) {
   \   000066                ; Setup parameters for call to function rimeaddr_cmp
   \   000066   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   000068   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   00006A   FF           MOV     R7,A
   \   00006B   EC           MOV     A,R4
   \   00006C   FE           MOV     R6,A
   \   00006D   ED           MOV     A,R5
   \   00006E   FF           MOV     R7,A
   \   00006F                ; Setup parameters for call to function packetbuf_addr
   \   00006F   7919         MOV     R1,#0x19
   \   000071   12....       LCALL   ??packetbuf_addr?relay
   \   000074   FD           MOV     R5,A
   \   000075   EE           MOV     A,R6
   \   000076   FC           MOV     R4,A
   \   000077   EF           MOV     A,R7
   \   000078   FD           MOV     R5,A
   \   000079   12....       LCALL   ??rimeaddr_cmp?relay
   \   00007C   8A..         MOV     ?V0 + 0,R2
   \   00007E   8B..         MOV     ?V0 + 1,R3
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   45..         ORL     A,?V0 + 1
   \   000084   6017         JZ      ??send_packet_3
    571                  is_broadcast = 1;
   \   000086   75..01       MOV     ?V0 + 2,#0x1
    572                  PRINTDEBUG("contikimac: send broadcast\n");
    573          
    574                  if(broadcast_rate_drop()) {
   \   000089                ; Setup parameters for call to function broadcast_rate_drop
   \   000089   12....       LCALL   ??broadcast_rate_drop?relay
   \   00008C   8A..         MOV     ?V0 + 0,R2
   \   00008E   8B..         MOV     ?V0 + 1,R3
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   45..         ORL     A,?V0 + 1
   \   000094   6007         JZ      ??send_packet_3
    575                      return MAC_TX_COLLISION;
   \   000096   7A01         MOV     R2,#0x1
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   02....       LJMP    ??send_packet_1 & 0xFFFF
    576                  }
    577              } else {
    578          #if UIP_CONF_IPV6
    579                  PRINTDEBUG("contikimac: send unicast to %02x%02x:%02x%02x:%02x%02x:%02x%02x\n",
    580                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
    581                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[1],
    582                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[2],
    583                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[3],
    584                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[4],
    585                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[5],
    586                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[6],
    587                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[7]);
    588          #else /* UIP_CONF_IPV6 */
    589                  PRINTDEBUG("contikimac: send unicast to %u.%u\n",
    590                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
    591                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[1]);
    592          #endif /* UIP_CONF_IPV6 */
    593              }
    594              is_reliable = packetbuf_attr(PACKETBUF_ATTR_RELIABLE) ||
    595                  packetbuf_attr(PACKETBUF_ATTR_ERELIABLE);
   \                     ??send_packet_3:
   \   00009D                ; Setup parameters for call to function packetbuf_attr
   \   00009D   790C         MOV     R1,#0xc
   \   00009F   12....       LCALL   ??packetbuf_attr?relay
   \   0000A2   8A..         MOV     ?V0 + 0,R2
   \   0000A4   8B..         MOV     ?V0 + 1,R3
   \   0000A6   E5..         MOV     A,?V0 + 0
   \   0000A8   45..         ORL     A,?V0 + 1
   \   0000AA   700F         JNZ     ??send_packet_4
   \   0000AC                ; Setup parameters for call to function packetbuf_attr
   \   0000AC   7917         MOV     R1,#0x17
   \   0000AE   12....       LCALL   ??packetbuf_attr?relay
   \   0000B1   8A..         MOV     ?V0 + 0,R2
   \   0000B3   8B..         MOV     ?V0 + 1,R3
   \   0000B5   E5..         MOV     A,?V0 + 0
   \   0000B7   45..         ORL     A,?V0 + 1
   \   0000B9   6004         JZ      ??send_packet_5
   \                     ??send_packet_4:
   \   0000BB   7401         MOV     A,#0x1
   \   0000BD   8002         SJMP    ??send_packet_6
   \                     ??send_packet_5:
   \   0000BF   7400         MOV     A,#0x0
   \                     ??send_packet_6:
   \   0000C1   F5..         MOV     ?V0 + 15,A
    596          
    597              packetbuf_set_attr(PACKETBUF_ATTR_MAC_ACK, 1);
   \   0000C3                ; Setup parameters for call to function packetbuf_set_attr
   \   0000C3   7A01         MOV     R2,#0x1
   \   0000C5   7B00         MOV     R3,#0x0
   \   0000C7   790B         MOV     R1,#0xb
   \   0000C9   12....       LCALL   ??packetbuf_set_attr?relay
    598          
    599          #if WITH_CONTIKIMAC_HEADER
    600              hdrlen = packetbuf_totlen();
   \   0000CC                ; Setup parameters for call to function packetbuf_totlen
   \   0000CC   12....       LCALL   ??packetbuf_totlen?relay
   \   0000CF   8A..         MOV     ?V0 + 4,R2
   \   0000D1   8B..         MOV     ?V0 + 5,R3
   \   0000D3   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000D6   85....       MOV     ?V0 + 1,?V0 + 5
    601              if(packetbuf_hdralloc(sizeof(struct hdr)) == 0) {
   \   0000D9                ; Setup parameters for call to function packetbuf_hdralloc
   \   0000D9   7A02         MOV     R2,#0x2
   \   0000DB   7B00         MOV     R3,#0x0
   \   0000DD   12....       LCALL   ??packetbuf_hdralloc?relay
   \   0000E0   8A..         MOV     ?V0 + 4,R2
   \   0000E2   8B..         MOV     ?V0 + 5,R3
   \   0000E4   E5..         MOV     A,?V0 + 4
   \   0000E6   45..         ORL     A,?V0 + 5
   \   0000E8   7007         JNZ     ??send_packet_7
    602                  /* Failed to allocate space for contikimac header */
    603                  PRINTF("contikimac: send failed, too large header\n");
    604                  return MAC_TX_ERR_FATAL;
   \   0000EA   7A05         MOV     R2,#0x5
   \   0000EC   7B00         MOV     R3,#0x0
   \   0000EE   02....       LJMP    ??send_packet_1 & 0xFFFF
    605              }
    606              chdr = packetbuf_hdrptr();
   \                     ??send_packet_7:
   \   0000F1                ; Setup parameters for call to function packetbuf_hdrptr
   \   0000F1   12....       LCALL   ??packetbuf_hdrptr?relay
   \   0000F4   8A..         MOV     ?V0 + 4,R2
   \   0000F6   8B..         MOV     ?V0 + 5,R3
   \   0000F8   85..82       MOV     DPL,?V0 + 4
   \   0000FB   85..83       MOV     DPH,?V0 + 5
    607              chdr->id = CONTIKIMAC_ID;
   \   0000FE   7400         MOV     A,#0x0
   \   000100   F0           MOVX    @DPTR,A
    608              chdr->len = hdrlen;
   \   000101   E5..         MOV     A,?V0 + 0
   \   000103   A3           INC     DPTR
   \   000104   E5..         MOV     A,?V0 + 0
   \   000106   F0           MOVX    @DPTR,A
    609          
    610              /* Create the MAC header for the data packet. */
    611              hdrlen = NETSTACK_FRAMER.create();
   \   000107                ; Setup parameters for indirect call
   \   000107   90....       MOV     DPTR,#framer_802154
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F8           MOV     R0,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F583         MOV     DPH,A
   \   000110   8882         MOV     DPL,R0
   \   000112   12....       LCALL   ?CALL_IND
   \   000115   8A..         MOV     ?V0 + 4,R2
   \   000117   8B..         MOV     ?V0 + 5,R3
   \   000119   85....       MOV     ?V0 + 0,?V0 + 4
   \   00011C   85....       MOV     ?V0 + 1,?V0 + 5
    612              if(hdrlen < 0) {
   \   00011F   C3           CLR     C
   \   000120   E5..         MOV     A,?V0 + 0
   \   000122   9400         SUBB    A,#0x0
   \   000124   E5..         MOV     A,?V0 + 1
   \   000126   9400         SUBB    A,#0x0
   \   000128   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00012A   65D0         XRL     A,PSW
   \   00012C   33           RLC     A
   \   00012D   500E         JNC     ??send_packet_8
    613                  /* Failed to send */
    614                  PRINTF("contikimac: send failed, too large header\n");
    615                  packetbuf_hdr_remove(sizeof(struct hdr));
   \   00012F                ; Setup parameters for call to function packetbuf_hdr_remove
   \   00012F   7A02         MOV     R2,#0x2
   \   000131   7B00         MOV     R3,#0x0
   \   000133   12....       LCALL   ??packetbuf_hdr_remove?relay
    616                  return MAC_TX_ERR_FATAL;
   \   000136   7A05         MOV     R2,#0x5
   \   000138   7B00         MOV     R3,#0x0
   \   00013A   02....       LJMP    ??send_packet_1 & 0xFFFF
    617              }
    618              hdrlen += sizeof(struct hdr);
   \                     ??send_packet_8:
   \   00013D   E5..         MOV     A,?V0 + 0
   \   00013F   2402         ADD     A,#0x2
   \   000141   F5..         MOV     ?V0 + 0,A
   \   000143   E5..         MOV     A,?V0 + 1
   \   000145   3400         ADDC    A,#0x0
   \   000147   F5..         MOV     ?V0 + 1,A
    619          #else
    620              /* Create the MAC header for the data packet. */
    621              hdrlen = NETSTACK_FRAMER.create();
    622              if(hdrlen < 0) {
    623                  /* Failed to send */
    624                  PRINTF("contikimac: send failed, too large header\n");
    625                  return MAC_TX_ERR_FATAL;
    626              }
    627          #endif
    628          
    629              /* Make sure that the packet is longer or equal to the shortest
    630                 packet length. */
    631              transmit_len = packetbuf_totlen();
   \   000149                ; Setup parameters for call to function packetbuf_totlen
   \   000149   12....       LCALL   ??packetbuf_totlen?relay
   \   00014C   8A..         MOV     ?V0 + 4,R2
   \   00014E   8B..         MOV     ?V0 + 5,R3
   \   000150   85....       MOV     ?V0 + 6,?V0 + 4
   \   000153   85....       MOV     ?V0 + 7,?V0 + 5
    632              if(transmit_len < SHORTEST_PACKET_SIZE) {
   \   000156   C3           CLR     C
   \   000157   E5..         MOV     A,?V0 + 6
   \   000159   942B         SUBB    A,#0x2b
   \   00015B   E5..         MOV     A,?V0 + 7
   \   00015D   9400         SUBB    A,#0x0
   \   00015F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000161   65D0         XRL     A,PSW
   \   000163   33           RLC     A
   \   000164   5055         JNC     ??send_packet_9
    633                  /* Pad with zeroes */
    634                  uint8_t *ptr;
    635                  ptr = packetbuf_dataptr();
   \   000166                ; Setup parameters for call to function packetbuf_dataptr
   \   000166   12....       LCALL   ??packetbuf_dataptr?relay
   \   000169   8A..         MOV     ?V0 + 6,R2
   \   00016B   8B..         MOV     ?V0 + 7,R3
   \   00016D   85....       MOV     ?V0 + 4,?V0 + 6
   \   000170   85....       MOV     ?V0 + 5,?V0 + 7
    636                  memset(ptr + packetbuf_datalen(), 0, SHORTEST_PACKET_SIZE - packetbuf_totlen());
   \   000173                ; Setup parameters for call to function packetbuf_totlen
   \   000173   12....       LCALL   ??packetbuf_totlen?relay
   \   000176   8A..         MOV     ?V0 + 6,R2
   \   000178   8B..         MOV     ?V0 + 7,R3
   \   00017A   A8..         MOV     R0,?V0 + 6
   \   00017C   A9..         MOV     R1,?V0 + 7
   \   00017E                ; Setup parameters for call to function memset
   \   00017E   742B         MOV     A,#0x2b
   \   000180   C3           CLR     C
   \   000181   98           SUBB    A,R0
   \   000182   F5..         MOV     ?V0 + 6,A
   \   000184   7400         MOV     A,#0x0
   \   000186   99           SUBB    A,R1
   \   000187   F5..         MOV     ?V0 + 7,A
   \   000189   78..         MOV     R0,#?V0 + 6
   \   00018B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018E   7C00         MOV     R4,#0x0
   \   000190   7D00         MOV     R5,#0x0
   \   000192   FF           MOV     R7,A
   \   000193   EC           MOV     A,R4
   \   000194   FE           MOV     R6,A
   \   000195   ED           MOV     A,R5
   \   000196   FF           MOV     R7,A
   \   000197                ; Setup parameters for call to function packetbuf_datalen
   \   000197   12....       LCALL   ??packetbuf_datalen?relay
   \   00019A   8A..         MOV     ?V0 + 6,R2
   \   00019C   8B..         MOV     ?V0 + 7,R3
   \   00019E   E5..         MOV     A,?V0 + 4
   \   0001A0   25..         ADD     A,?V0 + 6
   \   0001A2   FA           MOV     R2,A
   \   0001A3   E5..         MOV     A,?V0 + 5
   \   0001A5   35..         ADDC    A,?V0 + 7
   \   0001A7   FB           MOV     R3,A
   \   0001A8   FD           MOV     R5,A
   \   0001A9   EE           MOV     A,R6
   \   0001AA   FC           MOV     R4,A
   \   0001AB   EF           MOV     A,R7
   \   0001AC   FD           MOV     R5,A
   \   0001AD   12....       LCALL   ??memset?relay
   \   0001B0   7402         MOV     A,#0x2
   \   0001B2   12....       LCALL   ?DEALLOC_XSTACK8
    637          
    638                  PRINTF("contikimac: shorter than shortest (%d)\n", packetbuf_totlen());
    639                  transmit_len = SHORTEST_PACKET_SIZE;
   \   0001B5   75..2B       MOV     ?V0 + 6,#0x2b
   \   0001B8   75..00       MOV     ?V0 + 7,#0x0
    640              }
    641          
    642          
    643              packetbuf_compact();
   \                     ??send_packet_9:
   \   0001BB                ; Setup parameters for call to function packetbuf_compact
   \   0001BB   12....       LCALL   ??packetbuf_compact?relay
    644          
    645          #ifdef NETSTACK_ENCRYPT
    646              NETSTACK_ENCRYPT();
    647          #endif /* NETSTACK_ENCRYPT */
    648          
    649              transmit_len = packetbuf_totlen();
   \   0001BE                ; Setup parameters for call to function packetbuf_totlen
   \   0001BE   12....       LCALL   ??packetbuf_totlen?relay
   \   0001C1   8A..         MOV     ?V0 + 4,R2
   \   0001C3   8B..         MOV     ?V0 + 5,R3
   \   0001C5   85....       MOV     ?V0 + 6,?V0 + 4
   \   0001C8   85....       MOV     ?V0 + 7,?V0 + 5
    650          
    651              NETSTACK_RADIO.prepare(packetbuf_hdrptr(), transmit_len);
   \   0001CB                ; Setup parameters for call to function packetbuf_hdrptr
   \   0001CB   12....       LCALL   ??packetbuf_hdrptr?relay
   \   0001CE   8A..         MOV     ?V0 + 4,R2
   \   0001D0   8B..         MOV     ?V0 + 5,R3
   \   0001D2   AA..         MOV     R2,?V0 + 4
   \   0001D4   AB..         MOV     R3,?V0 + 5
   \   0001D6                ; Setup parameters for indirect call
   \   0001D6   AC..         MOV     R4,?V0 + 6
   \   0001D8   AD..         MOV     R5,?V0 + 7
   \   0001DA   90....       MOV     DPTR,#cc2530_rf_driver + 2
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F8           MOV     R0,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F583         MOV     DPH,A
   \   0001E3   8882         MOV     DPL,R0
   \   0001E5   12....       LCALL   ?CALL_IND
    652          
    653              /* Remove the MAC-layer header since it will be recreated next time around. */
    654              packetbuf_hdr_remove(hdrlen);
   \   0001E8                ; Setup parameters for call to function packetbuf_hdr_remove
   \   0001E8   AA..         MOV     R2,?V0 + 0
   \   0001EA   AB..         MOV     R3,?V0 + 1
   \   0001EC   12....       LCALL   ??packetbuf_hdr_remove?relay
   \   0001EF   7420         MOV     A,#0x20
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F8           MOV     R0,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   F9           MOV     R1,A
   \   0001F9   7420         MOV     A,#0x20
   \   0001FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FE   E8           MOV     A,R0
   \   0001FF   F0           MOVX    @DPTR,A
   \   000200   A3           INC     DPTR
   \   000201   E9           MOV     A,R1
   \   000202   F0           MOVX    @DPTR,A
    655          
    656              if(!is_broadcast && !is_receiver_awake) {
   \   000203   E5..         MOV     A,?V0 + 2
   \   000205   7065         JNZ     ??send_packet_10
   \   000207   7420         MOV     A,#0x20
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F9           MOV     R1,A
   \   000211   E8           MOV     A,R0
   \   000212   49           ORL     A,R1
   \   000213   7057         JNZ     ??send_packet_10
    657          #if WITH_PHASE_OPTIMIZATION
    658                  ret = phase_wait(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    659                          CYCLE_TIME, GUARD_TIME,
    660                          mac_callback, mac_callback_ptr, buf_list);
   \   000215                ; Setup parameters for call to function phase_wait
   \   000215   78..         MOV     R0,#?V0 + 8
   \   000217   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021A   78..         MOV     R0,#?V0 + 10
   \   00021C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021F   78..         MOV     R0,#?V0 + 12
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000224   75..D0       MOV     ?V0 + 0,#-0x30
   \   000227   75..00       MOV     ?V0 + 1,#0x0
   \   00022A   78..         MOV     R0,#?V0 + 0
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022F   7CA1         MOV     R4,#-0x5f
   \   000231   7D07         MOV     R5,#0x7
   \   000233   FF           MOV     R7,A
   \   000234   EC           MOV     A,R4
   \   000235   FE           MOV     R6,A
   \   000236   ED           MOV     A,R5
   \   000237   FF           MOV     R7,A
   \   000238                ; Setup parameters for call to function packetbuf_addr
   \   000238   7919         MOV     R1,#0x19
   \   00023A   12....       LCALL   ??packetbuf_addr?relay
   \   00023D   FD           MOV     R5,A
   \   00023E   EE           MOV     A,R6
   \   00023F   FC           MOV     R4,A
   \   000240   EF           MOV     A,R7
   \   000241   FD           MOV     R5,A
   \   000242   12....       LCALL   ??phase_wait?relay
   \   000245   7408         MOV     A,#0x8
   \   000247   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024A   E9           MOV     A,R1
   \   00024B   F5..         MOV     ?V0 + 0,A
   \   00024D   75..00       MOV     ?V0 + 1,#0x0
    661                  if(ret == PHASE_DEFERRED) {
   \   000250   7402         MOV     A,#0x2
   \   000252   65..         XRL     A,?V0 + 0
   \   000254   7004         JNZ     ??send_packet_11
   \   000256   7400         MOV     A,#0x0
   \   000258   65..         XRL     A,?V0 + 1
   \                     ??send_packet_11:
   \   00025A   7007         JNZ     ??send_packet_12
    662                      return MAC_TX_DEFERRED;
   \   00025C   7A03         MOV     R2,#0x3
   \   00025E   7B00         MOV     R3,#0x0
   \   000260   02....       LJMP    ??send_packet_1 & 0xFFFF
    663                  }
    664                  if(ret != PHASE_UNKNOWN) {
   \                     ??send_packet_12:
   \   000263   E5..         MOV     A,?V0 + 0
   \   000265   45..         ORL     A,?V0 + 1
   \   000267   6003         JZ      ??send_packet_10
    665                      is_known_receiver = 1;
   \   000269   75..01       MOV     ?V0 + 14,#0x1
    666                  }
    667          #endif /* WITH_PHASE_OPTIMIZATION */ 
    668              }
    669          
    670          
    671          
    672              /* By setting we_are_sending to one, we ensure that the rtimer
    673                 powercycle interrupt do not interfere with us sending the packet. */
    674              we_are_sending = 1;
   \                     ??send_packet_10:
   \   00026C   90....       MOV     DPTR,#we_are_sending
   \   00026F   7401         MOV     A,#0x1
   \   000271   F0           MOVX    @DPTR,A
    675          
    676              /* If we have a pending packet in the radio, we should not send now,
    677                 because we will trash the received packet. Instead, we signal
    678                 that we have a collision, which lets the packet be received. This
    679                 packet will be retransmitted later by the MAC protocol
    680                 instread. */
    681              if(NETSTACK_RADIO.receiving_packet() || NETSTACK_RADIO.pending_packet()) {
   \   000272                ; Setup parameters for indirect call
   \   000272   90....       MOV     DPTR,#cc2530_rf_driver + 12
   \   000275   E0           MOVX    A,@DPTR
   \   000276   F8           MOV     R0,A
   \   000277   A3           INC     DPTR
   \   000278   E0           MOVX    A,@DPTR
   \   000279   F583         MOV     DPH,A
   \   00027B   8882         MOV     DPL,R0
   \   00027D   12....       LCALL   ?CALL_IND
   \   000280   8A..         MOV     ?V0 + 0,R2
   \   000282   8B..         MOV     ?V0 + 1,R3
   \   000284   E5..         MOV     A,?V0 + 0
   \   000286   45..         ORL     A,?V0 + 1
   \   000288   7018         JNZ     ??send_packet_13
   \   00028A                ; Setup parameters for indirect call
   \   00028A   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   F8           MOV     R0,A
   \   00028F   A3           INC     DPTR
   \   000290   E0           MOVX    A,@DPTR
   \   000291   F583         MOV     DPH,A
   \   000293   8882         MOV     DPL,R0
   \   000295   12....       LCALL   ?CALL_IND
   \   000298   8A..         MOV     ?V0 + 0,R2
   \   00029A   8B..         MOV     ?V0 + 1,R3
   \   00029C   E5..         MOV     A,?V0 + 0
   \   00029E   45..         ORL     A,?V0 + 1
   \   0002A0   600D         JZ      ??send_packet_14
    682                  we_are_sending = 0;
   \                     ??send_packet_13:
   \   0002A2   90....       MOV     DPTR,#we_are_sending
   \   0002A5   7400         MOV     A,#0x0
   \   0002A7   F0           MOVX    @DPTR,A
    683                  PRINTF("contikimac: collision receiving %d, pending %d\n",
    684                          NETSTACK_RADIO.receiving_packet(), NETSTACK_RADIO.pending_packet());
    685                  return MAC_TX_COLLISION;
   \   0002A8   7A01         MOV     R2,#0x1
   \   0002AA   7B00         MOV     R3,#0x0
   \   0002AC   02....       LJMP    ??send_packet_1 & 0xFFFF
    686              }
    687          
    688              /* Switch off the radio to ensure that we didn't start sending while
    689                 the radio was doing a channel check. */
    690              off();
   \                     ??send_packet_14:
   \   0002AF                ; Setup parameters for call to function off
   \   0002AF   12....       LCALL   ??off?relay
    691          
    692          
    693              strobes = 0;
   \   0002B2   75..00       MOV     ?V0 + 8,#0x0
   \   0002B5   75..00       MOV     ?V0 + 9,#0x0
    694          
    695              /* Send a train of strobes until the receiver answers with an ACK. */
    696              collisions = 0;
   \   0002B8   75..00       MOV     ?V0 + 3,#0x0
    697          
    698              got_strobe_ack = 0;
   \   0002BB   75..00       MOV     ?V0 + 4,#0x0
    699          
    700              /* Set contikimac_is_on to one to allow the on() and off() functions
    701                 to control the radio. We restore the old value of
    702                 contikimac_is_on when we are done. */
    703              contikimac_was_on = contikimac_is_on;
   \   0002BE   90....       MOV     DPTR,#contikimac_is_on
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F5..         MOV     ?V0 + 5,A
    704              contikimac_is_on = 1;
   \   0002C4   90....       MOV     DPTR,#contikimac_is_on
   \   0002C7   7401         MOV     A,#0x1
   \   0002C9   F0           MOVX    @DPTR,A
    705          
    706          #if !RDC_CONF_HARDWARE_CSMA
    707              /* Check if there are any transmissions by others. */
    708              /* TODO: why does this give collisions before sending with the mc1322x? */
    709              if(is_receiver_awake == 0) {
   \   0002CA   7420         MOV     A,#0x20
   \   0002CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F8           MOV     R0,A
   \   0002D1   A3           INC     DPTR
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   F9           MOV     R1,A
   \   0002D4   E8           MOV     A,R0
   \   0002D5   49           ORL     A,R1
   \   0002D6   6003         JZ      $+5
   \   0002D8   02....       LJMP    ??send_packet_15 & 0xFFFF
    710                  int i;
    711                  for(i = 0; i < CCA_COUNT_MAX_TX; ++i) {
   \   0002DB   75..00       MOV     ?V0 + 0,#0x0
   \   0002DE   75..00       MOV     ?V0 + 1,#0x0
   \   0002E1   8053         SJMP    ??send_packet_16
    712                      t0 = RTIMER_NOW();
    713                      on();
    714          #if CCA_CHECK_TIME > 0
    715                      while(RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + CCA_CHECK_TIME)) { }
    716          #endif
    717                      if(NETSTACK_RADIO.channel_clear() == 0) {
    718                          collisions++;
    719                          off();
    720                          break;
    721                      }
    722                      off();
   \                     ??send_packet_17:
   \   0002E3                ; Setup parameters for call to function off
   \   0002E3   12....       LCALL   ??off?relay
    723                      t0 = RTIMER_NOW();
   \   0002E6   E5E2         MOV     A,0xe2
   \   0002E8   FA           MOV     R2,A
   \   0002E9   7B00         MOV     R3,#0x0
   \   0002EB   E5E3         MOV     A,0xe3
   \   0002ED   F8           MOV     R0,A
   \   0002EE   7900         MOV     R1,#0x0
   \   0002F0   E4           CLR     A
   \   0002F1   C8           XCH     A,R0
   \   0002F2   F9           MOV     R1,A
   \   0002F3   EA           MOV     A,R2
   \   0002F4   28           ADD     A,R0
   \   0002F5   FE           MOV     R6,A
   \   0002F6   EB           MOV     A,R3
   \   0002F7   39           ADDC    A,R1
   \   0002F8   FF           MOV     R7,A
    724                      while(RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + CCA_SLEEP_TIME)) { }
   \                     ??send_packet_18:
   \   0002F9   E5E2         MOV     A,0xe2
   \   0002FB   FA           MOV     R2,A
   \   0002FC   7B00         MOV     R3,#0x0
   \   0002FE   E5E3         MOV     A,0xe3
   \   000300   F8           MOV     R0,A
   \   000301   7900         MOV     R1,#0x0
   \   000303   E4           CLR     A
   \   000304   C8           XCH     A,R0
   \   000305   F9           MOV     R1,A
   \   000306   EA           MOV     A,R2
   \   000307   28           ADD     A,R0
   \   000308   F8           MOV     R0,A
   \   000309   EB           MOV     A,R3
   \   00030A   39           ADDC    A,R1
   \   00030B   F9           MOV     R1,A
   \   00030C   E8           MOV     A,R0
   \   00030D   C3           CLR     C
   \   00030E   9E           SUBB    A,R6
   \   00030F   F8           MOV     R0,A
   \   000310   E9           MOV     A,R1
   \   000311   9F           SUBB    A,R7
   \   000312   F9           MOV     R1,A
   \   000313   E8           MOV     A,R0
   \   000314   C3           CLR     C
   \   000315   9407         SUBB    A,#0x7
   \   000317   F8           MOV     R0,A
   \   000318   E9           MOV     A,R1
   \   000319   9400         SUBB    A,#0x0
   \   00031B   F9           MOV     R1,A
   \   00031C   C3           CLR     C
   \   00031D   E8           MOV     A,R0
   \   00031E   9400         SUBB    A,#0x0
   \   000320   E9           MOV     A,R1
   \   000321   9400         SUBB    A,#0x0
   \   000323   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000325   65D0         XRL     A,PSW
   \   000327   33           RLC     A
   \   000328   40CF         JC      ??send_packet_18
   \   00032A   E5..         MOV     A,?V0 + 0
   \   00032C   2401         ADD     A,#0x1
   \   00032E   F5..         MOV     ?V0 + 0,A
   \   000330   E5..         MOV     A,?V0 + 1
   \   000332   3400         ADDC    A,#0x0
   \   000334   F5..         MOV     ?V0 + 1,A
   \                     ??send_packet_16:
   \   000336   C3           CLR     C
   \   000337   E5..         MOV     A,?V0 + 0
   \   000339   9406         SUBB    A,#0x6
   \   00033B   E5..         MOV     A,?V0 + 1
   \   00033D   9400         SUBB    A,#0x0
   \   00033F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000341   65D0         XRL     A,PSW
   \   000343   33           RLC     A
   \   000344   5067         JNC     ??send_packet_15
   \   000346   E5E2         MOV     A,0xe2
   \   000348   FA           MOV     R2,A
   \   000349   7B00         MOV     R3,#0x0
   \   00034B   E5E3         MOV     A,0xe3
   \   00034D   F8           MOV     R0,A
   \   00034E   7900         MOV     R1,#0x0
   \   000350   E4           CLR     A
   \   000351   C8           XCH     A,R0
   \   000352   F9           MOV     R1,A
   \   000353   EA           MOV     A,R2
   \   000354   28           ADD     A,R0
   \   000355   FE           MOV     R6,A
   \   000356   EB           MOV     A,R3
   \   000357   39           ADDC    A,R1
   \   000358   FF           MOV     R7,A
   \   000359                ; Setup parameters for call to function on
   \   000359   12....       LCALL   ??on?relay
   \                     ??send_packet_19:
   \   00035C   E5E2         MOV     A,0xe2
   \   00035E   FA           MOV     R2,A
   \   00035F   7B00         MOV     R3,#0x0
   \   000361   E5E3         MOV     A,0xe3
   \   000363   F8           MOV     R0,A
   \   000364   7900         MOV     R1,#0x0
   \   000366   E4           CLR     A
   \   000367   C8           XCH     A,R0
   \   000368   F9           MOV     R1,A
   \   000369   EA           MOV     A,R2
   \   00036A   28           ADD     A,R0
   \   00036B   F8           MOV     R0,A
   \   00036C   EB           MOV     A,R3
   \   00036D   39           ADDC    A,R1
   \   00036E   F9           MOV     R1,A
   \   00036F   E8           MOV     A,R0
   \   000370   C3           CLR     C
   \   000371   9E           SUBB    A,R6
   \   000372   F8           MOV     R0,A
   \   000373   E9           MOV     A,R1
   \   000374   9F           SUBB    A,R7
   \   000375   F9           MOV     R1,A
   \   000376   E8           MOV     A,R0
   \   000377   C3           CLR     C
   \   000378   9401         SUBB    A,#0x1
   \   00037A   F8           MOV     R0,A
   \   00037B   E9           MOV     A,R1
   \   00037C   9400         SUBB    A,#0x0
   \   00037E   F9           MOV     R1,A
   \   00037F   C3           CLR     C
   \   000380   E8           MOV     A,R0
   \   000381   9400         SUBB    A,#0x0
   \   000383   E9           MOV     A,R1
   \   000384   9400         SUBB    A,#0x0
   \   000386   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000388   65D0         XRL     A,PSW
   \   00038A   33           RLC     A
   \   00038B   40CF         JC      ??send_packet_19
   \   00038D                ; Setup parameters for indirect call
   \   00038D   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   000390   E0           MOVX    A,@DPTR
   \   000391   F8           MOV     R0,A
   \   000392   A3           INC     DPTR
   \   000393   E0           MOVX    A,@DPTR
   \   000394   F583         MOV     DPH,A
   \   000396   8882         MOV     DPL,R0
   \   000398   12....       LCALL   ?CALL_IND
   \   00039B   8A..         MOV     ?V0 + 8,R2
   \   00039D   8B..         MOV     ?V0 + 9,R3
   \   00039F   E5..         MOV     A,?V0 + 8
   \   0003A1   45..         ORL     A,?V0 + 9
   \   0003A3   6003         JZ      $+5
   \   0003A5   02....       LJMP    ??send_packet_17 & 0xFFFF
   \   0003A8   05..         INC     ?V0 + 3
   \   0003AA                ; Setup parameters for call to function off
   \   0003AA   12....       LCALL   ??off?relay
    725                  }
    726              }
    727          
    728              if(collisions > 0) {
   \                     ??send_packet_15:
   \   0003AD   E5..         MOV     A,?V0 + 3
   \   0003AF   C3           CLR     C
   \   0003B0   9401         SUBB    A,#0x1
   \   0003B2   4016         JC      ??send_packet_20
    729                  we_are_sending = 0;
   \   0003B4   90....       MOV     DPTR,#we_are_sending
   \   0003B7   7400         MOV     A,#0x0
   \   0003B9   F0           MOVX    @DPTR,A
    730                  off();
   \   0003BA                ; Setup parameters for call to function off
   \   0003BA   12....       LCALL   ??off?relay
    731                  PRINTF("contikimac: collisions before sending\n");
    732                  contikimac_is_on = contikimac_was_on;
   \   0003BD   E5..         MOV     A,?V0 + 5
   \   0003BF   90....       MOV     DPTR,#contikimac_is_on
   \   0003C2   F0           MOVX    @DPTR,A
    733                  return MAC_TX_COLLISION;
   \   0003C3   7A01         MOV     R2,#0x1
   \   0003C5   7B00         MOV     R3,#0x0
   \   0003C7   02....       LJMP    ??send_packet_1 & 0xFFFF
    734              }
    735          #endif /* RDC_CONF_HARDWARE_CSMA */
    736          
    737          #if !RDC_CONF_HARDWARE_ACK
    738              if(!is_broadcast) {
   \                     ??send_packet_20:
   \   0003CA   E5..         MOV     A,?V0 + 2
   \   0003CC   7003         JNZ     ??send_packet_21
    739                  /* Turn radio on to receive expected unicast ack.  Not necessary
    740                     with hardware ack detection, and may trigger an unnecessary cca
    741                     or rx cycle */
    742                  on();
   \   0003CE                ; Setup parameters for call to function on
   \   0003CE   12....       LCALL   ??on?relay
    743              }
    744          #endif
    745          
    746              watchdog_periodic();
   \                     ??send_packet_21:
   \   0003D1                ; Setup parameters for call to function watchdog_periodic
   \   0003D1   12....       LCALL   ??watchdog_periodic?relay
    747              t0 = RTIMER_NOW();
   \   0003D4   E5E2         MOV     A,0xe2
   \   0003D6   FA           MOV     R2,A
   \   0003D7   7B00         MOV     R3,#0x0
   \   0003D9   E5E3         MOV     A,0xe3
   \   0003DB   F8           MOV     R0,A
   \   0003DC   7900         MOV     R1,#0x0
   \   0003DE   E4           CLR     A
   \   0003DF   C8           XCH     A,R0
   \   0003E0   F9           MOV     R1,A
   \   0003E1   EA           MOV     A,R2
   \   0003E2   28           ADD     A,R0
   \   0003E3   FE           MOV     R6,A
   \   0003E4   EB           MOV     A,R3
   \   0003E5   39           ADDC    A,R1
   \   0003E6   FF           MOV     R7,A
    748              seqno = packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO);
   \   0003E7                ; Setup parameters for call to function packetbuf_attr
   \   0003E7   790A         MOV     R1,#0xa
   \   0003E9   12....       LCALL   ??packetbuf_attr?relay
   \   0003EC   EA           MOV     A,R2
   \   0003ED   85..82       MOV     DPL,?XSP + 0
   \   0003F0   85..83       MOV     DPH,?XSP + 1
   \   0003F3   F0           MOVX    @DPTR,A
    749              for(strobes = 0, collisions = 0;
   \   0003F4   75..00       MOV     ?V0 + 8,#0x0
   \   0003F7   75..00       MOV     ?V0 + 9,#0x0
   \   0003FA   75..00       MOV     ?V0 + 3,#0x0
   \   0003FD   800E         SJMP    ??send_packet_22
    750                      got_strobe_ack == 0 && collisions == 0 &&
    751                      RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + STROBE_TIME); strobes++) {
    752          
    753                  watchdog_periodic();
    754          
    755                  if(!is_broadcast && (is_receiver_awake || is_known_receiver) &&
    756                          !RTIMER_CLOCK_LT(RTIMER_NOW(), t0 + MAX_PHASE_STROBE_TIME)) {
    757                      PRINTF("miss to %d\n", packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0]);
    758                      break;
    759                  }
    760          
    761                  len = 0;
    762          
    763                  {
    764                      rtimer_clock_t wt;
    765                      rtimer_clock_t txtime;
    766                      int ret;
    767          
    768                      txtime = RTIMER_NOW();
    769                      ret = NETSTACK_RADIO.transmit(transmit_len);
    770          
    771          #if RDC_CONF_HARDWARE_ACK
    772                      /* For radios that block in the transmit routine and detect the
    773                         ACK in hardware */
    774                      if(ret == RADIO_TX_OK) {
    775                          if(!is_broadcast) {
    776                              got_strobe_ack = 1;
    777                              encounter_time = txtime;
    778                              break;
    779                          }
    780                      } else if (ret == RADIO_TX_NOACK) {
    781                      } else if (ret == RADIO_TX_COLLISION) {
    782                          PRINTF("contikimac: collisions while sending\n");
    783                          collisions++;
    784                      }
    785                      wt = RTIMER_NOW();
    786                      while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + INTER_PACKET_INTERVAL)) { }
    787          #else /* RDC_CONF_HARDWARE_ACK */
    788                      /* Wait for the ACK packet */
    789                      wt = RTIMER_NOW();
    790                      while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + INTER_PACKET_INTERVAL)) { }
    791          
    792                      if(!is_broadcast && (NETSTACK_RADIO.receiving_packet() ||
    793                                  NETSTACK_RADIO.pending_packet() ||
    794                                  NETSTACK_RADIO.channel_clear() == 0)) {
    795                          uint8_t ackbuf[ACK_LEN];
    796                          wt = RTIMER_NOW();
    797                          while(RTIMER_CLOCK_LT(RTIMER_NOW(), wt + AFTER_ACK_DETECTECT_WAIT_TIME)) { }
    798          
    799                          len = NETSTACK_RADIO.read(ackbuf, ACK_LEN);
    800                          if(len == ACK_LEN && seqno == ackbuf[ACK_LEN - 1]) {
    801                              got_strobe_ack = 1;
    802                              encounter_time = txtime;
    803                              break;
    804                          } else {
    805                              PRINTF("contikimac: collisions while sending\n");
    806                              collisions++;
   \                     ??send_packet_23:
   \   0003FF   05..         INC     ?V0 + 3
    807                          }
   \                     ??send_packet_24:
   \   000401   E5..         MOV     A,?V0 + 8
   \   000403   2401         ADD     A,#0x1
   \   000405   F5..         MOV     ?V0 + 8,A
   \   000407   E5..         MOV     A,?V0 + 9
   \   000409   3400         ADDC    A,#0x0
   \   00040B   F5..         MOV     ?V0 + 9,A
   \                     ??send_packet_22:
   \   00040D   E5..         MOV     A,?V0 + 4
   \   00040F   6003         JZ      $+5
   \   000411   02....       LJMP    ??send_packet_25 & 0xFFFF
   \   000414   E5..         MOV     A,?V0 + 3
   \   000416   6003         JZ      $+5
   \   000418   02....       LJMP    ??send_packet_25 & 0xFFFF
   \   00041B   E5E2         MOV     A,0xe2
   \   00041D   FA           MOV     R2,A
   \   00041E   7B00         MOV     R3,#0x0
   \   000420   E5E3         MOV     A,0xe3
   \   000422   F8           MOV     R0,A
   \   000423   7900         MOV     R1,#0x0
   \   000425   E4           CLR     A
   \   000426   C8           XCH     A,R0
   \   000427   F9           MOV     R1,A
   \   000428   EA           MOV     A,R2
   \   000429   28           ADD     A,R0
   \   00042A   F8           MOV     R0,A
   \   00042B   EB           MOV     A,R3
   \   00042C   39           ADDC    A,R1
   \   00042D   F9           MOV     R1,A
   \   00042E   E8           MOV     A,R0
   \   00042F   C3           CLR     C
   \   000430   9E           SUBB    A,R6
   \   000431   F8           MOV     R0,A
   \   000432   E9           MOV     A,R1
   \   000433   9F           SUBB    A,R7
   \   000434   F9           MOV     R1,A
   \   000435   E8           MOV     A,R0
   \   000436   C3           CLR     C
   \   000437   94C1         SUBB    A,#-0x3f
   \   000439   F8           MOV     R0,A
   \   00043A   E9           MOV     A,R1
   \   00043B   9407         SUBB    A,#0x7
   \   00043D   F9           MOV     R1,A
   \   00043E   C3           CLR     C
   \   00043F   E8           MOV     A,R0
   \   000440   9400         SUBB    A,#0x0
   \   000442   E9           MOV     A,R1
   \   000443   9400         SUBB    A,#0x0
   \   000445   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000447   65D0         XRL     A,PSW
   \   000449   33           RLC     A
   \   00044A   4003         JC      $+5
   \   00044C   02....       LJMP    ??send_packet_25 & 0xFFFF
   \   00044F                ; Setup parameters for call to function watchdog_periodic
   \   00044F   12....       LCALL   ??watchdog_periodic?relay
   \   000452   E5..         MOV     A,?V0 + 2
   \   000454   7046         JNZ     ??send_packet_26
   \   000456   7420         MOV     A,#0x20
   \   000458   12....       LCALL   ?XSTACK_DISP0_8
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   F8           MOV     R0,A
   \   00045D   A3           INC     DPTR
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   F9           MOV     R1,A
   \   000460   E8           MOV     A,R0
   \   000461   49           ORL     A,R1
   \   000462   7004         JNZ     ??send_packet_27
   \   000464   E5..         MOV     A,?V0 + 14
   \   000466   6034         JZ      ??send_packet_26
   \                     ??send_packet_27:
   \   000468   E5E2         MOV     A,0xe2
   \   00046A   FA           MOV     R2,A
   \   00046B   7B00         MOV     R3,#0x0
   \   00046D   E5E3         MOV     A,0xe3
   \   00046F   F8           MOV     R0,A
   \   000470   7900         MOV     R1,#0x0
   \   000472   E4           CLR     A
   \   000473   C8           XCH     A,R0
   \   000474   F9           MOV     R1,A
   \   000475   EA           MOV     A,R2
   \   000476   28           ADD     A,R0
   \   000477   F8           MOV     R0,A
   \   000478   EB           MOV     A,R3
   \   000479   39           ADDC    A,R1
   \   00047A   F9           MOV     R1,A
   \   00047B   E8           MOV     A,R0
   \   00047C   C3           CLR     C
   \   00047D   9E           SUBB    A,R6
   \   00047E   F8           MOV     R0,A
   \   00047F   E9           MOV     A,R1
   \   000480   9F           SUBB    A,R7
   \   000481   F9           MOV     R1,A
   \   000482   E8           MOV     A,R0
   \   000483   C3           CLR     C
   \   000484   9404         SUBB    A,#0x4
   \   000486   F8           MOV     R0,A
   \   000487   E9           MOV     A,R1
   \   000488   9401         SUBB    A,#0x1
   \   00048A   F9           MOV     R1,A
   \   00048B   C3           CLR     C
   \   00048C   E8           MOV     A,R0
   \   00048D   9400         SUBB    A,#0x0
   \   00048F   E9           MOV     A,R1
   \   000490   9400         SUBB    A,#0x0
   \   000492   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000494   65D0         XRL     A,PSW
   \   000496   33           RLC     A
   \   000497   4003         JC      $+5
   \   000499   02....       LJMP    ??send_packet_25 & 0xFFFF
   \                     ??send_packet_26:
   \   00049C   75..00       MOV     ?V0 + 12,#0x0
   \   00049F   75..00       MOV     ?V0 + 13,#0x0
   \   0004A2   E5E2         MOV     A,0xe2
   \   0004A4   FA           MOV     R2,A
   \   0004A5   7B00         MOV     R3,#0x0
   \   0004A7   E5E3         MOV     A,0xe3
   \   0004A9   F8           MOV     R0,A
   \   0004AA   7900         MOV     R1,#0x0
   \   0004AC   E4           CLR     A
   \   0004AD   C8           XCH     A,R0
   \   0004AE   F9           MOV     R1,A
   \   0004AF   EA           MOV     A,R2
   \   0004B0   28           ADD     A,R0
   \   0004B1   F5..         MOV     ?V0 + 0,A
   \   0004B3   EB           MOV     A,R3
   \   0004B4   39           ADDC    A,R1
   \   0004B5   F5..         MOV     ?V0 + 1,A
   \   0004B7                ; Setup parameters for indirect call
   \   0004B7   AA..         MOV     R2,?V0 + 6
   \   0004B9   AB..         MOV     R3,?V0 + 7
   \   0004BB   90....       MOV     DPTR,#cc2530_rf_driver + 4
   \   0004BE   E0           MOVX    A,@DPTR
   \   0004BF   F8           MOV     R0,A
   \   0004C0   A3           INC     DPTR
   \   0004C1   E0           MOVX    A,@DPTR
   \   0004C2   F583         MOV     DPH,A
   \   0004C4   8882         MOV     DPL,R0
   \   0004C6   12....       LCALL   ?CALL_IND
   \   0004C9   8A..         MOV     ?V0 + 10,R2
   \   0004CB   8B..         MOV     ?V0 + 11,R3
   \   0004CD   AC..         MOV     R4,?V0 + 10
   \   0004CF   AD..         MOV     R5,?V0 + 11
   \   0004D1   E5E2         MOV     A,0xe2
   \   0004D3   FA           MOV     R2,A
   \   0004D4   7B00         MOV     R3,#0x0
   \   0004D6   E5E3         MOV     A,0xe3
   \   0004D8   F8           MOV     R0,A
   \   0004D9   7900         MOV     R1,#0x0
   \   0004DB   E4           CLR     A
   \   0004DC   C8           XCH     A,R0
   \   0004DD   F9           MOV     R1,A
   \   0004DE   EA           MOV     A,R2
   \   0004DF   28           ADD     A,R0
   \   0004E0   F8           MOV     R0,A
   \   0004E1   EB           MOV     A,R3
   \   0004E2   39           ADDC    A,R1
   \   0004E3   F9           MOV     R1,A
   \                     ??send_packet_28:
   \   0004E4   E5E2         MOV     A,0xe2
   \   0004E6   FC           MOV     R4,A
   \   0004E7   7D00         MOV     R5,#0x0
   \   0004E9   E5E3         MOV     A,0xe3
   \   0004EB   FA           MOV     R2,A
   \   0004EC   7B00         MOV     R3,#0x0
   \   0004EE   E4           CLR     A
   \   0004EF   CA           XCH     A,R2
   \   0004F0   FB           MOV     R3,A
   \   0004F1   EC           MOV     A,R4
   \   0004F2   2A           ADD     A,R2
   \   0004F3   FA           MOV     R2,A
   \   0004F4   ED           MOV     A,R5
   \   0004F5   3B           ADDC    A,R3
   \   0004F6   FB           MOV     R3,A
   \   0004F7   EA           MOV     A,R2
   \   0004F8   C3           CLR     C
   \   0004F9   98           SUBB    A,R0
   \   0004FA   FA           MOV     R2,A
   \   0004FB   EB           MOV     A,R3
   \   0004FC   99           SUBB    A,R1
   \   0004FD   FB           MOV     R3,A
   \   0004FE   EA           MOV     A,R2
   \   0004FF   C3           CLR     C
   \   000500   9406         SUBB    A,#0x6
   \   000502   FA           MOV     R2,A
   \   000503   EB           MOV     A,R3
   \   000504   9400         SUBB    A,#0x0
   \   000506   FB           MOV     R3,A
   \   000507   C3           CLR     C
   \   000508   EA           MOV     A,R2
   \   000509   9400         SUBB    A,#0x0
   \   00050B   EB           MOV     A,R3
   \   00050C   9400         SUBB    A,#0x0
   \   00050E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000510   65D0         XRL     A,PSW
   \   000512   33           RLC     A
   \   000513   40CF         JC      ??send_packet_28
   \   000515   E5..         MOV     A,?V0 + 2
   \   000517   6003         JZ      $+5
   \   000519   02....       LJMP    ??send_packet_24 & 0xFFFF
   \   00051C                ; Setup parameters for indirect call
   \   00051C   90....       MOV     DPTR,#cc2530_rf_driver + 12
   \   00051F   E0           MOVX    A,@DPTR
   \   000520   F8           MOV     R0,A
   \   000521   A3           INC     DPTR
   \   000522   E0           MOVX    A,@DPTR
   \   000523   F583         MOV     DPH,A
   \   000525   8882         MOV     DPL,R0
   \   000527   12....       LCALL   ?CALL_IND
   \   00052A   8A..         MOV     ?V0 + 10,R2
   \   00052C   8B..         MOV     ?V0 + 11,R3
   \   00052E   E5..         MOV     A,?V0 + 10
   \   000530   45..         ORL     A,?V0 + 11
   \   000532   7033         JNZ     ??send_packet_29
   \   000534                ; Setup parameters for indirect call
   \   000534   90....       MOV     DPTR,#cc2530_rf_driver + 14
   \   000537   E0           MOVX    A,@DPTR
   \   000538   F8           MOV     R0,A
   \   000539   A3           INC     DPTR
   \   00053A   E0           MOVX    A,@DPTR
   \   00053B   F583         MOV     DPH,A
   \   00053D   8882         MOV     DPL,R0
   \   00053F   12....       LCALL   ?CALL_IND
   \   000542   8A..         MOV     ?V0 + 10,R2
   \   000544   8B..         MOV     ?V0 + 11,R3
   \   000546   E5..         MOV     A,?V0 + 10
   \   000548   45..         ORL     A,?V0 + 11
   \   00054A   701B         JNZ     ??send_packet_29
   \   00054C                ; Setup parameters for indirect call
   \   00054C   90....       MOV     DPTR,#cc2530_rf_driver + 10
   \   00054F   E0           MOVX    A,@DPTR
   \   000550   F8           MOV     R0,A
   \   000551   A3           INC     DPTR
   \   000552   E0           MOVX    A,@DPTR
   \   000553   F583         MOV     DPH,A
   \   000555   8882         MOV     DPL,R0
   \   000557   12....       LCALL   ?CALL_IND
   \   00055A   8A..         MOV     ?V0 + 10,R2
   \   00055C   8B..         MOV     ?V0 + 11,R3
   \   00055E   E5..         MOV     A,?V0 + 10
   \   000560   45..         ORL     A,?V0 + 11
   \   000562   6003         JZ      $+5
   \   000564   02....       LJMP    ??send_packet_24 & 0xFFFF
   \                     ??send_packet_29:
   \   000567   E5E2         MOV     A,0xe2
   \   000569   FA           MOV     R2,A
   \   00056A   7B00         MOV     R3,#0x0
   \   00056C   E5E3         MOV     A,0xe3
   \   00056E   F8           MOV     R0,A
   \   00056F   7900         MOV     R1,#0x0
   \   000571   E4           CLR     A
   \   000572   C8           XCH     A,R0
   \   000573   F9           MOV     R1,A
   \   000574   EA           MOV     A,R2
   \   000575   28           ADD     A,R0
   \   000576   F8           MOV     R0,A
   \   000577   EB           MOV     A,R3
   \   000578   39           ADDC    A,R1
   \   000579   F9           MOV     R1,A
   \                     ??send_packet_30:
   \   00057A   E5E2         MOV     A,0xe2
   \   00057C   FC           MOV     R4,A
   \   00057D   7D00         MOV     R5,#0x0
   \   00057F   E5E3         MOV     A,0xe3
   \   000581   FA           MOV     R2,A
   \   000582   7B00         MOV     R3,#0x0
   \   000584   E4           CLR     A
   \   000585   CA           XCH     A,R2
   \   000586   FB           MOV     R3,A
   \   000587   EC           MOV     A,R4
   \   000588   2A           ADD     A,R2
   \   000589   FA           MOV     R2,A
   \   00058A   ED           MOV     A,R5
   \   00058B   3B           ADDC    A,R3
   \   00058C   FB           MOV     R3,A
   \   00058D   EA           MOV     A,R2
   \   00058E   C3           CLR     C
   \   00058F   98           SUBB    A,R0
   \   000590   FA           MOV     R2,A
   \   000591   EB           MOV     A,R3
   \   000592   99           SUBB    A,R1
   \   000593   FB           MOV     R3,A
   \   000594   EA           MOV     A,R2
   \   000595   C3           CLR     C
   \   000596   940A         SUBB    A,#0xa
   \   000598   FA           MOV     R2,A
   \   000599   EB           MOV     A,R3
   \   00059A   9400         SUBB    A,#0x0
   \   00059C   FB           MOV     R3,A
   \   00059D   C3           CLR     C
   \   00059E   EA           MOV     A,R2
   \   00059F   9400         SUBB    A,#0x0
   \   0005A1   EB           MOV     A,R3
   \   0005A2   9400         SUBB    A,#0x0
   \   0005A4   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0005A6   65D0         XRL     A,PSW
   \   0005A8   33           RLC     A
   \   0005A9   40CF         JC      ??send_packet_30
   \   0005AB                ; Setup parameters for indirect call
   \   0005AB   7C03         MOV     R4,#0x3
   \   0005AD   7D00         MOV     R5,#0x0
   \   0005AF   7403         MOV     A,#0x3
   \   0005B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B4   AA82         MOV     R2,DPL
   \   0005B6   AB83         MOV     R3,DPH
   \   0005B8   90....       MOV     DPTR,#cc2530_rf_driver + 8
   \   0005BB   E0           MOVX    A,@DPTR
   \   0005BC   F8           MOV     R0,A
   \   0005BD   A3           INC     DPTR
   \   0005BE   E0           MOVX    A,@DPTR
   \   0005BF   F583         MOV     DPH,A
   \   0005C1   8882         MOV     DPL,R0
   \   0005C3   12....       LCALL   ?CALL_IND
   \   0005C6   8A..         MOV     ?V0 + 10,R2
   \   0005C8   8B..         MOV     ?V0 + 11,R3
   \   0005CA   85....       MOV     ?V0 + 12,?V0 + 10
   \   0005CD   85....       MOV     ?V0 + 13,?V0 + 11
   \   0005D0   7403         MOV     A,#0x3
   \   0005D2   65..         XRL     A,?V0 + 12
   \   0005D4   7004         JNZ     ??send_packet_31
   \   0005D6   7400         MOV     A,#0x0
   \   0005D8   65..         XRL     A,?V0 + 13
   \                     ??send_packet_31:
   \   0005DA   6003         JZ      $+5
   \   0005DC   02....       LJMP    ??send_packet_23 & 0xFFFF
   \   0005DF   85..82       MOV     DPL,?XSP + 0
   \   0005E2   85..83       MOV     DPH,?XSP + 1
   \   0005E5   E0           MOVX    A,@DPTR
   \   0005E6   F8           MOV     R0,A
   \   0005E7   7405         MOV     A,#0x5
   \   0005E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005EC   E0           MOVX    A,@DPTR
   \   0005ED   68           XRL     A,R0
   \   0005EE   6003         JZ      $+5
   \   0005F0   02....       LJMP    ??send_packet_23 & 0xFFFF
   \   0005F3   75..01       MOV     ?V0 + 4,#0x1
   \   0005F6   7401         MOV     A,#0x1
   \   0005F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FB   E5..         MOV     A,?V0 + 0
   \   0005FD   F0           MOVX    @DPTR,A
   \   0005FE   A3           INC     DPTR
   \   0005FF   E5..         MOV     A,?V0 + 1
   \   000601   F0           MOVX    @DPTR,A
    808                      }
    809          #endif /* RDC_CONF_HARDWARE_ACK */
    810                  }
    811              }
    812          
    813              off();
   \                     ??send_packet_25:
   \   000602                ; Setup parameters for call to function off
   \   000602   12....       LCALL   ??off?relay
    814          
    815              PRINTF("contikimac: send (strobes=%u, len=%u, %s, %s), done\n", strobes,
    816                      packetbuf_totlen(),
    817                      got_strobe_ack ? "ack" : "no ack",
    818                      collisions ? "collision" : "no collision");
    819          
    820          #if CONTIKIMAC_CONF_COMPOWER
    821              /* Accumulate the power consumption for the packet transmission. */
    822              compower_accumulate(&current_packet);
    823          
    824              /* Convert the accumulated power consumption for the transmitted
    825                 packet to packet attributes so that the higher levels can keep
    826                 track of the amount of energy spent on transmitting the
    827                 packet. */
    828              compower_attrconv(&current_packet);
    829          
    830              /* Clear the accumulated power consumption so that it is ready for
    831                 the next packet. */
    832              compower_clear(&current_packet);
    833          #endif /* CONTIKIMAC_CONF_COMPOWER */
    834          
    835              contikimac_is_on = contikimac_was_on;
   \   000605   E5..         MOV     A,?V0 + 5
   \   000607   90....       MOV     DPTR,#contikimac_is_on
   \   00060A   F0           MOVX    @DPTR,A
    836              we_are_sending = 0;
   \   00060B   90....       MOV     DPTR,#we_are_sending
   \   00060E   7400         MOV     A,#0x0
   \   000610   F0           MOVX    @DPTR,A
    837          
    838              /* Determine the return value that we will return from the
    839                 function. We must pass this value to the phase module before we
    840                 return from the function.  */
    841              if(collisions > 0) {
   \   000611   E5..         MOV     A,?V0 + 3
   \   000613   C3           CLR     C
   \   000614   9401         SUBB    A,#0x1
   \   000616   4008         JC      ??send_packet_32
    842                  ret = MAC_TX_COLLISION;
   \   000618   75..01       MOV     ?V0 + 0,#0x1
   \   00061B   75..00       MOV     ?V0 + 1,#0x0
   \   00061E   8016         SJMP    ??send_packet_33
    843              } else if(!is_broadcast && !got_strobe_ack) {
   \                     ??send_packet_32:
   \   000620   E5..         MOV     A,?V0 + 2
   \   000622   700C         JNZ     ??send_packet_34
   \   000624   E5..         MOV     A,?V0 + 4
   \   000626   7008         JNZ     ??send_packet_34
    844                  ret = MAC_TX_NOACK;
   \   000628   75..02       MOV     ?V0 + 0,#0x2
   \   00062B   75..00       MOV     ?V0 + 1,#0x0
   \   00062E   8006         SJMP    ??send_packet_33
    845              } else {
    846                  ret = MAC_TX_OK;
   \                     ??send_packet_34:
   \   000630   75..00       MOV     ?V0 + 0,#0x0
   \   000633   75..00       MOV     ?V0 + 1,#0x0
    847              }
    848          
    849          #if WITH_PHASE_OPTIMIZATION
    850              if(is_known_receiver && got_strobe_ack) {
    851                  PRINTF("no miss %d wake-ups %d\n",
    852                          packetbuf_addr(PACKETBUF_ADDR_RECEIVER)->u8[0],
    853                          strobes);
    854              }
    855          
    856              if(!is_broadcast) {
   \                     ??send_packet_33:
   \   000636   E5..         MOV     A,?V0 + 2
   \   000638   7038         JNZ     ??send_packet_35
    857                  if(collisions == 0 && is_receiver_awake == 0) {
   \   00063A   E5..         MOV     A,?V0 + 3
   \   00063C   7034         JNZ     ??send_packet_35
   \   00063E   7420         MOV     A,#0x20
   \   000640   12....       LCALL   ?XSTACK_DISP0_8
   \   000643   E0           MOVX    A,@DPTR
   \   000644   F8           MOV     R0,A
   \   000645   A3           INC     DPTR
   \   000646   E0           MOVX    A,@DPTR
   \   000647   F9           MOV     R1,A
   \   000648   E8           MOV     A,R0
   \   000649   49           ORL     A,R1
   \   00064A   7026         JNZ     ??send_packet_35
    858                      phase_update(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    859                              encounter_time, ret);
   \   00064C                ; Setup parameters for call to function phase_update
   \   00064C   78..         MOV     R0,#?V0 + 0
   \   00064E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000651   7403         MOV     A,#0x3
   \   000653   12....       LCALL   ?XSTACK_DISP0_8
   \   000656   E0           MOVX    A,@DPTR
   \   000657   FC           MOV     R4,A
   \   000658   A3           INC     DPTR
   \   000659   E0           MOVX    A,@DPTR
   \   00065A   FD           MOV     R5,A
   \   00065B   FF           MOV     R7,A
   \   00065C   EC           MOV     A,R4
   \   00065D   FE           MOV     R6,A
   \   00065E   ED           MOV     A,R5
   \   00065F   FF           MOV     R7,A
   \   000660                ; Setup parameters for call to function packetbuf_addr
   \   000660   7919         MOV     R1,#0x19
   \   000662   12....       LCALL   ??packetbuf_addr?relay
   \   000665   FD           MOV     R5,A
   \   000666   EE           MOV     A,R6
   \   000667   FC           MOV     R4,A
   \   000668   EF           MOV     A,R7
   \   000669   FD           MOV     R5,A
   \   00066A   12....       LCALL   ??phase_update?relay
   \   00066D   7402         MOV     A,#0x2
   \   00066F   12....       LCALL   ?DEALLOC_XSTACK8
    860                  }
    861              }
    862          #endif /* WITH_PHASE_OPTIMIZATION */
    863          
    864              return ret;
   \                     ??send_packet_35:
   \   000672   AA..         MOV     R2,?V0 + 0
   \   000674   AB..         MOV     R3,?V0 + 1
   \                     ??send_packet_1:
   \   000676   7406         MOV     A,#0x6
   \   000678   12....       LCALL   ?DEALLOC_XSTACK8
   \   00067B   7F10         MOV     R7,#0x10
   \   00067D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000680                REQUIRE T1CNTL
   \   000680                REQUIRE T1CNTH
    865          }
    866          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    867              static void
    868          qsend_packet(mac_callback_t sent, void *ptr)
   \                     qsend_packet:
    869          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    870              int ret = send_packet(sent, ptr, NULL, 0);
   \   00000D                ; Setup parameters for call to function send_packet
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   F5..         MOV     ?V0 + 3,A
   \   000012   78..         MOV     R0,#?V0 + 2
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   E4           CLR     A
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   F5..         MOV     ?V0 + 3,A
   \   00001C   78..         MOV     R0,#?V0 + 2
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   AC..         MOV     R4,?V0 + 0
   \   000023   AD..         MOV     R5,?V0 + 1
   \   000025   EE           MOV     A,R6
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??send_packet?relay
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   8A..         MOV     ?V0 + 4,R2
   \   000033   8B..         MOV     ?V0 + 5,R3
   \   000035   85....       MOV     ?V0 + 2,?V0 + 4
   \   000038   85....       MOV     ?V0 + 3,?V0 + 5
    871              if(ret != MAC_TX_DEFERRED) {
   \   00003B   7403         MOV     A,#0x3
   \   00003D   65..         XRL     A,?V0 + 2
   \   00003F   7004         JNZ     ??qsend_packet_0
   \   000041   7400         MOV     A,#0x0
   \   000043   65..         XRL     A,?V0 + 3
   \                     ??qsend_packet_0:
   \   000045   6020         JZ      ??qsend_packet_1
    872                  mac_call_sent_callback(sent, ptr, ret, 1);
   \   000047                ; Setup parameters for call to function mac_call_sent_callback
   \   000047   75..01       MOV     ?V0 + 4,#0x1
   \   00004A   75..00       MOV     ?V0 + 5,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 4
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   78..         MOV     R0,#?V0 + 2
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   AC..         MOV     R4,?V0 + 0
   \   000059   AD..         MOV     R5,?V0 + 1
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   ??mac_call_sent_callback?relay
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    873              }
    874          }
   \                     ??qsend_packet_1:
   \   000067   7F06         MOV     R7,#0x6
   \   000069   02....       LJMP    ?BANKED_LEAVE_XDATA
    875          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876              static void
    877          qsend_list(mac_callback_t sent, void *ptr, struct rdc_buf_list *buf_list)
   \                     qsend_list:
    878          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7414         MOV     A,#0x14
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 5,A
    879              struct rdc_buf_list *curr = buf_list;
    880              struct rdc_buf_list *next;
    881              int ret;
    882              int is_receiver_awake;
    883          
    884              if(curr == NULL) {
   \   000019   E5..         MOV     A,?V0 + 4
   \   00001B   45..         ORL     A,?V0 + 5
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??qsend_list_0 & 0xFFFF
    885                  return;
    886              }
    887              /* Do not send during reception of a burst */
    888              if(we_are_receiving_burst) {
   \   000022   90....       MOV     DPTR,#we_are_receiving_burst
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   6039         JZ      ??qsend_list_1
    889                  /* Prepare the packetbuf for callback */
    890                  queuebuf_to_packetbuf(curr->buf);
   \   00002E                ; Setup parameters for call to function queuebuf_to_packetbuf
   \   00002E   85..82       MOV     DPL,?V0 + 4
   \   000031   85..83       MOV     DPH,?V0 + 5
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   ??queuebuf_to_packetbuf?relay
    891                  /* Return COLLISION so the MAC may try again later */
    892                  mac_call_sent_callback(sent, ptr, MAC_TX_COLLISION, 1);
   \   00003E                ; Setup parameters for call to function mac_call_sent_callback
   \   00003E   75..01       MOV     ?V0 + 2,#0x1
   \   000041   75..00       MOV     ?V0 + 3,#0x0
   \   000044   78..         MOV     R0,#?V0 + 2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..01       MOV     ?V0 + 2,#0x1
   \   00004C   75..00       MOV     ?V0 + 3,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   AC..         MOV     R4,?V0 + 0
   \   000056   AD..         MOV     R5,?V0 + 1
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   ??mac_call_sent_callback?relay
   \   00005F   7404         MOV     A,#0x4
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    893                  return;
   \   000064   02....       LJMP    ??qsend_list_0 & 0xFFFF
    894              }
    895              /* The receiver needs to be awoken before we send */
    896              is_receiver_awake = 0;
   \                     ??qsend_list_1:
   \   000067   75..00       MOV     ?V0 + 6,#0x0
   \   00006A   75..00       MOV     ?V0 + 7,#0x0
    897              do { /* A loop sending a burst of packets from buf_list */
    898                  next = list_item_next(curr);
   \                     ??qsend_list_2:
   \   00006D                ; Setup parameters for call to function list_item_next
   \   00006D   AA..         MOV     R2,?V0 + 4
   \   00006F   AB..         MOV     R3,?V0 + 5
   \   000071   12....       LCALL   ??list_item_next?relay
   \   000074   8A..         MOV     ?V0 + 8,R2
   \   000076   8B..         MOV     ?V0 + 9,R3
   \   000078   85....       MOV     ?V0 + 2,?V0 + 8
   \   00007B   85....       MOV     ?V0 + 3,?V0 + 9
    899          
    900                  /* Prepare the packetbuf */
    901                  queuebuf_to_packetbuf(curr->buf);
   \   00007E                ; Setup parameters for call to function queuebuf_to_packetbuf
   \   00007E   85..82       MOV     DPL,?V0 + 4
   \   000081   85..83       MOV     DPH,?V0 + 5
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   FA           MOV     R2,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   ??queuebuf_to_packetbuf?relay
    902                  if(next != NULL) {
   \   00008E   E5..         MOV     A,?V0 + 2
   \   000090   45..         ORL     A,?V0 + 3
   \   000092   6009         JZ      ??qsend_list_3
    903                      packetbuf_set_attr(PACKETBUF_ATTR_PENDING, 1);
   \   000094                ; Setup parameters for call to function packetbuf_set_attr
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   7912         MOV     R1,#0x12
   \   00009A   12....       LCALL   ??packetbuf_set_attr?relay
    904                  }
    905          
    906                  /* Send the current packet */
    907                  ret = send_packet(sent, ptr, curr, is_receiver_awake);
   \                     ??qsend_list_3:
   \   00009D                ; Setup parameters for call to function send_packet
   \   00009D   78..         MOV     R0,#?V0 + 6
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   AC..         MOV     R4,?V0 + 0
   \   0000A9   AD..         MOV     R5,?V0 + 1
   \   0000AB   EE           MOV     A,R6
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   FB           MOV     R3,A
   \   0000AF   12....       LCALL   ??send_packet?relay
   \   0000B2   7404         MOV     A,#0x4
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   8A..         MOV     ?V0 + 10,R2
   \   0000B9   8B..         MOV     ?V0 + 11,R3
   \   0000BB   85....       MOV     ?V0 + 8,?V0 + 10
   \   0000BE   85....       MOV     ?V0 + 9,?V0 + 11
    908                  if(ret != MAC_TX_DEFERRED) {
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   65..         XRL     A,?V0 + 8
   \   0000C5   7004         JNZ     ??qsend_list_4
   \   0000C7   7400         MOV     A,#0x0
   \   0000C9   65..         XRL     A,?V0 + 9
   \                     ??qsend_list_4:
   \   0000CB   6020         JZ      ??qsend_list_5
    909                      mac_call_sent_callback(sent, ptr, ret, 1);
   \   0000CD                ; Setup parameters for call to function mac_call_sent_callback
   \   0000CD   75..01       MOV     ?V0 + 10,#0x1
   \   0000D0   75..00       MOV     ?V0 + 11,#0x0
   \   0000D3   78..         MOV     R0,#?V0 + 10
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   78..         MOV     R0,#?V0 + 8
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   AC..         MOV     R4,?V0 + 0
   \   0000DF   AD..         MOV     R5,?V0 + 1
   \   0000E1   EE           MOV     A,R6
   \   0000E2   FA           MOV     R2,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   FB           MOV     R3,A
   \   0000E5   12....       LCALL   ??mac_call_sent_callback?relay
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
    910                  }
    911          
    912                  if(ret == MAC_TX_OK) {
   \                     ??qsend_list_5:
   \   0000ED   E5..         MOV     A,?V0 + 8
   \   0000EF   45..         ORL     A,?V0 + 9
   \   0000F1   7014         JNZ     ??qsend_list_6
    913                      if(next != NULL) {
   \   0000F3   E5..         MOV     A,?V0 + 2
   \   0000F5   45..         ORL     A,?V0 + 3
   \   0000F7   6014         JZ      ??qsend_list_7
    914                          /* We're in a burst, no need to wake the receiver up again */
    915                          is_receiver_awake = 1;
   \   0000F9   75..01       MOV     ?V0 + 6,#0x1
   \   0000FC   75..00       MOV     ?V0 + 7,#0x0
    916                          curr = next;
   \   0000FF   85....       MOV     ?V0 + 4,?V0 + 2
   \   000102   85....       MOV     ?V0 + 5,?V0 + 3
   \   000105   8006         SJMP    ??qsend_list_7
    917                      }
    918                  } else {
    919                      /* The transmission failed, we stop the burst */
    920                      next = NULL;
   \                     ??qsend_list_6:
   \   000107   75..00       MOV     ?V0 + 2,#0x0
   \   00010A   75..00       MOV     ?V0 + 3,#0x0
    921                  }
    922              } while(next != NULL);
   \                     ??qsend_list_7:
   \   00010D   E5..         MOV     A,?V0 + 2
   \   00010F   45..         ORL     A,?V0 + 3
   \   000111   6003         JZ      $+5
   \   000113   02....       LJMP    ??qsend_list_2 & 0xFFFF
    923          }
   \                     ??qsend_list_0:
   \   000116   7F0C         MOV     R7,#0xc
   \   000118   02....       LJMP    ?BANKED_LEAVE_XDATA
    924          /*---------------------------------------------------------------------------*/
    925          /* Timer callback triggered when receiving a burst, after having
    926             waited for a next packet for a too long time. Turns the radio off
    927             and leaves burst reception mode */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928              static void
    929          recv_burst_off(void *ptr)
   \                     recv_burst_off:
    930          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    931              off();
   \   000004                ; Setup parameters for call to function off
   \   000004   12....       LCALL   ??off?relay
    932              we_are_receiving_burst = 0;
   \   000007   90....       MOV     DPTR,#we_are_receiving_burst
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7400         MOV     A,#0x0
   \   000010   F0           MOVX    @DPTR,A
    933          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    934          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935              static void
    936          input_packet(void)
   \                     input_packet:
    937          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    938              static struct ctimer ct;
    939              if(!we_are_receiving_burst) {
   \   000005   90....       MOV     DPTR,#we_are_receiving_burst
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   7003         JNZ     ??input_packet_0
    940                  off();
   \   000011                ; Setup parameters for call to function off
   \   000011   12....       LCALL   ??off?relay
    941              }
    942          
    943              /*  printf("cycle_start 0x%02x 0x%02x\n", cycle_start, cycle_start % CYCLE_TIME);*/
    944          
    945          #ifdef NETSTACK_DECRYPT
    946              NETSTACK_DECRYPT();
    947          #endif /* NETSTACK_DECRYPT */
    948          
    949              if(packetbuf_totlen() > 0 && NETSTACK_FRAMER.parse() >= 0) {
   \                     ??input_packet_0:
   \   000014                ; Setup parameters for call to function packetbuf_totlen
   \   000014   12....       LCALL   ??packetbuf_totlen?relay
   \   000017   8A..         MOV     ?V0 + 0,R2
   \   000019   8B..         MOV     ?V0 + 1,R3
   \   00001B   E5..         MOV     A,?V0 + 0
   \   00001D   45..         ORL     A,?V0 + 1
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??input_packet_1 & 0xFFFF
   \   000024                ; Setup parameters for indirect call
   \   000024   90....       MOV     DPTR,#framer_802154 + 2
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   12....       LCALL   ?CALL_IND
   \   000032   8A..         MOV     ?V0 + 0,R2
   \   000034   8B..         MOV     ?V0 + 1,R3
   \   000036   C3           CLR     C
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   9400         SUBB    A,#0x0
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   9400         SUBB    A,#0x0
   \   00003F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000041   65D0         XRL     A,PSW
   \   000043   33           RLC     A
   \   000044   5003         JNC     $+5
   \   000046   02....       LJMP    ??input_packet_1 & 0xFFFF
    950          
    951          #if WITH_CONTIKIMAC_HEADER
    952                  struct hdr *chdr;
    953                  chdr = packetbuf_dataptr();
   \   000049                ; Setup parameters for call to function packetbuf_dataptr
   \   000049   12....       LCALL   ??packetbuf_dataptr?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   AE..         MOV     R6,?V0 + 0
   \   000052   AF..         MOV     R7,?V0 + 1
    954                  if(chdr->id != CONTIKIMAC_ID) {
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6003         JZ      $+5
   \   00005B   02....       LJMP    ??input_packet_1 & 0xFFFF
    955                      PRINTF("contikimac: failed to parse hdr (%u)\n", packetbuf_totlen());
    956                      return;
    957                  }
    958                  packetbuf_hdrreduce(sizeof(struct hdr));
   \   00005E                ; Setup parameters for call to function packetbuf_hdrreduce
   \   00005E   7A02         MOV     R2,#0x2
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   ??packetbuf_hdrreduce?relay
    959                  packetbuf_set_datalen(chdr->len);
   \   000065                ; Setup parameters for call to function packetbuf_set_datalen
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   ??packetbuf_set_datalen?relay
    960          #endif /* WITH_CONTIKIMAC_HEADER */
    961          
    962                  if(packetbuf_datalen() > 0 &&
    963                          packetbuf_totlen() > 0 &&
    964                          (rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    965                                        &rimeaddr_node_addr) ||
    966                           rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_RECEIVER),
    967                               &rimeaddr_null))) {
   \   000071                ; Setup parameters for call to function packetbuf_datalen
   \   000071   12....       LCALL   ??packetbuf_datalen?relay
   \   000074   8A..         MOV     ?V0 + 0,R2
   \   000076   8B..         MOV     ?V0 + 1,R3
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   45..         ORL     A,?V0 + 1
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??input_packet_1 & 0xFFFF
   \   000081                ; Setup parameters for call to function packetbuf_totlen
   \   000081   12....       LCALL   ??packetbuf_totlen?relay
   \   000084   8A..         MOV     ?V0 + 0,R2
   \   000086   8B..         MOV     ?V0 + 1,R3
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   45..         ORL     A,?V0 + 1
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??input_packet_1 & 0xFFFF
   \   000091                ; Setup parameters for call to function rimeaddr_cmp
   \   000091   7C..         MOV     R4,#rimeaddr_node_addr & 0xff
   \   000093   7D..         MOV     R5,#(rimeaddr_node_addr >> 8) & 0xff
   \   000095   FF           MOV     R7,A
   \   000096   EC           MOV     A,R4
   \   000097   FE           MOV     R6,A
   \   000098   ED           MOV     A,R5
   \   000099   FF           MOV     R7,A
   \   00009A                ; Setup parameters for call to function packetbuf_addr
   \   00009A   7919         MOV     R1,#0x19
   \   00009C   12....       LCALL   ??packetbuf_addr?relay
   \   00009F   FD           MOV     R5,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FC           MOV     R4,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   FD           MOV     R5,A
   \   0000A4   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000A7   8A..         MOV     ?V0 + 0,R2
   \   0000A9   8B..         MOV     ?V0 + 1,R3
   \   0000AB   E5..         MOV     A,?V0 + 0
   \   0000AD   45..         ORL     A,?V0 + 1
   \   0000AF   7023         JNZ     ??input_packet_2
   \   0000B1                ; Setup parameters for call to function rimeaddr_cmp
   \   0000B1   7C..         MOV     R4,#rimeaddr_null & 0xff
   \   0000B3   7D..         MOV     R5,#(rimeaddr_null >> 8) & 0xff
   \   0000B5   FF           MOV     R7,A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   FE           MOV     R6,A
   \   0000B8   ED           MOV     A,R5
   \   0000B9   FF           MOV     R7,A
   \   0000BA                ; Setup parameters for call to function packetbuf_addr
   \   0000BA   7919         MOV     R1,#0x19
   \   0000BC   12....       LCALL   ??packetbuf_addr?relay
   \   0000BF   FD           MOV     R5,A
   \   0000C0   EE           MOV     A,R6
   \   0000C1   FC           MOV     R4,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   FD           MOV     R5,A
   \   0000C4   12....       LCALL   ??rimeaddr_cmp?relay
   \   0000C7   8A..         MOV     ?V0 + 0,R2
   \   0000C9   8B..         MOV     ?V0 + 1,R3
   \   0000CB   E5..         MOV     A,?V0 + 0
   \   0000CD   45..         ORL     A,?V0 + 1
   \   0000CF   7003         JNZ     $+5
   \   0000D1   02....       LJMP    ??input_packet_1 & 0xFFFF
    968                      /* This is a regular packet that is destined to us or to the
    969                         broadcast address. */
    970          
    971                      /* If FRAME_PENDING is set, we are receiving a packets in a burst */
    972                      we_are_receiving_burst = packetbuf_attr(PACKETBUF_ATTR_PENDING);
   \                     ??input_packet_2:
   \   0000D4                ; Setup parameters for call to function packetbuf_attr
   \   0000D4   7912         MOV     R1,#0x12
   \   0000D6   12....       LCALL   ??packetbuf_attr?relay
   \   0000D9   90....       MOV     DPTR,#we_are_receiving_burst
   \   0000DC   EA           MOV     A,R2
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   EB           MOV     A,R3
   \   0000E0   F0           MOVX    @DPTR,A
    973                      if(we_are_receiving_burst) {
   \   0000E1   90....       MOV     DPTR,#we_are_receiving_burst
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F9           MOV     R1,A
   \   0000E9   E8           MOV     A,R0
   \   0000EA   49           ORL     A,R1
   \   0000EB   602A         JZ      ??input_packet_3
    974                          on();
   \   0000ED                ; Setup parameters for call to function on
   \   0000ED   12....       LCALL   ??on?relay
    975                          /* Set a timer to turn the radio off in case we do not receive
    976                             a next packet */
    977                          ctimer_set(&ct, INTER_PACKET_DEADLINE, recv_burst_off, NULL);
   \   0000F0                ; Setup parameters for call to function ctimer_set
   \   0000F0   E4           CLR     A
   \   0000F1   F5..         MOV     ?V0 + 0,A
   \   0000F3   F5..         MOV     ?V0 + 1,A
   \   0000F5   78..         MOV     R0,#?V0 + 0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   75....       MOV     ?V0 + 0,#??recv_burst_off?relay & 0xff
   \   0000FD   75....       MOV     ?V0 + 1,#(??recv_burst_off?relay >> 8) & 0xff
   \   000100   78..         MOV     R0,#?V0 + 0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   7C04         MOV     R4,#0x4
   \   000107   7D00         MOV     R5,#0x0
   \   000109   7A..         MOV     R2,#??ct & 0xff
   \   00010B   7B..         MOV     R3,#(??ct >> 8) & 0xff
   \   00010D   12....       LCALL   ??ctimer_set?relay
   \   000110   7404         MOV     A,#0x4
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   \   000115   800A         SJMP    ??input_packet_4
    978                      } else {
    979                          off();
   \                     ??input_packet_3:
   \   000117                ; Setup parameters for call to function off
   \   000117   12....       LCALL   ??off?relay
    980                          ctimer_stop(&ct);
   \   00011A                ; Setup parameters for call to function ctimer_stop
   \   00011A   7A..         MOV     R2,#??ct & 0xff
   \   00011C   7B..         MOV     R3,#(??ct >> 8) & 0xff
   \   00011E   12....       LCALL   ??ctimer_stop?relay
    981                      }
    982          
    983                      /* Check for duplicate packet by comparing the sequence number
    984                         of the incoming packet with the last few ones we saw. */
    985                      {
    986                          int i;
    987                          for(i = 0; i < MAX_SEQNOS; ++i) {
   \                     ??input_packet_4:
   \   000121   75..00       MOV     ?V0 + 0,#0x0
   \   000124   75..00       MOV     ?V0 + 1,#0x0
   \   000127   800C         SJMP    ??input_packet_5
   \                     ??input_packet_6:
   \   000129   E5..         MOV     A,?V0 + 0
   \   00012B   2401         ADD     A,#0x1
   \   00012D   F5..         MOV     ?V0 + 0,A
   \   00012F   E5..         MOV     A,?V0 + 1
   \   000131   3400         ADDC    A,#0x0
   \   000133   F5..         MOV     ?V0 + 1,A
   \                     ??input_packet_5:
   \   000135   C3           CLR     C
   \   000136   E5..         MOV     A,?V0 + 0
   \   000138   9410         SUBB    A,#0x10
   \   00013A   E5..         MOV     A,?V0 + 1
   \   00013C   9400         SUBB    A,#0x0
   \   00013E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000140   65D0         XRL     A,PSW
   \   000142   33           RLC     A
   \   000143   4003         JC      $+5
   \   000145   02....       LJMP    ??input_packet_7 & 0xFFFF
    988                              if(packetbuf_attr(PACKETBUF_ATTR_PACKET_ID) == received_seqnos[i].seqno &&
    989                                      rimeaddr_cmp(packetbuf_addr(PACKETBUF_ADDR_SENDER),
    990                                          &received_seqnos[i].sender)) {
   \   000148                ; Setup parameters for call to function packetbuf_attr
   \   000148   790D         MOV     R1,#0xd
   \   00014A   12....       LCALL   ??packetbuf_attr?relay
   \   00014D   8A..         MOV     ?V0 + 2,R2
   \   00014F   8B..         MOV     ?V0 + 3,R3
   \   000151   AA..         MOV     R2,?V0 + 2
   \   000153   AB..         MOV     R3,?V0 + 3
   \   000155   A8..         MOV     R0,?V0 + 0
   \   000157   A9..         MOV     R1,?V0 + 1
   \   000159   E8           MOV     A,R0
   \   00015A   75F003       MOV     B,#0x3
   \   00015D   A4           MUL     AB
   \   00015E   C8           XCH     A,R0
   \   00015F   ACF0         MOV     R4,B
   \   000161   75F000       MOV     B,#0x0
   \   000164   A4           MUL     AB
   \   000165   2C           ADD     A,R4
   \   000166   FC           MOV     R4,A
   \   000167   75F003       MOV     B,#0x3
   \   00016A   E5..         MOV     A,?V0 + 1
   \   00016C   A4           MUL     AB
   \   00016D   2C           ADD     A,R4
   \   00016E   F9           MOV     R1,A
   \   00016F   74..         MOV     A,#(received_seqnos + 2) & 0xff
   \   000171   28           ADD     A,R0
   \   000172   F582         MOV     DPL,A
   \   000174   74..         MOV     A,#((received_seqnos + 2) >> 8) & 0xff
   \   000176   39           ADDC    A,R1
   \   000177   F583         MOV     DPH,A
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F8           MOV     R0,A
   \   00017B   7900         MOV     R1,#0x0
   \   00017D   6A           XRL     A,R2
   \   00017E   7002         JNZ     ??input_packet_8
   \   000180   E9           MOV     A,R1
   \   000181   6B           XRL     A,R3
   \                     ??input_packet_8:
   \   000182   70A5         JNZ     ??input_packet_6
   \   000184                ; Setup parameters for call to function rimeaddr_cmp
   \   000184   A8..         MOV     R0,?V0 + 0
   \   000186   A9..         MOV     R1,?V0 + 1
   \   000188   E8           MOV     A,R0
   \   000189   75F003       MOV     B,#0x3
   \   00018C   A4           MUL     AB
   \   00018D   C8           XCH     A,R0
   \   00018E   AAF0         MOV     R2,B
   \   000190   75F000       MOV     B,#0x0
   \   000193   A4           MUL     AB
   \   000194   2A           ADD     A,R2
   \   000195   FA           MOV     R2,A
   \   000196   75F003       MOV     B,#0x3
   \   000199   E5..         MOV     A,?V0 + 1
   \   00019B   A4           MUL     AB
   \   00019C   2A           ADD     A,R2
   \   00019D   F9           MOV     R1,A
   \   00019E   74..         MOV     A,#received_seqnos & 0xff
   \   0001A0   28           ADD     A,R0
   \   0001A1   FC           MOV     R4,A
   \   0001A2   74..         MOV     A,#(received_seqnos >> 8) & 0xff
   \   0001A4   39           ADDC    A,R1
   \   0001A5   FD           MOV     R5,A
   \   0001A6   FF           MOV     R7,A
   \   0001A7   EC           MOV     A,R4
   \   0001A8   FE           MOV     R6,A
   \   0001A9   ED           MOV     A,R5
   \   0001AA   FF           MOV     R7,A
   \   0001AB                ; Setup parameters for call to function packetbuf_addr
   \   0001AB   7918         MOV     R1,#0x18
   \   0001AD   12....       LCALL   ??packetbuf_addr?relay
   \   0001B0   FD           MOV     R5,A
   \   0001B1   EE           MOV     A,R6
   \   0001B2   FC           MOV     R4,A
   \   0001B3   EF           MOV     A,R7
   \   0001B4   FD           MOV     R5,A
   \   0001B5   12....       LCALL   ??rimeaddr_cmp?relay
   \   0001B8   8A..         MOV     ?V0 + 2,R2
   \   0001BA   8B..         MOV     ?V0 + 3,R3
   \   0001BC   E5..         MOV     A,?V0 + 2
   \   0001BE   45..         ORL     A,?V0 + 3
   \   0001C0   7003         JNZ     $+5
   \   0001C2   02....       LJMP    ??input_packet_6 & 0xFFFF
    991                                  /* Drop the packet. */
    992                                  /*        printf("Drop duplicate ContikiMAC layer packet\n");*/
    993                                  return;
   \   0001C5   02....       LJMP    ??input_packet_1 & 0xFFFF
    994                              }
    995                          }
    996                          for(i = MAX_SEQNOS - 1; i > 0; --i) {
   \                     ??input_packet_7:
   \   0001C8   75..0F       MOV     ?V0 + 0,#0xf
   \   0001CB   75..00       MOV     ?V0 + 1,#0x0
   \   0001CE   8063         SJMP    ??input_packet_9
    997                              memcpy(&received_seqnos[i], &received_seqnos[i - 1],
    998                                      sizeof(struct seqno));
   \                     ??input_packet_10:
   \   0001D0                ; Setup parameters for call to function memcpy
   \   0001D0   75..03       MOV     ?V0 + 2,#0x3
   \   0001D3   75..00       MOV     ?V0 + 3,#0x0
   \   0001D6   78..         MOV     R0,#?V0 + 2
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DB   A8..         MOV     R0,?V0 + 0
   \   0001DD   A9..         MOV     R1,?V0 + 1
   \   0001DF   E8           MOV     A,R0
   \   0001E0   75F003       MOV     B,#0x3
   \   0001E3   A4           MUL     AB
   \   0001E4   C8           XCH     A,R0
   \   0001E5   AAF0         MOV     R2,B
   \   0001E7   75F000       MOV     B,#0x0
   \   0001EA   A4           MUL     AB
   \   0001EB   2A           ADD     A,R2
   \   0001EC   FA           MOV     R2,A
   \   0001ED   75F003       MOV     B,#0x3
   \   0001F0   E5..         MOV     A,?V0 + 1
   \   0001F2   A4           MUL     AB
   \   0001F3   2A           ADD     A,R2
   \   0001F4   F9           MOV     R1,A
   \   0001F5   74..         MOV     A,#(received_seqnos + 253) & 0xff
   \   0001F7   28           ADD     A,R0
   \   0001F8   FC           MOV     R4,A
   \   0001F9   74..         MOV     A,#((received_seqnos - 3) >> 8) & 0xff
   \   0001FB   39           ADDC    A,R1
   \   0001FC   FD           MOV     R5,A
   \   0001FD   A8..         MOV     R0,?V0 + 0
   \   0001FF   A9..         MOV     R1,?V0 + 1
   \   000201   E8           MOV     A,R0
   \   000202   75F003       MOV     B,#0x3
   \   000205   A4           MUL     AB
   \   000206   C8           XCH     A,R0
   \   000207   AAF0         MOV     R2,B
   \   000209   75F000       MOV     B,#0x0
   \   00020C   A4           MUL     AB
   \   00020D   2A           ADD     A,R2
   \   00020E   FA           MOV     R2,A
   \   00020F   75F003       MOV     B,#0x3
   \   000212   E5..         MOV     A,?V0 + 1
   \   000214   A4           MUL     AB
   \   000215   2A           ADD     A,R2
   \   000216   F9           MOV     R1,A
   \   000217   74..         MOV     A,#received_seqnos & 0xff
   \   000219   28           ADD     A,R0
   \   00021A   FA           MOV     R2,A
   \   00021B   74..         MOV     A,#(received_seqnos >> 8) & 0xff
   \   00021D   39           ADDC    A,R1
   \   00021E   FB           MOV     R3,A
   \   00021F   12....       LCALL   ??memcpy?relay
   \   000222   7402         MOV     A,#0x2
   \   000224   12....       LCALL   ?DEALLOC_XSTACK8
    999                          }
   \   000227   E5..         MOV     A,?V0 + 0
   \   000229   24FF         ADD     A,#-0x1
   \   00022B   F5..         MOV     ?V0 + 0,A
   \   00022D   E5..         MOV     A,?V0 + 1
   \   00022F   34FF         ADDC    A,#-0x1
   \   000231   F5..         MOV     ?V0 + 1,A
   \                     ??input_packet_9:
   \   000233   C3           CLR     C
   \   000234   E5..         MOV     A,?V0 + 0
   \   000236   9401         SUBB    A,#0x1
   \   000238   E5..         MOV     A,?V0 + 1
   \   00023A   9400         SUBB    A,#0x0
   \   00023C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00023E   65D0         XRL     A,PSW
   \   000240   33           RLC     A
   \   000241   508D         JNC     ??input_packet_10
   1000                          received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_PACKET_ID);
   \   000243                ; Setup parameters for call to function packetbuf_attr
   \   000243   790D         MOV     R1,#0xd
   \   000245   12....       LCALL   ??packetbuf_attr?relay
   \   000248   EA           MOV     A,R2
   \   000249   90....       MOV     DPTR,#received_seqnos + 2
   \   00024C   F0           MOVX    @DPTR,A
   1001                          rimeaddr_copy(&received_seqnos[0].sender,
   1002                                  packetbuf_addr(PACKETBUF_ADDR_SENDER));
   \   00024D                ; Setup parameters for call to function rimeaddr_copy
   \   00024D                ; Setup parameters for call to function packetbuf_addr
   \   00024D   7918         MOV     R1,#0x18
   \   00024F   12....       LCALL   ??packetbuf_addr?relay
   \   000252   EA           MOV     A,R2
   \   000253   FC           MOV     R4,A
   \   000254   EB           MOV     A,R3
   \   000255   FD           MOV     R5,A
   \   000256   7A..         MOV     R2,#received_seqnos & 0xff
   \   000258   7B..         MOV     R3,#(received_seqnos >> 8) & 0xff
   \   00025A   12....       LCALL   ??rimeaddr_copy?relay
   1003                      }
   1004          
   1005          #if CONTIKIMAC_CONF_COMPOWER
   1006                      /* Accumulate the power consumption for the packet reception. */
   1007                      compower_accumulate(&current_packet);
   1008                      /* Convert the accumulated power consumption for the received
   1009                         packet to packet attributes so that the higher levels can
   1010                         keep track of the amount of energy spent on receiving the
   1011                         packet. */
   1012                      compower_attrconv(&current_packet);
   1013          
   1014                      /* Clear the accumulated power consumption so that it is ready
   1015                         for the next packet. */
   1016                      compower_clear(&current_packet);
   1017          #endif /* CONTIKIMAC_CONF_COMPOWER */
   1018          
   1019                      PRINTDEBUG("contikimac: data (%u)\n", packetbuf_datalen());
   1020                      NETSTACK_MAC.input();
   \   00025D                ; Setup parameters for indirect call
   \   00025D   90....       MOV     DPTR,#nullmac_driver + 6
   \   000260   E0           MOVX    A,@DPTR
   \   000261   F8           MOV     R0,A
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F583         MOV     DPH,A
   \   000266   8882         MOV     DPL,R0
   \   000268   12....       LCALL   ?CALL_IND
   1021                      return;
   1022                  } else {
   1023                      PRINTDEBUG("contikimac: data not for us\n");
   1024                  }
   1025              } else {
   1026                  PRINTF("contikimac: failed to parse (%u)\n", packetbuf_totlen());
   1027              }
   1028          }
   \                     ??input_packet_1:
   \   00026B   7F04         MOV     R7,#0x4
   \   00026D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??ct:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z
   1029          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1030              static void
   1031          init(void)
   \                     init:
   1032          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1033              radio_is_on = 0;
   \   000005   90....       MOV     DPTR,#radio_is_on
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   1034              PT_INIT(&pt);
   \   00000B   90....       MOV     DPTR,#pt
   \   00000E   7400         MOV     A,#0x0
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   1035          
   1036              rtimer_set(&rt, RTIMER_NOW() + CYCLE_TIME, 1,
   1037                      (void (*)(struct rtimer *, void *))powercycle, NULL);
   \   000015                ; Setup parameters for call to function rtimer_set
   \   000015   E4           CLR     A
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   F5..         MOV     ?V0 + 1,A
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75....       MOV     ?V0 + 0,#??powercycle?relay & 0xff
   \   000022   75....       MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..01       MOV     ?V0 + 0,#0x1
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   E5E2         MOV     A,0xe2
   \   000037   FA           MOV     R2,A
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   E5E3         MOV     A,0xe3
   \   00003C   F8           MOV     R0,A
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E4           CLR     A
   \   000040   C8           XCH     A,R0
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   28           ADD     A,R0
   \   000044   F8           MOV     R0,A
   \   000045   EB           MOV     A,R3
   \   000046   39           ADDC    A,R1
   \   000047   F9           MOV     R1,A
   \   000048   E8           MOV     A,R0
   \   000049   24A1         ADD     A,#-0x5f
   \   00004B   FC           MOV     R4,A
   \   00004C   E9           MOV     A,R1
   \   00004D   3407         ADDC    A,#0x7
   \   00004F   FD           MOV     R5,A
   \   000050   7A..         MOV     R2,#rt & 0xff
   \   000052   7B..         MOV     R3,#(rt >> 8) & 0xff
   \   000054   12....       LCALL   ??rtimer_set?relay
   \   000057   7406         MOV     A,#0x6
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   1038          
   1039              contikimac_is_on = 1;
   \   00005C   90....       MOV     DPTR,#contikimac_is_on
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
   1040          
   1041          #if WITH_PHASE_OPTIMIZATION
   1042              phase_init();
   \   000062                ; Setup parameters for call to function phase_init
   \   000062   12....       LCALL   ??phase_init?relay
   1043          #endif /* WITH_PHASE_OPTIMIZATION */
   1044          
   1045          }
   \   000065   7F02         MOV     R7,#0x2
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006A                REQUIRE T1CNTL
   \   00006A                REQUIRE T1CNTH
   1046          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047              static int
   1048          turn_on(void)
   \                     turn_on:
   1049          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1050              if(contikimac_is_on == 0) {
   \   000005   90....       MOV     DPTR,#contikimac_is_on
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7053         JNZ     ??turn_on_0
   1051                  contikimac_is_on = 1;
   \   00000B   90....       MOV     DPTR,#contikimac_is_on
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
   1052                  contikimac_keep_radio_on = 0;
   \   000011   90....       MOV     DPTR,#contikimac_keep_radio_on
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1053                  rtimer_set(&rt, RTIMER_NOW() + CYCLE_TIME, 1,
   1054                          (void (*)(struct rtimer *, void *))powercycle, NULL);
   \   000017                ; Setup parameters for call to function rtimer_set
   \   000017   E4           CLR     A
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   F5..         MOV     ?V0 + 1,A
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75....       MOV     ?V0 + 0,#??powercycle?relay & 0xff
   \   000024   75....       MOV     ?V0 + 1,#(??powercycle?relay >> 8) & 0xff
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV     ?V0 + 0,#0x1
   \   00002F   75..00       MOV     ?V0 + 1,#0x0
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   E5E2         MOV     A,0xe2
   \   000039   FA           MOV     R2,A
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   E5E3         MOV     A,0xe3
   \   00003E   F8           MOV     R0,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   E4           CLR     A
   \   000042   C8           XCH     A,R0
   \   000043   F9           MOV     R1,A
   \   000044   EA           MOV     A,R2
   \   000045   28           ADD     A,R0
   \   000046   F8           MOV     R0,A
   \   000047   EB           MOV     A,R3
   \   000048   39           ADDC    A,R1
   \   000049   F9           MOV     R1,A
   \   00004A   E8           MOV     A,R0
   \   00004B   24A1         ADD     A,#-0x5f
   \   00004D   FC           MOV     R4,A
   \   00004E   E9           MOV     A,R1
   \   00004F   3407         ADDC    A,#0x7
   \   000051   FD           MOV     R5,A
   \   000052   7A..         MOV     R2,#rt & 0xff
   \   000054   7B..         MOV     R3,#(rt >> 8) & 0xff
   \   000056   12....       LCALL   ??rtimer_set?relay
   \   000059   7406         MOV     A,#0x6
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   1055              }
   1056              return 1;
   \                     ??turn_on_0:
   \   00005E   7A01         MOV     R2,#0x1
   \   000060   7B00         MOV     R3,#0x0
   \   000062   7F02         MOV     R7,#0x2
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000067                REQUIRE T1CNTL
   \   000067                REQUIRE T1CNTH
   1057          }
   1058          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059              static int
   1060          turn_off(int keep_radio_on)
   \                     turn_off:
   1061          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062              contikimac_is_on = 0;
   \   000004   90....       MOV     DPTR,#contikimac_is_on
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   1063              contikimac_keep_radio_on = keep_radio_on;
   \   00000A   EA           MOV     A,R2
   \   00000B   90....       MOV     DPTR,#contikimac_keep_radio_on
   \   00000E   F0           MOVX    @DPTR,A
   1064              if(keep_radio_on) {
   \   00000F   EA           MOV     A,R2
   \   000010   4B           ORL     A,R3
   \   000011   6016         JZ      ??turn_off_0
   1065                  radio_is_on = 1;
   \   000013   90....       MOV     DPTR,#radio_is_on
   \   000016   7401         MOV     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
   1066                  return NETSTACK_RADIO.on();
   \   000019                ; Setup parameters for indirect call
   \   000019   90....       MOV     DPTR,#cc2530_rf_driver + 16
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   12....       LCALL   ?CALL_IND
   \   000027   8014         SJMP    ??turn_off_1
   1067              } else {
   1068                  radio_is_on = 0;
   \                     ??turn_off_0:
   \   000029   90....       MOV     DPTR,#radio_is_on
   \   00002C   7400         MOV     A,#0x0
   \   00002E   F0           MOVX    @DPTR,A
   1069                  return NETSTACK_RADIO.off();
   \   00002F                ; Setup parameters for indirect call
   \   00002F   90....       MOV     DPTR,#cc2530_rf_driver + 18
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F583         MOV     DPH,A
   \   000038   8882         MOV     DPL,R0
   \   00003A   12....       LCALL   ?CALL_IND
   \                     ??turn_off_1:
   \   00003D   D083         POP     DPH
   \   00003F   D082         POP     DPL
   \   000041   02....       LJMP    ?BRET
   1070              }
   1071          }
   1072          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1073              static unsigned short
   1074          duty_cycle(void)
   \                     duty_cycle:
   1075          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1076              return (1ul * CLOCK_SECOND * CYCLE_TIME) / RTIMER_ARCH_SECOND;
   \   000000   7A0F         MOV     R2,#0xf
   \   000002   7B00         MOV     R3,#0x0
   \   000004   02....       LJMP    ?BRET
   1077          }
   1078          /*---------------------------------------------------------------------------*/

   \                                 In  segment XDATA_I, align 1, keep-with-next
   1079          const struct rdc_driver contikimac_driver = {
   \                     contikimac_driver:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for contikimac_driver>`
   \   000010                REQUIRE __INIT_XDATA_I
   1080              "ContikiMAC",
   1081              init,
   1082              qsend_packet,
   1083              qsend_list,
   1084              input_packet,
   1085              turn_on,
   1086              turn_off,
   1087              duty_cycle,
   1088          };
   1089          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1090              uint16_t
   1091          contikimac_debug_print(void)
   \                     contikimac_debug_print:
   1092          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1093              return 0;
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   02....       LJMP    ?BRET
   1094          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ContikiMAC">>`:
   \   000000   436F6E74     DB "ContikiMAC"
   \            696B694D
   \            414300  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for contikimac_driver>`:
   \   000000   ....         DW `?<Constant "ContikiMAC">`
   \   000002   ....         DW ??init?relay
   \   000004   ....         DW ??qsend_packet?relay
   \   000006   ....         DW ??qsend_list?relay
   \   000008   ....         DW ??input_packet?relay
   \   00000A   ....         DW ??turn_on?relay
   \   00000C   ....         DW ??turn_off?relay
   \   00000E   ....         DW ??duty_cycle?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??on?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    on

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??schedule_powercycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    schedule_powercycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??schedule_powercycle_fixed?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    schedule_powercycle_fixed

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??powercycle_turn_radio_off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powercycle_turn_radio_off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??powercycle_turn_radio_on?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powercycle_turn_radio_on

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??powercycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powercycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??broadcast_rate_drop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    broadcast_rate_drop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??send_packet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    send_packet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??qsend_packet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    qsend_packet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??qsend_list?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    qsend_list

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??recv_burst_off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    recv_burst_off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??input_packet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    input_packet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??turn_on?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    turn_on

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??turn_off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    turn_off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??duty_cycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    duty_cycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??contikimac_debug_print?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    contikimac_debug_print

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "ContikiMAC">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "ContikiMAC">>`
   \   00000B                REQUIRE __INIT_XDATA_I
   1095          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     30  broadcast_rate_drop
       0      0      0  contikimac_debug_print
       0      0      0  duty_cycle
       0      0     16  init
                          0 0 10 -> phase_init
                          0 0 16 -> rtimer_set
       0      0     16  input_packet
                          0 0 16 -> ctimer_set
                          0 0 12 -> ctimer_stop
                          0 0 14 -> memcpy
                          0 0 12 -> off
                          0 0 12 -> on
                          0 0 12 -> packetbuf_addr
                          0 0 12 -> packetbuf_attr
                          0 0 12 -> packetbuf_datalen
                          0 0 12 -> packetbuf_dataptr
                          0 0 12 -> packetbuf_hdrreduce
                          0 0 12 -> packetbuf_set_datalen
                          0 0 12 -> packetbuf_totlen
                          0 0 12 -> rimeaddr_cmp
                          0 0 12 -> rimeaddr_copy
       2      0     30  off
       2      0     30  on
       2      0     10  powercycle
                          0 0 10 -> powercycle_turn_radio_off
                          0 0 10 -> powercycle_turn_radio_on
                          0 0 10 -> schedule_powercycle
                          0 0 10 -> schedule_powercycle_fixed
       2      0     10  powercycle_turn_radio_off
                          2 0  0 -> off
       2      0     10  powercycle_turn_radio_on
                          2 0  0 -> on
       0      0     26  qsend_list
                          0 0 20 -> list_item_next
                          0 0 24 -> mac_call_sent_callback
                          0 0 20 -> packetbuf_set_attr
                          0 0 20 -> queuebuf_to_packetbuf
                          0 0 24 -> send_packet
       0      0     18  qsend_packet
                          0 0 18 -> mac_call_sent_callback
                          0 0 18 -> send_packet
       2      0      0  recv_burst_off
                          2 0  0 -> off
       0      0     26  schedule_powercycle
                          0 0 16 -> rtimer_set
       0      0     26  schedule_powercycle_fixed
                          0 0 16 -> rtimer_set
       1      0     62  send_packet
                          0 0 30 -> broadcast_rate_drop
                          0 0 32 -> memset
                          0 0 30 -> off
                          0 0 30 -> on
                          0 0 30 -> packetbuf_addr
                          0 0 32 -> packetbuf_addr
                          0 0 38 -> packetbuf_addr
                          0 0 30 -> packetbuf_attr
                          0 0 30 -> packetbuf_compact
                          0 0 32 -> packetbuf_datalen
                          0 0 30 -> packetbuf_dataptr
                          0 0 30 -> packetbuf_hdr_remove
                          0 0 30 -> packetbuf_hdralloc
                          0 0 30 -> packetbuf_hdrptr
                          0 0 30 -> packetbuf_set_addr
                          0 0 30 -> packetbuf_set_attr
                          0 0 30 -> packetbuf_totlen
                          0 0 32 -> phase_update
                          0 0 38 -> phase_wait
                          0 0 30 -> rimeaddr_cmp
                          0 0 30 -> watchdog_periodic
       2      0      0  turn_off
       0      0     16  turn_on
                          0 0 16 -> rtimer_set


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "ContikiMAC">
      11  ?<Initializer for <Constant "ContikiMAC">>
      16  ?<Initializer for contikimac_driver>
       6  ??broadcast_rate_drop?relay
       6  ??contikimac_debug_print?relay
       6  ??duty_cycle?relay
       6  ??init?relay
       6  ??input_packet?relay
       6  ??off?relay
       6  ??on?relay
       6  ??powercycle?relay
       6  ??powercycle_turn_radio_off?relay
       6  ??powercycle_turn_radio_on?relay
       6  ??qsend_list?relay
       6  ??qsend_packet?relay
       6  ??recv_burst_off?relay
       6  ??schedule_powercycle?relay
       6  ??schedule_powercycle_fixed?relay
       6  ??send_packet?relay
       6  ??turn_off?relay
       6  ??turn_on?relay
       1  T1CNTH
       1  T1CNTL
       7  broadcast_rate_drop
       7  contikimac_debug_print
      16  contikimac_driver
       1  contikimac_is_on
       1  contikimac_keep_radio_on
       1  count
      16  ct
       2  cycle_start
       7  duty_cycle
     106  init
     624  input_packet
      49  off
      43  on
       1  packet_seen
       1  periods
     947  powercycle
      32  powercycle_turn_radio_off
      32  powercycle_turn_radio_on
       2  pt
     283  qsend_list
     108  qsend_packet
       1  radio_is_on
      48  received_seqnos
      24  recv_burst_off
       6  rt
     184  schedule_powercycle
     139  schedule_powercycle_fixed
    1664  send_packet
       1  silence_periods
       2  start
       1  sync_cycle_phase
       2  sync_cycle_start
       2  t0
      68  turn_off
     103  turn_on
       2  we_are_receiving_burst
       1  we_are_sending

 
 4 427 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    27 bytes in segment XDATA_I
    27 bytes in segment XDATA_ID
    91 bytes in segment XDATA_Z
 
 4 562 bytes of CODE  memory
     0 bytes of DATA  memory (+ 2 bytes shared)
   118 bytes of XDATA memory

Errors: none
Warnings: none
