###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:51 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\sys\stimer.c                 #
#    Command line       =  D:\myWork\myWork\core\sys\stimer.c -D              #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\stimer.lst                                  #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\stimer.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\sys\stimer.c
      1          /**
      2           * \addtogroup stimer
      3           * @{
      4           */
      5          
      6          /**
      7           * \file
      8           * Timer of seconds library implementation.
      9           * \author
     10           * Adam Dunkels <adam@sics.se>, Nicolas Tsiftes <nvt@sics.se>
     11           */
     12          
     13          /*
     14           * Copyright (c) 2004, 2008, Swedish Institute of Computer Science.
     15           * All rights reserved.
     16           *
     17           * Redistribution and use in source and binary forms, with or without
     18           * modification, are permitted provided that the following conditions
     19           * are met:
     20           * 1. Redistributions of source code must retain the above copyright
     21           *    notice, this list of conditions and the following disclaimer.
     22           * 2. Redistributions in binary form must reproduce the above copyright
     23           *    notice, this list of conditions and the following disclaimer in the
     24           *    documentation and/or other materials provided with the distribution.
     25           * 3. Neither the name of the Institute nor the names of its contributors
     26           *    may be used to endorse or promote products derived from this software
     27           *    without specific prior written permission.
     28           *
     29           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     30           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     31           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     32           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     33           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     34           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     35           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     36           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     37           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     38           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     39           * SUCH DAMAGE.
     40           *
     41           * This file is part of the Contiki operating system.
     42           *
     43           * Author: Adam Dunkels <adam@sics.se>, Nicolas Tsiftes <nvt@sics.se>
     44           *
     45           */
     46          
     47          #include "contiki-conf.h"
     48          #include "sys/clock.h"
     49          #include "sys/stimer.h"
     50          
     51          #define SCLOCK_GEQ(a, b)	((unsigned long)((a) - (b)) < \
     52          				((unsigned long)(~((unsigned long)0)) >> 1))
     53          
     54          /*---------------------------------------------------------------------------*/
     55          /**
     56           * Set a timer.
     57           *
     58           * This function is used to set a timer for a time sometime in the
     59           * future. The function stimer_expired() will evaluate to true after
     60           * the timer has expired.
     61           *
     62           * \param t A pointer to the timer
     63           * \param interval The interval before the timer expires.
     64           *
     65           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          void
     67          stimer_set(struct stimer *t, unsigned long interval)
   \                     stimer_set:
     68          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?L_MOV_X
     69            t->interval = interval;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?L_MOV_TO_X
     70            t->start = clock_seconds();
   \   000020                ; Setup parameters for call to function clock_seconds
   \   000020   12....       LCALL   ??clock_seconds?relay
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   12....       LCALL   ?XSTORE_R2345
     71          }
   \   00002A   7F04         MOV     R7,#0x4
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
     72          /*---------------------------------------------------------------------------*/
     73          /**
     74           * Reset the timer with the same interval.
     75           *
     76           * This function resets the timer with the same interval that was
     77           * given to the stimer_set() function. The start point of the interval
     78           * is the exact time that the timer last expired. Therefore, this
     79           * function will cause the timer to be stable over time, unlike the
     80           * stimer_restart() function.
     81           *
     82           * \param t A pointer to the timer.
     83           *
     84           * \sa stimer_restart()
     85           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          void
     87          stimer_reset(struct stimer *t)
   \                     stimer_reset:
     88          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     89            t->start += t->interval;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?L_MOV_X
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?L_ADD_TO_X
     90          }
   \   00001B   7F04         MOV     R7,#0x4
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
     91          /*---------------------------------------------------------------------------*/
     92          /**
     93           * Restart the timer from the current point in time
     94           *
     95           * This function restarts a timer with the same interval that was
     96           * given to the stimer_set() function. The timer will start at the
     97           * current time.
     98           *
     99           * \note A periodic timer will drift if this function is used to reset
    100           * it. For preioric timers, use the stimer_reset() function instead.
    101           *
    102           * \param t A pointer to the timer.
    103           *
    104           * \sa stimer_reset()
    105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void
    107          stimer_restart(struct stimer *t)
   \                     stimer_restart:
    108          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    109            t->start = clock_seconds();
   \   000009                ; Setup parameters for call to function clock_seconds
   \   000009   12....       LCALL   ??clock_seconds?relay
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   12....       LCALL   ?XSTORE_R2345
    110          }
   \   000013   7F01         MOV     R7,#0x1
   \   000015   02....       LJMP    ?BANKED_LEAVE_XDATA
    111          /*---------------------------------------------------------------------------*/
    112          /**
    113           * Check if a timer has expired.
    114           *
    115           * This function tests if a timer has expired and returns true or
    116           * false depending on its status.
    117           *
    118           * \param t A pointer to the timer
    119           *
    120           * \return Non-zero if the timer has expired, zero otherwise.
    121           *
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          int
    124          stimer_expired(struct stimer *t)
   \                     stimer_expired:
    125          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    126            return SCLOCK_GEQ(clock_seconds(), t->start + t->interval);
   \   000009   90....       MOV     DPTR,#__Constant_7fffffff
   \   00000C   C082         PUSH    DPL
   \   00000E   C083         PUSH    DPH
   \   000010                ; Setup parameters for call to function clock_seconds
   \   000010   12....       LCALL   ??clock_seconds?relay
   \   000013   8A..         MOV     ?V0 + 0,R2
   \   000015   8B..         MOV     ?V0 + 1,R3
   \   000017   8C..         MOV     ?V0 + 2,R4
   \   000019   8D..         MOV     ?V0 + 3,R5
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?L_SUB_X
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?L_SUB_X
   \   000031   D083         POP     DPH
   \   000033   D082         POP     DPL
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?UL_GE_X
   \   00003A   4004         JC      ??stimer_expired_0
   \   00003C   D2F0         SETB    B.0
   \   00003E   8002         SJMP    ??stimer_expired_1
   \                     ??stimer_expired_0:
   \   000040   C2F0         CLR     B.0
   \                     ??stimer_expired_1:
   \   000042   A2F0         MOV     C,B.0
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   FA           MOV     R2,A
   \   000047   7B00         MOV     R3,#0x0
   \   000049   7F04         MOV     R7,#0x4
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    127          }
    128          /*---------------------------------------------------------------------------*/
    129          /**
    130           * The time until the timer expires
    131           *
    132           * This function returns the time until the timer expires.
    133           *
    134           * \param t A pointer to the timer
    135           *
    136           * \return The time until the timer expires
    137           *
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          unsigned long
    140          stimer_remaining(struct stimer *t)
   \                     stimer_remaining:
    141          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    142            return t->start + t->interval - clock_seconds();
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   12....       LCALL   ?L_MOV_X
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?L_ADD_X
   \   00001B                ; Setup parameters for call to function clock_seconds
   \   00001B   12....       LCALL   ??clock_seconds?relay
   \   00001E   8A..         MOV     ?V0 + 4,R2
   \   000020   8B..         MOV     ?V0 + 5,R3
   \   000022   8C..         MOV     ?V0 + 6,R4
   \   000024   8D..         MOV     ?V0 + 7,R5
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   79..         MOV     R1,#?V0 + 4
   \   00002A   12....       LCALL   ?L_SUB
   \   00002D   AA..         MOV     R2,?V0 + 0
   \   00002F   AB..         MOV     R3,?V0 + 1
   \   000031   AC..         MOV     R4,?V0 + 2
   \   000033   AD..         MOV     R5,?V0 + 3
   \   000035   7F08         MOV     R7,#0x8
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    143          }
    144          /*---------------------------------------------------------------------------*/
    145          /**
    146           * The time elapsed since the timer started
    147           *
    148           * This function returns the time elapsed.
    149           *
    150           * \param t A pointer to the timer
    151           *
    152           * \return The time elapsed since the last start of the timer
    153           *
    154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    155          unsigned long
    156          stimer_elapsed(struct stimer *t)
   \                     stimer_elapsed:
    157          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    158            return clock_seconds() - t->start;
   \   000009                ; Setup parameters for call to function clock_seconds
   \   000009   12....       LCALL   ??clock_seconds?relay
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   8C..         MOV     ?V0 + 2,R4
   \   000012   8D..         MOV     ?V0 + 3,R5
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?L_SUB_X
   \   00001D   AA..         MOV     R2,?V0 + 0
   \   00001F   AB..         MOV     R3,?V0 + 1
   \   000021   AC..         MOV     R4,?V0 + 2
   \   000023   AD..         MOV     R5,?V0 + 3
   \   000025   7F04         MOV     R7,#0x4
   \   000027   02....       LJMP    ?BANKED_LEAVE_XDATA
    159          }

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_7fffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_7fffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_7fffffff>`:
   \   000000   FFFFFF7F     DD 2147483647

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_set?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_set

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_restart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_restart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_expired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_expired

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_remaining?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_remaining

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??stimer_elapsed?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    stimer_elapsed
    160          
    161          /*---------------------------------------------------------------------------*/
    162          
    163          /** @} */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     12  stimer_elapsed
                          0 0 12 -> clock_seconds
       2      0     12  stimer_expired
                          2 0 12 -> clock_seconds
       0      0     16  stimer_remaining
                          0 0 16 -> clock_seconds
       0      0     12  stimer_reset
       0      0      9  stimer_restart
                          0 0  9 -> clock_seconds
       0      0     16  stimer_set
                          0 0 12 -> clock_seconds


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for __Constant_7fffffff>
       6  ??stimer_elapsed?relay
       6  ??stimer_expired?relay
       6  ??stimer_remaining?relay
       6  ??stimer_reset?relay
       6  ??stimer_restart?relay
       6  ??stimer_set?relay
       4  __Constant_7fffffff
      42  stimer_elapsed
      78  stimer_expired
      58  stimer_remaining
      32  stimer_reset
      24  stimer_restart
      47  stimer_set

 
 281 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
 
 317 bytes of CODE  memory (+ 4 bytes shared)
   0 bytes of XDATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
