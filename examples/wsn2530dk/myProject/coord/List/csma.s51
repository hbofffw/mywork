///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:47 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\mac\csma.c              /
//    Command line       =  D:\myWork\myWork\core\net\mac\csma.c -D           /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\csma.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME csma

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??channel_check_interval?relay,0203H
        FUNCTION ??default_timebase?relay,0203H
        FUNCTION ??free_packet?relay,0203H
        FUNCTION ??init?relay,0203H
        FUNCTION ??input_packet?relay,0203H
        FUNCTION ??neighbor_queue_from_addr?relay,0203H
        FUNCTION ??off?relay,0203H
        FUNCTION ??on?relay,0203H
        FUNCTION ??packet_sent?relay,0203H
        FUNCTION ??send_packet?relay,0203H
        FUNCTION ??transmit_packet_list?relay,0203H
        FUNCTION channel_check_interval,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC csma_driver
        FUNCTION default_timebase,0203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION free_packet,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION init,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION input_packet,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION neighbor_queue_from_addr,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION off,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION on,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION packet_sent,0a1603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION send_packet,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION transmit_packet_list,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
ctimer_set          SYMBOL "ctimer_set"
??ctimer_set?relay  SYMBOL "?relay", ctimer_set
ctimer_stop         SYMBOL "ctimer_stop"
??ctimer_stop?relay SYMBOL "?relay", ctimer_stop
list_add            SYMBOL "list_add"
??list_add?relay    SYMBOL "?relay", list_add
list_head           SYMBOL "list_head"
??list_head?relay   SYMBOL "?relay", list_head
list_init           SYMBOL "list_init"
??list_init?relay   SYMBOL "?relay", list_init
list_item_next      SYMBOL "list_item_next"
??list_item_next?relay SYMBOL "?relay", list_item_next
list_length         SYMBOL "list_length"
??list_length?relay SYMBOL "?relay", list_length
list_push           SYMBOL "list_push"
??list_push?relay   SYMBOL "?relay", list_push
list_remove         SYMBOL "list_remove"
??list_remove?relay SYMBOL "?relay", list_remove
mac_call_sent_callback SYMBOL "mac_call_sent_callback"
??mac_call_sent_callback?relay SYMBOL "?relay", mac_call_sent_callback
memb_alloc          SYMBOL "memb_alloc"
??memb_alloc?relay  SYMBOL "?relay", memb_alloc
memb_free           SYMBOL "memb_free"
??memb_free?relay   SYMBOL "?relay", memb_free
memb_init           SYMBOL "memb_init"
??memb_init?relay   SYMBOL "?relay", memb_init
packetbuf_addr      SYMBOL "packetbuf_addr"
??packetbuf_addr?relay SYMBOL "?relay", packetbuf_addr
packetbuf_attr      SYMBOL "packetbuf_attr"
??packetbuf_attr?relay SYMBOL "?relay", packetbuf_attr
packetbuf_set_attr  SYMBOL "packetbuf_set_attr"
??packetbuf_set_attr?relay SYMBOL "?relay", packetbuf_set_attr
queuebuf_attr       SYMBOL "queuebuf_attr"
??queuebuf_attr?relay SYMBOL "?relay", queuebuf_attr
queuebuf_free       SYMBOL "queuebuf_free"
??queuebuf_free?relay SYMBOL "?relay", queuebuf_free
queuebuf_new_from_packetbuf SYMBOL "queuebuf_new_from_packetbuf"
??queuebuf_new_from_packetbuf?relay SYMBOL "?relay", queuebuf_new_from_packetbuf
queuebuf_update_attr_from_packetbuf SYMBOL "queuebuf_update_attr_from_packetbuf"
??queuebuf_update_attr_from_packetbuf?relay SYMBOL "?relay", queuebuf_update_attr_from_packetbuf
random_rand         SYMBOL "random_rand"
??random_rand?relay SYMBOL "?relay", random_rand
rimeaddr_cmp        SYMBOL "rimeaddr_cmp"
??rimeaddr_cmp?relay SYMBOL "?relay", rimeaddr_cmp
rimeaddr_copy       SYMBOL "rimeaddr_copy"
??rimeaddr_copy?relay SYMBOL "?relay", rimeaddr_copy

        EXTERN ??ctimer_set?relay
        FUNCTION ??ctimer_set?relay,00H
        EXTERN ??ctimer_stop?relay
        FUNCTION ??ctimer_stop?relay,00H
        EXTERN ??list_add?relay
        FUNCTION ??list_add?relay,00H
        EXTERN ??list_head?relay
        FUNCTION ??list_head?relay,00H
        EXTERN ??list_init?relay
        FUNCTION ??list_init?relay,00H
        EXTERN ??list_item_next?relay
        FUNCTION ??list_item_next?relay,00H
        EXTERN ??list_length?relay
        FUNCTION ??list_length?relay,00H
        EXTERN ??list_push?relay
        FUNCTION ??list_push?relay,00H
        EXTERN ??list_remove?relay
        FUNCTION ??list_remove?relay,00H
        EXTERN ??mac_call_sent_callback?relay
        FUNCTION ??mac_call_sent_callback?relay,00H
        EXTERN ??memb_alloc?relay
        FUNCTION ??memb_alloc?relay,00H
        EXTERN ??memb_free?relay
        FUNCTION ??memb_free?relay,00H
        EXTERN ??memb_init?relay
        FUNCTION ??memb_init?relay,00H
        EXTERN ??packetbuf_addr?relay
        FUNCTION ??packetbuf_addr?relay,00H
        EXTERN ??packetbuf_attr?relay
        FUNCTION ??packetbuf_attr?relay,00H
        EXTERN ??packetbuf_set_attr?relay
        FUNCTION ??packetbuf_set_attr?relay,00H
        EXTERN ??queuebuf_attr?relay
        FUNCTION ??queuebuf_attr?relay,00H
        EXTERN ??queuebuf_free?relay
        FUNCTION ??queuebuf_free?relay,00H
        EXTERN ??queuebuf_new_from_packetbuf?relay
        FUNCTION ??queuebuf_new_from_packetbuf?relay,00H
        EXTERN ??queuebuf_update_attr_from_packetbuf?relay
        FUNCTION ??queuebuf_update_attr_from_packetbuf?relay,00H
        EXTERN ??random_rand?relay
        FUNCTION ??random_rand?relay,00H
        EXTERN ??rimeaddr_cmp?relay
        FUNCTION ??rimeaddr_cmp?relay,00H
        EXTERN ??rimeaddr_copy?relay
        FUNCTION ??rimeaddr_copy?relay,00H
        EXTERN ctimer_set
        FUNCTION ctimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ctimer_stop
        FUNCTION ctimer_stop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_add
        FUNCTION list_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_head
        FUNCTION list_head,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_init
        FUNCTION list_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_item_next
        FUNCTION list_item_next,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_length
        FUNCTION list_length,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_push
        FUNCTION list_push,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN list_remove
        FUNCTION list_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mac_call_sent_callback
        FUNCTION mac_call_sent_callback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_alloc
        FUNCTION memb_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_free
        FUNCTION memb_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_init
        FUNCTION memb_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nullrdc_driver
        EXTERN packetbuf_addr
        FUNCTION packetbuf_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_attr
        FUNCTION packetbuf_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_set_attr
        FUNCTION packetbuf_set_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_attr
        FUNCTION queuebuf_attr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_free
        FUNCTION queuebuf_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_new_from_packetbuf
        FUNCTION queuebuf_new_from_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_update_attr_from_packetbuf
        FUNCTION queuebuf_update_attr_from_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN random_rand
        FUNCTION random_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_cmp
        FUNCTION rimeaddr_cmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rimeaddr_copy
        FUNCTION rimeaddr_copy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sicslowpan_driver


        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant "CSMA">`:
        DS 5
        REQUIRE `?<Initializer for <Constant "CSMA">>`
        REQUIRE __INIT_XDATA_I
// D:\myWork\myWork\core\net\mac\csma.c
//    1 /*
//    2  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         A Carrier Sense Multiple Access (CSMA) MAC layer
//   36  * \author
//   37  *         Adam Dunkels <adam@sics.se>
//   38  */
//   39 
//   40 #include "net/mac/csma.h"
//   41 #include "net/packetbuf.h"
//   42 #include "net/queuebuf.h"
//   43 
//   44 #include "sys/ctimer.h"
//   45 #include "sys/clock.h"
//   46 
//   47 #include "lib/random.h"
//   48 
//   49 #include "net/netstack.h"
//   50 
//   51 #include "lib/list.h"
//   52 #include "lib/memb.h"
//   53 
//   54 #include <string.h>
//   55 
//   56 #include <stdio.h>
//   57 
//   58 #define DEBUG 0
//   59 #if DEBUG
//   60 #include <stdio.h>
//   61 #define PRINTF(...) printf(__VA_ARGS__)
//   62 #else /* DEBUG */
//   63 #define PRINTF(...)
//   64 #endif /* DEBUG */
//   65 
//   66 #ifndef CSMA_MAX_MAC_TRANSMISSIONS
//   67 #ifdef CSMA_CONF_MAX_MAC_TRANSMISSIONS
//   68 #define CSMA_MAX_MAC_TRANSMISSIONS CSMA_CONF_MAX_MAC_TRANSMISSIONS
//   69 #else
//   70 #define CSMA_MAX_MAC_TRANSMISSIONS 3
//   71 #endif /* CSMA_CONF_MAX_MAC_TRANSMISSIONS */
//   72 #endif /* CSMA_MAX_MAC_TRANSMISSIONS */
//   73 
//   74 #if CSMA_MAX_MAC_TRANSMISSIONS < 1
//   75 #pragma error CSMA_CONF_MAX_MAC_TRANSMISSIONS must be at least 1.
//   76 #pragma error Change CSMA_CONF_MAX_MAC_TRANSMISSIONS in contiki-conf.h or in your Makefile.
//   77 #endif /* CSMA_CONF_MAX_MAC_TRANSMISSIONS < 1 */
//   78 
//   79 /* Packet metadata */
//   80 struct qbuf_metadata {
//   81     mac_callback_t sent;
//   82     void *cptr;
//   83     uint8_t max_transmissions;
//   84 };
//   85 
//   86 /* Every neighbor has its own packet queue */
//   87 struct neighbor_queue {
//   88     struct neighbor_queue *next;
//   89     rimeaddr_t addr;
//   90     struct ctimer transmit_timer;
//   91     uint8_t transmissions;
//   92     uint8_t collisions, deferrals;
//   93     LIST_STRUCT(queued_packet_list);
//   94 };
//   95 
//   96 /* The maximum number of co-existing neighbor queues */
//   97 #ifdef CSMA_CONF_MAX_NEIGHBOR_QUEUES
//   98 #define CSMA_MAX_NEIGHBOR_QUEUES CSMA_CONF_MAX_NEIGHBOR_QUEUES
//   99 #else
//  100 #define CSMA_MAX_NEIGHBOR_QUEUES 2
//  101 #endif /* CSMA_CONF_MAX_NEIGHBOR_QUEUES */
//  102 
//  103 #define MAX_QUEUED_PACKETS QUEUEBUF_NUM

        RSEG XDATA_I:XDATA:NOROOT(0)
//  104 MEMB(neighbor_memb, struct neighbor_queue, CSMA_MAX_NEIGHBOR_QUEUES);
neighbor_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for neighbor_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static char neighbor_memb_memb_count[2]
neighbor_memb_memb_count:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct neighbor_queue neighbor_memb_memb_mem[2]
neighbor_memb_memb_mem:
        DS 54
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  105 MEMB(packet_memb, struct rdc_buf_list, MAX_QUEUED_PACKETS);
packet_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for packet_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static char packet_memb_memb_count[6]
packet_memb_memb_count:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct rdc_buf_list packet_memb_memb_mem[6]
packet_memb_memb_mem:
        DS 36
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  106 MEMB(metadata_memb, struct qbuf_metadata, MAX_QUEUED_PACKETS);
metadata_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for metadata_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static char metadata_memb_memb_count[6]
metadata_memb_memb_count:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct qbuf_metadata metadata_memb_memb_mem[6]
metadata_memb_memb_mem:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  107 LIST(neighbor_list);
neighbor_list:
        DATA16
        DS 2
        REQUIRE `?<Initializer for neighbor_list>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// static void *__xdata neighbor_list_list
neighbor_list_list:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 static void packet_sent(void *ptr, int status, int num_transmissions);
//  110 static void transmit_packet_list(void *ptr);
//  111 
//  112 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  113     static struct neighbor_queue *
//  114 neighbor_queue_from_addr(const rimeaddr_t *addr)
neighbor_queue_from_addr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function neighbor_queue_from_addr
        CODE
//  115 {
        FUNCALL neighbor_queue_from_addr, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL neighbor_queue_from_addr, list_item_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL neighbor_queue_from_addr, rimeaddr_cmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  116     struct neighbor_queue *n = list_head(neighbor_list);
        ; Setup parameters for call to function list_head
        MOV     DPTR,#neighbor_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        SJMP    ??neighbor_queue_from_addr_0
//  117     while(n != NULL) {
//  118         if(rimeaddr_cmp(&n->addr, addr)) {
//  119             return n;
//  120         }
//  121         n = list_item_next(n);
??neighbor_queue_from_addr_1:
        ; Setup parameters for call to function list_item_next
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??list_item_next?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
??neighbor_queue_from_addr_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??neighbor_queue_from_addr_2
        ; Setup parameters for call to function rimeaddr_cmp
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??rimeaddr_cmp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??neighbor_queue_from_addr_1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??neighbor_queue_from_addr_3
//  122     }
//  123     return NULL;
??neighbor_queue_from_addr_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??neighbor_queue_from_addr_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  124 }
//  125 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126     static clock_time_t
//  127 default_timebase(void)
default_timebase:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function default_timebase
        CODE
//  128 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  129     clock_time_t time;
//  130     /* The retransmission time must be proportional to the channel
//  131        check interval of the underlying radio duty cycling layer. */
//  132     time = NETSTACK_RDC.channel_check_interval();
        ; Setup parameters for indirect call
        MOV     DPTR,#nullrdc_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  133 
//  134     /* If the radio duty cycle has no channel check interval (i.e., it
//  135        does not turn the radio off), we make the retransmission time
//  136        proportional to the configured MAC channel check rate. */
//  137     if(time == 0) {
        MOV     A,R2
        ORL     A,R3
        JNZ     ??default_timebase_0
//  138         time = CLOCK_SECOND / NETSTACK_RDC_CHANNEL_CHECK_RATE;
        MOV     R2,#0x10
        MOV     R3,#0x0
//  139     }
//  140     return time;
??default_timebase_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  141 }
//  142 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  143     static void
//  144 transmit_packet_list(void *ptr)
transmit_packet_list:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function transmit_packet_list
        CODE
//  145 {
        FUNCALL transmit_packet_list, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  146     struct neighbor_queue *n = ptr;
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  147     if(n) {
        MOV     A,R6
        ORL     A,R7
        JZ      ??transmit_packet_list_0
//  148         struct rdc_buf_list *q = list_head(n->queued_packet_list);
        ; Setup parameters for call to function list_head
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  149         if(q != NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??transmit_packet_list_0
//  150             PRINTF("csma: preparing number %d %p, queue len %d\n", n->transmissions, q,
//  151                     list_length(n->queued_packet_list));
//  152             /* Send packets in the neighbor's list */
//  153             NETSTACK_RDC.send_list(packet_sent, n, q);
        ; Setup parameters for indirect call
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#??packet_sent?relay & 0xff
        MOV     R3,#(??packet_sent?relay >> 8) & 0xff
        MOV     DPTR,#nullrdc_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  154         }
//  155     }
//  156 }
??transmit_packet_list_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  157 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  158     static void
//  159 free_packet(struct neighbor_queue *n, struct rdc_buf_list *p)
free_packet:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function free_packet
        CODE
//  160 {
        FUNCALL free_packet, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, queuebuf_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, default_timebase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, ctimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, ctimer_stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL free_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  161     if(p != NULL) {
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??free_packet_0 & 0xFFFF
//  162         /* Remove packet from list and deallocate */
//  163         list_remove(n->queued_packet_list, p);
        ; Setup parameters for call to function list_remove
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  164 
//  165         queuebuf_free(p->buf);
        ; Setup parameters for call to function queuebuf_free
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_free?relay
//  166         memb_free(&metadata_memb, p->ptr);
        ; Setup parameters for call to function memb_free
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#metadata_memb & 0xff
        MOV     R3,#(metadata_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  167         memb_free(&packet_memb, p);
        ; Setup parameters for call to function memb_free
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#packet_memb & 0xff
        MOV     R3,#(packet_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  168         PRINTF("csma: free_queued_packet, queue length %d\n",
//  169                 list_length(n->queued_packet_list));
//  170         if(list_head(n->queued_packet_list) != NULL) {
        ; Setup parameters for call to function list_head
        MOV     A,?V0 + 0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??free_packet_1
//  171             /* There is a next packet. We reset current tx information */
//  172             n->transmissions = 0;
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  173             n->collisions = 0;
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  174             n->deferrals = 0;
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  175             /* Set a timer for next transmissions */
//  176             ctimer_set(&n->transmit_timer, default_timebase(),
//  177                     transmit_packet_list, n);
        ; Setup parameters for call to function ctimer_set
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 2,#??transmit_packet_list?relay & 0xff
        MOV     ?V0 + 3,#(??transmit_packet_list?relay >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        ; Setup parameters for call to function default_timebase
        LCALL   ??default_timebase?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??free_packet_0
//  178         } else {
//  179             /* This was the last packet in the queue, we free the neighbor */
//  180             ctimer_stop(&n->transmit_timer);
??free_packet_1:
        ; Setup parameters for call to function ctimer_stop
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_stop?relay
//  181             list_remove(neighbor_list, n);
        ; Setup parameters for call to function list_remove
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     DPTR,#neighbor_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  182             memb_free(&neighbor_memb, n);
        ; Setup parameters for call to function memb_free
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#neighbor_memb & 0xff
        MOV     R3,#(neighbor_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  183         }
//  184     }
//  185 }
??free_packet_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  186 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  187     static void
//  188 packet_sent(void *ptr, int status, int num_transmissions)
packet_sent:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function packet_sent
        CODE
//  189 {
        FUNCALL packet_sent, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, list_item_next
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, queuebuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, default_timebase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, random_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, ctimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, queuebuf_update_attr_from_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, free_packet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, free_packet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packet_sent, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  190     struct neighbor_queue *n;
//  191     struct rdc_buf_list *q;
//  192     struct qbuf_metadata *metadata;
//  193     clock_time_t time = 0;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  194     mac_callback_t sent;
//  195     void *cptr;
//  196     int num_tx;
//  197     int backoff_transmissions;
//  198 
//  199     n = ptr;
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  200     if(n == NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     $+5
        LJMP    ??packet_sent_0 & 0xFFFF
//  201         return;
//  202     }
//  203     switch(status) {
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for packet_sent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_4
        CODE
//  204         case MAC_TX_OK:
//  205         case MAC_TX_NOACK:
//  206             n->transmissions++;
??packet_sent_2:
        MOV     A,?V0 + 6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  207             break;
        SJMP    ??packet_sent_1
//  208         case MAC_TX_COLLISION:
//  209             n->collisions++;
??packet_sent_3:
        MOV     A,?V0 + 6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  210             break;
        SJMP    ??packet_sent_1
//  211         case MAC_TX_DEFERRED:
//  212             n->deferrals++;
??packet_sent_4:
        MOV     A,?V0 + 6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  213             break;
//  214     }
//  215 
//  216     for(q = list_head(n->queued_packet_list);
??packet_sent_1:
        ; Setup parameters for call to function list_head
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        SJMP    ??packet_sent_5
//  217             q != NULL; q = list_item_next(q)) {
??packet_sent_6:
        ; Setup parameters for call to function list_item_next
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??list_item_next?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
??packet_sent_5:
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JZ      ??packet_sent_7
//  218         if(queuebuf_attr(q->buf, PACKETBUF_ATTR_MAC_SEQNO) ==
//  219                 packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO)) {
        ; Setup parameters for call to function queuebuf_attr
        MOV     R1,#0xa
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_attr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xa
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        XRL     A,?V0 + 0
        JNZ     ??packet_sent_8
        MOV     A,?V0 + 3
        XRL     A,?V0 + 1
??packet_sent_8:
        JNZ     ??packet_sent_6
//  220             break;
//  221         }
//  222     }
//  223 
//  224     if(q != NULL) {
??packet_sent_7:
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     $+5
        LJMP    ??packet_sent_0 & 0xFFFF
//  225         metadata = (struct qbuf_metadata *)q->ptr;
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  226 
//  227         if(metadata != NULL) {
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     $+5
        LJMP    ??packet_sent_0 & 0xFFFF
//  228             sent = metadata->sent;
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 15,A
//  229             cptr = metadata->cptr;
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
//  230             num_tx = n->transmissions;
        MOV     A,?V0 + 6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
//  231             if(status == MAC_TX_COLLISION ||
//  232                     status == MAC_TX_NOACK) {
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??packet_sent_9
        MOV     A,#0x0
        XRL     A,R7
??packet_sent_9:
        JZ      ??packet_sent_10
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??packet_sent_11
        MOV     A,#0x0
        XRL     A,R7
??packet_sent_11:
        JZ      $+5
        LJMP    ??packet_sent_12 & 0xFFFF
//  233 
//  234                 /* If the transmission was not performed because of a
//  235                    collision or noack, we must retransmit the packet. */
//  236 
//  237                 switch(status) {
??packet_sent_10:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for packet_sent>_1`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??packet_sent_13
        CODE
//  238                     case MAC_TX_COLLISION:
//  239                         PRINTF("csma: rexmit collision %d\n", n->transmissions);
//  240                         break;
//  241                     case MAC_TX_NOACK:
//  242                         PRINTF("csma: rexmit noack %d\n", n->transmissions);
//  243                         break;
//  244                     default:
//  245                         PRINTF("csma: rexmit err %d, %d\n", status, n->transmissions);
//  246                 }
//  247 
//  248                 /* The retransmission time must be proportional to the channel
//  249                    check interval of the underlying radio duty cycling layer. */
//  250                 time = default_timebase();
??packet_sent_13:
        ; Setup parameters for call to function default_timebase
        LCALL   ??default_timebase?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  251 
//  252                 /* The retransmission time uses a linear backoff so that the
//  253                    interval between the transmissions increase with each
//  254                    retransmit. */
//  255                 backoff_transmissions = n->transmissions + 1;
        MOV     A,?V0 + 6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
//  256 
//  257                 /* Clamp the number of backoffs so that we don't get a too long
//  258                    timeout here, since that will delay all packets in the
//  259                    queue. */
//  260                 if(backoff_transmissions > 3) {
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,#0x4
        MOV     A,?V0 + 5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??packet_sent_14
//  261                     backoff_transmissions = 3;
        MOV     ?V0 + 4,#0x3
        MOV     ?V0 + 5,#0x0
//  262                 }
//  263 
//  264                 time = time + (random_rand() % (backoff_transmissions * time));
??packet_sent_14:
        ; Setup parameters for call to function random_rand
        LCALL   ??random_rand?relay
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     A,R2
        MOV     B,?V0 + 2
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 3
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 2
        MOV     A,?V0 + 5
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 5
        MOV     ?V0 + 3,A
//  265 
//  266                 if(n->transmissions < metadata->max_transmissions) {
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??packet_sent_15
//  267                     PRINTF("csma: retransmitting with time %lu %p\n", time, q);
//  268                     ctimer_set(&n->transmit_timer, time,
//  269                             transmit_packet_list, n);
        ; Setup parameters for call to function ctimer_set
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#??transmit_packet_list?relay & 0xff
        MOV     ?V0 + 1,#(??transmit_packet_list?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  270                     /* This is needed to correctly attribute energy that we spent
//  271                        transmitting this packet. */
//  272                     queuebuf_update_attr_from_packetbuf(q->buf);
        ; Setup parameters for call to function queuebuf_update_attr_from_packetbuf
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_update_attr_from_packetbuf?relay
        SJMP    ??packet_sent_0
//  273                 } else {
//  274                     PRINTF("csma: drop with status %d after %d transmissions, %d collisions\n",
//  275                             status, n->transmissions, n->collisions);
//  276                     free_packet(n, q);
??packet_sent_15:
        ; Setup parameters for call to function free_packet
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??free_packet?relay
//  277                     mac_call_sent_callback(sent, cptr, status, num_tx);
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP    ??packet_sent_0
//  278                 }
//  279             } else {
//  280                 if(status == MAC_TX_OK) {
//  281                     PRINTF("csma: rexmit ok %d\n", n->transmissions);
//  282                 } else {
//  283                     PRINTF("csma: rexmit failed %d: %d\n", n->transmissions, status);
//  284                 }
//  285                 free_packet(n, q);
??packet_sent_12:
        ; Setup parameters for call to function free_packet
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??free_packet?relay
//  286                 mac_call_sent_callback(sent, cptr, status, num_tx);
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  287             }
//  288         }
//  289     }
//  290 }
??packet_sent_0:
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  291 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  292     static void
//  293 send_packet(mac_callback_t sent, void *ptr)
send_packet:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function send_packet
        CODE
//  294 {
        FUNCALL send_packet, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_set_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, neighbor_queue_from_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, rimeaddr_copy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, queuebuf_new_from_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, packetbuf_attr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_push
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_head
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, ctimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_length
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, list_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, mac_call_sent_callback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  295     struct rdc_buf_list *q;
//  296     struct neighbor_queue *n;
//  297     static uint16_t seqno;
//  298     const rimeaddr_t *addr = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x19
        LCALL   ??packetbuf_addr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  299 
//  300     if(seqno == 0) {
        MOV     DPTR,#??seqno
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??send_packet_0
//  301         /* PACKETBUF_ATTR_MAC_SEQNO cannot be zero, due to a pecuilarity
//  302            in framer-802154.c. */
//  303         seqno++;
        MOV     DPTR,#??seqno
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  304     }
//  305     packetbuf_set_attr(PACKETBUF_ATTR_MAC_SEQNO, seqno++);
??send_packet_0:
        MOV     DPTR,#??seqno
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??seqno
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function packetbuf_set_attr
        MOV     R1,#0xa
        LCALL   ??packetbuf_set_attr?relay
//  306 
//  307     /* Look for the neighbor entry */
//  308     n = neighbor_queue_from_addr(addr);
        ; Setup parameters for call to function neighbor_queue_from_addr
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??neighbor_queue_from_addr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  309     if(n == NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      $+5
        LJMP    ??send_packet_1 & 0xFFFF
//  310         /* Allocate a new neighbor entry */
//  311         n = memb_alloc(&neighbor_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#neighbor_memb & 0xff
        MOV     R3,#(neighbor_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  312         if(n != NULL) {
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     $+5
        LJMP    ??send_packet_1 & 0xFFFF
//  313             /* Init neighbor entry */
//  314             rimeaddr_copy(&n->addr, addr);
        ; Setup parameters for call to function rimeaddr_copy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??rimeaddr_copy?relay
//  315             n->transmissions = 0;
        MOV     A,?V0 + 6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  316             n->collisions = 0;
        MOV     A,?V0 + 6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  317             n->deferrals = 0;
        MOV     A,?V0 + 6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  318             /* Init packet list for this neighbor */
//  319             LIST_STRUCT_INIT(n, queued_packet_list);
        MOV     A,?V0 + 6
        ADD     A,#0x17
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        ; Setup parameters for call to function list_init
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_init?relay
//  320             /* Add neighbor to the list */
//  321             list_add(neighbor_list, n);
        ; Setup parameters for call to function list_add
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     DPTR,#neighbor_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  322         }
//  323     }
//  324 
//  325     if(n != NULL) {
??send_packet_1:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     $+5
        LJMP    ??send_packet_2 & 0xFFFF
//  326         /* Add packet to the neighbor's queue */
//  327         q = memb_alloc(&packet_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#packet_memb & 0xff
        MOV     R3,#(packet_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  328         if(q != NULL) {
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??send_packet_3 & 0xFFFF
//  329             q->ptr = memb_alloc(&metadata_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#metadata_memb & 0xff
        MOV     R3,#(metadata_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  330             if(q->ptr != NULL) {
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??send_packet_4 & 0xFFFF
//  331                 q->buf = queuebuf_new_from_packetbuf();
        ; Setup parameters for call to function queuebuf_new_from_packetbuf
        LCALL   ??queuebuf_new_from_packetbuf?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  332                 if(q->buf != NULL) {
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??send_packet_5 & 0xFFFF
//  333                     struct qbuf_metadata *metadata = (struct qbuf_metadata *)q->ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  334                     /* Neighbor and packet successfully allocated */
//  335                     if(packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS) == 0) {
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0x9
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JNZ     ??send_packet_6
//  336                         /* Use default configuration for max transmissions */
//  337                         metadata->max_transmissions = CSMA_MAX_MAC_TRANSMISSIONS;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??send_packet_7
//  338                     } else {
//  339                         metadata->max_transmissions =
//  340                             packetbuf_attr(PACKETBUF_ATTR_MAX_MAC_TRANSMISSIONS);
??send_packet_6:
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0x9
        LCALL   ??packetbuf_attr?relay
        MOV     A,R2
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  341                     }
//  342                     metadata->sent = sent;
??send_packet_7:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  343                     metadata->cptr = ptr;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  344 
//  345                     if(packetbuf_attr(PACKETBUF_ATTR_PACKET_TYPE) ==
//  346                             PACKETBUF_ATTR_PACKET_TYPE_ACK) {
        ; Setup parameters for call to function packetbuf_attr
        MOV     R1,#0xe
        LCALL   ??packetbuf_attr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??send_packet_8
        MOV     A,#0x0
        XRL     A,?V0 + 1
??send_packet_8:
        JNZ     ??send_packet_9
//  347                         list_push(n->queued_packet_list, q);
        ; Setup parameters for call to function list_push
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_push?relay
        SJMP    ??send_packet_10
//  348                     } else {
//  349                         list_add(n->queued_packet_list, q);
??send_packet_9:
        ; Setup parameters for call to function list_add
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_add?relay
//  350                     }
//  351 
//  352                     /* If q is the first packet in the neighbor's queue, send asap */
//  353                     if(list_head(n->queued_packet_list) == q) {
??send_packet_10:
        ; Setup parameters for call to function list_head
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_head?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        XRL     A,?V0 + 0
        JNZ     ??send_packet_11
        MOV     A,R7
        XRL     A,?V0 + 1
??send_packet_11:
        JNZ     ??send_packet_12
//  354                         ctimer_set(&n->transmit_timer, 0, transmit_packet_list, n);
        ; Setup parameters for call to function ctimer_set
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#??transmit_packet_list?relay & 0xff
        MOV     ?V0 + 1,#(??transmit_packet_list?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ctimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  355                     }
//  356                     return;
??send_packet_12:
        LJMP    ??send_packet_13 & 0xFFFF
//  357                 }
//  358                 memb_free(&metadata_memb, q->ptr);
??send_packet_5:
        ; Setup parameters for call to function memb_free
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#metadata_memb & 0xff
        MOV     R3,#(metadata_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  359                 PRINTF("csma: could not allocate queuebuf, dropping packet\n");
//  360             }
//  361             memb_free(&packet_memb, q);
??send_packet_4:
        ; Setup parameters for call to function memb_free
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#packet_memb & 0xff
        MOV     R3,#(packet_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  362             PRINTF("csma: could not allocate queuebuf, dropping packet\n");
//  363         }
//  364         /* The packet allocation failed. Remove and free neighbor entry if empty. */
//  365         if(list_length(n->queued_packet_list) == 0) {
??send_packet_3:
        ; Setup parameters for call to function list_length
        MOV     A,?V0 + 6
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_length?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??send_packet_2
//  366             list_remove(neighbor_list, n);
        ; Setup parameters for call to function list_remove
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     DPTR,#neighbor_list
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??list_remove?relay
//  367             memb_free(&neighbor_memb, n);
        ; Setup parameters for call to function memb_free
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,#neighbor_memb & 0xff
        MOV     R3,#(neighbor_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  368         }
//  369         PRINTF("csma: could not allocate packet, dropping packet\n");
//  370     } else {
//  371         PRINTF("csma: could not allocate neighbor, dropping packet\n");
//  372     }
//  373     mac_call_sent_callback(sent, ptr, MAC_TX_ERR, 1);
??send_packet_2:
        ; Setup parameters for call to function mac_call_sent_callback
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??mac_call_sent_callback?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  374 }
??send_packet_13:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??seqno:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  375 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  376     static void
//  377 input_packet(void)
input_packet:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function input_packet
        CODE
//  378 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  379     NETSTACK_NETWORK.input();
        ; Setup parameters for indirect call
        MOV     DPTR,#sicslowpan_driver + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  380 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock6
//  381 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382     static int
//  383 on(void)
on:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function on
        CODE
//  384 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  385     return NETSTACK_RDC.on();
        ; Setup parameters for indirect call
        MOV     DPTR,#nullrdc_driver + 10
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock7
//  386 }
//  387 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  388     static int
//  389 off(int keep_radio_on)
off:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function off
        CODE
//  390 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  391     return NETSTACK_RDC.off(keep_radio_on);
        ; Setup parameters for indirect call
        MOV     DPTR,#nullrdc_driver + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  392 }
//  393 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394     static unsigned short
//  395 channel_check_interval(void)
channel_check_interval:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function channel_check_interval
        CODE
//  396 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  397     if(NETSTACK_RDC.channel_check_interval) {
        MOV     DPTR,#nullrdc_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??channel_check_interval_0
//  398         return NETSTACK_RDC.channel_check_interval();
        ; Setup parameters for indirect call
        MOV     DPTR,#nullrdc_driver + 14
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        SJMP    ??channel_check_interval_1
//  399     }
//  400     return 0;
??channel_check_interval_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??channel_check_interval_1:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock9
//  401 }
//  402 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  403     static void
//  404 init(void)
init:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function init
        CODE
//  405 {
        FUNCALL init, memb_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, memb_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, memb_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  406     memb_init(&packet_memb);
        ; Setup parameters for call to function memb_init
        MOV     R2,#packet_memb & 0xff
        MOV     R3,#(packet_memb >> 8) & 0xff
        LCALL   ??memb_init?relay
//  407     memb_init(&metadata_memb);
        ; Setup parameters for call to function memb_init
        MOV     R2,#metadata_memb & 0xff
        MOV     R3,#(metadata_memb >> 8) & 0xff
        LCALL   ??memb_init?relay
//  408     memb_init(&neighbor_memb);
        ; Setup parameters for call to function memb_init
        MOV     R2,#neighbor_memb & 0xff
        MOV     R3,#(neighbor_memb >> 8) & 0xff
        LCALL   ??memb_init?relay
//  409 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
//  410 /*---------------------------------------------------------------------------*/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//  411 const struct mac_driver csma_driver = {
csma_driver:
        DS 14
        REQUIRE `?<Initializer for csma_driver>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "CSMA">>`:
        DB "CSMA"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for neighbor_memb>`:
        DATA16
        DW 27
        DW 2
        DW neighbor_memb_memb_count
        DW neighbor_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for packet_memb>`:
        DATA16
        DW 6
        DW 6
        DW packet_memb_memb_count
        DW packet_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for metadata_memb>`:
        DATA16
        DW 5
        DW 6
        DW metadata_memb_memb_count
        DW metadata_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for neighbor_list>`:
        DATA16
        DW neighbor_list_list

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for csma_driver>`:
        DATA16
        DW `?<Constant "CSMA">`
        DW ??init?relay
        DW ??send_packet?relay
        DW ??input_packet?relay
        DW ??on?relay
        DW ??off?relay
        DW ??channel_check_interval?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??neighbor_queue_from_addr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    neighbor_queue_from_addr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??default_timebase?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    default_timebase

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??transmit_packet_list?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    transmit_packet_list

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??free_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    free_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??packet_sent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packet_sent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??input_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    input_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??on?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    on

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??off?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??channel_check_interval?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    channel_check_interval

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    init

        END
//  412     "CSMA",
//  413     init,
//  414     send_packet,
//  415     input_packet,
//  416     on,
//  417     off,
//  418     channel_check_interval,
//  419 };
//  420 /*---------------------------------------------------------------------------*/
// 
// 1 977 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    45 bytes in segment XDATA_I
//    45 bytes in segment XDATA_ID
//   138 bytes in segment XDATA_Z
// 
// 2 088 bytes of CODE  memory
//   183 bytes of XDATA memory
//
//Errors: none
//Warnings: none
