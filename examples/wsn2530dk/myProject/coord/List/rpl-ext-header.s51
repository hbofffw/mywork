///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:41 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\rpl\rpl-ext-header.c    /
//    Command line       =  D:\myWork\myWork\core\net\rpl\rpl-ext-header.c    /
//                          -D AUTOSTART_ENABLE -D PROJECT_CONF_H -lC         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\rpl-ext-header.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `rpl-ext-header`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0

        PUBLIC ??rpl_insert_header?relay
        FUNCTION ??rpl_insert_header?relay,0203H
        PUBLIC ??rpl_invert_header?relay
        FUNCTION ??rpl_invert_header?relay,0203H
        PUBLIC ??rpl_remove_header?relay
        FUNCTION ??rpl_remove_header?relay,0203H
        PUBLIC ??rpl_update_header_empty?relay
        FUNCTION ??rpl_update_header_empty?relay,0203H
        PUBLIC ??rpl_update_header_final?relay
        FUNCTION ??rpl_update_header_final?relay,0203H
        PUBLIC ??rpl_verify_header?relay
        FUNCTION ??rpl_verify_header?relay,0203H
        FUNCTION ??set_rpl_opt?relay,0203H
        PUBLIC rpl_insert_header
        FUNCTION rpl_insert_header,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rpl_invert_header
        FUNCTION rpl_invert_header,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_remove_header
        FUNCTION rpl_remove_header,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_update_header_empty
        FUNCTION rpl_update_header_empty,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_update_header_final
        FUNCTION rpl_update_header_final,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rpl_verify_header
        FUNCTION rpl_verify_header,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION set_rpl_opt,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
memmove             SYMBOL "memmove"
??memmove?relay     SYMBOL "?relay", memmove
memset              SYMBOL "memset"
??memset?relay      SYMBOL "?relay", memset
rpl_find_parent     SYMBOL "rpl_find_parent"
??rpl_find_parent?relay SYMBOL "?relay", rpl_find_parent
rpl_get_instance    SYMBOL "rpl_get_instance"
??rpl_get_instance?relay SYMBOL "?relay", rpl_get_instance
rpl_repair_root     SYMBOL "rpl_repair_root"
??rpl_repair_root?relay SYMBOL "?relay", rpl_repair_root
rpl_reset_dio_timer SYMBOL "rpl_reset_dio_timer"
??rpl_reset_dio_timer?relay SYMBOL "?relay", rpl_reset_dio_timer
uip_ds6_route_lookup SYMBOL "uip_ds6_route_lookup"
??uip_ds6_route_lookup?relay SYMBOL "?relay", uip_ds6_route_lookup
uip_ds6_route_rm    SYMBOL "uip_ds6_route_rm"
??uip_ds6_route_rm?relay SYMBOL "?relay", uip_ds6_route_rm
rpl_insert_header   SYMBOL "rpl_insert_header"
??rpl_insert_header?relay SYMBOL "?relay", rpl_insert_header
rpl_invert_header   SYMBOL "rpl_invert_header"
??rpl_invert_header?relay SYMBOL "?relay", rpl_invert_header
rpl_remove_header   SYMBOL "rpl_remove_header"
??rpl_remove_header?relay SYMBOL "?relay", rpl_remove_header
rpl_update_header_empty SYMBOL "rpl_update_header_empty"
??rpl_update_header_empty?relay SYMBOL "?relay", rpl_update_header_empty
rpl_update_header_final SYMBOL "rpl_update_header_final"
??rpl_update_header_final?relay SYMBOL "?relay", rpl_update_header_final
rpl_verify_header   SYMBOL "rpl_verify_header"
??rpl_verify_header?relay SYMBOL "?relay", rpl_verify_header

        EXTERN ??memmove?relay
        FUNCTION ??memmove?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??rpl_find_parent?relay
        FUNCTION ??rpl_find_parent?relay,00H
        EXTERN ??rpl_get_instance?relay
        FUNCTION ??rpl_get_instance?relay,00H
        EXTERN ??rpl_repair_root?relay
        FUNCTION ??rpl_repair_root?relay,00H
        EXTERN ??rpl_reset_dio_timer?relay
        FUNCTION ??rpl_reset_dio_timer?relay,00H
        EXTERN ??uip_ds6_route_lookup?relay
        FUNCTION ??uip_ds6_route_lookup?relay,00H
        EXTERN ??uip_ds6_route_rm?relay
        FUNCTION ??uip_ds6_route_rm?relay,00H
        EXTERN default_instance
        EXTERN memmove
        FUNCTION memmove,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_find_parent
        FUNCTION rpl_find_parent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_get_instance
        FUNCTION rpl_get_instance,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_repair_root
        FUNCTION rpl_repair_root,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_reset_dio_timer
        FUNCTION rpl_reset_dio_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_aligned_buf
        EXTERN uip_ds6_route_lookup
        FUNCTION uip_ds6_route_lookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_route_rm
        FUNCTION uip_ds6_route_rm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ext_len
        EXTERN uip_len

// D:\myWork\myWork\core\net\rpl\rpl-ext-header.c
//    1 /**
//    2  * \addtogroup uip6
//    3  * @{
//    4  */
//    5 /*
//    6  * Copyright (c) 2009, Swedish Institute of Computer Science.
//    7  * All rights reserved.
//    8  *
//    9  * Redistribution and use in source and binary forms, with or without
//   10  * modification, are permitted provided that the following conditions
//   11  * are met:
//   12  * 1. Redistributions of source code must retain the above copyright
//   13  *    notice, this list of conditions and the following disclaimer.
//   14  * 2. Redistributions in binary form must reproduce the above copyright
//   15  *    notice, this list of conditions and the following disclaimer in the
//   16  *    documentation and/or other materials provided with the distribution.
//   17  * 3. Neither the name of the Institute nor the names of its contributors
//   18  *    may be used to endorse or promote products derived from this software
//   19  *    without specific prior written permission.
//   20  *
//   21  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   22  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   23  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   24  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   25  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   26  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   27  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   28  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   29  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   30  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   31  * SUCH DAMAGE.
//   32  *
//   33  * This file is part of the Contiki operating system.
//   34  */
//   35 /**
//   36  * \file
//   37  *         Management of extension headers for ContikiRPL.
//   38  *
//   39  * \author Vincent Brillault <vincent.brillault@imag.fr>,
//   40  *         Joakim Eriksson <joakime@sics.se>,
//   41  *         Niclas Finne <nfi@sics.se>,
//   42  *         Nicolas Tsiftes <nvt@sics.se>.
//   43  */
//   44 
//   45 #include "net/uip.h"
//   46 #include "net/tcpip.h"
//   47 #include "net/uip-ds6.h"
//   48 #include "net/rpl/rpl-private.h"
//   49 
//   50 #define DEBUG DEBUG_NONE
//   51 #include "net/uip-debug.h"
//   52 
//   53 #include <limits.h>
//   54 #include <string.h>
//   55 
//   56 /*---------------------------------------------------------------------------*/
//   57 #define UIP_IP_BUF                ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
//   58 #define UIP_EXT_BUF               ((struct uip_ext_hdr *)&uip_buf[uip_l2_l3_hdr_len])
//   59 #define UIP_HBHO_BUF              ((struct uip_hbho_hdr *)&uip_buf[uip_l2_l3_hdr_len])
//   60 #define UIP_HBHO_NEXT_BUF         ((struct uip_ext_hdr *)&uip_buf[uip_l2_l3_hdr_len + RPL_HOP_BY_HOP_LEN])
//   61 #define UIP_EXT_HDR_OPT_BUF       ((struct uip_ext_hdr_opt *)&uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])
//   62 #define UIP_EXT_HDR_OPT_PADN_BUF  ((struct uip_ext_hdr_opt_padn *)&uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])
//   63 #define UIP_EXT_HDR_OPT_RPL_BUF   ((struct uip_ext_hdr_opt_rpl *)&uip_buf[uip_l2_l3_hdr_len + uip_ext_opt_offset])
//   64 /*---------------------------------------------------------------------------*/
//   65 #if UIP_CONF_IPV6

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   66 int
//   67 rpl_verify_header(int uip_ext_opt_offset)
rpl_verify_header:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function rpl_verify_header
        CODE
//   68 {
        FUNCALL rpl_verify_header, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_verify_header, uip_ds6_route_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_verify_header, uip_ds6_route_rm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_verify_header, rpl_repair_root
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_verify_header, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   69   rpl_instance_t *instance;
//   70   int down;
//   71   uint8_t sender_closer;
//   72 
//   73   if(UIP_EXT_HDR_OPT_RPL_BUF->opt_len != RPL_HDR_OPT_LEN) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??rpl_verify_header_0
//   74     PRINTF("RPL: Bad header option! (wrong length)\n");
//   75     return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??rpl_verify_header_1 & 0xFFFF
//   76   }
//   77 
//   78   instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
??rpl_verify_header_0:
        ; Setup parameters for call to function rpl_get_instance
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//   79   if(instance == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??rpl_verify_header_2
//   80     PRINTF("RPL: Unknown instance: %u\n",
//   81            UIP_EXT_HDR_OPT_RPL_BUF->instance);
//   82     return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??rpl_verify_header_1 & 0xFFFF
//   83   }
//   84 
//   85   if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_FWD_ERR) {
??rpl_verify_header_2:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??rpl_verify_header_3
//   86     /* We should try to repair it by removing the neighbor that caused
//   87        the packet to be forwareded in the first place. We drop any
//   88        routes that go through the neighbor that sent the packet to
//   89        us. */
//   90     uip_ds6_route_t *route;
//   91     route = uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr);
        ; Setup parameters for call to function uip_ds6_route_lookup
        MOV     R2,#(uip_aligned_buf + 24) & 0xff
        MOV     R3,#((uip_aligned_buf + 24) >> 8) & 0xff
        LCALL   ??uip_ds6_route_lookup?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//   92     if(route != NULL) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_verify_header_4
//   93       uip_ds6_route_rm(route);
        ; Setup parameters for call to function uip_ds6_route_rm
        LCALL   ??uip_ds6_route_rm?relay
//   94 
//   95       /* If we are the root and just needed to remove a DAO route,
//   96          chances are that the network needs to be repaired. The
//   97          rpl_repair_root() function will cause a global repair if we
//   98          happen to be the root node of the dag. */
//   99       PRINTF("RPL: initiate global repair\n");
//  100       rpl_repair_root(instance->instance_id);
        ; Setup parameters for call to function rpl_repair_root
        MOV     A,?V0 + 0
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_repair_root?relay
//  101     }
//  102 
//  103     /* Remove the forwarding error flag and return 0 to let the packet
//  104        be forwarded again. */
//  105     UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_FWD_ERR;
??rpl_verify_header_4:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.5
        MOVX    @DPTR,A
//  106     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_verify_header_1 & 0xFFFF
//  107   }
//  108 
//  109   if(!instance->current_dag->joined) {
??rpl_verify_header_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??rpl_verify_header_5
//  110     PRINTF("RPL: No DAG in the instance\n");
//  111     return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??rpl_verify_header_1 & 0xFFFF
//  112   }
//  113 
//  114   down = 0;
??rpl_verify_header_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  115   if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??rpl_verify_header_6
//  116     down = 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
//  117   }
//  118 
//  119   sender_closer = UIP_EXT_HDR_OPT_RPL_BUF->senderrank < instance->current_dag->rank;
??rpl_verify_header_6:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??rpl_verify_header_7
        MOV     A,#0x1
        SJMP    ??rpl_verify_header_8
??rpl_verify_header_7:
        MOV     A,#0x0
??rpl_verify_header_8:
        MOV     ?V0 + 2,A
//  120 
//  121   PRINTF("RPL: Packet going %s, sender closer %d (%d < %d)\n", down == 1 ? "down" : "up",
//  122 	 sender_closer,
//  123 	 UIP_EXT_HDR_OPT_RPL_BUF->senderrank,
//  124 	 instance->current_dag->rank
//  125 	 );
//  126 
//  127   if((down && !sender_closer) || (!down && sender_closer)) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_verify_header_9
        MOV     A,?V0 + 2
        JZ      ??rpl_verify_header_10
??rpl_verify_header_9:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??rpl_verify_header_11
        MOV     A,?V0 + 2
        JZ      ??rpl_verify_header_11
//  128     PRINTF("RPL: Loop detected - senderrank: %d my-rank: %d sender_closer: %d\n",
//  129 	   UIP_EXT_HDR_OPT_RPL_BUF->senderrank, instance->current_dag->rank,
//  130 	   sender_closer);
//  131     if(UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_RANK_ERR) {
??rpl_verify_header_10:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rpl_verify_header_12
//  132       PRINTF("RPL: Rank error signalled in RPL option!\n");
//  133       /* We should try to repair it, not implemented for the moment */
//  134       rpl_reset_dio_timer(instance);
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_reset_dio_timer?relay
//  135       /* Forward the packet anyway. */
//  136       return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_verify_header_1
//  137     }
//  138     PRINTF("RPL: Single error tolerated\n");
//  139     UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_RANK_ERR;
??rpl_verify_header_12:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
//  140     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??rpl_verify_header_1
//  141   }
//  142 
//  143   PRINTF("RPL: Rank OK\n");
//  144 
//  145   return 0;
??rpl_verify_header_11:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_verify_header_1:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  146 }
//  147 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  148 static void
//  149 set_rpl_opt(unsigned uip_ext_opt_offset)
set_rpl_opt:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function set_rpl_opt
        CODE
//  150 {
        FUNCALL set_rpl_opt, memmove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL set_rpl_opt, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  151   uint8_t temp_len;
//  152 
//  153   memmove(UIP_HBHO_NEXT_BUF, UIP_EXT_BUF, uip_len - UIP_IPH_LEN);
        ; Setup parameters for call to function memmove
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        ADD     A,#-0x28
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 48) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((uip_aligned_buf + 48) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??memmove?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  154   memset(UIP_HBHO_BUF, 0, RPL_HOP_BY_HOP_LEN);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  155   UIP_HBHO_BUF->next = UIP_IP_BUF->proto;
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x28
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  156   UIP_IP_BUF->proto = UIP_PROTO_HBHO;
        MOV     DPTR,#uip_aligned_buf + 6
        MOV     A,#0x0
        MOVX    @DPTR,A
//  157   UIP_HBHO_BUF->len = RPL_HOP_BY_HOP_LEN - 8;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  158   UIP_EXT_HDR_OPT_RPL_BUF->opt_type = UIP_EXT_HDR_OPT_RPL;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x28
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x63
        MOVX    @DPTR,A
//  159   UIP_EXT_HDR_OPT_RPL_BUF->opt_len = RPL_HDR_OPT_LEN;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x4
        MOVX    @DPTR,A
//  160   UIP_EXT_HDR_OPT_RPL_BUF->flags = 0;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  161   UIP_EXT_HDR_OPT_RPL_BUF->instance = 0;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  162   UIP_EXT_HDR_OPT_RPL_BUF->senderrank = 0;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,R6
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  163   uip_len += RPL_HOP_BY_HOP_LEN;
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  164   temp_len = UIP_IP_BUF->len[1];
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        MOV     R2,A
//  165   UIP_IP_BUF->len[1] += UIP_HBHO_BUF->len + 8;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOV     R0,A
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
//  166   if(UIP_IP_BUF->len[1] < temp_len) {
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        JNC     ??set_rpl_opt_0
//  167     UIP_IP_BUF->len[0]++;
        MOV     DPTR,#uip_aligned_buf + 4
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  168   }
//  169 }
??set_rpl_opt_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  170 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 void
//  172 rpl_update_header_empty(void)
rpl_update_header_empty:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function rpl_update_header_empty
        CODE
//  173 {
        FUNCALL rpl_update_header_empty, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_update_header_empty, uip_ds6_route_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_update_header_empty, set_rpl_opt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rpl_update_header_empty, uip_ds6_route_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  174   rpl_instance_t *instance;
//  175   int uip_ext_opt_offset;
//  176   int last_uip_ext_len;
//  177 
//  178   last_uip_ext_len = uip_ext_len;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
//  179   uip_ext_len = 0;
        MOV     DPTR,#uip_ext_len
        MOV     A,#0x0
        MOVX    @DPTR,A
//  180   uip_ext_opt_offset = 2;
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
//  181 
//  182   PRINTF("RPL: Verifying the presence of the RPL header option\n");
//  183 
//  184   switch(UIP_IP_BUF->proto) {
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rpl_update_header_empty_0 & 0xFFFF
//  185   case UIP_PROTO_HBHO:
//  186     if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_update_header_empty_1
//  187       PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n");
//  188       uip_ext_len = last_uip_ext_len;
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  189       return;
        LJMP    ??rpl_update_header_empty_2 & 0xFFFF
//  190     }
//  191     instance = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance);
??rpl_update_header_empty_1:
        ; Setup parameters for call to function rpl_get_instance
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
//  192     if(instance == NULL || !instance->used || !instance->current_dag->joined) {
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_update_header_empty_3
        MOV     A,R0
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_update_header_empty_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??rpl_update_header_empty_4
//  193       PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect instance\n");
//  194       return;
??rpl_update_header_empty_3:
        LJMP    ??rpl_update_header_empty_2 & 0xFFFF
//  195     }
//  196     break;
//  197   default:
//  198     PRINTF("RPL: No hop-by-hop option found, creating it\n");
//  199     if(uip_len + RPL_HOP_BY_HOP_LEN > UIP_BUFSIZE) {
//  200       PRINTF("RPL: Packet too long: impossible to add hop-by-hop option\n");
//  201       uip_ext_len = last_uip_ext_len;
//  202       return;
//  203     }
//  204     set_rpl_opt(uip_ext_opt_offset);
//  205     uip_ext_len = last_uip_ext_len + RPL_HOP_BY_HOP_LEN;
//  206     return;
//  207   }
//  208 
//  209   switch(UIP_EXT_HDR_OPT_BUF->type) {
??rpl_update_header_empty_4:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     R3,A
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x63
        JZ      $+5
        LJMP    ??rpl_update_header_empty_5 & 0xFFFF
//  210   case UIP_EXT_HDR_OPT_RPL:
//  211     PRINTF("RPL: Updating RPL option\n");
//  212     UIP_EXT_HDR_OPT_RPL_BUF->senderrank = instance->current_dag->rank;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  213 
//  214     /* Check the direction of the down flag, as per Section 11.2.2.3,
//  215        which states that if a packet is going down it should in
//  216        general not go back up again. If this happens, a
//  217        RPL_HDR_OPT_FWD_ERR should be flagged. */
//  218     if((UIP_EXT_HDR_OPT_RPL_BUF->flags & RPL_HDR_OPT_DOWN)) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??rpl_update_header_empty_6
//  219       if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
        ; Setup parameters for call to function uip_ds6_route_lookup
        MOV     R2,#(uip_aligned_buf + 24) & 0xff
        MOV     R3,#((uip_aligned_buf + 24) >> 8) & 0xff
        LCALL   ??uip_ds6_route_lookup?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??rpl_update_header_empty_7 & 0xFFFF
//  220         UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_FWD_ERR;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
        LJMP    ??rpl_update_header_empty_7 & 0xFFFF
//  221         PRINTF("RPL forwarding error\n");
//  222       }
//  223     } else {
??rpl_update_header_empty_0:
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0xf
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??rpl_update_header_empty_8
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
        SJMP    ??rpl_update_header_empty_2
??rpl_update_header_empty_8:
        ; Setup parameters for call to function set_rpl_opt
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??set_rpl_opt?relay
        MOV     A,R6
        ADD     A,#0x8
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
        SJMP    ??rpl_update_header_empty_2
//  224       /* Set the down extension flag correctly as described in Section
//  225          11.2 of RFC6550. If the packet progresses along a DAO route,
//  226          the down flag should be set. */
//  227       if(uip_ds6_route_lookup(&UIP_IP_BUF->destipaddr) == NULL) {
??rpl_update_header_empty_6:
        ; Setup parameters for call to function uip_ds6_route_lookup
        MOV     R2,#(uip_aligned_buf + 24) & 0xff
        MOV     R3,#((uip_aligned_buf + 24) >> 8) & 0xff
        LCALL   ??uip_ds6_route_lookup?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??rpl_update_header_empty_9
//  228         /* No route was found, so this packet will go towards the RPL
//  229            root. If so, we should not set the down flag. */
//  230         UIP_EXT_HDR_OPT_RPL_BUF->flags &= ~RPL_HDR_OPT_DOWN;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        MOVX    @DPTR,A
        SJMP    ??rpl_update_header_empty_7
//  231         PRINTF("RPL option going up\n");
//  232       } else {
//  233         /* A DAO route was found so we set the down flag. */
//  234         UIP_EXT_HDR_OPT_RPL_BUF->flags |= RPL_HDR_OPT_DOWN;
??rpl_update_header_empty_9:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//  235         PRINTF("RPL option going down\n");
//  236       }
//  237     }
//  238 
//  239     uip_ext_len = last_uip_ext_len;
??rpl_update_header_empty_7:
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  240     return;
        SJMP    ??rpl_update_header_empty_2
//  241   default:
//  242     PRINTF("RPL: Multi Hop-by-hop options not implemented\n");
//  243     uip_ext_len = last_uip_ext_len;
??rpl_update_header_empty_5:
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  244     return;
??rpl_update_header_empty_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  245   }
//  246 }
//  247 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  248 int
//  249 rpl_update_header_final(uip_ipaddr_t *addr)
rpl_update_header_final:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function rpl_update_header_final
        CODE
//  250 {
        FUNCALL rpl_update_header_final, rpl_find_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  251   rpl_parent_t *parent;
//  252   int uip_ext_opt_offset;
//  253   int last_uip_ext_len;
//  254 
//  255   last_uip_ext_len = uip_ext_len;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
//  256   uip_ext_len = 0;
        MOV     DPTR,#uip_ext_len
        MOV     A,#0x0
        MOVX    @DPTR,A
//  257   uip_ext_opt_offset = 2;
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
//  258 
//  259   if(UIP_IP_BUF->proto == UIP_PROTO_HBHO) {
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rpl_update_header_final_0 & 0xFFFF
//  260     if(UIP_HBHO_BUF->len != RPL_HOP_BY_HOP_LEN - 8) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_update_header_final_1
//  261       PRINTF("RPL: Non RPL Hop-by-hop options support not implemented\n");
//  262       uip_ext_len = last_uip_ext_len;
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  263       return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??rpl_update_header_final_2 & 0xFFFF
//  264     }
//  265 
//  266     if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
??rpl_update_header_final_1:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x63
        JZ      $+5
        LJMP    ??rpl_update_header_final_0 & 0xFFFF
//  267       if(UIP_EXT_HDR_OPT_RPL_BUF->senderrank == 0) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??rpl_update_header_final_0 & 0xFFFF
//  268         PRINTF("RPL: Updating RPL option\n");
//  269         if(default_instance == NULL || !default_instance->used || !default_instance->current_dag->joined) {
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_update_header_final_3
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??rpl_update_header_final_3
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??rpl_update_header_final_4
//  270           PRINTF("RPL: Unable to add hop-by-hop extension header: incorrect default instance\n");
//  271           return 1;
??rpl_update_header_final_3:
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??rpl_update_header_final_2 & 0xFFFF
//  272         }
//  273         parent = rpl_find_parent(default_instance->current_dag, addr);
??rpl_update_header_final_4:
        ; Setup parameters for call to function rpl_find_parent
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_find_parent?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//  274         if(parent == NULL || parent != parent->dag->preferred_parent) {
        MOV     A,R2
        ORL     A,R3
        JZ      ??rpl_update_header_final_5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??rpl_update_header_final_6
        MOV     A,R3
        XRL     A,R1
??rpl_update_header_final_6:
        JZ      ??rpl_update_header_final_7
//  275           UIP_EXT_HDR_OPT_RPL_BUF->flags = RPL_HDR_OPT_DOWN;
??rpl_update_header_final_5:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  276         }
//  277         UIP_EXT_HDR_OPT_RPL_BUF->instance = default_instance->instance_id;
??rpl_update_header_final_7:
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  278         UIP_EXT_HDR_OPT_RPL_BUF->senderrank = default_instance->current_dag->rank;
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  279         uip_ext_len = last_uip_ext_len;
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  280       }
//  281     }
//  282   }
//  283   return 0;
??rpl_update_header_final_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??rpl_update_header_final_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  284 }
//  285 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  286 void
//  287 rpl_remove_header(void)
rpl_remove_header:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function rpl_remove_header
        CODE
//  288 {
        FUNCALL rpl_remove_header, memmove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  289   uint8_t temp_len;
//  290 
//  291   uip_ext_len = 0;
        MOV     DPTR,#uip_ext_len
        MOV     A,#0x0
        MOVX    @DPTR,A
//  292 
//  293   PRINTF("RPL: Verifying the presence of the RPL header option\n");
//  294   switch(UIP_IP_BUF->proto){
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rpl_remove_header_0 & 0xFFFF
//  295   case UIP_PROTO_HBHO:
//  296     PRINTF("RPL: Removing the RPL header option\n");
//  297     UIP_IP_BUF->proto = UIP_HBHO_BUF->next;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    @DPTR,A
//  298     temp_len = UIP_IP_BUF->len[1];
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        MOV     R2,A
//  299     uip_len -= UIP_HBHO_BUF->len + 8;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#uip_len
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOVX    @DPTR,A
//  300     UIP_IP_BUF->len[1] -= UIP_HBHO_BUF->len + 8;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        CLR     C
        SUBB    A,#0x8
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    @DPTR,A
//  301     if(UIP_IP_BUF->len[1] > temp_len) {
        MOV     DPTR,#uip_aligned_buf + 5
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JNC     ??rpl_remove_header_1
//  302       UIP_IP_BUF->len[0]--;
        MOV     DPTR,#uip_aligned_buf + 4
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
//  303     }
//  304     memmove(UIP_EXT_BUF, UIP_HBHO_NEXT_BUF, uip_len - UIP_IPH_LEN);
??rpl_remove_header_1:
        ; Setup parameters for call to function memmove
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        ADD     A,#-0x28
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 48) & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#((uip_aligned_buf + 48) >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??memmove?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  305     break;
//  306   default:
//  307     PRINTF("RPL: No hop-by-hop Option found\n");
//  308   }
//  309 }
??rpl_remove_header_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  310 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 uint8_t
//  312 rpl_invert_header(void)
rpl_invert_header:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function rpl_invert_header
        CODE
//  313 {
        FUNCALL rpl_invert_header, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  314   uint8_t uip_ext_opt_offset;
//  315   uint8_t last_uip_ext_len;
//  316 
//  317   last_uip_ext_len = uip_ext_len;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R6,A
//  318   uip_ext_len = 0;
        MOV     DPTR,#uip_ext_len
        MOV     A,#0x0
        MOVX    @DPTR,A
//  319   uip_ext_opt_offset = 2;
        MOV     ?V0 + 0,#0x2
//  320 
//  321   PRINTF("RPL: Verifying the presence of the RPL header option\n");
//  322   switch(UIP_IP_BUF->proto) {
        MOV     DPTR,#uip_aligned_buf + 6
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rpl_invert_header_0 & 0xFFFF
//  323   case UIP_PROTO_HBHO:
//  324     break;
//  325   default:
//  326     PRINTF("RPL: No hop-by-hop Option found\n");
//  327     uip_ext_len = last_uip_ext_len;
//  328     return 0;
//  329   }
//  330 
//  331   switch (UIP_EXT_HDR_OPT_BUF->type) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x63
        JZ      $+5
        LJMP    ??rpl_invert_header_1 & 0xFFFF
//  332   case UIP_EXT_HDR_OPT_RPL:
//  333     PRINTF("RPL: Updating RPL option (switching direction)\n");
//  334     UIP_EXT_HDR_OPT_RPL_BUF->flags &= RPL_HDR_OPT_DOWN;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOVX    @DPTR,A
//  335     UIP_EXT_HDR_OPT_RPL_BUF->flags ^= RPL_HDR_OPT_DOWN;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2a
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x80
        MOVX    @DPTR,A
//  336     UIP_EXT_HDR_OPT_RPL_BUF->senderrank = rpl_get_instance(UIP_EXT_HDR_OPT_RPL_BUF->instance)->current_dag->rank;
        ; Setup parameters for call to function rpl_get_instance
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  337     uip_ext_len = last_uip_ext_len;
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  338     return RPL_HOP_BY_HOP_LEN;
        MOV     R1,#0x8
        SJMP    ??rpl_invert_header_2
??rpl_invert_header_0:
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
        MOV     R1,#0x0
        SJMP    ??rpl_invert_header_2
//  339   default:
//  340     PRINTF("RPL: Multi Hop-by-hop options not implemented\n");
//  341     uip_ext_len = last_uip_ext_len;
??rpl_invert_header_1:
        MOV     A,R6
        MOV     DPTR,#uip_ext_len
        MOVX    @DPTR,A
//  342     return 0;
        MOV     R1,#0x0
??rpl_invert_header_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  343   }
//  344 }
//  345 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  346 void
//  347 rpl_insert_header(void)
rpl_insert_header:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function rpl_insert_header
        CODE
//  348 {
        FUNCALL rpl_insert_header, rpl_update_header_empty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  349   uint8_t uip_ext_opt_offset;
//  350   if(default_instance != NULL) {
        MOV     DPTR,#default_instance
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rpl_insert_header_0
//  351     uip_ext_opt_offset = 2;
        MOV     ?V0 + 0,#0x2
//  352     if(UIP_EXT_HDR_OPT_BUF->type == UIP_EXT_HDR_OPT_RPL) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 1,#0x0
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#(uip_aligned_buf + 40) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x63
        JNZ     ??rpl_insert_header_0
//  353       rpl_update_header_empty();
        ; Setup parameters for call to function rpl_update_header_empty
        LCALL   ??rpl_update_header_empty?relay
//  354     }
//  355   }
//  356 }
??rpl_insert_header_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_verify_header?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_verify_header

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??set_rpl_opt?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    set_rpl_opt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_update_header_empty?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_update_header_empty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_update_header_final?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_update_header_final

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_remove_header?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_remove_header

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_invert_header?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_invert_header

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rpl_insert_header?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rpl_insert_header

        END
//  357 /*---------------------------------------------------------------------------*/
//  358 #endif /* UIP_CONF_IPV6 */
// 
// 2 480 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
// 
// 2 522 bytes of CODE memory
//
//Errors: none
//Warnings: none
