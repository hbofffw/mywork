###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:52 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\sys\timer.c                  #
#    Command line       =  D:\myWork\myWork\core\sys\timer.c -D               #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\timer.lst                                   #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\timer.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\sys\timer.c
      1          /**
      2           * \addtogroup timer
      3           * @{
      4           */
      5          
      6          /**
      7           * \file
      8           * Timer library implementation.
      9           * \author
     10           * Adam Dunkels <adam@sics.se>
     11           */
     12          
     13          /*
     14           * Copyright (c) 2004, Swedish Institute of Computer Science.
     15           * All rights reserved.
     16           *
     17           * Redistribution and use in source and binary forms, with or without
     18           * modification, are permitted provided that the following conditions
     19           * are met:
     20           * 1. Redistributions of source code must retain the above copyright
     21           *    notice, this list of conditions and the following disclaimer.
     22           * 2. Redistributions in binary form must reproduce the above copyright
     23           *    notice, this list of conditions and the following disclaimer in the
     24           *    documentation and/or other materials provided with the distribution.
     25           * 3. Neither the name of the Institute nor the names of its contributors
     26           *    may be used to endorse or promote products derived from this software
     27           *    without specific prior written permission.
     28           *
     29           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     30           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     31           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     32           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     33           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     34           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     35           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     36           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     37           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     38           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     39           * SUCH DAMAGE.
     40           *
     41           * This file is part of the Contiki operating system.
     42           *
     43           * Author: Adam Dunkels <adam@sics.se>
     44           *
     45           */
     46          
     47          #include "contiki-conf.h"
     48          #include "sys/clock.h"
     49          #include "sys/timer.h"
     50          
     51          /*---------------------------------------------------------------------------*/
     52          /**
     53           * Set a timer.
     54           *
     55           * This function is used to set a timer for a time sometime in the
     56           * future. The function timer_expired() will evaluate to true after
     57           * the timer has expired.
     58           *
     59           * \param t A pointer to the timer
     60           * \param interval The interval before the timer expires.
     61           *
     62           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     63          void
     64          timer_set(struct timer *t, clock_time_t interval)
   \                     timer_set:
     65          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     66            t->interval = interval;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
     67            t->start = clock_time();
   \   000014                ; Setup parameters for call to function clock_time
   \   000014   12....       LCALL   ??clock_time?relay
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
     68          }
   \   000020   7F01         MOV     R7,#0x1
   \   000022   02....       LJMP    ?BANKED_LEAVE_XDATA
     69          /*---------------------------------------------------------------------------*/
     70          /**
     71           * Reset the timer with the same interval.
     72           *
     73           * This function resets the timer with the same interval that was
     74           * given to the timer_set() function. The start point of the interval
     75           * is the exact time that the timer last expired. Therefore, this
     76           * function will cause the timer to be stable over time, unlike the
     77           * timer_restart() function.
     78           *
     79           * \param t A pointer to the timer.
     80           *
     81           * \sa timer_restart()
     82           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     83          void
     84          timer_reset(struct timer *t)
   \                     timer_reset:
     85          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     86            t->start += t->interval;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E0           MOVX    A,@DPTR
   \   000014   28           ADD     A,R0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   39           ADDC    A,R1
   \   000019   F0           MOVX    @DPTR,A
     87          }
   \   00001A   D083         POP     DPH
   \   00001C   D082         POP     DPL
   \   00001E   02....       LJMP    ?BRET
     88          /*---------------------------------------------------------------------------*/
     89          /**
     90           * Restart the timer from the current point in time
     91           *
     92           * This function restarts a timer with the same interval that was
     93           * given to the timer_set() function. The timer will start at the
     94           * current time.
     95           *
     96           * \note A periodic timer will drift if this function is used to reset
     97           * it. For preioric timers, use the timer_reset() function instead.
     98           *
     99           * \param t A pointer to the timer.
    100           *
    101           * \sa timer_reset()
    102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          void
    104          timer_restart(struct timer *t)
   \                     timer_restart:
    105          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    106            t->start = clock_time();
   \   000009                ; Setup parameters for call to function clock_time
   \   000009   12....       LCALL   ??clock_time?relay
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    107          }
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    108          /*---------------------------------------------------------------------------*/
    109          /**
    110           * Check if a timer has expired.
    111           *
    112           * This function tests if a timer has expired and returns true or
    113           * false depending on its status.
    114           *
    115           * \param t A pointer to the timer
    116           *
    117           * \return Non-zero if the timer has expired, zero otherwise.
    118           *
    119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    120          int
    121          timer_expired(struct timer *t)
   \                     timer_expired:
    122          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    123            /* Note: Can not return diff >= t->interval so we add 1 to diff and return
    124               t->interval < diff - required to avoid an internal error in mspgcc. */
    125            clock_time_t diff = (clock_time() - t->start) + 1;
   \   000009                ; Setup parameters for call to function clock_time
   \   000009   12....       LCALL   ??clock_time?relay
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   C3           CLR     C
   \   00001C   98           SUBB    A,R0
   \   00001D   F8           MOV     R0,A
   \   00001E   E5..         MOV     A,?V0 + 1
   \   000020   99           SUBB    A,R1
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   2401         ADD     A,#0x1
   \   000025   F8           MOV     R0,A
   \   000026   E9           MOV     A,R1
   \   000027   3400         ADDC    A,#0x0
   \   000029   F9           MOV     R1,A
    126            return t->interval < diff;
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   C3           CLR     C
   \   000031   E0           MOVX    A,@DPTR
   \   000032   98           SUBB    A,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   99           SUBB    A,R1
   \   000036   5004         JNC     ??timer_expired_0
   \   000038   D2F0         SETB    B.0
   \   00003A   8002         SJMP    ??timer_expired_1
   \                     ??timer_expired_0:
   \   00003C   C2F0         CLR     B.0
   \                     ??timer_expired_1:
   \   00003E   A2F0         MOV     C,B.0
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   FA           MOV     R2,A
   \   000043   7B00         MOV     R3,#0x0
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    127          
    128          }
    129          /*---------------------------------------------------------------------------*/
    130          /**
    131           * The time until the timer expires
    132           *
    133           * This function returns the time until the timer expires.
    134           *
    135           * \param t A pointer to the timer
    136           *
    137           * \return The time until the timer expires
    138           *
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          clock_time_t
    141          timer_remaining(struct timer *t)
   \                     timer_remaining:
    142          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    143            return t->start + t->interval - clock_time();
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   28           ADD     A,R0
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   39           ADDC    A,R1
   \   00001A   FF           MOV     R7,A
   \   00001B                ; Setup parameters for call to function clock_time
   \   00001B   12....       LCALL   ??clock_time?relay
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EE           MOV     A,R6
   \   000023   C3           CLR     C
   \   000024   95..         SUBB    A,?V0 + 0
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   95..         SUBB    A,?V0 + 1
   \   00002A   FB           MOV     R3,A
   \   00002B   7F02         MOV     R7,#0x2
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    144          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??timer_set?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    timer_set

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??timer_reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    timer_reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??timer_restart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    timer_restart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??timer_expired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    timer_expired

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??timer_remaining?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    timer_remaining
    145          /*---------------------------------------------------------------------------*/
    146          
    147          /** @} */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     10  timer_expired
                          0 0 10 -> clock_time
       0      0     10  timer_remaining
                          0 0 10 -> clock_time
       2      0      0  timer_reset
       0      0      9  timer_restart
                          0 0  9 -> clock_time
       0      0      9  timer_set
                          0 0  9 -> clock_time


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??timer_expired?relay
       6  ??timer_remaining?relay
       6  ??timer_reset?relay
       6  ??timer_restart?relay
       6  ??timer_set?relay
      74  timer_expired
      48  timer_remaining
      33  timer_reset
      26  timer_restart
      37  timer_set

 
 218 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 248 bytes of CODE memory

Errors: none
Warnings: none
