///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:45 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\mac\phase.c             /
//    Command line       =  D:\myWork\myWork\core\net\mac\phase.c -D          /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\phase.s51                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME phase

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??phase_init?relay
        FUNCTION ??phase_init?relay,0203H
        PUBLIC ??phase_update?relay
        FUNCTION ??phase_update?relay,0203H
        PUBLIC ??phase_wait?relay
        FUNCTION ??phase_wait?relay,0203H
        FUNCTION ??send_packet?relay,0203H
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBLIC phase_init
        FUNCTION phase_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC phase_update
        FUNCTION phase_update,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC phase_wait
        FUNCTION phase_wait,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION send_packet,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
ctimer_set          SYMBOL "ctimer_set"
??ctimer_set?relay  SYMBOL "?relay", ctimer_set
memb_alloc          SYMBOL "memb_alloc"
??memb_alloc?relay  SYMBOL "?relay", memb_alloc
memb_free           SYMBOL "memb_free"
??memb_free?relay   SYMBOL "?relay", memb_free
memb_init           SYMBOL "memb_init"
??memb_init?relay   SYMBOL "?relay", memb_init
nbr_table_add_lladdr SYMBOL "nbr_table_add_lladdr"
??nbr_table_add_lladdr?relay SYMBOL "?relay", nbr_table_add_lladdr
nbr_table_get_from_lladdr SYMBOL "nbr_table_get_from_lladdr"
??nbr_table_get_from_lladdr?relay SYMBOL "?relay", nbr_table_get_from_lladdr
nbr_table_register  SYMBOL "nbr_table_register"
??nbr_table_register?relay SYMBOL "?relay", nbr_table_register
nbr_table_remove    SYMBOL "nbr_table_remove"
??nbr_table_remove?relay SYMBOL "?relay", nbr_table_remove
queuebuf_free       SYMBOL "queuebuf_free"
??queuebuf_free?relay SYMBOL "?relay", queuebuf_free
queuebuf_new_from_packetbuf SYMBOL "queuebuf_new_from_packetbuf"
??queuebuf_new_from_packetbuf?relay SYMBOL "?relay", queuebuf_new_from_packetbuf
queuebuf_to_packetbuf SYMBOL "queuebuf_to_packetbuf"
??queuebuf_to_packetbuf?relay SYMBOL "?relay", queuebuf_to_packetbuf
timer_expired       SYMBOL "timer_expired"
??timer_expired?relay SYMBOL "?relay", timer_expired
timer_set           SYMBOL "timer_set"
??timer_set?relay   SYMBOL "?relay", timer_set
phase_init          SYMBOL "phase_init"
??phase_init?relay  SYMBOL "?relay", phase_init
phase_update        SYMBOL "phase_update"
??phase_update?relay SYMBOL "?relay", phase_update
phase_wait          SYMBOL "phase_wait"
??phase_wait?relay  SYMBOL "?relay", phase_wait

        EXTERN ??ctimer_set?relay
        FUNCTION ??ctimer_set?relay,00H
        EXTERN ??memb_alloc?relay
        FUNCTION ??memb_alloc?relay,00H
        EXTERN ??memb_free?relay
        FUNCTION ??memb_free?relay,00H
        EXTERN ??memb_init?relay
        FUNCTION ??memb_init?relay,00H
        EXTERN ??nbr_table_add_lladdr?relay
        FUNCTION ??nbr_table_add_lladdr?relay,00H
        EXTERN ??nbr_table_get_from_lladdr?relay
        FUNCTION ??nbr_table_get_from_lladdr?relay,00H
        EXTERN ??nbr_table_register?relay
        FUNCTION ??nbr_table_register?relay,00H
        EXTERN ??nbr_table_remove?relay
        FUNCTION ??nbr_table_remove?relay,00H
        EXTERN ??queuebuf_free?relay
        FUNCTION ??queuebuf_free?relay,00H
        EXTERN ??queuebuf_new_from_packetbuf?relay
        FUNCTION ??queuebuf_new_from_packetbuf?relay,00H
        EXTERN ??queuebuf_to_packetbuf?relay
        FUNCTION ??queuebuf_to_packetbuf?relay,00H
        EXTERN ??timer_expired?relay
        FUNCTION ??timer_expired?relay,00H
        EXTERN ??timer_set?relay
        FUNCTION ??timer_set?relay,00H
        EXTERN ctimer_set
        FUNCTION ctimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_alloc
        FUNCTION memb_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_free
        FUNCTION memb_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memb_init
        FUNCTION memb_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_add_lladdr
        FUNCTION nbr_table_add_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_get_from_lladdr
        FUNCTION nbr_table_get_from_lladdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_register
        FUNCTION nbr_table_register,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nbr_table_remove
        FUNCTION nbr_table_remove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nullrdc_driver
        EXTERN queuebuf_free
        FUNCTION queuebuf_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_new_from_packetbuf
        FUNCTION queuebuf_new_from_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN queuebuf_to_packetbuf
        FUNCTION queuebuf_to_packetbuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN timer_expired
        FUNCTION timer_expired,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN timer_set
        FUNCTION timer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1
// D:\myWork\myWork\core\net\mac\phase.c
//    1 /*
//    2  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         Common functionality for phase optimization in duty cycling radio protocols
//   36  * \author
//   37  *         Adam Dunkels <adam@sics.se>
//   38  */
//   39 
//   40 #include "net/mac/phase.h"
//   41 #include "net/packetbuf.h"
//   42 #include "sys/clock.h"
//   43 #include "sys/ctimer.h"
//   44 #include "net/queuebuf.h"
//   45 #include "net/nbr-table.h"
//   46 
//   47 #if PHASE_CONF_DRIFT_CORRECT
//   48 #define PHASE_DRIFT_CORRECT PHASE_CONF_DRIFT_CORRECT
//   49 #else
//   50 #define PHASE_DRIFT_CORRECT 0
//   51 #endif
//   52 
//   53 struct phase {
//   54   rtimer_clock_t time;
//   55 #if PHASE_DRIFT_CORRECT
//   56   rtimer_clock_t drift;
//   57 #endif
//   58   uint8_t noacks;
//   59   struct timer noacks_timer;
//   60 };
//   61 
//   62 struct phase_queueitem {
//   63   struct ctimer timer;
//   64   mac_callback_t mac_callback;
//   65   void *mac_callback_ptr;
//   66   struct queuebuf *q;
//   67   struct rdc_buf_list *buf_list;
//   68 };
//   69 
//   70 #define PHASE_DEFER_THRESHOLD 1
//   71 #define PHASE_QUEUESIZE       8
//   72 
//   73 #define MAX_NOACKS            16
//   74 
//   75 #define MAX_NOACKS_TIME       CLOCK_SECOND * 30
//   76 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   77 MEMB(queued_packets_memb, struct phase_queueitem, PHASE_QUEUESIZE);
queued_packets_memb:
        DATA8
        DS 8
        REQUIRE `?<Initializer for queued_packets_memb>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static char queued_packets_memb_memb_count[8]
queued_packets_memb_memb_count:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static struct phase_queueitem queued_packets_memb_memb_mem[8]
queued_packets_memb_memb_mem:
        DS 192
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 NBR_TABLE(struct phase, nbr_phase);
_nbr_phase_mem:
        DS 28
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
// static nbr_table_t nbr_phase_struct
nbr_phase_struct:
        DATA8
        DS 8
        REQUIRE `?<Initializer for nbr_phase_struct>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
// static nbr_table_t *__xdata nbr_phase
nbr_phase:
        DATA16
        DS 2
        REQUIRE `?<Initializer for nbr_phase>`
        REQUIRE __INIT_XDATA_I
//   79 
//   80 #define DEBUG 0
//   81 #if DEBUG
//   82 #include <stdio.h>
//   83 #define PRINTF(...) printf(__VA_ARGS__)
//   84 #define PRINTDEBUG(...) printf(__VA_ARGS__)
//   85 #else
//   86 #define PRINTF(...)
//   87 #define PRINTDEBUG(...)
//   88 #endif
//   89 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   90 void
//   91 phase_update(const rimeaddr_t *neighbor, rtimer_clock_t time,
phase_update:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function phase_update
        CODE
//   92              int mac_status)
//   93 {
        FUNCALL phase_update, nbr_table_get_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_update, timer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_update, timer_expired
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_update, nbr_table_remove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_update, nbr_table_add_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//   94   struct phase *e;
//   95 
//   96   /* If we have an entry for this neighbor already, we renew it. */
//   97   e = nbr_table_get_from_lladdr(nbr_phase, neighbor);
        ; Setup parameters for call to function nbr_table_get_from_lladdr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#nbr_phase
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_from_lladdr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   98   if(e != NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??phase_update_0 & 0xFFFF
//   99     if(mac_status == MAC_TX_OK) {
        MOV     A,R0
        ORL     A,R1
        JNZ     ??phase_update_1
//  100 #if PHASE_DRIFT_CORRECT
//  101       e->drift = time-e->time;
//  102 #endif
//  103       e->time = time;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  104     }
//  105     /* If the neighbor didn't reply to us, it may have switched
//  106        phase (rebooted). We try a number of transmissions to it
//  107        before we drop it from the phase list. */
//  108     if(mac_status == MAC_TX_NOACK) {
??phase_update_1:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??phase_update_2
        MOV     A,#0x0
        XRL     A,R1
??phase_update_2:
        JNZ     ??phase_update_3
//  109       PRINTF("phase noacks %d to %d.%d\n", e->noacks, neighbor->u8[0], neighbor->u8[1]);
//  110       e->noacks++;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  111       if(e->noacks == 1) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??phase_update_4
//  112         timer_set(&e->noacks_timer, MAX_NOACKS_TIME);
        ; Setup parameters for call to function timer_set
        MOV     R4,#0x0
        MOV     R5,#0xf
        MOV     A,?V0 + 0
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??timer_set?relay
//  113       }
//  114       if(e->noacks >= MAX_NOACKS || timer_expired(&e->noacks_timer)) {
??phase_update_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x10
        JNC     ??phase_update_5
        ; Setup parameters for call to function timer_expired
        MOV     A,?V0 + 0
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??timer_expired?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??phase_update_6
//  115         PRINTF("drop %d\n", neighbor->u8[0]);
//  116         nbr_table_remove(nbr_phase, e);
??phase_update_5:
        ; Setup parameters for call to function nbr_table_remove
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     DPTR,#nbr_phase
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_remove?relay
//  117         return;
        SJMP    ??phase_update_6
//  118       }
//  119     } else if(mac_status == MAC_TX_OK) {
??phase_update_3:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??phase_update_6
//  120       e->noacks = 0;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??phase_update_6
//  121     }
//  122   } else {
//  123     /* No matching phase was found, so we allocate a new one. */
//  124     if(mac_status == MAC_TX_OK && e == NULL) {
??phase_update_0:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??phase_update_6
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??phase_update_6
//  125       e = nbr_table_add_lladdr(nbr_phase, neighbor);
        ; Setup parameters for call to function nbr_table_add_lladdr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#nbr_phase
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_add_lladdr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  126       if(e) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??phase_update_6
//  127         e->time = time;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  128 #if PHASE_DRIFT_CORRECT
//  129       e->drift = 0;
//  130 #endif
//  131       e->noacks = 0;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  132       }
//  133     }
//  134   }
//  135 }
??phase_update_6:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  136 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 static void
//  138 send_packet(void *ptr)
send_packet:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function send_packet
        CODE
//  139 {
        FUNCALL send_packet, queuebuf_to_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, queuebuf_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL send_packet, memb_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  140   struct phase_queueitem *p = ptr;
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  141 
//  142   if(p->buf_list == NULL) {
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??send_packet_0
//  143     queuebuf_to_packetbuf(p->q);
        ; Setup parameters for call to function queuebuf_to_packetbuf
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_to_packetbuf?relay
//  144     queuebuf_free(p->q);
        ; Setup parameters for call to function queuebuf_free
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??queuebuf_free?relay
//  145     NETSTACK_RDC.send(p->mac_callback, p->mac_callback_ptr);
        ; Setup parameters for indirect call
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#nullrdc_driver + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        SJMP    ??send_packet_1
//  146   } else {
//  147     NETSTACK_RDC.send_list(p->mac_callback, p->mac_callback_ptr, p->buf_list);
??send_packet_0:
        ; Setup parameters for indirect call
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#nullrdc_driver + 6
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  148   }
//  149 
//  150   memb_free(&queued_packets_memb, p);
??send_packet_1:
        ; Setup parameters for call to function memb_free
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#queued_packets_memb & 0xff
        MOV     R3,#(queued_packets_memb >> 8) & 0xff
        LCALL   ??memb_free?relay
        MOV     A,R1
//  151 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  152 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 phase_status_t
//  154 phase_wait(const rimeaddr_t *neighbor, rtimer_clock_t cycle_time,
phase_wait:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function phase_wait
        CODE
//  155            rtimer_clock_t guard_time,
//  156            mac_callback_t mac_callback, void *mac_callback_ptr,
//  157            struct rdc_buf_list *buf_list)
//  158 {
        FUNCALL phase_wait, nbr_table_get_from_lladdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_wait, memb_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_wait, queuebuf_new_from_packetbuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_wait, ctimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  159   struct phase *e;
//  160   //  const rimeaddr_t *neighbor = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
//  161   /* We go through the list of phases to find if we have recorded a
//  162      phase for this particular neighbor. If so, we can compute the
//  163      time for the next expected phase and setup a ctimer to switch on
//  164      the radio just before the phase. */
//  165   e = nbr_table_get_from_lladdr(nbr_phase, neighbor);
        ; Setup parameters for call to function nbr_table_get_from_lladdr
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#nbr_phase
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_get_from_lladdr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
//  166   if(e != NULL) {
        MOV     A,DPL
        ORL     A,DPH
        JNZ     $+5
        LJMP    ??phase_wait_0 & 0xFFFF
//  167     rtimer_clock_t wait, now, expected, sync;
//  168     clock_time_t ctimewait;
//  169     
//  170     /* We expect phases to happen every CYCLE_TIME time
//  171        units. The next expected phase is at time e->time +
//  172        CYCLE_TIME. To compute a relative offset, we subtract
//  173        with clock_time(). Because we are only interested in turning
//  174        on the radio within the CYCLE_TIME period, we compute the
//  175        waiting time with modulo CYCLE_TIME. */
//  176     
//  177     /*      printf("neighbor phase 0x%02x (cycle 0x%02x)\n", e->time & (cycle_time - 1),
//  178             cycle_time);*/
//  179 
//  180     /*      if(e->noacks > 0) {
//  181             printf("additional wait %d\n", additional_wait);
//  182             }*/
//  183     
//  184     now = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V0 + 3,A
//  185 
//  186     sync = (e == NULL) ? now : e->time;
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??phase_wait_1
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        SJMP    ??phase_wait_2
??phase_wait_1:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  187 
//  188 #if PHASE_DRIFT_CORRECT
//  189     {
//  190       int32_t s;
//  191       if(e->drift > cycle_time) {
//  192         s = e->drift % cycle_time / (e->drift / cycle_time);  /* drift per cycle */
//  193         s = s * (now - sync) / cycle_time;                    /* estimated drift to now */
//  194         sync += s;                                            /* add it in */
//  195       }
//  196     }
//  197 #endif
//  198 
//  199     /* Check if cycle_time is a power of two */
//  200     if(!(cycle_time & (cycle_time - 1))) {
??phase_wait_2:
        MOV     A,R6
        ADD     A,#-0x1
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R6
        ANL     A,R2
        MOV     R2,A
        MOV     A,R7
        ANL     A,R3
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     ??phase_wait_3
//  201       /* Faster if cycle_time is a power of two */
//  202       wait = (rtimer_clock_t)((sync - now) & (cycle_time - 1));
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R2,A
        MOV     A,R1
        SUBB    A,?V0 + 3
        MOV     R3,A
        MOV     A,R6
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R2
        ANL     A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        ANL     A,R1
        MOV     ?V0 + 1,A
        SJMP    ??phase_wait_4
//  203     } else {
//  204       /* Works generally */
//  205       wait = cycle_time - (rtimer_clock_t)((now - sync) % cycle_time);
??phase_wait_3:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,R7
        SUBB    A,?V0 + 1
        MOV     ?V0 + 1,A
??phase_wait_4:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  206     }
//  207 
//  208     if(wait < guard_time) {
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        JNC     ??phase_wait_5
//  209       wait += cycle_time;
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R7
        MOV     ?V0 + 1,A
//  210     }
//  211 
//  212     ctimewait = (CLOCK_SECOND * (wait - guard_time)) / RTIMER_ARCH_SECOND;
??phase_wait_5:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#-0x80
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#-0x80
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     R2,#0x9
        MOV     R3,#0x3d
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 10,R0
        MOV     ?V0 + 11,R1
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
//  213 
//  214     if(ctimewait > PHASE_DEFER_THRESHOLD) {
        CLR     C
        MOV     A,R6
        SUBB    A,#0x2
        MOV     A,R7
        SUBB    A,#0x0
        JNC     $+5
        LJMP    ??phase_wait_6 & 0xFFFF
//  215       struct phase_queueitem *p;
//  216       
//  217       p = memb_alloc(&queued_packets_memb);
        ; Setup parameters for call to function memb_alloc
        MOV     R2,#queued_packets_memb & 0xff
        MOV     R3,#(queued_packets_memb >> 8) & 0xff
        LCALL   ??memb_alloc?relay
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 10,?V0 + 12
        MOV     ?V0 + 11,?V0 + 13
//  218       if(p != NULL) {
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     $+5
        LJMP    ??phase_wait_6 & 0xFFFF
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  219         if(buf_list == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??phase_wait_7
//  220           p->q = queuebuf_new_from_packetbuf();
        ; Setup parameters for call to function queuebuf_new_from_packetbuf
        LCALL   ??queuebuf_new_from_packetbuf?relay
        MOV     A,?V0 + 10
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  221         }
//  222         p->mac_callback = mac_callback;
??phase_wait_7:
        MOV     A,?V0 + 10
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 9
        MOVX    @DPTR,A
//  223         p->mac_callback_ptr = mac_callback_ptr;
        MOV     A,?V0 + 10
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  224         p->buf_list = buf_list;
        MOV     A,?V0 + 10
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  225         ctimer_set(&p->timer, ctimewait, send_packet, p);
        ; Setup parameters for call to function ctimer_set
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#??send_packet?relay & 0xff
        MOV     ?V0 + 1,#(??send_packet?relay >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        LCALL   ??ctimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  226         return PHASE_DEFERRED;
        MOV     R1,#0x2
        SJMP    ??phase_wait_8
//  227       }
//  228     }
//  229 
//  230     expected = now + wait - guard_time;
??phase_wait_6:
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        MOV     A,R1
        SUBB    A,?V0 + 5
        MOV     R1,A
//  231     if(!RTIMER_CLOCK_LT(expected, now)) {
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R2,A
        MOV     A,R1
        SUBB    A,?V0 + 3
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x0
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??phase_wait_9
//  232       /* Wait until the receiver is expected to be awake */
//  233       while(RTIMER_CLOCK_LT(RTIMER_NOW(), expected));
??phase_wait_10:
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x0
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??phase_wait_10
//  234     }
//  235     return PHASE_SEND_NOW;
??phase_wait_9:
        MOV     R1,#0x1
        SJMP    ??phase_wait_8
//  236   }
//  237   return PHASE_UNKNOWN;
??phase_wait_0:
        MOV     R1,#0x0
??phase_wait_8:
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//  238 }
//  239 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 void
//  241 phase_init(void)
phase_init:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function phase_init
        CODE
//  242 {
        FUNCALL phase_init, memb_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL phase_init, nbr_table_register
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  243   memb_init(&queued_packets_memb);
        ; Setup parameters for call to function memb_init
        MOV     R2,#queued_packets_memb & 0xff
        MOV     R3,#(queued_packets_memb >> 8) & 0xff
        LCALL   ??memb_init?relay
//  244   nbr_table_register(nbr_phase, NULL);
        ; Setup parameters for call to function nbr_table_register
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     DPTR,#nbr_phase
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??nbr_table_register?relay
//  245 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for queued_packets_memb>`:
        DATA16
        DW 24
        DW 8
        DW queued_packets_memb_memb_count
        DW queued_packets_memb_memb_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for nbr_phase_struct>`:
        DATA16
        DW 0
        DW 7
        DW 0H
        DW _nbr_phase_mem

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for nbr_phase>`:
        DATA16
        DW nbr_phase_struct

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??phase_update?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    phase_update

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_packet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    send_packet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??phase_wait?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    phase_wait

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??phase_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    phase_init

        END
//  246 /*---------------------------------------------------------------------------*/
// 
// 1 012 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    18 bytes in segment XDATA_I
//    18 bytes in segment XDATA_ID
//   228 bytes in segment XDATA_Z
// 
// 1 054 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//   246 bytes of XDATA memory
//
//Errors: none
//Warnings: none
