###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:55 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\platform\wsn2530dk\viztool.c      #
#    Command line       =  D:\myWork\myWork\platform\wsn2530dk\viztool.c -D   #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\viztool.lst                                 #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\viztool.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\platform\wsn2530dk\viztool.c
      1          /*
      2           * Copyright (c) 2010, Loughborough University - Computer Science
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the Contiki operating system.
     30           */
     31          
     32          /**
     33           * \file
     34           *         Small UDP app used to retrieve neighbor cache and routing table
     35           *         entries and send them to an external endpoint
     36           *
     37           * \author
     38           *         George Oikonomou - <oikonomou@users.sourceforge.net>
     39           */
     40          
     41          #include "contiki.h"
     42          #include "contiki-lib.h"
     43          #include "contiki-net.h"
     44          #include "net/uip-ds6-route.h"
     45          
     46          #include <string.h>
     47          
     48          #define DEBUG DEBUG_NONE
     49          #include "net/uip-debug.h"
     50          
     51          #define UIP_IP_BUF   ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
     52          #define UIP_UDP_BUF  ((struct uip_udp_hdr *)&uip_buf[uip_l2_l3_hdr_len])
     53          
     54          #ifndef VIZTOOL_MAX_PAYLOAD_LEN
     55          #define VIZTOOL_MAX_PAYLOAD_LEN 60
     56          #endif
     57          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     58          static struct uip_udp_conn *server_conn;
   \                     server_conn:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     59          static unsigned char buf[VIZTOOL_MAX_PAYLOAD_LEN];
   \                     buf:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     60          static int8_t len;
   \                     len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     61          
     62          #define VIZTOOL_UDP_PORT   60001
     63          
     64          /* Request Bits */
     65          #define REQUEST_TYPE_ND         1
     66          #define REQUEST_TYPE_RT         2
     67          #define REQUEST_TYPE_DRT        3
     68          #define REQUEST_TYPE_ADDR       4
     69          #define REQUEST_TYPE_TOTALS  0xFF
     70          
     71          extern uip_ds6_netif_t uip_ds6_if;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          static uip_ds6_route_t *rt;
   \                     rt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          static uip_ds6_defrt_t *defrt;
   \                     defrt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          static uip_ipaddr_t *addr;
   \                     addr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     75          /*---------------------------------------------------------------------------*/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     76          __near_func static uint8_t
     77          process_request()
   \                     process_request:
     78          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     79            uint8_t len;
     80            uint8_t count; /* How many did we pack? */
     81            uint8_t i;
     82            uint8_t left;
     83            uint8_t entry_size;
     84            uip_ds6_nbr_t *nbr;
     85          
     86            left = VIZTOOL_MAX_PAYLOAD_LEN - 1;
   \   00000A   75..3B       MOV     ?V0 + 3,#0x3b
     87            len = 2; /* start filling the buffer from position [2] */
   \   00000D   7E02         MOV     R6,#0x2
     88            count = 0;
   \   00000F   75..00       MOV     ?V0 + 2,#0x0
     89            if(buf[0] == REQUEST_TYPE_ND) {
   \   000012   90....       MOV     DPTR,#buf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??process_request_0
     90              /* Neighbors */
     91              PRINTF("Neighbors\n");
     92              for(nbr = nbr_table_head(ds6_neighbors);
   \   00001D                ; Setup parameters for call to function nbr_table_head
   \   00001D   90....       MOV     DPTR,#ds6_neighbors
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??nbr_table_head?relay
   \   000028   8A..         MOV     ?V0 + 4,R2
   \   00002A   8B..         MOV     ?V0 + 5,R3
   \   00002C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00002F   85....       MOV     ?V0 + 1,?V0 + 5
   \   000032   8019         SJMP    ??process_request_1
     93                  nbr != NULL;
     94                  nbr = nbr_table_next(ds6_neighbors, nbr)) {
   \                     ??process_request_2:
   \   000034                ; Setup parameters for call to function nbr_table_next
   \   000034   AC..         MOV     R4,?V0 + 0
   \   000036   AD..         MOV     R5,?V0 + 1
   \   000038   90....       MOV     DPTR,#ds6_neighbors
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??nbr_table_next?relay
   \   000043   8A..         MOV     ?V0 + 4,R2
   \   000045   8B..         MOV     ?V0 + 5,R3
   \   000047   85....       MOV     ?V0 + 0,?V0 + 4
   \   00004A   85....       MOV     ?V0 + 1,?V0 + 5
   \                     ??process_request_1:
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   45..         ORL     A,?V0 + 1
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??process_request_3
     95                entry_size = sizeof(i) + sizeof(uip_ipaddr_t) + sizeof(uip_lladdr_t)
     96                        + sizeof(nbr->state);
   \   000056   7F1A         MOV     R7,#0x1a
     97                PRINTF("%02u: ", i);
     98                PRINT6ADDR(&nbr->ipaddr);
     99                PRINTF(" - ");
    100                PRINTLLADDR(&nbr->lladdr);
    101                PRINTF(" - %u\n", nbr->state);
    102          
    103                memcpy(buf + len, &i, sizeof(i));
   \   000058                ; Setup parameters for call to function memcpy
   \   000058   75..01       MOV     ?V0 + 4,#0x1
   \   00005B   75..00       MOV     ?V0 + 5,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   AC82         MOV     R4,DPL
   \   00006A   AD83         MOV     R5,DPH
   \   00006C   8E..         MOV     ?V0 + 4,R6
   \   00006E   75..00       MOV     ?V0 + 5,#0x0
   \   000071   74..         MOV     A,#buf & 0xff
   \   000073   25..         ADD     A,?V0 + 4
   \   000075   FA           MOV     R2,A
   \   000076   74..         MOV     A,#(buf >> 8) & 0xff
   \   000078   35..         ADDC    A,?V0 + 5
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   ??memcpy?relay
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    104                len += sizeof(i);
   \   000083   0E           INC     R6
    105                memcpy(buf + len, uip_ds6_nbr_get_ipaddr(nbr), sizeof(uip_ipaddr_t));
   \   000084                ; Setup parameters for call to function memcpy
   \   000084   75..10       MOV     ?V0 + 4,#0x10
   \   000087   75..00       MOV     ?V0 + 5,#0x0
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F                ; Setup parameters for call to function uip_ds6_nbr_get_ipaddr
   \   00008F   AA..         MOV     R2,?V0 + 0
   \   000091   AB..         MOV     R3,?V0 + 1
   \   000093   12....       LCALL   ??uip_ds6_nbr_get_ipaddr?relay
   \   000096   EA           MOV     A,R2
   \   000097   FC           MOV     R4,A
   \   000098   EB           MOV     A,R3
   \   000099   FD           MOV     R5,A
   \   00009A   8E..         MOV     ?V0 + 4,R6
   \   00009C   75..00       MOV     ?V0 + 5,#0x0
   \   00009F   74..         MOV     A,#buf & 0xff
   \   0000A1   25..         ADD     A,?V0 + 4
   \   0000A3   FA           MOV     R2,A
   \   0000A4   74..         MOV     A,#(buf >> 8) & 0xff
   \   0000A6   35..         ADDC    A,?V0 + 5
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??memcpy?relay
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    106                len += sizeof(uip_ipaddr_t);
   \   0000B1   7410         MOV     A,#0x10
   \   0000B3   2E           ADD     A,R6
   \   0000B4   FE           MOV     R6,A
    107                memcpy(buf + len, uip_ds6_nbr_get_ll(nbr), sizeof(uip_lladdr_t));
   \   0000B5                ; Setup parameters for call to function memcpy
   \   0000B5   75..08       MOV     ?V0 + 4,#0x8
   \   0000B8   75..00       MOV     ?V0 + 5,#0x0
   \   0000BB   78..         MOV     R0,#?V0 + 4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0                ; Setup parameters for call to function uip_ds6_nbr_get_ll
   \   0000C0   AA..         MOV     R2,?V0 + 0
   \   0000C2   AB..         MOV     R3,?V0 + 1
   \   0000C4   12....       LCALL   ??uip_ds6_nbr_get_ll?relay
   \   0000C7   EA           MOV     A,R2
   \   0000C8   FC           MOV     R4,A
   \   0000C9   EB           MOV     A,R3
   \   0000CA   FD           MOV     R5,A
   \   0000CB   8E..         MOV     ?V0 + 4,R6
   \   0000CD   75..00       MOV     ?V0 + 5,#0x0
   \   0000D0   74..         MOV     A,#buf & 0xff
   \   0000D2   25..         ADD     A,?V0 + 4
   \   0000D4   FA           MOV     R2,A
   \   0000D5   74..         MOV     A,#(buf >> 8) & 0xff
   \   0000D7   35..         ADDC    A,?V0 + 5
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??memcpy?relay
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
    108                len += sizeof(uip_lladdr_t);
   \   0000E2   7408         MOV     A,#0x8
   \   0000E4   2E           ADD     A,R6
   \   0000E5   FE           MOV     R6,A
    109                memcpy(buf + len, &nbr->state,
    110                    sizeof(nbr->state));
   \   0000E6                ; Setup parameters for call to function memcpy
   \   0000E6   75..01       MOV     ?V0 + 4,#0x1
   \   0000E9   75..00       MOV     ?V0 + 5,#0x0
   \   0000EC   78..         MOV     R0,#?V0 + 4
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   E5..         MOV     A,?V0 + 0
   \   0000F3   2422         ADD     A,#0x22
   \   0000F5   FC           MOV     R4,A
   \   0000F6   E5..         MOV     A,?V0 + 1
   \   0000F8   3400         ADDC    A,#0x0
   \   0000FA   FD           MOV     R5,A
   \   0000FB   8E..         MOV     ?V0 + 4,R6
   \   0000FD   75..00       MOV     ?V0 + 5,#0x0
   \   000100   74..         MOV     A,#buf & 0xff
   \   000102   25..         ADD     A,?V0 + 4
   \   000104   FA           MOV     R2,A
   \   000105   74..         MOV     A,#(buf >> 8) & 0xff
   \   000107   35..         ADDC    A,?V0 + 5
   \   000109   FB           MOV     R3,A
   \   00010A   12....       LCALL   ??memcpy?relay
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
    111                len += sizeof(nbr->state);
   \   000112   0E           INC     R6
    112          
    113                count++;
   \   000113   05..         INC     ?V0 + 2
    114                left -= entry_size;
   \   000115   EF           MOV     A,R7
   \   000116   C5..         XCH     A,?V0 + 3
   \   000118   C3           CLR     C
   \   000119   95..         SUBB    A,?V0 + 3
   \   00011B   F5..         MOV     ?V0 + 3,A
    115          
    116                if(left < entry_size) {
   \   00011D   E5..         MOV     A,?V0 + 3
   \   00011F   C3           CLR     C
   \   000120   9F           SUBB    A,R7
   \   000121   4003         JC      $+5
   \   000123   02....       LJMP    ??process_request_2
    117                  break;
    118                }
    119              }
    120            } else if(buf[0] == REQUEST_TYPE_RT) {
    121              uint32_t flip = 0;
    122          
    123              PRINTF("Routing table\n");
    124              rt = uip_ds6_route_head();
    125          
    126              for(i = buf[1]; i < uip_ds6_route_num_routes(); i++) {
    127                if(rt != NULL) {
    128                  entry_size = sizeof(i) + sizeof(rt->ipaddr)
    129                    + sizeof(rt->length)
    130                    + sizeof(rt->state.lifetime)
    131                    + sizeof(rt->state.learned_from);
    132          
    133                  memcpy(buf + len, &i, sizeof(i));
    134                  len += sizeof(i);
    135                  memcpy(buf + len, &rt->ipaddr, sizeof(rt->ipaddr));
    136                  len += sizeof(rt->ipaddr);
    137                  memcpy(buf + len, &rt->length, sizeof(rt->length));
    138                  len += sizeof(rt->length);
    139          
    140                  PRINT6ADDR(&rt->ipaddr);
    141                  PRINTF(" - %02x", rt->length);
    142                  PRINTF(" - ");
    143                  PRINT6ADDR(uip_ds6_route_nexthop(rt));
    144          
    145                  flip = uip_htonl(rt->state.lifetime);
    146                  memcpy(buf + len, &flip, sizeof(flip));
    147                  len += sizeof(flip);
    148                  PRINTF(" - %08lx", rt->state.lifetime);
    149          
    150                  memcpy(buf + len, &rt->state.learned_from,
    151                         sizeof(rt->state.learned_from));
    152                  len += sizeof(rt->state.learned_from);
    153          
    154                  PRINTF(" - %02x [%u]\n", rt->state.learned_from, entry_size);
    155          
    156                  count++;
    157                  left -= entry_size;
    158          
    159                  rt = uip_ds6_route_next(rt);
    160          
    161                  if(left < entry_size) {
    162                    break;
    163                  }
    164                }
    165              }
    166            } else if(buf[0] == REQUEST_TYPE_DRT) {
    167              uint32_t flip = 0;
                              ^
Warning[Pe177]: variable "flip" was declared but never referenced
    168          
    169              PRINTF("Default Route\n");
    170              addr = uip_ds6_defrt_choose();
    171              if(addr != NULL) {
    172                defrt = uip_ds6_defrt_lookup(addr);
    173              }
    174          
    175              i = buf[1];
    176          
    177              if(defrt != NULL && i < 1) {
    178                entry_size = sizeof(i) + sizeof(defrt->ipaddr)
    179                  + sizeof(defrt->isinfinite);
    180          
    181                memcpy(buf + len, &i, sizeof(i));
    182                len += sizeof(i);
    183                memcpy(buf + len, &defrt->ipaddr, sizeof(defrt->ipaddr));
    184                len += sizeof(defrt->ipaddr);
    185                memcpy(buf + len, &defrt->isinfinite, sizeof(defrt->isinfinite));
    186                len += sizeof(defrt->isinfinite);
    187          
    188                PRINT6ADDR(&defrt->ipaddr);
    189                PRINTF(" - %u\n", defrt->isinfinite);
    190                count++;
    191                left -= entry_size;
    192              }
    193            } else if(buf[0] == REQUEST_TYPE_ADDR) {
    194              PRINTF("Unicast Addresses\n");
    195              for(i = buf[1]; i < UIP_DS6_ADDR_NB; i++) {
    196                if(uip_ds6_if.addr_list[i].isused) {
    197                  entry_size = sizeof(i) + sizeof(uip_ds6_if.addr_list[i].ipaddr);
    198          
    199                  memcpy(buf + len, &i, sizeof(i));
    200                  len += sizeof(i);
    201                  memcpy(buf + len, &uip_ds6_if.addr_list[i].ipaddr,
    202                         sizeof(uip_ds6_if.addr_list[i].ipaddr));
    203                  len += sizeof(uip_ds6_if.addr_list[i].ipaddr);
    204          
    205                  PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
    206                  PRINTF("\n");
    207                  count++;
    208                  left -= entry_size;
    209          
    210                  if(left < entry_size) {
    211                    break;
    212                  }
    213                }
    214              }
    215            } else if(buf[0] == REQUEST_TYPE_TOTALS) {
    216              memset(&buf[2], 0, 4);
    217              for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    218                if(uip_ds6_if.addr_list[i].isused) {
    219                  buf[2]++;
    220                }
    221              }
    222              for(nbr = nbr_table_head(ds6_neighbors);
    223                  nbr != NULL;
    224                  nbr = nbr_table_next(ds6_neighbors, nbr)) {
    225                  buf[3]++;
    226              }
    227          
    228              buf[4] = uip_ds6_route_num_routes();
    229              buf[5] = 1;
    230          
    231              len += 4;
    232              count = 4;
    233            } else {
    234              return 0;
    235            }
    236            buf[1] = count;
   \                     ??process_request_3:
   \   000126   E5..         MOV     A,?V0 + 2
   \   000128   90....       MOV     DPTR,#buf + 1
   \   00012B   F0           MOVX    @DPTR,A
    237            return len;
   \   00012C   EE           MOV     A,R6
   \   00012D   F9           MOV     R1,A
   \                     ??process_request_4:
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   7F08         MOV     R7,#0x8
   \   000135   02....       LJMP    ?FUNC_LEAVE_XDATA
   \                     ??process_request_0:
   \   000138   90....       MOV     DPTR,#buf
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   6402         XRL     A,#0x2
   \   00013E   6003         JZ      $+5
   \   000140   02....       LJMP    ??process_request_5
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \   000147   7C00         MOV     R4,#0x0
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   7401         MOV     A,#0x1
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   EA           MOV     A,R2
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   EB           MOV     A,R3
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   EC           MOV     A,R4
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   ED           MOV     A,R5
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B                ; Setup parameters for call to function uip_ds6_route_head
   \   00015B   12....       LCALL   ??uip_ds6_route_head?relay
   \   00015E   90....       MOV     DPTR,#rt
   \   000161   EA           MOV     A,R2
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   EB           MOV     A,R3
   \   000165   F0           MOVX    @DPTR,A
   \   000166   90....       MOV     DPTR,#buf + 1
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   F0           MOVX    @DPTR,A
   \   000171   800A         SJMP    ??process_request_6
   \                     ??process_request_7:
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   2401         ADD     A,#0x1
   \   00017C   F0           MOVX    @DPTR,A
   \                     ??process_request_6:
   \   00017D                ; Setup parameters for call to function uip_ds6_route_num_routes
   \   00017D   12....       LCALL   ??uip_ds6_route_num_routes?relay
   \   000180   8A..         MOV     ?V0 + 0,R2
   \   000182   8B..         MOV     ?V0 + 1,R3
   \   000184   A8..         MOV     R0,?V0 + 0
   \   000186   A9..         MOV     R1,?V0 + 1
   \   000188   85..82       MOV     DPL,?XSP + 0
   \   00018B   85..83       MOV     DPH,?XSP + 1
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   FA           MOV     R2,A
   \   000190   7B00         MOV     R3,#0x0
   \   000192   C3           CLR     C
   \   000193   98           SUBB    A,R0
   \   000194   EB           MOV     A,R3
   \   000195   99           SUBB    A,R1
   \   000196   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000198   65D0         XRL     A,PSW
   \   00019A   33           RLC     A
   \   00019B   5089         JNC     ??process_request_3
   \   00019D   90....       MOV     DPTR,#rt
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F8           MOV     R0,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F9           MOV     R1,A
   \   0001A5   E8           MOV     A,R0
   \   0001A6   49           ORL     A,R1
   \   0001A7   60CA         JZ      ??process_request_7
   \   0001A9   7F17         MOV     R7,#0x17
   \   0001AB                ; Setup parameters for call to function memcpy
   \   0001AB   75..01       MOV     ?V0 + 0,#0x1
   \   0001AE   75..00       MOV     ?V0 + 1,#0x0
   \   0001B1   78..         MOV     R0,#?V0 + 0
   \   0001B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B6   7402         MOV     A,#0x2
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   AC82         MOV     R4,DPL
   \   0001BD   AD83         MOV     R5,DPH
   \   0001BF   8E..         MOV     ?V0 + 0,R6
   \   0001C1   75..00       MOV     ?V0 + 1,#0x0
   \   0001C4   74..         MOV     A,#buf & 0xff
   \   0001C6   25..         ADD     A,?V0 + 0
   \   0001C8   FA           MOV     R2,A
   \   0001C9   74..         MOV     A,#(buf >> 8) & 0xff
   \   0001CB   35..         ADDC    A,?V0 + 1
   \   0001CD   FB           MOV     R3,A
   \   0001CE   12....       LCALL   ??memcpy?relay
   \   0001D1   7402         MOV     A,#0x2
   \   0001D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D6   0E           INC     R6
   \   0001D7                ; Setup parameters for call to function memcpy
   \   0001D7   75..10       MOV     ?V0 + 0,#0x10
   \   0001DA   75..00       MOV     ?V0 + 1,#0x0
   \   0001DD   78..         MOV     R0,#?V0 + 0
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   90....       MOV     DPTR,#rt
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   2404         ADD     A,#0x4
   \   0001E8   FC           MOV     R4,A
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   3400         ADDC    A,#0x0
   \   0001ED   FD           MOV     R5,A
   \   0001EE   8E..         MOV     ?V0 + 0,R6
   \   0001F0   75..00       MOV     ?V0 + 1,#0x0
   \   0001F3   74..         MOV     A,#buf & 0xff
   \   0001F5   25..         ADD     A,?V0 + 0
   \   0001F7   FA           MOV     R2,A
   \   0001F8   74..         MOV     A,#(buf >> 8) & 0xff
   \   0001FA   35..         ADDC    A,?V0 + 1
   \   0001FC   FB           MOV     R3,A
   \   0001FD   12....       LCALL   ??memcpy?relay
   \   000200   7402         MOV     A,#0x2
   \   000202   12....       LCALL   ?DEALLOC_XSTACK8
   \   000205   7410         MOV     A,#0x10
   \   000207   2E           ADD     A,R6
   \   000208   FE           MOV     R6,A
   \   000209                ; Setup parameters for call to function memcpy
   \   000209   75..01       MOV     ?V0 + 0,#0x1
   \   00020C   75..00       MOV     ?V0 + 1,#0x0
   \   00020F   78..         MOV     R0,#?V0 + 0
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000214   90....       MOV     DPTR,#rt
   \   000217   E0           MOVX    A,@DPTR
   \   000218   241C         ADD     A,#0x1c
   \   00021A   FC           MOV     R4,A
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   3400         ADDC    A,#0x0
   \   00021F   FD           MOV     R5,A
   \   000220   8E..         MOV     ?V0 + 0,R6
   \   000222   75..00       MOV     ?V0 + 1,#0x0
   \   000225   74..         MOV     A,#buf & 0xff
   \   000227   25..         ADD     A,?V0 + 0
   \   000229   FA           MOV     R2,A
   \   00022A   74..         MOV     A,#(buf >> 8) & 0xff
   \   00022C   35..         ADDC    A,?V0 + 1
   \   00022E   FB           MOV     R3,A
   \   00022F   12....       LCALL   ??memcpy?relay
   \   000232   7402         MOV     A,#0x2
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
   \   000237   0E           INC     R6
   \   000238                ; Setup parameters for call to function uip_htonl
   \   000238   90....       MOV     DPTR,#rt
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   F8           MOV     R0,A
   \   00023D   A3           INC     DPTR
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   C8           XCH     A,R0
   \   000240   2414         ADD     A,#0x14
   \   000242   F582         MOV     DPL,A
   \   000244   E8           MOV     A,R0
   \   000245   3400         ADDC    A,#0x0
   \   000247   F583         MOV     DPH,A
   \   000249   12....       LCALL   ?XLOAD_R2345
   \   00024C   12....       LCALL   ??uip_htonl?relay
   \   00024F   7401         MOV     A,#0x1
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   12....       LCALL   ?XSTORE_R2345
   \   000257                ; Setup parameters for call to function memcpy
   \   000257   75..04       MOV     ?V0 + 0,#0x4
   \   00025A   75..00       MOV     ?V0 + 1,#0x0
   \   00025D   78..         MOV     R0,#?V0 + 0
   \   00025F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000262   7403         MOV     A,#0x3
   \   000264   12....       LCALL   ?XSTACK_DISP0_8
   \   000267   AC82         MOV     R4,DPL
   \   000269   AD83         MOV     R5,DPH
   \   00026B   8E..         MOV     ?V0 + 0,R6
   \   00026D   75..00       MOV     ?V0 + 1,#0x0
   \   000270   74..         MOV     A,#buf & 0xff
   \   000272   25..         ADD     A,?V0 + 0
   \   000274   FA           MOV     R2,A
   \   000275   74..         MOV     A,#(buf >> 8) & 0xff
   \   000277   35..         ADDC    A,?V0 + 1
   \   000279   FB           MOV     R3,A
   \   00027A   12....       LCALL   ??memcpy?relay
   \   00027D   7402         MOV     A,#0x2
   \   00027F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000282   7404         MOV     A,#0x4
   \   000284   2E           ADD     A,R6
   \   000285   FE           MOV     R6,A
   \   000286                ; Setup parameters for call to function memcpy
   \   000286   75..01       MOV     ?V0 + 0,#0x1
   \   000289   75..00       MOV     ?V0 + 1,#0x0
   \   00028C   78..         MOV     R0,#?V0 + 0
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000291   90....       MOV     DPTR,#rt
   \   000294   E0           MOVX    A,@DPTR
   \   000295   241A         ADD     A,#0x1a
   \   000297   FC           MOV     R4,A
   \   000298   A3           INC     DPTR
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   3400         ADDC    A,#0x0
   \   00029C   FD           MOV     R5,A
   \   00029D   8E..         MOV     ?V0 + 0,R6
   \   00029F   75..00       MOV     ?V0 + 1,#0x0
   \   0002A2   74..         MOV     A,#buf & 0xff
   \   0002A4   25..         ADD     A,?V0 + 0
   \   0002A6   FA           MOV     R2,A
   \   0002A7   74..         MOV     A,#(buf >> 8) & 0xff
   \   0002A9   35..         ADDC    A,?V0 + 1
   \   0002AB   FB           MOV     R3,A
   \   0002AC   12....       LCALL   ??memcpy?relay
   \   0002AF   7402         MOV     A,#0x2
   \   0002B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B4   0E           INC     R6
   \   0002B5   05..         INC     ?V0 + 2
   \   0002B7   EF           MOV     A,R7
   \   0002B8   C5..         XCH     A,?V0 + 3
   \   0002BA   C3           CLR     C
   \   0002BB   95..         SUBB    A,?V0 + 3
   \   0002BD   F5..         MOV     ?V0 + 3,A
   \   0002BF                ; Setup parameters for call to function uip_ds6_route_next
   \   0002BF   90....       MOV     DPTR,#rt
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   FA           MOV     R2,A
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   FB           MOV     R3,A
   \   0002C7   12....       LCALL   ??uip_ds6_route_next?relay
   \   0002CA   90....       MOV     DPTR,#rt
   \   0002CD   EA           MOV     A,R2
   \   0002CE   F0           MOVX    @DPTR,A
   \   0002CF   A3           INC     DPTR
   \   0002D0   EB           MOV     A,R3
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2   E5..         MOV     A,?V0 + 3
   \   0002D4   C3           CLR     C
   \   0002D5   9F           SUBB    A,R7
   \   0002D6   4003         JC      $+5
   \   0002D8   02....       LJMP    ??process_request_7
   \   0002DB   02....       LJMP    ??process_request_3
   \                     ??process_request_5:
   \   0002DE   90....       MOV     DPTR,#buf
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   6403         XRL     A,#0x3
   \   0002E4   6003         JZ      $+5
   \   0002E6   02....       LJMP    ??process_request_8
   \   0002E9   75..00       MOV     ?V0 + 4,#0x0
   \   0002EC   75..00       MOV     ?V0 + 5,#0x0
   \   0002EF   75..00       MOV     ?V0 + 6,#0x0
   \   0002F2   75..00       MOV     ?V0 + 7,#0x0
   \   0002F5                ; Setup parameters for call to function uip_ds6_defrt_choose
   \   0002F5   12....       LCALL   ??uip_ds6_defrt_choose?relay
   \   0002F8   90....       MOV     DPTR,#addr
   \   0002FB   EA           MOV     A,R2
   \   0002FC   F0           MOVX    @DPTR,A
   \   0002FD   A3           INC     DPTR
   \   0002FE   EB           MOV     A,R3
   \   0002FF   F0           MOVX    @DPTR,A
   \   000300   90....       MOV     DPTR,#addr
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F8           MOV     R0,A
   \   000305   A3           INC     DPTR
   \   000306   E0           MOVX    A,@DPTR
   \   000307   F9           MOV     R1,A
   \   000308   E8           MOV     A,R0
   \   000309   49           ORL     A,R1
   \   00030A   6013         JZ      ??process_request_9
   \   00030C                ; Setup parameters for call to function uip_ds6_defrt_lookup
   \   00030C   90....       MOV     DPTR,#addr
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   FA           MOV     R2,A
   \   000311   A3           INC     DPTR
   \   000312   E0           MOVX    A,@DPTR
   \   000313   FB           MOV     R3,A
   \   000314   12....       LCALL   ??uip_ds6_defrt_lookup?relay
   \   000317   90....       MOV     DPTR,#defrt
   \   00031A   EA           MOV     A,R2
   \   00031B   F0           MOVX    @DPTR,A
   \   00031C   A3           INC     DPTR
   \   00031D   EB           MOV     A,R3
   \   00031E   F0           MOVX    @DPTR,A
   \                     ??process_request_9:
   \   00031F   90....       MOV     DPTR,#buf + 1
   \   000322   E0           MOVX    A,@DPTR
   \   000323   85..82       MOV     DPL,?XSP + 0
   \   000326   85..83       MOV     DPH,?XSP + 1
   \   000329   F0           MOVX    @DPTR,A
   \   00032A   90....       MOV     DPTR,#defrt
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   F8           MOV     R0,A
   \   00032F   A3           INC     DPTR
   \   000330   E0           MOVX    A,@DPTR
   \   000331   F9           MOV     R1,A
   \   000332   E8           MOV     A,R0
   \   000333   49           ORL     A,R1
   \   000334   7003         JNZ     $+5
   \   000336   02....       LJMP    ??process_request_3
   \   000339   85..82       MOV     DPL,?XSP + 0
   \   00033C   85..83       MOV     DPH,?XSP + 1
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   C3           CLR     C
   \   000341   9401         SUBB    A,#0x1
   \   000343   4003         JC      $+5
   \   000345   02....       LJMP    ??process_request_3
   \   000348   7F12         MOV     R7,#0x12
   \   00034A                ; Setup parameters for call to function memcpy
   \   00034A   75..01       MOV     ?V0 + 0,#0x1
   \   00034D   75..00       MOV     ?V0 + 1,#0x0
   \   000350   78..         MOV     R0,#?V0 + 0
   \   000352   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000355   7402         MOV     A,#0x2
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   AC82         MOV     R4,DPL
   \   00035C   AD83         MOV     R5,DPH
   \   00035E   8E..         MOV     ?V0 + 0,R6
   \   000360   75..00       MOV     ?V0 + 1,#0x0
   \   000363   74..         MOV     A,#buf & 0xff
   \   000365   25..         ADD     A,?V0 + 0
   \   000367   FA           MOV     R2,A
   \   000368   74..         MOV     A,#(buf >> 8) & 0xff
   \   00036A   35..         ADDC    A,?V0 + 1
   \   00036C   FB           MOV     R3,A
   \   00036D   12....       LCALL   ??memcpy?relay
   \   000370   7402         MOV     A,#0x2
   \   000372   12....       LCALL   ?DEALLOC_XSTACK8
   \   000375   0E           INC     R6
   \   000376                ; Setup parameters for call to function memcpy
   \   000376   75..10       MOV     ?V0 + 0,#0x10
   \   000379   75..00       MOV     ?V0 + 1,#0x0
   \   00037C   78..         MOV     R0,#?V0 + 0
   \   00037E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000381   90....       MOV     DPTR,#defrt
   \   000384   E0           MOVX    A,@DPTR
   \   000385   2402         ADD     A,#0x2
   \   000387   FC           MOV     R4,A
   \   000388   A3           INC     DPTR
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   3400         ADDC    A,#0x0
   \   00038C   FD           MOV     R5,A
   \   00038D   8E..         MOV     ?V0 + 0,R6
   \   00038F   75..00       MOV     ?V0 + 1,#0x0
   \   000392   74..         MOV     A,#buf & 0xff
   \   000394   25..         ADD     A,?V0 + 0
   \   000396   FA           MOV     R2,A
   \   000397   74..         MOV     A,#(buf >> 8) & 0xff
   \   000399   35..         ADDC    A,?V0 + 1
   \   00039B   FB           MOV     R3,A
   \   00039C   12....       LCALL   ??memcpy?relay
   \   00039F   7402         MOV     A,#0x2
   \   0003A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003A4   7410         MOV     A,#0x10
   \   0003A6   2E           ADD     A,R6
   \   0003A7   FE           MOV     R6,A
   \   0003A8                ; Setup parameters for call to function memcpy
   \   0003A8   75..01       MOV     ?V0 + 0,#0x1
   \   0003AB   75..00       MOV     ?V0 + 1,#0x0
   \   0003AE   78..         MOV     R0,#?V0 + 0
   \   0003B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B3   90....       MOV     DPTR,#defrt
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   241A         ADD     A,#0x1a
   \   0003B9   FC           MOV     R4,A
   \   0003BA   A3           INC     DPTR
   \   0003BB   E0           MOVX    A,@DPTR
   \   0003BC   3400         ADDC    A,#0x0
   \   0003BE   FD           MOV     R5,A
   \   0003BF   8E..         MOV     ?V0 + 0,R6
   \   0003C1   75..00       MOV     ?V0 + 1,#0x0
   \   0003C4   74..         MOV     A,#buf & 0xff
   \   0003C6   25..         ADD     A,?V0 + 0
   \   0003C8   FA           MOV     R2,A
   \   0003C9   74..         MOV     A,#(buf >> 8) & 0xff
   \   0003CB   35..         ADDC    A,?V0 + 1
   \   0003CD   FB           MOV     R3,A
   \   0003CE   12....       LCALL   ??memcpy?relay
   \   0003D1   7402         MOV     A,#0x2
   \   0003D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003D6   0E           INC     R6
   \   0003D7   05..         INC     ?V0 + 2
   \   0003D9   EF           MOV     A,R7
   \   0003DA   F5..         MOV     ?V0 + 3,A
   \   0003DC   C3           CLR     C
   \   0003DD   95..         SUBB    A,?V0 + 3
   \   0003DF   F5..         MOV     ?V0 + 3,A
   \   0003E1   02....       LJMP    ??process_request_3
   \                     ??process_request_8:
   \   0003E4   90....       MOV     DPTR,#buf
   \   0003E7   E0           MOVX    A,@DPTR
   \   0003E8   6404         XRL     A,#0x4
   \   0003EA   6003         JZ      $+5
   \   0003EC   02....       LJMP    ??process_request_10
   \   0003EF   90....       MOV     DPTR,#buf + 1
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   85..82       MOV     DPL,?XSP + 0
   \   0003F6   85..83       MOV     DPH,?XSP + 1
   \   0003F9   F0           MOVX    @DPTR,A
   \   0003FA   800A         SJMP    ??process_request_11
   \                     ??process_request_12:
   \   0003FC   85..82       MOV     DPL,?XSP + 0
   \   0003FF   85..83       MOV     DPH,?XSP + 1
   \   000402   E0           MOVX    A,@DPTR
   \   000403   2401         ADD     A,#0x1
   \   000405   F0           MOVX    @DPTR,A
   \                     ??process_request_11:
   \   000406   85..82       MOV     DPL,?XSP + 0
   \   000409   85..83       MOV     DPH,?XSP + 1
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   C3           CLR     C
   \   00040E   9403         SUBB    A,#0x3
   \   000410   4003         JC      $+5
   \   000412   02....       LJMP    ??process_request_3
   \   000415   85..82       MOV     DPL,?XSP + 0
   \   000418   85..83       MOV     DPH,?XSP + 1
   \   00041B   E0           MOVX    A,@DPTR
   \   00041C   F8           MOV     R0,A
   \   00041D   7900         MOV     R1,#0x0
   \   00041F   E8           MOV     A,R0
   \   000420   75F01C       MOV     B,#0x1c
   \   000423   A4           MUL     AB
   \   000424   C8           XCH     A,R0
   \   000425   AAF0         MOV     R2,B
   \   000427   75F000       MOV     B,#0x0
   \   00042A   A4           MUL     AB
   \   00042B   2A           ADD     A,R2
   \   00042C   FA           MOV     R2,A
   \   00042D   75F01C       MOV     B,#0x1c
   \   000430   E9           MOV     A,R1
   \   000431   A4           MUL     AB
   \   000432   2A           ADD     A,R2
   \   000433   F9           MOV     R1,A
   \   000434   74..         MOV     A,#(uip_ds6_if + 18) & 0xff
   \   000436   28           ADD     A,R0
   \   000437   F582         MOV     DPL,A
   \   000439   74..         MOV     A,#((uip_ds6_if + 18) >> 8) & 0xff
   \   00043B   39           ADDC    A,R1
   \   00043C   F583         MOV     DPH,A
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   60BB         JZ      ??process_request_12
   \   000441   7F11         MOV     R7,#0x11
   \   000443                ; Setup parameters for call to function memcpy
   \   000443   75..01       MOV     ?V0 + 0,#0x1
   \   000446   75..00       MOV     ?V0 + 1,#0x0
   \   000449   78..         MOV     R0,#?V0 + 0
   \   00044B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00044E   7402         MOV     A,#0x2
   \   000450   12....       LCALL   ?XSTACK_DISP0_8
   \   000453   AC82         MOV     R4,DPL
   \   000455   AD83         MOV     R5,DPH
   \   000457   8E..         MOV     ?V0 + 0,R6
   \   000459   75..00       MOV     ?V0 + 1,#0x0
   \   00045C   74..         MOV     A,#buf & 0xff
   \   00045E   25..         ADD     A,?V0 + 0
   \   000460   FA           MOV     R2,A
   \   000461   74..         MOV     A,#(buf >> 8) & 0xff
   \   000463   35..         ADDC    A,?V0 + 1
   \   000465   FB           MOV     R3,A
   \   000466   12....       LCALL   ??memcpy?relay
   \   000469   7402         MOV     A,#0x2
   \   00046B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00046E   0E           INC     R6
   \   00046F                ; Setup parameters for call to function memcpy
   \   00046F   75..10       MOV     ?V0 + 0,#0x10
   \   000472   75..00       MOV     ?V0 + 1,#0x0
   \   000475   78..         MOV     R0,#?V0 + 0
   \   000477   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00047A   7402         MOV     A,#0x2
   \   00047C   12....       LCALL   ?XSTACK_DISP0_8
   \   00047F   E0           MOVX    A,@DPTR
   \   000480   F8           MOV     R0,A
   \   000481   7900         MOV     R1,#0x0
   \   000483   E8           MOV     A,R0
   \   000484   75F01C       MOV     B,#0x1c
   \   000487   A4           MUL     AB
   \   000488   C8           XCH     A,R0
   \   000489   AAF0         MOV     R2,B
   \   00048B   75F000       MOV     B,#0x0
   \   00048E   A4           MUL     AB
   \   00048F   2A           ADD     A,R2
   \   000490   FA           MOV     R2,A
   \   000491   75F01C       MOV     B,#0x1c
   \   000494   E9           MOV     A,R1
   \   000495   A4           MUL     AB
   \   000496   2A           ADD     A,R2
   \   000497   F9           MOV     R1,A
   \   000498   74..         MOV     A,#(uip_ds6_if + 19) & 0xff
   \   00049A   28           ADD     A,R0
   \   00049B   FC           MOV     R4,A
   \   00049C   74..         MOV     A,#((uip_ds6_if + 19) >> 8) & 0xff
   \   00049E   39           ADDC    A,R1
   \   00049F   FD           MOV     R5,A
   \   0004A0   8E..         MOV     ?V0 + 0,R6
   \   0004A2   75..00       MOV     ?V0 + 1,#0x0
   \   0004A5   74..         MOV     A,#buf & 0xff
   \   0004A7   25..         ADD     A,?V0 + 0
   \   0004A9   FA           MOV     R2,A
   \   0004AA   74..         MOV     A,#(buf >> 8) & 0xff
   \   0004AC   35..         ADDC    A,?V0 + 1
   \   0004AE   FB           MOV     R3,A
   \   0004AF   12....       LCALL   ??memcpy?relay
   \   0004B2   7402         MOV     A,#0x2
   \   0004B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B7   7410         MOV     A,#0x10
   \   0004B9   2E           ADD     A,R6
   \   0004BA   FE           MOV     R6,A
   \   0004BB   05..         INC     ?V0 + 2
   \   0004BD   EF           MOV     A,R7
   \   0004BE   C5..         XCH     A,?V0 + 3
   \   0004C0   C3           CLR     C
   \   0004C1   95..         SUBB    A,?V0 + 3
   \   0004C3   F5..         MOV     ?V0 + 3,A
   \   0004C5   E5..         MOV     A,?V0 + 3
   \   0004C7   C3           CLR     C
   \   0004C8   9F           SUBB    A,R7
   \   0004C9   4003         JC      $+5
   \   0004CB   02....       LJMP    ??process_request_12
   \   0004CE   02....       LJMP    ??process_request_3
   \                     ??process_request_10:
   \   0004D1   90....       MOV     DPTR,#buf
   \   0004D4   E0           MOVX    A,@DPTR
   \   0004D5   64FF         XRL     A,#0xff
   \   0004D7   6003         JZ      $+5
   \   0004D9   02....       LJMP    ??process_request_13
   \   0004DC                ; Setup parameters for call to function memset
   \   0004DC   75..04       MOV     ?V0 + 0,#0x4
   \   0004DF   75..00       MOV     ?V0 + 1,#0x0
   \   0004E2   78..         MOV     R0,#?V0 + 0
   \   0004E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0004E7   7C00         MOV     R4,#0x0
   \   0004E9   7D00         MOV     R5,#0x0
   \   0004EB   7A..         MOV     R2,#(buf + 2) & 0xff
   \   0004ED   7B..         MOV     R3,#((buf + 2) >> 8) & 0xff
   \   0004EF   12....       LCALL   ??memset?relay
   \   0004F2   7402         MOV     A,#0x2
   \   0004F4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004F7   85..82       MOV     DPL,?XSP + 0
   \   0004FA   85..83       MOV     DPH,?XSP + 1
   \   0004FD   7400         MOV     A,#0x0
   \   0004FF   F0           MOVX    @DPTR,A
   \   000500   803D         SJMP    ??process_request_14
   \                     ??process_request_15:
   \   000502   85..82       MOV     DPL,?XSP + 0
   \   000505   85..83       MOV     DPH,?XSP + 1
   \   000508   E0           MOVX    A,@DPTR
   \   000509   F8           MOV     R0,A
   \   00050A   7900         MOV     R1,#0x0
   \   00050C   E8           MOV     A,R0
   \   00050D   75F01C       MOV     B,#0x1c
   \   000510   A4           MUL     AB
   \   000511   C8           XCH     A,R0
   \   000512   AAF0         MOV     R2,B
   \   000514   75F000       MOV     B,#0x0
   \   000517   A4           MUL     AB
   \   000518   2A           ADD     A,R2
   \   000519   FA           MOV     R2,A
   \   00051A   75F01C       MOV     B,#0x1c
   \   00051D   E9           MOV     A,R1
   \   00051E   A4           MUL     AB
   \   00051F   2A           ADD     A,R2
   \   000520   F9           MOV     R1,A
   \   000521   74..         MOV     A,#(uip_ds6_if + 18) & 0xff
   \   000523   28           ADD     A,R0
   \   000524   F582         MOV     DPL,A
   \   000526   74..         MOV     A,#((uip_ds6_if + 18) >> 8) & 0xff
   \   000528   39           ADDC    A,R1
   \   000529   F583         MOV     DPH,A
   \   00052B   E0           MOVX    A,@DPTR
   \   00052C   6007         JZ      ??process_request_16
   \   00052E   90....       MOV     DPTR,#buf + 2
   \   000531   E0           MOVX    A,@DPTR
   \   000532   2401         ADD     A,#0x1
   \   000534   F0           MOVX    @DPTR,A
   \                     ??process_request_16:
   \   000535   85..82       MOV     DPL,?XSP + 0
   \   000538   85..83       MOV     DPH,?XSP + 1
   \   00053B   E0           MOVX    A,@DPTR
   \   00053C   2401         ADD     A,#0x1
   \   00053E   F0           MOVX    @DPTR,A
   \                     ??process_request_14:
   \   00053F   85..82       MOV     DPL,?XSP + 0
   \   000542   85..83       MOV     DPH,?XSP + 1
   \   000545   E0           MOVX    A,@DPTR
   \   000546   C3           CLR     C
   \   000547   9403         SUBB    A,#0x3
   \   000549   40B7         JC      ??process_request_15
   \   00054B                ; Setup parameters for call to function nbr_table_head
   \   00054B   90....       MOV     DPTR,#ds6_neighbors
   \   00054E   E0           MOVX    A,@DPTR
   \   00054F   FA           MOV     R2,A
   \   000550   A3           INC     DPTR
   \   000551   E0           MOVX    A,@DPTR
   \   000552   FB           MOV     R3,A
   \   000553   12....       LCALL   ??nbr_table_head?relay
   \   000556   8A..         MOV     ?V0 + 2,R2
   \   000558   8B..         MOV     ?V0 + 3,R3
   \   00055A   85....       MOV     ?V0 + 0,?V0 + 2
   \   00055D   85....       MOV     ?V0 + 1,?V0 + 3
   \   000560   8020         SJMP    ??process_request_17
   \                     ??process_request_18:
   \   000562   90....       MOV     DPTR,#buf + 3
   \   000565   E0           MOVX    A,@DPTR
   \   000566   2401         ADD     A,#0x1
   \   000568   F0           MOVX    @DPTR,A
   \   000569                ; Setup parameters for call to function nbr_table_next
   \   000569   AC..         MOV     R4,?V0 + 0
   \   00056B   AD..         MOV     R5,?V0 + 1
   \   00056D   90....       MOV     DPTR,#ds6_neighbors
   \   000570   E0           MOVX    A,@DPTR
   \   000571   FA           MOV     R2,A
   \   000572   A3           INC     DPTR
   \   000573   E0           MOVX    A,@DPTR
   \   000574   FB           MOV     R3,A
   \   000575   12....       LCALL   ??nbr_table_next?relay
   \   000578   8A..         MOV     ?V0 + 2,R2
   \   00057A   8B..         MOV     ?V0 + 3,R3
   \   00057C   85....       MOV     ?V0 + 0,?V0 + 2
   \   00057F   85....       MOV     ?V0 + 1,?V0 + 3
   \                     ??process_request_17:
   \   000582   E5..         MOV     A,?V0 + 0
   \   000584   45..         ORL     A,?V0 + 1
   \   000586   70DA         JNZ     ??process_request_18
   \   000588                ; Setup parameters for call to function uip_ds6_route_num_routes
   \   000588   12....       LCALL   ??uip_ds6_route_num_routes?relay
   \   00058B   EA           MOV     A,R2
   \   00058C   90....       MOV     DPTR,#buf + 4
   \   00058F   F0           MOVX    @DPTR,A
   \   000590   90....       MOV     DPTR,#buf + 5
   \   000593   7401         MOV     A,#0x1
   \   000595   F0           MOVX    @DPTR,A
   \   000596   7404         MOV     A,#0x4
   \   000598   2E           ADD     A,R6
   \   000599   FE           MOV     R6,A
   \   00059A   75..04       MOV     ?V0 + 2,#0x4
   \   00059D   02....       LJMP    ??process_request_3
   \                     ??process_request_13:
   \   0005A0   7900         MOV     R1,#0x0
   \   0005A2   02....       LJMP    ??process_request_4
    238          }
    239          /*---------------------------------------------------------------------------*/

   \                                 In  segment XDATA_I, align 1, keep-with-next
    240          PROCESS(viztool_process, "Network Visualization Tool Process");
   \                     viztool_process:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for viztool_process>`
   \   000008                REQUIRE __INIT_XDATA_I
    241          /*---------------------------------------------------------------------------*/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    242          __near_func static void
    243          tcpip_handler(void)
   \                     tcpip_handler:
    244          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    245            if(uip_newdata()) {
   \   000005   90....       MOV     DPTR,#uip_flags
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   4003         JC      $+5
   \   00000D   02....       LJMP    ??tcpip_handler_0
    246              memset(buf, 0, VIZTOOL_MAX_PAYLOAD_LEN);
   \   000010                ; Setup parameters for call to function memset
   \   000010   75..3C       MOV     ?V0 + 0,#0x3c
   \   000013   75..00       MOV     ?V0 + 1,#0x0
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A..         MOV     R2,#buf & 0xff
   \   000021   7B..         MOV     R3,#(buf >> 8) & 0xff
   \   000023   12....       LCALL   ??memset?relay
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
    247          
    248              PRINTF("%u bytes from [", uip_datalen());
    249              PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
    250              PRINTF("]:%u\n", UIP_HTONS(UIP_UDP_BUF->srcport));
    251          
    252              memcpy(buf, uip_appdata, uip_datalen());
   \   00002B                ; Setup parameters for call to function memcpy
   \   00002B   90....       MOV     DPTR,#uip_len
   \   00002E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000031   90....       MOV     DPTR,#uip_appdata
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FC           MOV     R4,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FD           MOV     R5,A
   \   000039   7A..         MOV     R2,#buf & 0xff
   \   00003B   7B..         MOV     R3,#(buf >> 8) & 0xff
   \   00003D   12....       LCALL   ??memcpy?relay
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    253          
    254              len = process_request();
   \   000045                ; Setup parameters for call to function process_request
   \   000045   12....       LCALL   process_request
   \   000048   E9           MOV     A,R1
   \   000049   90....       MOV     DPTR,#len
   \   00004C   F0           MOVX    @DPTR,A
    255              if(len) {
   \   00004D   90....       MOV     DPTR,#len
   \   000050   E0           MOVX    A,@DPTR
   \   000051   606F         JZ      ??tcpip_handler_1
    256                server_conn->rport = UIP_UDP_BUF->srcport;
   \   000053   90....       MOV     DPTR,#uip_ext_len
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   7900         MOV     R1,#0x0
   \   00005A   74..         MOV     A,#(uip_aligned_buf + 40) & 0xff
   \   00005C   28           ADD     A,R0
   \   00005D   F582         MOV     DPL,A
   \   00005F   74..         MOV     A,#((uip_aligned_buf + 40) >> 8) & 0xff
   \   000061   39           ADDC    A,R1
   \   000062   F583         MOV     DPH,A
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   90....       MOV     DPTR,#server_conn
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FA           MOV     R2,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   CA           XCH     A,R2
   \   000071   2412         ADD     A,#0x12
   \   000073   F582         MOV     DPL,A
   \   000075   EA           MOV     A,R2
   \   000076   3400         ADDC    A,#0x0
   \   000078   F583         MOV     DPH,A
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    257                uip_ipaddr_copy(&server_conn->ripaddr, &UIP_IP_BUF->srcipaddr);
   \   00007F                ; Setup parameters for call to function memcpy
   \   00007F   75..10       MOV     ?V0 + 0,#0x10
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7C..         MOV     R4,#(uip_aligned_buf + 8) & 0xff
   \   00008C   7D..         MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
   \   00008E   90....       MOV     DPTR,#server_conn
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FA           MOV     R2,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??memcpy?relay
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    258                uip_udp_packet_send(server_conn, buf, len);
   \   00009E                ; Setup parameters for call to function uip_udp_packet_send
   \   00009E   90....       MOV     DPTR,#len
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F5..         MOV     ?V0 + 0,A
   \   0000A4   33           RLC     A
   \   0000A5   95E0         SUBB    A,0xE0 /* A   */
   \   0000A7   F5..         MOV     ?V0 + 1,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7C..         MOV     R4,#buf & 0xff
   \   0000B0   7D..         MOV     R5,#(buf >> 8) & 0xff
   \   0000B2   90....       MOV     DPTR,#server_conn
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FA           MOV     R2,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   ??uip_udp_packet_send?relay
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    259                PRINTF("Sent %u bytes\n", len);
    260              }
    261          
    262              /* Restore server connection to allow data from any node */
    263              uip_create_unspecified(&server_conn->ripaddr);
   \                     ??tcpip_handler_1:
   \   0000C2   90....       MOV     DPTR,#server_conn
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   7400         MOV     A,#0x0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   7400         MOV     A,#0x0
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   90....       MOV     DPTR,#server_conn
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F583         MOV     DPH,A
   \   0000DD   8882         MOV     DPL,R0
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   7400         MOV     A,#0x0
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   7400         MOV     A,#0x0
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   90....       MOV     DPTR,#server_conn
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   8882         MOV     DPL,R0
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   7400         MOV     A,#0x0
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   7400         MOV     A,#0x0
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   90....       MOV     DPTR,#server_conn
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F8           MOV     R0,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   C8           XCH     A,R0
   \   000106   2406         ADD     A,#0x6
   \   000108   F582         MOV     DPL,A
   \   00010A   E8           MOV     A,R0
   \   00010B   3400         ADDC    A,#0x0
   \   00010D   F583         MOV     DPH,A
   \   00010F   7400         MOV     A,#0x0
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   7400         MOV     A,#0x0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   90....       MOV     DPTR,#server_conn
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F8           MOV     R0,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C8           XCH     A,R0
   \   00011E   2408         ADD     A,#0x8
   \   000120   F582         MOV     DPL,A
   \   000122   E8           MOV     A,R0
   \   000123   3400         ADDC    A,#0x0
   \   000125   F583         MOV     DPH,A
   \   000127   7400         MOV     A,#0x0
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   7400         MOV     A,#0x0
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   90....       MOV     DPTR,#server_conn
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C8           XCH     A,R0
   \   000136   240A         ADD     A,#0xa
   \   000138   F582         MOV     DPL,A
   \   00013A   E8           MOV     A,R0
   \   00013B   3400         ADDC    A,#0x0
   \   00013D   F583         MOV     DPH,A
   \   00013F   7400         MOV     A,#0x0
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   7400         MOV     A,#0x0
   \   000145   F0           MOVX    @DPTR,A
   \   000146   90....       MOV     DPTR,#server_conn
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F8           MOV     R0,A
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   C8           XCH     A,R0
   \   00014E   240C         ADD     A,#0xc
   \   000150   F582         MOV     DPL,A
   \   000152   E8           MOV     A,R0
   \   000153   3400         ADDC    A,#0x0
   \   000155   F583         MOV     DPH,A
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   A3           INC     DPTR
   \   00015B   7400         MOV     A,#0x0
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   90....       MOV     DPTR,#server_conn
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F8           MOV     R0,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   C8           XCH     A,R0
   \   000166   240E         ADD     A,#0xe
   \   000168   F582         MOV     DPL,A
   \   00016A   E8           MOV     A,R0
   \   00016B   3400         ADDC    A,#0x0
   \   00016D   F583         MOV     DPH,A
   \   00016F   7400         MOV     A,#0x0
   \   000171   F0           MOVX    @DPTR,A
   \   000172   A3           INC     DPTR
   \   000173   7400         MOV     A,#0x0
   \   000175   F0           MOVX    @DPTR,A
    264              server_conn->rport = 0;
   \   000176   90....       MOV     DPTR,#server_conn
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   F8           MOV     R0,A
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   C8           XCH     A,R0
   \   00017E   2412         ADD     A,#0x12
   \   000180   F582         MOV     DPL,A
   \   000182   E8           MOV     A,R0
   \   000183   3400         ADDC    A,#0x0
   \   000185   F583         MOV     DPH,A
   \   000187   7400         MOV     A,#0x0
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   A3           INC     DPTR
   \   00018B   7400         MOV     A,#0x0
   \   00018D   F0           MOVX    @DPTR,A
    265            }
    266            return;
   \                     ??tcpip_handler_0:
   \   00018E   7F02         MOV     R7,#0x2
   \   000190   02....       LJMP    ?FUNC_LEAVE_XDATA
    267          }
    268          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          PROCESS_THREAD(viztool_process, ev, data)
   \                     process_thread_viztool_process:
    270          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    271          
    272            PROCESS_BEGIN();
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 3,A
   \   000018   78..         MOV     R0,#?V0 + 2
   \   00001A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for process_thread_viztool_process_0`:
   \   00001D   0000         DW        0
   \   00001F   0200         DW        2
   \   000021   0000         DW        0
   \   000023   ....         DW        ??process_thread_viztool_process_0
   \   000025   1601         DW        278
   \   000027   ....         DW        ??process_thread_viztool_process_1
   \   000029   ....         DW        ??process_thread_viztool_process_2
    273          
    274            server_conn = udp_new(NULL, UIP_HTONS(0), NULL);
   \                     ??process_thread_viztool_process_0:
   \   00002B                ; Setup parameters for call to function udp_new
   \   00002B   E4           CLR     A
   \   00002C   F5..         MOV     ?V0 + 2,A
   \   00002E   F5..         MOV     ?V0 + 3,A
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A00         MOV     R2,#0x0
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??udp_new?relay
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   90....       MOV     DPTR,#server_conn
   \   000048   EA           MOV     A,R2
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
    275            udp_bind(server_conn, UIP_HTONS(VIZTOOL_UDP_PORT));
   \   00004D   90....       MOV     DPTR,#server_conn
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C8           XCH     A,R0
   \   000055   2410         ADD     A,#0x10
   \   000057   F582         MOV     DPL,A
   \   000059   E8           MOV     A,R0
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F583         MOV     DPH,A
   \   00005E   74EA         MOV     A,#-0x16
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   7461         MOV     A,#0x61
   \   000064   F0           MOVX    @DPTR,A
    276          
    277            while(1) {
    278              PROCESS_YIELD();
   \                     ??process_thread_viztool_process_3:
   \   000065   7A00         MOV     R2,#0x0
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   7416         MOV     A,#0x16
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   \                     ??process_thread_viztool_process_1:
   \   000072   EA           MOV     A,R2
   \   000073   7004         JNZ     ??process_thread_viztool_process_4
   \   000075   7901         MOV     R1,#0x1
   \   000077   801C         SJMP    ??process_thread_viztool_process_5
    279              if(ev == tcpip_event) {
   \                     ??process_thread_viztool_process_4:
   \   000079   90....       MOV     DPTR,#tcpip_event
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   65..         XRL     A,?V0 + 0
   \   00007F   70E4         JNZ     ??process_thread_viztool_process_3
    280                tcpip_handler();
   \   000081                ; Setup parameters for call to function tcpip_handler
   \   000081   12....       LCALL   tcpip_handler & 0xFFFF
   \   000084   80DF         SJMP    ??process_thread_viztool_process_3
    281              }
    282            }
    283          
    284            PROCESS_END();
   \                     ??process_thread_viztool_process_2:
   \   000086   7A00         MOV     R2,#0x0
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   7400         MOV     A,#0x0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   7400         MOV     A,#0x0
   \   000092   F0           MOVX    @DPTR,A
   \   000093   7903         MOV     R1,#0x3
   \                     ??process_thread_viztool_process_5:
   \   000095   7F04         MOV     R7,#0x4
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
    285          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for viztool_process>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW ??process_thread_viztool_process?relay
   \   000004   00000000     DB 0, 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??process_thread_viztool_process?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    process_thread_viztool_process
    286          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     31  process_request
                          0 0 22 -> memcpy
                          0 0 22 -> memset
                          0 0 20 -> nbr_table_head
                          0 0 20 -> nbr_table_next
                          0 0 20 -> uip_ds6_defrt_choose
                          0 0 20 -> uip_ds6_defrt_lookup
                          0 0 22 -> uip_ds6_nbr_get_ipaddr
                          0 0 22 -> uip_ds6_nbr_get_ll
                          0 0 20 -> uip_ds6_route_head
                          0 0 20 -> uip_ds6_route_next
                          0 0 20 -> uip_ds6_route_num_routes
                          0 0 20 -> uip_htonl
       0      0     14  process_thread_viztool_process
                          0 0 12 -> tcpip_handler
                          0 0 14 -> udp_new
       0      0     23  tcpip_handler
                          0 0 11 -> memcpy
                          0 0 11 -> memset
                          0 0  9 -> process_request
                          0 0 11 -> uip_udp_packet_send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for viztool_process>
       6  ??process_thread_viztool_process?relay
       2  addr
      60  buf
       2  defrt
       1  len
    1445  process_request
     154  process_thread_viztool_process
       2  rt
       2  server_conn
     403  tcpip_handler
       8  viztool_process

 
   154 bytes in segment BANKED_CODE
     6 bytes in segment BANK_RELAYS
 1 848 bytes in segment NEAR_CODE
     8 bytes in segment XDATA_I
     8 bytes in segment XDATA_ID
    69 bytes in segment XDATA_Z
 
 2 016 bytes of CODE  memory
    77 bytes of XDATA memory

Errors: none
Warnings: 1
