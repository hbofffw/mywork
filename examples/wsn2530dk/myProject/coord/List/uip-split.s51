///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:54 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\uip-split.c             /
//    Command line       =  D:\myWork\myWork\core\net\uip-split.c -D          /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\uip-split.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `uip-split`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET

        PUBLIC ??uip_split_output?relay
        FUNCTION ??uip_split_output?relay,0203H
        PUBLIC uip_split_output
        FUNCTION uip_split_output,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
tcpip_ipv6_output   SYMBOL "tcpip_ipv6_output"
??tcpip_ipv6_output?relay SYMBOL "?relay", tcpip_ipv6_output
uip_split_output    SYMBOL "uip_split_output"
??uip_split_output?relay SYMBOL "?relay", uip_split_output

        EXTERN ??tcpip_ipv6_output?relay
        FUNCTION ??tcpip_ipv6_output?relay,00H
        EXTERN tcpip_ipv6_output
        FUNCTION tcpip_ipv6_output,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\myWork\myWork\core\net\uip-split.c
//    1 /*
//    2  * Copyright (c) 2004, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  * Author: Adam Dunkels <adam@sics.se>
//   32  *
//   33  */
//   34 
//   35 #include <string.h>
//   36 
//   37 #include "net/uip-split.h"
//   38 #include "net/uip.h"
//   39 #include "net/uip-fw.h"
//   40 #include "net/uip_arch.h"
//   41 
//   42 #include "net/tcpip.h"
//   43 
//   44 #define BUF ((struct uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
//   45 
//   46 #ifdef UIP_SPLIT_CONF_SIZE
//   47 #define UIP_SPLIT_SIZE UIP_SPLIT_CONF_SIZE
//   48 #else /* UIP_SPLIT_CONF_SIZE */
//   49 #define UIP_SPLIT_SIZE UIP_TCP_MSS
//   50 #endif /* UIP_SPLIT_CONF_SIZE */
//   51 
//   52 /*-----------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 void
//   54 uip_split_output(void)
uip_split_output:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function uip_split_output
        CODE
//   55 {
        FUNCALL uip_split_output, tcpip_ipv6_output
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   56 #if UIP_TCP
//   57   uint16_t tcplen, len1, len2;
//   58 
//   59   /* We only split TCP segments that are larger than or equal to
//   60      UIP_SPLIT_SIZE, which is configurable through
//   61      UIP_SPLIT_CONF_SIZE. */
//   62   if(BUF->proto == UIP_PROTO_TCP &&
//   63      uip_len >= UIP_SPLIT_SIZE + UIP_TCPIP_HLEN) {
//   64 
//   65     tcplen = uip_len - UIP_TCPIP_HLEN;
//   66     /* Split the segment in two. If the original packet length was
//   67        odd, we make the second packet one byte larger. */
//   68     len1 = len2 = tcplen / 2;
//   69     if(len1 + len2 < tcplen) {
//   70       ++len2;
//   71     }
//   72 
//   73     /* Create the first packet. This is done by altering the length
//   74        field of the IP header and updating the checksums. */
//   75     uip_len = len1 + UIP_TCPIP_HLEN;
//   76 #if UIP_CONF_IPV6
//   77     /* For IPv6, the IP length field does not include the IPv6 IP header
//   78        length. */
//   79     BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
//   80     BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
//   81 #else /* UIP_CONF_IPV6 */
//   82     BUF->len[0] = uip_len >> 8;
//   83     BUF->len[1] = uip_len & 0xff;
//   84 #endif /* UIP_CONF_IPV6 */
//   85     
//   86     /* Recalculate the TCP checksum. */
//   87     BUF->tcpchksum = 0;
//   88     BUF->tcpchksum = ~(uip_tcpchksum());
//   89 
//   90 #if !UIP_CONF_IPV6
//   91     /* Recalculate the IP checksum. */
//   92     BUF->ipchksum = 0;
//   93     BUF->ipchksum = ~(uip_ipchksum());
//   94 #endif /* UIP_CONF_IPV6 */
//   95     
//   96     /* Transmit the first packet. */
//   97     /*    uip_fw_output();*/
//   98 #if UIP_CONF_IPV6
//   99     tcpip_ipv6_output();
//  100 #else
//  101     tcpip_output();
//  102 #endif /* UIP_CONF_IPV6 */
//  103    
//  104     /* Now, create the second packet. To do this, it is not enough to
//  105        just alter the length field, but we must also update the TCP
//  106        sequence number and point the uip_appdata to a new place in
//  107        memory. This place is detemined by the length of the first
//  108        packet (len1). */
//  109     uip_len = len2 + UIP_TCPIP_HLEN;
//  110 #if UIP_CONF_IPV6
//  111     /* For IPv6, the IP length field does not include the IPv6 IP header
//  112        length. */
//  113     BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
//  114     BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
//  115 #else /* UIP_CONF_IPV6 */
//  116     BUF->len[0] = uip_len >> 8;
//  117     BUF->len[1] = uip_len & 0xff;
//  118 #endif /* UIP_CONF_IPV6 */
//  119     
//  120     /*    uip_appdata += len1;*/
//  121     memcpy(uip_appdata, (uint8_t *)uip_appdata + len1, len2);
//  122 
//  123     uip_add32(BUF->seqno, len1);
//  124     BUF->seqno[0] = uip_acc32[0];
//  125     BUF->seqno[1] = uip_acc32[1];
//  126     BUF->seqno[2] = uip_acc32[2];
//  127     BUF->seqno[3] = uip_acc32[3];
//  128     
//  129     /* Recalculate the TCP checksum. */
//  130     BUF->tcpchksum = 0;
//  131     BUF->tcpchksum = ~(uip_tcpchksum());
//  132 
//  133 #if !UIP_CONF_IPV6
//  134     /* Recalculate the IP checksum. */
//  135     BUF->ipchksum = 0;
//  136     BUF->ipchksum = ~(uip_ipchksum());
//  137 #endif /* UIP_CONF_IPV6 */
//  138 
//  139     /* Transmit the second packet. */
//  140     /*    uip_fw_output();*/
//  141 #if UIP_CONF_IPV6
//  142     tcpip_ipv6_output();
//  143 #else
//  144     tcpip_output();
//  145 #endif /* UIP_CONF_IPV6 */
//  146     return;
//  147   }
//  148 #endif /* UIP_TCP */
//  149 
//  150   /*    uip_fw_output();*/
//  151 #if UIP_CONF_IPV6
//  152      tcpip_ipv6_output();
        ; Setup parameters for call to function tcpip_ipv6_output
        LCALL   ??tcpip_ipv6_output?relay
//  153 #else
//  154      tcpip_output();
//  155 #endif /* UIP_CONF_IPV6 */
//  156 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uip_split_output?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uip_split_output

        END
//  157 
//  158 /*-----------------------------------------------------------------------------*/
// 
// 14 bytes in segment BANKED_CODE
//  6 bytes in segment BANK_RELAYS
// 
// 20 bytes of CODE memory
//
//Errors: none
//Warnings: none
