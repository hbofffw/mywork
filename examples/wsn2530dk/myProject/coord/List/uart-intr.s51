///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:52 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\cpu\cc253x\dev\uart-intr.c       /
//    Command line       =  D:\myWork\myWork\cpu\cc253x\dev\uart-intr.c -D    /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\uart-intr.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `uart-intr`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBWEAK `??uart0_rx_isr??INTVEC 19`
        PUBLIC ??uart0_set_input?relay
        FUNCTION ??uart0_set_input?relay,0203H
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK U0DBUF
        PUBWEAK _A_TCON
        PUBLIC uart0_rx_isr
        FUNCTION uart0_rx_isr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC uart0_set_input
        FUNCTION uart0_set_input,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
uart0_rx_isr        SYMBOL "uart0_rx_isr"
`??uart0_rx_isr??INTVEC 19` SYMBOL "??INTVEC 19", uart0_rx_isr
uart0_set_input     SYMBOL "uart0_set_input"
??uart0_set_input?relay SYMBOL "?relay", uart0_set_input

        EXTERN energest_current_mode
        EXTERN energest_current_time
        EXTERN energest_total_time


        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DATA8
        DS 1
// D:\myWork\myWork\cpu\cc253x\dev\uart-intr.c
//    1 /**
//    2  * \file
//    3  *
//    4  *   uart write routines
//    5  *
//    6  * \author
//    7  *
//    8  *   Anthony "Asterisk" Ambuehl
//    9  *
//   10  *   interrupt routines which must be in HOME bank.  handles received data from UART.
//   11  *
//   12  */
//   13 #include "cc253x.h"
//   14 
//   15 #include "dev/uart0.h"
//   16 #include "dev/uart1.h"
//   17 #include "sys/energest.h"
//   18 
//   19 #if UART0_ENABLE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   20 static int (* uart0_input_handler)(unsigned char c);
uart0_input_handler:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   21 #endif
//   22 #if UART1_ENABLE
//   23 static int (* uart1_input_handler)(unsigned char c);
//   24 #endif
//   25 
//   26 #if UART0_ENABLE
//   27 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   28 void
//   29 uart0_set_input(int (* input)(unsigned char c))
uart0_set_input:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function uart0_set_input
        CODE
//   30 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   31   uart0_input_handler = input;
        MOV     DPTR,#uart0_input_handler
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   32 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//   33 /*---------------------------------------------------------------------------*/
//   34 #if UART0_CONF_WITH_INPUT
//   35 /* avoid referencing bits since we're not using them */
//   36 #pragma save
//   37 #if CC_CONF_OPTIMIZE_STACK_SIZE
//   38 #pragma exclude bits
//   39 #endif
//   40 #pragma vector = URX0_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   41 __interrupt void uart0_rx_isr(void)
uart0_rx_isr:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function uart0_rx_isr
        CODE
//   42 {
        PUSH    A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV     A,#-0x11
        LCALL   ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
//   43   ENERGEST_ON(ENERGEST_TYPE_IRQ);
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#energest_current_time + 4
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#energest_current_mode + 2
        MOV     A,#0x1
        MOVX    @DPTR,A
//   44   URX0IF = 0;
        CLR     0x88.3
//   45   if(uart0_input_handler != NULL) {
        MOV     DPTR,#uart0_input_handler
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??uart0_rx_isr_0
//   46     uart0_input_handler(U0DBUF);
        ; Setup parameters for indirect call
        MOV     A,0xc1
        MOV     R1,A
        MOV     DPTR,#uart0_input_handler
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//   47   }
//   48   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
??uart0_rx_isr_0:
        MOV     DPTR,#energest_current_mode + 2
        MOVX    A,@DPTR
        JZ      ??uart0_rx_isr_1
        MOV     A,0xe2
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#energest_current_time + 4
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#energest_total_time + 8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
        MOV     DPTR,#energest_current_mode + 2
        MOV     A,#0x0
        MOVX    @DPTR,A
//   49 }
??uart0_rx_isr_1:
        MOV     R7,#0x4
        LJMP    ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock1
        REQUIRE T1CNTL
        REQUIRE T1CNTH
        REQUIRE _A_TCON
        REQUIRE U0DBUF

        COMMON INTVEC:CODE:ROOT(0)
        ORG 19
`??uart0_rx_isr??INTVEC 19`:
        LJMP       (uart0_rx_isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uart0_set_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uart0_set_input

        END
//   50 #pragma restore
//   51 #endif
//   52 #endif /* UART0_ENABLE */
//   53 #if UART1_ENABLE
//   54 /*---------------------------------------------------------------------------*/
//   55 void
//   56 uart1_set_input(int (* input)(unsigned char c))
//   57 {
//   58   uart1_input_handler = input;
//   59 }
//   60 /*---------------------------------------------------------------------------*/
//   61 #if UART_ONE_CONF_WITH_INPUT
//   62 /* avoid referencing bits since we're not using them */
//   63 #pragma save
//   64 #if CC_CONF_OPTIMIZE_STACK_SIZE
//   65 #pragma exclude bits
//   66 #endif
//   67 #pragma vector = URX1_VECTOR
//   68 __interrupt void uart1_rx_isr(void)
//   69 {
//   70   ENERGEST_ON(ENERGEST_TYPE_IRQ);
//   71   URX1IF = 0;
//   72   if(uart1_input_handler != NULL) {
//   73     uart1_input_handler(U1DBUF);
//   74   }
//   75   ENERGEST_OFF(ENERGEST_TYPE_IRQ);
//   76 }
//   77 #pragma restore
//   78 /*---------------------------------------------------------------------------*/
//   79 #endif /* UART_ONE_CONF_WITH_INPUT */
//   80 #endif /* UART1_ENABLE */
// 
//  19 bytes in segment BANKED_CODE
//   6 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 137 bytes in segment NEAR_CODE
//   4 bytes in segment SFR_AN
//   2 bytes in segment XDATA_Z
// 
// 162 bytes of CODE  memory (+ 3 bytes shared)
//   0 bytes of DATA  memory (+ 4 bytes shared)
//   2 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
