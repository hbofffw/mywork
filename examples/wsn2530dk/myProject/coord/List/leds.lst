###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:49 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\dev\leds.c                   #
#    Command line       =  D:\myWork\myWork\core\dev\leds.c -D                #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\leds.lst                                    #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\leds.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################


   \                                 In  segment SFR_AN, at 0xe2
   \   unsigned char volatile __sfr T1CNTL
   \                     T1CNTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe3
   \   unsigned char volatile __sfr T1CNTH
   \                     T1CNTH:
   \   000000                DS 1
D:\myWork\myWork\core\dev\leds.c
      1          /*
      2           * Copyright (c) 2005, Swedish Institute of Computer Science
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the Contiki operating system.
     30           *
     31           */
     32          
     33          #include "dev/leds.h"
     34          #include "sys/clock.h"
     35          #include "sys/energest.h"
     36          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     37          static unsigned char leds, invert;
   \                     leds:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     invert:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     38          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     39          static void
     40          show_leds(unsigned char changed)
   \                     show_leds:
     41          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     42            if(changed & LEDS_GREEN) {
   \   000007   EE           MOV     A,R6
   \   000008   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000A   506E         JNC     ??show_leds_0
     43              /* Green did change */
     44              if((invert ^ leds) & LEDS_GREEN) {
   \   00000C   90....       MOV     DPTR,#leds
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#invert
   \   000014   E0           MOVX    A,@DPTR
   \   000015   68           XRL     A,R0
   \   000016   5402         ANL     A,#0x2
   \   000018   6023         JZ      ??show_leds_1
     45                ENERGEST_ON(ENERGEST_TYPE_LED_GREEN);
   \   00001A   E5E2         MOV     A,0xe2
   \   00001C   FA           MOV     R2,A
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   E5E3         MOV     A,0xe3
   \   000021   F8           MOV     R0,A
   \   000022   7900         MOV     R1,#0x0
   \   000024   E4           CLR     A
   \   000025   C8           XCH     A,R0
   \   000026   F9           MOV     R1,A
   \   000027   EA           MOV     A,R2
   \   000028   28           ADD     A,R0
   \   000029   F8           MOV     R0,A
   \   00002A   EB           MOV     A,R3
   \   00002B   39           ADDC    A,R1
   \   00002C   F9           MOV     R1,A
   \   00002D   90....       MOV     DPTR,#energest_current_time + 6
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   F0           MOVX    @DPTR,A
   \   000035   90....       MOV     DPTR,#energest_current_mode + 3
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   803D         SJMP    ??show_leds_0
     46              } else {
     47                ENERGEST_OFF(ENERGEST_TYPE_LED_GREEN);
   \                     ??show_leds_1:
   \   00003D   90....       MOV     DPTR,#energest_current_mode + 3
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6037         JZ      ??show_leds_0
   \   000043   E5E2         MOV     A,0xe2
   \   000045   FA           MOV     R2,A
   \   000046   7B00         MOV     R3,#0x0
   \   000048   E5E3         MOV     A,0xe3
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EA           MOV     A,R2
   \   000051   28           ADD     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   EB           MOV     A,R3
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   90....       MOV     DPTR,#energest_current_time + 6
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   EA           MOV     A,R2
   \   00005F   C3           CLR     C
   \   000060   98           SUBB    A,R0
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   EB           MOV     A,R3
   \   000064   99           SUBB    A,R1
   \   000065   F5..         MOV     ?V0 + 1,A
   \   000067   E4           CLR     A
   \   000068   F5..         MOV     ?V0 + 2,A
   \   00006A   F5..         MOV     ?V0 + 3,A
   \   00006C   90....       MOV     DPTR,#energest_total_time + 12
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?L_ADD_TO_X
   \   000074   90....       MOV     DPTR,#energest_current_mode + 3
   \   000077   7400         MOV     A,#0x0
   \   000079   F0           MOVX    @DPTR,A
     48              }
     49            }
     50            if(changed & LEDS_YELLOW) {
   \                     ??show_leds_0:
   \   00007A   EE           MOV     A,R6
   \   00007B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00007D   506E         JNC     ??show_leds_2
     51              if((invert ^ leds) & LEDS_YELLOW) {
   \   00007F   90....       MOV     DPTR,#leds
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   90....       MOV     DPTR,#invert
   \   000087   E0           MOVX    A,@DPTR
   \   000088   68           XRL     A,R0
   \   000089   5404         ANL     A,#0x4
   \   00008B   6023         JZ      ??show_leds_3
     52                ENERGEST_ON(ENERGEST_TYPE_LED_YELLOW);
   \   00008D   E5E2         MOV     A,0xe2
   \   00008F   FA           MOV     R2,A
   \   000090   7B00         MOV     R3,#0x0
   \   000092   E5E3         MOV     A,0xe3
   \   000094   F8           MOV     R0,A
   \   000095   7900         MOV     R1,#0x0
   \   000097   E4           CLR     A
   \   000098   C8           XCH     A,R0
   \   000099   F9           MOV     R1,A
   \   00009A   EA           MOV     A,R2
   \   00009B   28           ADD     A,R0
   \   00009C   F8           MOV     R0,A
   \   00009D   EB           MOV     A,R3
   \   00009E   39           ADDC    A,R1
   \   00009F   F9           MOV     R1,A
   \   0000A0   90....       MOV     DPTR,#energest_current_time + 8
   \   0000A3   E8           MOV     A,R0
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E9           MOV     A,R1
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   90....       MOV     DPTR,#energest_current_mode + 4
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   803D         SJMP    ??show_leds_2
     53              } else {
     54                ENERGEST_OFF(ENERGEST_TYPE_LED_YELLOW);
   \                     ??show_leds_3:
   \   0000B0   90....       MOV     DPTR,#energest_current_mode + 4
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6037         JZ      ??show_leds_2
   \   0000B6   E5E2         MOV     A,0xe2
   \   0000B8   FA           MOV     R2,A
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   E5E3         MOV     A,0xe3
   \   0000BD   F8           MOV     R0,A
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   E4           CLR     A
   \   0000C1   C8           XCH     A,R0
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   28           ADD     A,R0
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EB           MOV     A,R3
   \   0000C7   39           ADDC    A,R1
   \   0000C8   FB           MOV     R3,A
   \   0000C9   90....       MOV     DPTR,#energest_current_time + 8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F8           MOV     R0,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F9           MOV     R1,A
   \   0000D1   EA           MOV     A,R2
   \   0000D2   C3           CLR     C
   \   0000D3   98           SUBB    A,R0
   \   0000D4   F5..         MOV     ?V0 + 0,A
   \   0000D6   EB           MOV     A,R3
   \   0000D7   99           SUBB    A,R1
   \   0000D8   F5..         MOV     ?V0 + 1,A
   \   0000DA   E4           CLR     A
   \   0000DB   F5..         MOV     ?V0 + 2,A
   \   0000DD   F5..         MOV     ?V0 + 3,A
   \   0000DF   90....       MOV     DPTR,#energest_total_time + 16
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?L_ADD_TO_X
   \   0000E7   90....       MOV     DPTR,#energest_current_mode + 4
   \   0000EA   7400         MOV     A,#0x0
   \   0000EC   F0           MOVX    @DPTR,A
     55              }
     56            }
     57            if(changed & LEDS_RED) {
   \                     ??show_leds_2:
   \   0000ED   EE           MOV     A,R6
   \   0000EE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000F0   5074         JNC     ??show_leds_4
     58              if((invert ^ leds) & LEDS_RED) {
   \   0000F2   90....       MOV     DPTR,#invert
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000F8   92F0         MOV     B.0,C
   \   0000FA   90....       MOV     DPTR,#leds
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   A2E0         MOV     C,0xE0 /* A   */.0
   \   000100   30F001       JNB     B.0,??show_leds_5
   \   000103   B3           CPL     C
   \                     ??show_leds_5:
   \   000104   5023         JNC     ??show_leds_6
     59                ENERGEST_ON(ENERGEST_TYPE_LED_RED);
   \   000106   E5E2         MOV     A,0xe2
   \   000108   FA           MOV     R2,A
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   E5E3         MOV     A,0xe3
   \   00010D   F8           MOV     R0,A
   \   00010E   7900         MOV     R1,#0x0
   \   000110   E4           CLR     A
   \   000111   C8           XCH     A,R0
   \   000112   F9           MOV     R1,A
   \   000113   EA           MOV     A,R2
   \   000114   28           ADD     A,R0
   \   000115   F8           MOV     R0,A
   \   000116   EB           MOV     A,R3
   \   000117   39           ADDC    A,R1
   \   000118   F9           MOV     R1,A
   \   000119   90....       MOV     DPTR,#energest_current_time + 10
   \   00011C   E8           MOV     A,R0
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   A3           INC     DPTR
   \   00011F   E9           MOV     A,R1
   \   000120   F0           MOVX    @DPTR,A
   \   000121   90....       MOV     DPTR,#energest_current_mode + 5
   \   000124   7401         MOV     A,#0x1
   \   000126   F0           MOVX    @DPTR,A
   \   000127   803D         SJMP    ??show_leds_4
     60              } else {
     61                ENERGEST_OFF(ENERGEST_TYPE_LED_RED);
   \                     ??show_leds_6:
   \   000129   90....       MOV     DPTR,#energest_current_mode + 5
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   6037         JZ      ??show_leds_4
   \   00012F   E5E2         MOV     A,0xe2
   \   000131   FA           MOV     R2,A
   \   000132   7B00         MOV     R3,#0x0
   \   000134   E5E3         MOV     A,0xe3
   \   000136   F8           MOV     R0,A
   \   000137   7900         MOV     R1,#0x0
   \   000139   E4           CLR     A
   \   00013A   C8           XCH     A,R0
   \   00013B   F9           MOV     R1,A
   \   00013C   EA           MOV     A,R2
   \   00013D   28           ADD     A,R0
   \   00013E   FA           MOV     R2,A
   \   00013F   EB           MOV     A,R3
   \   000140   39           ADDC    A,R1
   \   000141   FB           MOV     R3,A
   \   000142   90....       MOV     DPTR,#energest_current_time + 10
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F9           MOV     R1,A
   \   00014A   EA           MOV     A,R2
   \   00014B   C3           CLR     C
   \   00014C   98           SUBB    A,R0
   \   00014D   F5..         MOV     ?V0 + 0,A
   \   00014F   EB           MOV     A,R3
   \   000150   99           SUBB    A,R1
   \   000151   F5..         MOV     ?V0 + 1,A
   \   000153   E4           CLR     A
   \   000154   F5..         MOV     ?V0 + 2,A
   \   000156   F5..         MOV     ?V0 + 3,A
   \   000158   90....       MOV     DPTR,#energest_total_time + 20
   \   00015B   78..         MOV     R0,#?V0 + 0
   \   00015D   12....       LCALL   ?L_ADD_TO_X
   \   000160   90....       MOV     DPTR,#energest_current_mode + 5
   \   000163   7400         MOV     A,#0x0
   \   000165   F0           MOVX    @DPTR,A
     62              }
     63            }
     64            leds_arch_set(leds ^ invert);
   \                     ??show_leds_4:
   \   000166                ; Setup parameters for call to function leds_arch_set
   \   000166   90....       MOV     DPTR,#invert
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F8           MOV     R0,A
   \   00016B   90....       MOV     DPTR,#leds
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   68           XRL     A,R0
   \   000170   F9           MOV     R1,A
   \   000171   12....       LCALL   ??leds_arch_set?relay
     65          }
   \   000174   7F04         MOV     R7,#0x4
   \   000176   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000179                REQUIRE T1CNTL
   \   000179                REQUIRE T1CNTH
     66          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          void
     68          leds_init(void)
   \                     leds_init:
     69          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     70            leds_arch_init();
   \   000004                ; Setup parameters for call to function leds_arch_init
   \   000004   12....       LCALL   ??leds_arch_init?relay
     71            leds = invert = 0;
   \   000007   7400         MOV     A,#0x0
   \   000009   90....       MOV     DPTR,#invert
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   90....       MOV     DPTR,#leds
   \   000010   F0           MOVX    @DPTR,A
     72          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
     73          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void
     75          leds_blink(void)
   \                     leds_blink:
     76          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     77            /* Blink all leds. */
     78            unsigned char inv;
     79            inv = ~(leds ^ invert);
   \   000005   90....       MOV     DPTR,#invert
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   90....       MOV     DPTR,#leds
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   68           XRL     A,R0
   \   00000F   F4           CPL     A
   \   000010   FE           MOV     R6,A
     80            leds_invert(inv);
   \   000011                ; Setup parameters for call to function leds_invert
   \   000011   EE           MOV     A,R6
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ??leds_invert?relay
     81          
     82            clock_delay(400);
   \   000016                ; Setup parameters for call to function clock_delay_usec
   \   000016   7A90         MOV     R2,#-0x70
   \   000018   7B01         MOV     R3,#0x1
   \   00001A   12....       LCALL   ??clock_delay_usec?relay
     83          
     84            leds_invert(inv);
   \   00001D                ; Setup parameters for call to function leds_invert
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??leds_invert?relay
     85          }
   \   000022   7F01         MOV     R7,#0x1
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
     86          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          unsigned char
     88          leds_get(void) {
   \                     leds_get:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     89            return leds_arch_get();
   \   000004                ; Setup parameters for call to function leds_arch_get
   \   000004   12....       LCALL   ??leds_arch_get?relay
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     90          }
     91          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     92          void
     93          leds_on(unsigned char ledv)
   \                     leds_on:
     94          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     95            unsigned char changed;
     96            changed = (~leds) & ledv;
   \   000007   90....       MOV     DPTR,#leds
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F4           CPL     A
   \   00000C   5E           ANL     A,R6
   \   00000D   F9           MOV     R1,A
     97            leds |= ledv;
   \   00000E   90....       MOV     DPTR,#leds
   \   000011   E0           MOVX    A,@DPTR
   \   000012   4E           ORL     A,R6
   \   000013   F0           MOVX    @DPTR,A
     98            show_leds(changed);
   \   000014                ; Setup parameters for call to function show_leds
   \   000014   12....       LCALL   ??show_leds?relay
     99          }
   \   000017   7F01         MOV     R7,#0x1
   \   000019   02....       LJMP    ?BANKED_LEAVE_XDATA
    100          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          void
    102          leds_off(unsigned char ledv)
   \                     leds_off:
    103          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    104            unsigned char changed;
    105            changed = leds & ledv;
   \   000007   90....       MOV     DPTR,#leds
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   5E           ANL     A,R6
   \   00000C   F9           MOV     R1,A
    106            leds &= ~ledv;
   \   00000D   EE           MOV     A,R6
   \   00000E   F4           CPL     A
   \   00000F   F8           MOV     R0,A
   \   000010   90....       MOV     DPTR,#leds
   \   000013   E0           MOVX    A,@DPTR
   \   000014   58           ANL     A,R0
   \   000015   F0           MOVX    @DPTR,A
    107            show_leds(changed);
   \   000016                ; Setup parameters for call to function show_leds
   \   000016   12....       LCALL   ??show_leds?relay
    108          }
   \   000019   7F01         MOV     R7,#0x1
   \   00001B   02....       LJMP    ?BANKED_LEAVE_XDATA
    109          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void
    111          leds_toggle(unsigned char ledv)
   \                     leds_toggle:
    112          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    113            leds_invert(ledv);
   \   000007                ; Setup parameters for call to function leds_invert
   \   000007   F9           MOV     R1,A
   \   000008   12....       LCALL   ??leds_invert?relay
    114          }
   \   00000B   7F01         MOV     R7,#0x1
   \   00000D   02....       LJMP    ?BANKED_LEAVE_XDATA
    115          /*---------------------------------------------------------------------------*/
    116          /*   invert the invert register using the leds parameter */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void
    118          leds_invert(unsigned char ledv) {
   \                     leds_invert:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    119            invert = invert ^ ledv;
   \   000007   90....       MOV     DPTR,#invert
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   F0           MOVX    @DPTR,A
    120            show_leds(ledv);
   \   00000D                ; Setup parameters for call to function show_leds
   \   00000D   EE           MOV     A,R6
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??show_leds?relay
    121          }
   \   000012   7F01         MOV     R7,#0x1
   \   000014   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??show_leds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    show_leds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_blink?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_blink

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_get?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_get

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_on?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_on

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_off?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_off

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_toggle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_toggle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??leds_invert?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    leds_invert
    122          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      9  leds_blink
                          0 0  9 -> clock_delay_usec
                          0 0  9 -> leds_invert
       2      0      0  leds_get
                          2 0  0 -> leds_arch_get
       2      0      0  leds_init
                          2 0  0 -> leds_arch_init
       0      0     18  leds_invert
                          0 0  9 -> show_leds
       0      0      9  leds_off
                          0 0  9 -> show_leds
       0      0      9  leds_on
                          0 0  9 -> show_leds
       0      0      9  leds_toggle
                          0 0  9 -> leds_invert
       0      0     21  show_leds
                          0 0 12 -> leds_arch_set


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??leds_blink?relay
       6  ??leds_get?relay
       6  ??leds_init?relay
       6  ??leds_invert?relay
       6  ??leds_off?relay
       6  ??leds_on?relay
       6  ??leds_toggle?relay
       6  ??show_leds?relay
       1  T1CNTH
       1  T1CNTL
       1  invert
       1  leds
      39  leds_blink
      14  leds_get
      24  leds_init
      23  leds_invert
      30  leds_off
      28  leds_on
      16  leds_toggle
     377  show_leds

 
 551 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   2 bytes in segment XDATA_Z
 
 599 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
   2 bytes of XDATA memory

Errors: none
Warnings: none
