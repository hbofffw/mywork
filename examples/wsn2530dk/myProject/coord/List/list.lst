###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:49 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\lib\list.c                   #
#    Command line       =  D:\myWork\myWork\core\lib\list.c -D                #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\list.lst                                    #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\list.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\lib\list.c
      1          /**
      2           * \addtogroup list
      3           * @{
      4           */
      5          
      6          /**
      7           * \file
      8           * Linked list library implementation.
      9           *
     10           * \author Adam Dunkels <adam@sics.se>
     11           *
     12           */
     13          
     14          /*
     15           * Copyright (c) 2004, Swedish Institute of Computer Science.
     16           * All rights reserved.
     17           *
     18           * Redistribution and use in source and binary forms, with or without
     19           * modification, are permitted provided that the following conditions
     20           * are met:
     21           * 1. Redistributions of source code must retain the above copyright
     22           *    notice, this list of conditions and the following disclaimer.
     23           * 2. Redistributions in binary form must reproduce the above copyright
     24           *    notice, this list of conditions and the following disclaimer in the
     25           *    documentation and/or other materials provided with the distribution.
     26           * 3. Neither the name of the Institute nor the names of its contributors
     27           *    may be used to endorse or promote products derived from this software
     28           *    without specific prior written permission.
     29           *
     30           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     31           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     32           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     33           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     34           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     35           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     36           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     37           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     38           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     39           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     40           * SUCH DAMAGE.
     41           *
     42           * This file is part of the Contiki operating system.
     43           *
     44           * Author: Adam Dunkels <adam@sics.se>
     45           *
     46           */
     47          #include "lib/list.h"
     48          
     49          #define NULL 0
     50          
     51          struct list {
     52            struct list *next;
     53          };
     54          
     55          /*---------------------------------------------------------------------------*/
     56          /**
     57           * Initialize a list.
     58           *
     59           * This function initalizes a list. The list will be empty after this
     60           * function has been called.
     61           *
     62           * \param list The list to be initialized.
     63           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          void
     65          list_init(list_t list)
   \                     list_init:
     66          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     67            *list = NULL;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   7400         MOV     A,#0x0
   \   00000E   F0           MOVX    @DPTR,A
     68          }
   \   00000F   D083         POP     DPH
   \   000011   D082         POP     DPL
   \   000013   02....       LJMP    ?BRET
     69          /*---------------------------------------------------------------------------*/
     70          /**
     71           * Get a pointer to the first element of a list.
     72           *
     73           * This function returns a pointer to the first element of the
     74           * list. The element will \b not be removed from the list.
     75           *
     76           * \param list The list.
     77           * \return A pointer to the first element on the list.
     78           *
     79           * \sa list_tail()
     80           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void *
     82          list_head(list_t list)
   \                     list_head:
     83          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     84            return *list;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FB           MOV     R3,A
   \   00000D   D083         POP     DPH
   \   00000F   D082         POP     DPL
   \   000011   02....       LJMP    ?BRET
     85          }
     86          /*---------------------------------------------------------------------------*/
     87          /**
     88           * Duplicate a list.
     89           *
     90           * This function duplicates a list by copying the list reference, but
     91           * not the elements.
     92           *
     93           * \note This function does \b not copy the elements of the list, but
     94           * merely duplicates the pointer to the first element of the list.
     95           *
     96           * \param dest The destination list.
     97           * \param src The source list.
     98           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void
    100          list_copy(list_t dest, list_t src)
   \                     list_copy:
    101          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    102            *dest = *src;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E8           MOV     A,R0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E9           MOV     A,R1
   \   000015   F0           MOVX    @DPTR,A
    103          }
   \   000016   D083         POP     DPH
   \   000018   D082         POP     DPL
   \   00001A   02....       LJMP    ?BRET
    104          /*---------------------------------------------------------------------------*/
    105          /**
    106           * Get the tail of a list.
    107           *
    108           * This function returns a pointer to the elements following the first
    109           * element of a list. No elements are removed by this function.
    110           *
    111           * \param list The list
    112           * \return A pointer to the element after the first element on the list.
    113           *
    114           * \sa list_head()
    115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void *
    117          list_tail(list_t list)
   \                     list_tail:
    118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119            struct list *l;
    120            
    121            if(*list == NULL) {
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   7006         JNZ     ??list_tail_0
    122              return NULL;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   8021         SJMP    ??list_tail_1
    123            }
    124            
    125            for(l = *list; l->next != NULL; l = l->next);
   \                     ??list_tail_0:
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   8009         SJMP    ??list_tail_2
   \                     ??list_tail_3:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FB           MOV     R3,A
   \                     ??list_tail_2:
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   70EA         JNZ     ??list_tail_3
    126            
    127            return l;
   \                     ??list_tail_1:
   \   000038   D083         POP     DPH
   \   00003A   D082         POP     DPL
   \   00003C   02....       LJMP    ?BRET
    128          }
    129          /*---------------------------------------------------------------------------*/
    130          /**
    131           * Add an item at the end of a list.
    132           *
    133           * This function adds an item to the end of the list.
    134           *
    135           * \param list The list.
    136           * \param item A pointer to the item to be added.
    137           *
    138           * \sa list_push()
    139           *
    140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          void
    142          list_add(list_t list, void *item)
   \                     list_add:
    143          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    144            struct list *l;
    145          
    146            /* Make sure not to add the same element twice */
    147            list_remove(list, item);
   \   00000D                ; Setup parameters for call to function list_remove
   \   00000D   AC..         MOV     R4,?V0 + 0
   \   00000F   AD..         MOV     R5,?V0 + 1
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??list_remove?relay
    148          
    149            ((struct list *)item)->next = NULL;
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   7400         MOV     A,#0x0
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   7400         MOV     A,#0x0
   \   000024   F0           MOVX    @DPTR,A
    150            
    151            l = list_tail(list);
   \   000025                ; Setup parameters for call to function list_tail
   \   000025   EE           MOV     A,R6
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??list_tail?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   85..82       MOV     DPL,?V0 + 2
   \   000033   85..83       MOV     DPH,?V0 + 3
    152          
    153            if(l == NULL) {
   \   000036   E582         MOV     A,DPL
   \   000038   4583         ORL     A,DPH
   \   00003A   700D         JNZ     ??list_add_0
    154              *list = item;
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E5..         MOV     A,?V0 + 1
   \   000046   F0           MOVX    @DPTR,A
   \   000047   8007         SJMP    ??list_add_1
    155            } else {
    156              l->next = item;
   \                     ??list_add_0:
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V0 + 1
   \   00004F   F0           MOVX    @DPTR,A
    157            }
    158          }
   \                     ??list_add_1:
   \   000050   7F04         MOV     R7,#0x4
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
    159          /*---------------------------------------------------------------------------*/
    160          /**
    161           * Add an item to the start of the list.
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          void
    164          list_push(list_t list, void *item)
   \                     list_push:
    165          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    166            /*  struct list *l;*/
    167          
    168            /* Make sure not to add the same element twice */
    169            list_remove(list, item);
   \   00000D                ; Setup parameters for call to function list_remove
   \   00000D   AC..         MOV     R4,?V0 + 0
   \   00000F   AD..         MOV     R5,?V0 + 1
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??list_remove?relay
    170          
    171            ((struct list *)item)->next = *list;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   85..82       MOV     DPL,?V0 + 0
   \   000024   85..83       MOV     DPH,?V0 + 1
   \   000027   E8           MOV     A,R0
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   E9           MOV     A,R1
   \   00002B   F0           MOVX    @DPTR,A
    172            *list = item;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E5..         MOV     A,?V0 + 1
   \   000036   F0           MOVX    @DPTR,A
    173          }
   \   000037   7F02         MOV     R7,#0x2
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    174          /*---------------------------------------------------------------------------*/
    175          /**
    176           * Remove the last object on the list.
    177           *
    178           * This function removes the last object on the list and returns it.
    179           *
    180           * \param list The list
    181           * \return The removed object
    182           *
    183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          void *
    185          list_chop(list_t list)
   \                     list_chop:
    186          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    187            struct list *l, *r;
    188            
    189            if(*list == NULL) {
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   7006         JNZ     ??list_chop_0
    190              return NULL;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   806C         SJMP    ??list_chop_1
    191            }
    192            if(((struct list *)*list)->next == NULL) {
   \                     ??list_chop_0:
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   701A         JNZ     ??list_chop_2
    193              l = *list;
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
    194              *list = NULL;
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
    195              return l;
   \   000040   E8           MOV     A,R0
   \   000041   FA           MOV     R2,A
   \   000042   E9           MOV     A,R1
   \   000043   FB           MOV     R3,A
   \   000044   803D         SJMP    ??list_chop_1
    196            }
    197            
    198            for(l = *list; l->next->next != NULL; l = l->next);
   \                     ??list_chop_2:
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   8009         SJMP    ??list_chop_3
   \                     ??list_chop_4:
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \                     ??list_chop_3:
   \   00005A   8882         MOV     DPL,R0
   \   00005C   8983         MOV     DPH,R1
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F583         MOV     DPH,A
   \   000064   8A82         MOV     DPL,R2
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FB           MOV     R3,A
   \   00006B   EA           MOV     A,R2
   \   00006C   4B           ORL     A,R3
   \   00006D   70E2         JNZ     ??list_chop_4
    199          
    200            r = l->next;
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FB           MOV     R3,A
    201            l->next = NULL;
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   7400         MOV     A,#0x0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
    202            
    203            return r;
   \                     ??list_chop_1:
   \   000083   D083         POP     DPH
   \   000085   D082         POP     DPL
   \   000087   02....       LJMP    ?BRET
    204          }
    205          /*---------------------------------------------------------------------------*/
    206          /**
    207           * Remove the first object on a list.
    208           *
    209           * This function removes the first object on the list and returns a
    210           * pointer to it.
    211           *
    212           * \param list The list.
    213           * \return Pointer to the removed element of list.
    214           */
    215          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          void *
    217          list_pop(list_t list)
   \                     list_pop:
    218          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    219            struct list *l;
    220            l = *list;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
    221            if(*list != NULL) {
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   EC           MOV     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   601A         JZ      ??list_pop_0
    222              *list = ((struct list *)*list)->next;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FC           MOV     R4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8C82         MOV     DPL,R4
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FC           MOV     R4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FD           MOV     R5,A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   EC           MOV     A,R4
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   ED           MOV     A,R5
   \   000034   F0           MOVX    @DPTR,A
    223            }
    224          
    225            return l;
   \                     ??list_pop_0:
   \   000035   E8           MOV     A,R0
   \   000036   FA           MOV     R2,A
   \   000037   E9           MOV     A,R1
   \   000038   FB           MOV     R3,A
   \   000039   7F01         MOV     R7,#0x1
   \   00003B   02....       LJMP    ?BANKED_LEAVE_XDATA
    226          }
    227          /*---------------------------------------------------------------------------*/
    228          /**
    229           * Remove a specific element from a list.
    230           *
    231           * This function removes a specified element from the list.
    232           *
    233           * \param list The list.
    234           * \param item The item that is to be removed from the list.
    235           *
    236           */
    237          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void
    239          list_remove(list_t list, void *item)
   \                     list_remove:
    240          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    241            struct list *l, *r;
    242            
    243            if(*list == NULL) {
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   49           ORL     A,R1
   \   000010   605D         JZ      ??list_remove_0
    244              return;
    245            }
    246            
    247            r = NULL;
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
    248            for(l = *list; l != NULL; l = l->next) {
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   800D         SJMP    ??list_remove_1
    249              if(l == item) {
    250                if(r == NULL) {
    251          	/* First on list */
    252          	*list = l->next;
    253                } else {
    254          	/* Not first on list */
    255          	r->next = l->next;
    256                }
    257                l->next = NULL;
    258                return;
    259              }
    260              r = l;
   \                     ??list_remove_2:
   \   000021   E8           MOV     A,R0
   \   000022   FE           MOV     R6,A
   \   000023   E9           MOV     A,R1
   \   000024   FF           MOV     R7,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \                     ??list_remove_1:
   \   00002E   E8           MOV     A,R0
   \   00002F   49           ORL     A,R1
   \   000030   603D         JZ      ??list_remove_0
   \   000032   EC           MOV     A,R4
   \   000033   68           XRL     A,R0
   \   000034   7002         JNZ     ??list_remove_3
   \   000036   ED           MOV     A,R5
   \   000037   69           XRL     A,R1
   \                     ??list_remove_3:
   \   000038   70E7         JNZ     ??list_remove_2
   \   00003A   EE           MOV     A,R6
   \   00003B   4F           ORL     A,R7
   \   00003C   7014         JNZ     ??list_remove_4
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FC           MOV     R4,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FD           MOV     R5,A
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   8012         SJMP    ??list_remove_5
   \                     ??list_remove_4:
   \   000052   8882         MOV     DPL,R0
   \   000054   8983         MOV     DPH,R1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FB           MOV     R3,A
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   EA           MOV     A,R2
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   EB           MOV     A,R3
   \   000063   F0           MOVX    @DPTR,A
   \                     ??list_remove_5:
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   7400         MOV     A,#0x0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   7400         MOV     A,#0x0
   \   00006E   F0           MOVX    @DPTR,A
    261            }
    262          }
   \                     ??list_remove_0:
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
    263          /*---------------------------------------------------------------------------*/
    264          /**
    265           * Get the length of a list.
    266           *
    267           * This function counts the number of elements on a specified list.
    268           *
    269           * \param list The list.
    270           * \return The length of the list.
    271           */
    272          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          int
    274          list_length(list_t list)
   \                     list_length:
    275          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276            struct list *l;
    277            int n = 0;
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
    278          
    279            for(l = *list; l != NULL; l = l->next) {
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   8882         MOV     DPL,R0
   \   000013   8983         MOV     DPH,R1
   \   000015   8011         SJMP    ??list_length_0
    280              ++n;
   \                     ??list_length_1:
   \   000017   EC           MOV     A,R4
   \   000018   2401         ADD     A,#0x1
   \   00001A   FC           MOV     R4,A
   \   00001B   ED           MOV     A,R5
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   FD           MOV     R5,A
    281            }
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \                     ??list_length_0:
   \   000028   E582         MOV     A,DPL
   \   00002A   4583         ORL     A,DPH
   \   00002C   70E9         JNZ     ??list_length_1
    282          
    283            return n;
   \   00002E   EC           MOV     A,R4
   \   00002F   FA           MOV     R2,A
   \   000030   ED           MOV     A,R5
   \   000031   FB           MOV     R3,A
   \   000032   D083         POP     DPH
   \   000034   D082         POP     DPL
   \   000036   02....       LJMP    ?BRET
    284          }
    285          /*---------------------------------------------------------------------------*/
    286          /**
    287           * \brief      Insert an item after a specified item on the list
    288           * \param list The list
    289           * \param previtem The item after which the new item should be inserted
    290           * \param newitem  The new item that is to be inserted
    291           * \author     Adam Dunkels
    292           *
    293           *             This function inserts an item right after a specified
    294           *             item on the list. This function is useful when using
    295           *             the list module to ordered lists.
    296           *
    297           *             If previtem is NULL, the new item is placed at the
    298           *             start of the list.
    299           *
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void
    302          list_insert(list_t list, void *previtem, void *newitem)
   \                     list_insert:
    303          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
    304            if(previtem == NULL) {
   \   00000F   EC           MOV     A,R4
   \   000010   4D           ORL     A,R5
   \   000011   7009         JNZ     ??list_insert_0
    305              list_push(list, newitem);
   \   000013                ; Setup parameters for call to function list_push
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
   \   000017   12....       LCALL   ??list_push?relay
   \   00001A   801B         SJMP    ??list_insert_1
    306            } else {
    307            
    308              ((struct list *)newitem)->next = ((struct list *)previtem)->next;
   \                     ??list_insert_0:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FB           MOV     R3,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   EA           MOV     A,R2
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EB           MOV     A,R3
   \   00002D   F0           MOVX    @DPTR,A
    309              ((struct list *)previtem)->next = newitem;
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E9           MOV     A,R1
   \   000036   F0           MOVX    @DPTR,A
    310            }
    311          }
   \                     ??list_insert_1:
   \   000037   7F01         MOV     R7,#0x1
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    312          /*---------------------------------------------------------------------------*/
    313          /**
    314           * \brief      Get the next item following this item
    315           * \param item A list item
    316           * \returns    A next item on the list
    317           *
    318           *             This function takes a list item and returns the next
    319           *             item on the list, or NULL if there are no more items on
    320           *             the list. This function is used when iterating through
    321           *             lists.
    322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void *
    324          list_item_next(void *item)
   \                     list_item_next:
    325          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    326            return item == NULL? NULL: ((struct list *)item)->next;
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7006         JNZ     ??list_item_next_0
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   8009         SJMP    ??list_item_next_1
   \                     ??list_item_next_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   \                     ??list_item_next_1:
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   02....       LJMP    ?BRET
    327          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_head?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_head

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_copy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_copy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_tail?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_tail

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_add?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_add

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_push?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_chop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_chop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_pop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_pop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_remove?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_remove

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_length?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_length

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_insert?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_insert

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??list_item_next?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    list_item_next
    328          /*---------------------------------------------------------------------------*/
    329          /** @} */

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     12  list_add
                          0 0 12 -> list_remove
                          0 0 12 -> list_tail
       2      0      0  list_chop
       2      0      0  list_copy
       2      0      0  list_head
       2      0      0  list_init
       0      0     11  list_insert
                          0 0  9 -> list_push
       2      0      0  list_item_next
       2      0      0  list_length
       0      0      9  list_pop
       0      0     19  list_push
                          0 0 10 -> list_remove
       0      0     21  list_remove
       2      0     12  list_tail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??list_add?relay
       6  ??list_chop?relay
       6  ??list_copy?relay
       6  ??list_head?relay
       6  ??list_init?relay
       6  ??list_insert?relay
       6  ??list_item_next?relay
       6  ??list_length?relay
       6  ??list_pop?relay
       6  ??list_push?relay
       6  ??list_remove?relay
       6  ??list_tail?relay
      85  list_add
     138  list_chop
      29  list_copy
      20  list_head
      22  list_init
      60  list_insert
      30  list_item_next
      57  list_length
      62  list_pop
      60  list_push
     116  list_remove
      63  list_tail

 
 742 bytes in segment BANKED_CODE
  72 bytes in segment BANK_RELAYS
 
 814 bytes of CODE memory

Errors: none
Warnings: none
