///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:43 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\lib\sensors.c               /
//    Command line       =  D:\myWork\myWork\core\lib\sensors.c -D            /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\sensors.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME sensors

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??get_sensor_index?relay,0203H
        FUNCTION ??process_thread_sensors_process?relay,0203H
        PUBLIC ??sensors_changed?relay
        FUNCTION ??sensors_changed?relay,0203H
        PUBLIC ??sensors_find?relay
        FUNCTION ??sensors_find?relay,0203H
        PUBLIC ??sensors_first?relay
        FUNCTION ??sensors_first?relay,0203H
        PUBLIC ??sensors_next?relay
        FUNCTION ??sensors_next?relay,0203H
        FUNCTION get_sensor_index,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION process_thread_sensors_process,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC sensors_changed
        FUNCTION sensors_changed,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC sensors_event
        PUBLIC sensors_find
        FUNCTION sensors_find,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC sensors_first
        FUNCTION sensors_first,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC sensors_next
        FUNCTION sensors_next,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC sensors_process
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
process_alloc_event SYMBOL "process_alloc_event"
??process_alloc_event?relay SYMBOL "?relay", process_alloc_event
process_poll        SYMBOL "process_poll"
??process_poll?relay SYMBOL "?relay", process_poll
process_post        SYMBOL "process_post"
??process_post?relay SYMBOL "?relay", process_post
strlen              SYMBOL "strlen"
??strlen?relay      SYMBOL "?relay", strlen
strncmp             SYMBOL "strncmp"
??strncmp?relay     SYMBOL "?relay", strncmp
sensors_changed     SYMBOL "sensors_changed"
??sensors_changed?relay SYMBOL "?relay", sensors_changed
sensors_find        SYMBOL "sensors_find"
??sensors_find?relay SYMBOL "?relay", sensors_find
sensors_first       SYMBOL "sensors_first"
??sensors_first?relay SYMBOL "?relay", sensors_first
sensors_next        SYMBOL "sensors_next"
??sensors_next?relay SYMBOL "?relay", sensors_next

        EXTERN ??process_alloc_event?relay
        FUNCTION ??process_alloc_event?relay,00H
        EXTERN ??process_poll?relay
        FUNCTION ??process_poll?relay,00H
        EXTERN ??process_post?relay
        FUNCTION ??process_post?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN ??strncmp?relay
        FUNCTION ??strncmp?relay,00H
        EXTERN process_alloc_event
        FUNCTION process_alloc_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN process_poll
        FUNCTION process_poll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN process_post
        FUNCTION process_post,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sensors
        EXTERN sensors_flags
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strncmp
        FUNCTION strncmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\myWork\myWork\core\lib\sensors.c
//    1 /*
//    2  * Copyright (c) 2009, Swedish Institute of Computer Science
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 /* exeperimental code, will be renamed to sensors.c when done */
//   33 
//   34 
//   35 #include <string.h>
//   36 
//   37 #include "contiki.h"
//   38 
//   39 #include "lib/sensors.h"
//   40 
//   41 const extern struct sensors_sensor *sensors[];
//   42 extern unsigned char sensors_flags[];
//   43 
//   44 #define FLAG_CHANGED    0x80
//   45 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   46 process_event_t sensors_event;
sensors_event:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   47 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 static unsigned char num_sensors;
num_sensors:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   49 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   50 PROCESS(sensors_process, "Sensors");
sensors_process:
        DATA8
        DS 8
        REQUIRE `?<Initializer for sensors_process>`
        REQUIRE __INIT_XDATA_I
//   51 
//   52 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 static int
//   54 get_sensor_index(const struct sensors_sensor *s)
get_sensor_index:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function get_sensor_index
        CODE
//   55 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   56   int i;
//   57   for(i = 0; i < num_sensors; ++i) {
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??get_sensor_index_0
??get_sensor_index_1:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??get_sensor_index_0:
        MOV     DPTR,#num_sensors
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??get_sensor_index_2
//   58     if(sensors[i] == s) {
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,#sensors & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R2
        XRL     A,R4
        JNZ     ??get_sensor_index_3
        MOV     A,R3
        XRL     A,R5
??get_sensor_index_3:
        JNZ     ??get_sensor_index_1
//   59       return i;
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??get_sensor_index_4
//   60     }
//   61   }
//   62   return i;
??get_sensor_index_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
??get_sensor_index_4:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   63 }
//   64 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   65 const struct sensors_sensor *
//   66 sensors_first(void)
sensors_first:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function sensors_first
        CODE
//   67 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   68   return sensors[0];
        MOV     DPTR,#sensors
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//   69 }
//   70 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   71 const struct sensors_sensor *
//   72 sensors_next(const struct sensors_sensor *s)
sensors_next:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function sensors_next
        CODE
//   73 {
        FUNCALL sensors_next, get_sensor_index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   74   return sensors[get_sensor_index(s) + 1];
        ; Setup parameters for call to function get_sensor_index
        LCALL   ??get_sensor_index?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(sensors + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((sensors + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//   75 }
//   76 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 void
//   78 sensors_changed(const struct sensors_sensor *s)
sensors_changed:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function sensors_changed
        CODE
//   79 {
        FUNCALL sensors_changed, get_sensor_index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensors_changed, process_poll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   80   sensors_flags[get_sensor_index(s)] |= FLAG_CHANGED;
        ; Setup parameters for call to function get_sensor_index
        LCALL   ??get_sensor_index?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,#sensors_flags & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(sensors_flags >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//   81   process_poll(&sensors_process);
        ; Setup parameters for call to function process_poll
        MOV     R2,#sensors_process & 0xff
        MOV     R3,#(sensors_process >> 8) & 0xff
        LCALL   ??process_poll?relay
//   82 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//   83 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 const struct sensors_sensor *
//   85 sensors_find(const char *prefix)
sensors_find:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function sensors_find
        CODE
//   86 {
        FUNCALL sensors_find, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sensors_find, strncmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   87   int i;
//   88   unsigned short len;
//   89 
//   90   /* Search through all processes and search for the specified process
//   91      name. */
//   92   len = strlen(prefix);
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strlen?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//   93 
//   94   for(i = 0; i < num_sensors; ++i) {
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??sensors_find_0
??sensors_find_1:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??sensors_find_0:
        MOV     DPTR,#num_sensors
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??sensors_find_2
//   95     if(strncmp(prefix, sensors[i]->type, len) == 0) {
        ; Setup parameters for call to function strncmp
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#sensors & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strncmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??sensors_find_1
//   96       return sensors[i];
        MOV     A,?V0 + 0
        MOV     B,#0x2
        MUL     AB
        XCH     A,?V0 + 0
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     A,#sensors & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??sensors_find_3
//   97     }
//   98   }
//   99   return NULL;
??sensors_find_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??sensors_find_3:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  100 }
//  101 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  102 PROCESS_THREAD(sensors_process, ev, data)
process_thread_sensors_process:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function process_thread_sensors_process
        CODE
//  103 {
        FUNCALL process_thread_sensors_process, process_alloc_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL process_thread_sensors_process, process_post
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
//  104   static int i;
//  105   static int events;
//  106 
//  107   PROCESS_BEGIN();
        MOV     R2,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for process_thread_sensors_process_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_sensors_process_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        119
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_sensors_process_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        126
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_sensors_process_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??process_thread_sensors_process_3
        CODE
//  108 
//  109   sensors_event = process_alloc_event();
??process_thread_sensors_process_0:
        ; Setup parameters for call to function process_alloc_event
        LCALL   ??process_alloc_event?relay
        MOV     A,R1
        MOV     DPTR,#sensors_event
        MOVX    @DPTR,A
//  110 
//  111   for(i = 0; sensors[i] != NULL; ++i) {
        MOV     DPTR,#??i
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??process_thread_sensors_process_4
//  112     sensors_flags[i] = 0;
??process_thread_sensors_process_5:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#sensors_flags & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(sensors_flags >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  113     sensors[i]->configure(SENSORS_HW_INIT, 0);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V0 + 1,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0 + 1
        MOV     ?V0 + 1,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V0 + 1
        MOV     R1,A
        MOV     A,#sensors & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  114   }
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
??process_thread_sensors_process_4:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#sensors & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??process_thread_sensors_process_5 & 0xFFFF
//  115   num_sensors = i;
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     DPTR,#num_sensors
        MOVX    @DPTR,A
//  116 
//  117   while(1) {
//  118 
//  119     PROCESS_WAIT_EVENT();
??process_thread_sensors_process_6:
        MOV     R2,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x77
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
??process_thread_sensors_process_1:
        MOV     A,R2
        JNZ     ??process_thread_sensors_process_7
        MOV     R1,#0x1
        LJMP    ??process_thread_sensors_process_8 & 0xFFFF
//  120 
//  121     do {
//  122       events = 0;
??process_thread_sensors_process_7:
        MOV     DPTR,#??events
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  123       for(i = 0; i < num_sensors; ++i) {
        MOV     DPTR,#??i
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
??process_thread_sensors_process_9:
        MOV     DPTR,#??i
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     DPTR,#num_sensors
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??process_thread_sensors_process_10 & 0xFFFF
//  124 	if(sensors_flags[i] & FLAG_CHANGED) {
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#sensors_flags & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(sensors_flags >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??process_thread_sensors_process_11
//  125 	  if(process_post(PROCESS_BROADCAST, sensors_event, (void *)sensors[i]) == PROCESS_ERR_OK) {
        ; Setup parameters for call to function process_post
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#sensors & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(sensors >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#sensors_event
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??process_post?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??process_thread_sensors_process_12
//  126 	    PROCESS_WAIT_EVENT_UNTIL(ev == sensors_event);
        MOV     R2,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x7e
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
??process_thread_sensors_process_2:
        MOV     A,R2
        JZ      ??process_thread_sensors_process_13
        MOV     DPTR,#sensors_event
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JZ      ??process_thread_sensors_process_12
??process_thread_sensors_process_13:
        MOV     R1,#0x1
        SJMP    ??process_thread_sensors_process_8
//  127 	  }
//  128 	  sensors_flags[i] &= ~FLAG_CHANGED;
??process_thread_sensors_process_12:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#sensors_flags & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(sensors_flags >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        MOVX    @DPTR,A
//  129 	  events++;
        MOV     DPTR,#??events
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  130 	}
//  131       }
??process_thread_sensors_process_11:
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        LJMP    ??process_thread_sensors_process_9 & 0xFFFF
//  132     } while(events);
??process_thread_sensors_process_10:
        MOV     DPTR,#??events
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??process_thread_sensors_process_7 & 0xFFFF
        LJMP    ??process_thread_sensors_process_6 & 0xFFFF
//  133   }
//  134 
//  135   PROCESS_END();
??process_thread_sensors_process_3:
        MOV     R2,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     R1,#0x3
??process_thread_sensors_process_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  136 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??i:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
??events:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sensors_process>`:
        DATA16
        DW 0H
        DW ??process_thread_sensors_process?relay
        DB 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_sensor_index?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    get_sensor_index

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensors_first?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensors_first

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensors_next?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensors_next

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensors_changed?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensors_changed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sensors_find?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sensors_find

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??process_thread_sensors_process?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    process_thread_sensors_process

        END
//  137 /*---------------------------------------------------------------------------*/
// 
// 927 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   8 bytes in segment XDATA_I
//   8 bytes in segment XDATA_ID
//   6 bytes in segment XDATA_Z
// 
// 971 bytes of CODE  memory
//  14 bytes of XDATA memory
//
//Errors: none
//Warnings: none
