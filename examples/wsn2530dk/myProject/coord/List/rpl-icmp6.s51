///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:41 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\net\rpl\rpl-icmp6.c         /
//    Command line       =  D:\myWork\myWork\core\net\rpl\rpl-icmp6.c -D      /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\rpl-icmp6.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `rpl-icmp6`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_IOR
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I

        FUNCTION ??dao_ack_input?relay,0203H
        PUBLIC ??dao_ack_output?relay
        FUNCTION ??dao_ack_output?relay,0203H
        FUNCTION ??dao_input?relay,0203H
        PUBLIC ??dao_output?relay
        FUNCTION ??dao_output?relay,0203H
        PUBLIC ??dao_output_target?relay
        FUNCTION ??dao_output_target?relay,0203H
        FUNCTION ??dio_input?relay,0203H
        PUBLIC ??dio_output?relay
        FUNCTION ??dio_output?relay,0203H
        FUNCTION ??dis_input?relay,0203H
        PUBLIC ??dis_output?relay
        FUNCTION ??dis_output?relay,0203H
        FUNCTION ??get16?relay,0203H
        FUNCTION ??get32?relay,0203H
        FUNCTION ??get_global_addr?relay,0203H
        FUNCTION ??set16?relay,0203H
        FUNCTION ??set32?relay,0203H
        PUBLIC ??uip_rpl_input?relay
        FUNCTION ??uip_rpl_input?relay,0203H
        PUBWEAK __Constant_258
        FUNCTION dao_ack_input,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC dao_ack_output
        FUNCTION dao_ack_output,021203H
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION dao_input,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 64, STACK
        PUBLIC dao_output
        FUNCTION dao_output,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC dao_output_target
        FUNCTION dao_output_target,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION dio_input,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 123, STACK
        PUBLIC dio_output
        FUNCTION dio_output,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        FUNCTION dis_input,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC dis_output
        FUNCTION dis_output,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION get16,0203H
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION get32,0203H
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION get_global_addr,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION set16,0203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION set32,0203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC uip_rpl_input
        FUNCTION uip_rpl_input,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
memcmp              SYMBOL "memcmp"
??memcmp?relay      SYMBOL "?relay", memcmp
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
memset              SYMBOL "memset"
??memset?relay      SYMBOL "?relay", memset
packetbuf_addr      SYMBOL "packetbuf_addr"
??packetbuf_addr?relay SYMBOL "?relay", packetbuf_addr
rpl_add_route       SYMBOL "rpl_add_route"
??rpl_add_route?relay SYMBOL "?relay", rpl_add_route
rpl_find_parent     SYMBOL "rpl_find_parent"
??rpl_find_parent?relay SYMBOL "?relay", rpl_find_parent
rpl_get_instance    SYMBOL "rpl_get_instance"
??rpl_get_instance?relay SYMBOL "?relay", rpl_get_instance
rpl_get_parent_ipaddr SYMBOL "rpl_get_parent_ipaddr"
??rpl_get_parent_ipaddr?relay SYMBOL "?relay", rpl_get_parent_ipaddr
rpl_process_dio     SYMBOL "rpl_process_dio"
??rpl_process_dio?relay SYMBOL "?relay", rpl_process_dio
rpl_reset_dio_timer SYMBOL "rpl_reset_dio_timer"
??rpl_reset_dio_timer?relay SYMBOL "?relay", rpl_reset_dio_timer
stimer_set          SYMBOL "stimer_set"
??stimer_set?relay  SYMBOL "?relay", stimer_set
uip_ds6_nbr_add     SYMBOL "uip_ds6_nbr_add"
??uip_ds6_nbr_add?relay SYMBOL "?relay", uip_ds6_nbr_add
uip_ds6_nbr_lookup  SYMBOL "uip_ds6_nbr_lookup"
??uip_ds6_nbr_lookup?relay SYMBOL "?relay", uip_ds6_nbr_lookup
uip_ds6_route_lookup SYMBOL "uip_ds6_route_lookup"
??uip_ds6_route_lookup?relay SYMBOL "?relay", uip_ds6_route_lookup
uip_ds6_route_nexthop SYMBOL "uip_ds6_route_nexthop"
??uip_ds6_route_nexthop?relay SYMBOL "?relay", uip_ds6_route_nexthop
uip_icmp6_send      SYMBOL "uip_icmp6_send"
??uip_icmp6_send?relay SYMBOL "?relay", uip_icmp6_send
dao_ack_output      SYMBOL "dao_ack_output"
??dao_ack_output?relay SYMBOL "?relay", dao_ack_output
dao_output          SYMBOL "dao_output"
??dao_output?relay  SYMBOL "?relay", dao_output
dao_output_target   SYMBOL "dao_output_target"
??dao_output_target?relay SYMBOL "?relay", dao_output_target
dio_output          SYMBOL "dio_output"
??dio_output?relay  SYMBOL "?relay", dio_output
dis_output          SYMBOL "dis_output"
??dis_output?relay  SYMBOL "?relay", dis_output
uip_rpl_input       SYMBOL "uip_rpl_input"
??uip_rpl_input?relay SYMBOL "?relay", uip_rpl_input

        EXTERN ??memcmp?relay
        FUNCTION ??memcmp?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??packetbuf_addr?relay
        FUNCTION ??packetbuf_addr?relay,00H
        EXTERN ??rpl_add_route?relay
        FUNCTION ??rpl_add_route?relay,00H
        EXTERN ??rpl_find_parent?relay
        FUNCTION ??rpl_find_parent?relay,00H
        EXTERN ??rpl_get_instance?relay
        FUNCTION ??rpl_get_instance?relay,00H
        EXTERN ??rpl_get_parent_ipaddr?relay
        FUNCTION ??rpl_get_parent_ipaddr?relay,00H
        EXTERN ??rpl_process_dio?relay
        FUNCTION ??rpl_process_dio?relay,00H
        EXTERN ??rpl_reset_dio_timer?relay
        FUNCTION ??rpl_reset_dio_timer?relay,00H
        EXTERN ??stimer_set?relay
        FUNCTION ??stimer_set?relay,00H
        EXTERN ??uip_ds6_nbr_add?relay
        FUNCTION ??uip_ds6_nbr_add?relay,00H
        EXTERN ??uip_ds6_nbr_lookup?relay
        FUNCTION ??uip_ds6_nbr_lookup?relay,00H
        EXTERN ??uip_ds6_route_lookup?relay
        FUNCTION ??uip_ds6_route_lookup?relay,00H
        EXTERN ??uip_ds6_route_nexthop?relay
        FUNCTION ??uip_ds6_route_nexthop?relay,00H
        EXTERN ??uip_icmp6_send?relay
        FUNCTION ??uip_icmp6_send?relay,00H
        EXTERN instance_table
        EXTERN memcmp
        FUNCTION memcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN packetbuf_addr
        FUNCTION packetbuf_addr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_add_route
        FUNCTION rpl_add_route,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_find_parent
        FUNCTION rpl_find_parent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_get_instance
        FUNCTION rpl_get_instance,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_get_parent_ipaddr
        FUNCTION rpl_get_parent_ipaddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_mrhof
        EXTERN rpl_process_dio
        FUNCTION rpl_process_dio,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rpl_reset_dio_timer
        FUNCTION rpl_reset_dio_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN stimer_set
        FUNCTION stimer_set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 123, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_aligned_buf
        EXTERN uip_ds6_if
        EXTERN uip_ds6_nbr_add
        FUNCTION uip_ds6_nbr_add,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_nbr_lookup
        FUNCTION uip_ds6_nbr_lookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_route_lookup
        FUNCTION uip_ds6_route_lookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ds6_route_nexthop
        FUNCTION uip_ds6_route_nexthop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_ext_len
        EXTERN uip_icmp6_send
        FUNCTION uip_icmp6_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uip_len

// D:\myWork\myWork\core\net\rpl\rpl-icmp6.c
//    1 /**
//    2  * \addtogroup uip6
//    3  * @{
//    4  */
//    5 /*
//    6  * Copyright (c) 2010, Swedish Institute of Computer Science.
//    7  * All rights reserved.
//    8  *
//    9  * Redistribution and use in source and binary forms, with or without
//   10  * modification, are permitted provided that the following conditions
//   11  * are met:
//   12  * 1. Redistributions of source code must retain the above copyright
//   13  *    notice, this list of conditions and the following disclaimer.
//   14  * 2. Redistributions in binary form must reproduce the above copyright
//   15  *    notice, this list of conditions and the following disclaimer in the
//   16  *    documentation and/or other materials provided with the distribution.
//   17  * 3. Neither the name of the Institute nor the names of its contributors
//   18  *    may be used to endorse or promote products derived from this software
//   19  *    without specific prior written permission.
//   20  *
//   21  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   22  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   23  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   24  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   25  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   26  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   27  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   28  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   29  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   30  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   31  * SUCH DAMAGE.
//   32  *
//   33  * This file is part of the Contiki operating system.
//   34  *
//   35  */
//   36 /**
//   37  * \file
//   38  *         ICMP6 I/O for RPL control messages.
//   39  *
//   40  * \author Joakim Eriksson <joakime@sics.se>, Nicolas Tsiftes <nvt@sics.se>
//   41  * Contributors: Niclas Finne <nfi@sics.se>, Joel Hoglund <joel@sics.se>,
//   42  *               Mathieu Pouillot <m.pouillot@watteco.com>
//   43  */
//   44 
//   45 #include "net/tcpip.h"
//   46 #include "net/uip.h"
//   47 #include "net/uip-ds6.h"
//   48 #include "net/uip-nd6.h"
//   49 #include "net/uip-icmp6.h"
//   50 #include "net/rpl/rpl-private.h"
//   51 #include "net/packetbuf.h"
//   52 
//   53 #include <limits.h>
//   54 #include <string.h>
//   55 
//   56 #define DEBUG DEBUG_NONE
//   57 
//   58 #include "net/uip-debug.h"
//   59 
//   60 #if UIP_CONF_IPV6
//   61 /*---------------------------------------------------------------------------*/
//   62 #define RPL_DIO_GROUNDED                 0x80
//   63 #define RPL_DIO_MOP_SHIFT                3
//   64 #define RPL_DIO_MOP_MASK                 0x3c
//   65 #define RPL_DIO_PREFERENCE_MASK          0x07
//   66 
//   67 #define UIP_IP_BUF       ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])
//   68 #define UIP_ICMP_BUF     ((struct uip_icmp_hdr *)&uip_buf[uip_l2_l3_hdr_len])
//   69 #define UIP_ICMP_PAYLOAD ((unsigned char *)&uip_buf[uip_l2_l3_icmp_hdr_len])
//   70 /*---------------------------------------------------------------------------*/
//   71 static void dis_input(void);
//   72 static void dio_input(void);
//   73 static void dao_input(void);
//   74 static void dao_ack_input(void);
//   75 
//   76 /* some debug callbacks useful when debugging RPL networks */
//   77 #ifdef RPL_DEBUG_DIO_INPUT
//   78 void RPL_DEBUG_DIO_INPUT(uip_ipaddr_t *, rpl_dio_t *);
//   79 #endif
//   80 
//   81 #ifdef RPL_DEBUG_DAO_OUTPUT
//   82 void RPL_DEBUG_DAO_OUTPUT(rpl_parent_t *);
//   83 #endif
//   84 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   85 static uint8_t dao_sequence = RPL_LOLLIPOP_INIT;
dao_sequence:
        DATA8
        DS 1
        REQUIRE `?<Initializer for dao_sequence>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_258:
        DS 4
        REQUIRE `?<Initializer for __Constant_258>`
        REQUIRE __INIT_XDATA_I
//   86 
//   87 /* some debug callbacks useful when debugging RPL networks */
//   88 #ifdef RPL_DEBUG_DIO_INPUT
//   89 void RPL_DEBUG_DIO_INPUT(uip_ipaddr_t *, rpl_dio_t *);
//   90 #endif
//   91 
//   92 #ifdef RPL_DEBUG_DAO_OUTPUT
//   93 void RPL_DEBUG_DAO_OUTPUT(rpl_parent_t *);
//   94 #endif
//   95 
//   96 extern rpl_of_t RPL_OF;
//   97 
//   98 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 static int
//  100 get_global_addr(uip_ipaddr_t *addr)
get_global_addr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function get_global_addr
        CODE
//  101 {
        FUNCALL get_global_addr, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  102   int i;
//  103   int state;
//  104 
//  105   for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ??get_global_addr_0
??get_global_addr_1:
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
??get_global_addr_0:
        CLR     C
        MOV     A,R4
        SUBB    A,#0x3
        MOV     A,R5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??get_global_addr_2 & 0xFFFF
//  106     state = uip_ds6_if.addr_list[i].state;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1c
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x1c
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#(uip_ds6_if + 35) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_ds6_if + 35) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
//  107     if(uip_ds6_if.addr_list[i].isused &&
//  108        (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1c
        MUL     AB
        XCH     A,R0
        MOV     ?V0 + 0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     B,#0x1c
        MOV     A,R1
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R1,A
        MOV     A,#(uip_ds6_if + 18) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_ds6_if + 18) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??get_global_addr_1
        MOV     A,R6
        ORL     A,R7
        JZ      ??get_global_addr_3
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??get_global_addr_4
        MOV     A,#0x0
        XRL     A,R7
??get_global_addr_4:
        JNZ     ??get_global_addr_1
//  109       if(!uip_is_addr_link_local(&uip_ds6_if.addr_list[i].ipaddr)) {
??get_global_addr_3:
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1c
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x1c
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#(uip_ds6_if + 19) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_ds6_if + 19) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??get_global_addr_5
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x1c
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x1c
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#(uip_ds6_if + 20) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((uip_ds6_if + 20) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x80
        JNZ     $+5
        LJMP    ??get_global_addr_1 & 0xFFFF
//  110         memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));
??get_global_addr_5:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R4
        MOV     B,#0x1c
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x1c
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,#(uip_ds6_if + 19) & 0xff
        ADD     A,R4
        MOV     R4,A
        MOV     A,#((uip_ds6_if + 19) >> 8) & 0xff
        ADDC    A,R5
        MOV     R5,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  111         return 1;
        MOV     R2,#0x1
        MOV     R3,#0x0
        SJMP    ??get_global_addr_6
//  112       }
//  113     }
//  114   }
//  115   return 0;
??get_global_addr_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??get_global_addr_6:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  116 }
//  117 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 static uint32_t
//  119 get32(uint8_t *buffer, int pos)
get32:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function get32
        CODE
//  120 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  121   return (uint32_t)buffer[pos] << 24 | (uint32_t)buffer[pos + 1] << 16 |
//  122          (uint32_t)buffer[pos + 2] << 8 | buffer[pos + 3];
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  123 }
//  124 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 static void
//  126 set32(uint8_t *buffer, int pos, uint32_t value)
set32:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function set32
        CODE
//  127 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  128   buffer[pos++] = value >> 24;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  129   buffer[pos++] = (value >> 16) & 0xff;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  130   buffer[pos++] = (value >> 8) & 0xff;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        CLR     A
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 0
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  131   buffer[pos++] = value & 0xff;
        MOV     A,?V0 + 4
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  132 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  133 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 static uint16_t
//  135 get16(uint8_t *buffer, int pos)
get16:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function get16
        CODE
//  136 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  137   return (uint16_t)buffer[pos] << 8 | buffer[pos + 1];
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R0
        ORL     A,R2
        MOV     R2,A
        MOV     A,R1
        ORL     A,R3
        MOV     R3,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock3
//  138 }
//  139 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  140 static void
//  141 set16(uint8_t *buffer, int pos, uint16_t value)
set16:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function set16
        CODE
//  142 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  143   buffer[pos++] = value >> 8;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        CLR     A
        MOV     A,R1
        MOV     R0,A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  144   buffer[pos++] = value & 0xff;
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  145 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  146 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 static void
//  148 dis_input(void)
dis_input:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function dis_input
        CODE
//  149 {
        FUNCALL dis_input, dio_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dis_input, rpl_reset_dio_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  150   rpl_instance_t *instance;
//  151   rpl_instance_t *end;
//  152 
//  153   /* DAG Information Solicitation */
//  154   PRINTF("RPL: Received a DIS from ");
//  155   PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
//  156   PRINTF("\n");
//  157 
//  158   for(instance = &instance_table[0], end = instance + RPL_MAX_INSTANCES; instance < end; ++instance) {
        MOV     R6,#instance_table & 0xff
        MOV     R7,#(instance_table >> 8) & 0xff
        MOV     A,R6
        ADD     A,#-0x52
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        SJMP    ??dis_input_0
//  159     if(instance->used == 1) {
//  160 #if RPL_LEAF_ONLY
//  161       if(!uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
//  162 	PRINTF("RPL: LEAF ONLY Multicast DIS will NOT reset DIO timer\n");
//  163 #else /* !RPL_LEAF_ONLY */
//  164       if(uip_is_addr_mcast(&UIP_IP_BUF->destipaddr)) {
//  165         PRINTF("RPL: Multicast DIS => reset DIO timer\n");
//  166         rpl_reset_dio_timer(instance);
//  167       } else {
//  168 #endif /* !RPL_LEAF_ONLY */
//  169         PRINTF("RPL: Unicast DIS, reply to sender\n");
//  170         dio_output(instance, &UIP_IP_BUF->srcipaddr);
??dis_input_1:
        ; Setup parameters for call to function dio_output
        MOV     R4,#(uip_aligned_buf + 8) & 0xff
        MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??dio_output?relay
//  171       }
??dis_input_2:
        MOV     A,R6
        ADD     A,#-0x52
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??dis_input_0:
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??dis_input_3
        MOV     A,R6
        ADD     A,#0x7c
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??dis_input_2
        MOV     DPTR,#uip_aligned_buf + 24
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??dis_input_1
        ; Setup parameters for call to function rpl_reset_dio_timer
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??rpl_reset_dio_timer?relay
        SJMP    ??dis_input_2
//  172     }
//  173   }
//  174 }
??dis_input_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  175 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void
//  177 dis_output(uip_ipaddr_t *addr)
dis_output:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function dis_output
        CODE
//  178 {
        FUNCALL dis_output, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  179   unsigned char *buffer;
//  180   uip_ipaddr_t tmpaddr;
//  181 
//  182   /* DAG Information Solicitation  - 2 bytes reserved      */
//  183   /*      0                   1                   2        */
//  184   /*      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3  */
//  185   /*     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//  186   /*     |     Flags     |   Reserved    |   Option(s)...  */
//  187   /*     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
//  188 
//  189   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
//  190   buffer[0] = buffer[1] = 0;
        MOV     R4,#0x0
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  191 
//  192   if(addr == NULL) {
        MOV     A,R2
        ORL     A,R3
        JNZ     ??dis_output_0
//  193     uip_create_linklocal_rplnodes_mcast(&tmpaddr);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1a
        MOVX    @DPTR,A
//  194     addr = &tmpaddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
//  195   }
//  196 
//  197   PRINTF("RPL: Sending a DIS to ");
//  198   PRINT6ADDR(addr);
//  199   PRINTF("\n");
//  200 
//  201   uip_icmp6_send(addr, ICMP6_RPL, RPL_CODE_DIS, 2);
??dis_output_0:
        ; Setup parameters for call to function uip_icmp6_send
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
//  202 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  203 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  204 static void
//  205 dio_input(void)
dio_input:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function dio_input
        CODE
//  206 {
        FUNCALL dio_input, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, uip_ds6_nbr_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, packetbuf_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 120, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, uip_ds6_nbr_add
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 120, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 120, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, stimer_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 123, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 123, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 121, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 121, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, get16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_input, rpl_process_dio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 119, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 119, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 103
        MOV     A,#-0x67
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
//  207   unsigned char *buffer;
//  208   uint8_t buffer_length;
//  209   rpl_dio_t dio;
//  210   uint8_t subopt_type;
//  211   int i;
//  212   int len;
//  213   uip_ipaddr_t from;
//  214   uip_ds6_nbr_t *nbr;
//  215 
//  216   memset(&dio, 0, sizeof(dio));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x57
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 121)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
//  217 
//  218   /* Set default values in case the DIO configuration option is missing. */
//  219   dio.dag_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
//  220   dio.dag_intmin = RPL_DIO_INTERVAL_MIN;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xc
        MOVX    @DPTR,A
//  221   dio.dag_redund = RPL_DIO_REDUNDANCY;
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  222   dio.dag_min_hoprankinc = RPL_MIN_HOPRANKINC;
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  223   dio.dag_max_rankinc = RPL_MAX_RANKINC;
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  224   dio.ocp = RPL_OF.ocp;
        MOV     DPTR,#rpl_mrhof + 12
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  225   dio.default_lifetime = RPL_DEFAULT_LIFETIME;
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  226   dio.lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  227 
//  228   uip_ipaddr_copy(&from, &UIP_IP_BUF->srcipaddr);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 121)
        MOV     R4,#(uip_aligned_buf + 8) & 0xff
        MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
        MOV     A,#0x59
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  229 
//  230   /* DAG Information Object */
//  231   PRINTF("RPL: Received a DIO from ");
//  232   PRINT6ADDR(&from);
//  233   PRINTF("\n");
//  234 
//  235   if((nbr = uip_ds6_nbr_lookup(&from)) == NULL) {
        ; Setup parameters for call to function uip_ds6_nbr_lookup
        LCALL   ??uip_ds6_nbr_lookup?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R2
        ORL     A,R3
        JNZ     ??dio_input_0
//  236     if((nbr = uip_ds6_nbr_add(&from, (uip_lladdr_t *)
//  237                               packetbuf_addr(PACKETBUF_ADDR_SENDER),
//  238                               0, NBR_REACHABLE)) != NULL) {
        ; Setup parameters for call to function uip_ds6_nbr_add
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 120)
        MOV     R1,#0x0
        MOV     A,R1
        MOV     R6,A
        MOV     R1,A
        ; Setup parameters for call to function packetbuf_addr
        MOV     R1,#0x18
        LCALL   ??packetbuf_addr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        MOV     R1,A
        MOV     R6,A
        MOV     A,#0x58
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_ds6_nbr_add?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??dio_input_1 & 0xFFFF
//  239       /* set reachable timer */
//  240       stimer_set(&nbr->reachable, UIP_ND6_REACHABLE_TIME / 1000);
        ; Setup parameters for call to function stimer_set
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 123)
        MOV     A,R0
        ADD     A,#0x10
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??stimer_set?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
//  241       PRINTF("RPL: Neighbor added to neighbor cache ");
//  242       PRINT6ADDR(&from);
//  243       PRINTF(", ");
//  244       PRINTLLADDR((uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
//  245       PRINTF("\n");
//  246     } else {
//  247       PRINTF("RPL: Out of Memory, dropping DIO from ");
//  248       PRINT6ADDR(&from);
//  249       PRINTF(", ");
//  250       PRINTLLADDR((uip_lladdr_t *)packetbuf_addr(PACKETBUF_ADDR_SENDER));
//  251       PRINTF("\n");
//  252       return;
//  253     }
//  254   } else {
//  255     PRINTF("RPL: Neighbor already in neighbor cache\n");
//  256   }
//  257 
//  258   buffer_length = uip_len - uip_l3_icmp_hdr_len;
??dio_input_0:
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x2c
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 4,A
//  259 
//  260   /* Process the DIO base option. */
//  261   i = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  262   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 3,A
//  263 
//  264   dio.instance_id = buffer[i++];
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  265   dio.version = buffer[i++];
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  266   dio.rank = get16(buffer, i);
        ; Setup parameters for call to function get16
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  267   i += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  268 
//  269   PRINTF("RPL: Incoming DIO (id, ver, rank) = (%u,%u,%u)\n",
//  270          (unsigned)dio.instance_id,
//  271          (unsigned)dio.version, 
//  272          (unsigned)dio.rank);
//  273 
//  274   dio.grounded = buffer[i] & RPL_DIO_GROUNDED;
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x80
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  275   dio.mop = (buffer[i]& RPL_DIO_MOP_MASK) >> RPL_DIO_MOP_SHIFT;
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  276   dio.preference = buffer[i++] & RPL_DIO_PREFERENCE_MASK;
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  277 
//  278   dio.dtsn = buffer[i++];
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  279   /* two reserved bytes */
//  280   i += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  281 
//  282   memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 121)
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
//  283   i += sizeof(dio.dag_id);
        MOV     A,R6
        ADD     A,#0x10
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        SJMP    ??dio_input_2
//  284 
//  285   PRINTF("RPL: Incoming DIO (dag_id, pref) = (");
//  286   PRINT6ADDR(&dio.dag_id);
//  287   PRINTF(", %u)\n", dio.preference);
//  288 
//  289   /* Check if there are any DIO suboptions. */
//  290   for(; i < buffer_length; i += len) {
//  291     subopt_type = buffer[i];
//  292     if(subopt_type == RPL_OPTION_PAD1) {
//  293       len = 1;
//  294     } else {
//  295       /* Suboption with a two-byte header + payload */
//  296       len = 2 + buffer[i + 1];
//  297     }
//  298 
//  299     if(len + i > buffer_length) {
//  300       PRINTF("RPL: Invalid DIO packet\n");
//  301       RPL_STAT(rpl_stats.malformed_msgs++);
//  302       return;
//  303     }
//  304 
//  305     PRINTF("RPL: DIO option %u, length: %u\n", subopt_type, len - 2);
//  306 
//  307     switch(subopt_type) {
//  308     case RPL_OPTION_DAG_METRIC_CONTAINER:
//  309       if(len < 6) {
//  310         PRINTF("RPL: Invalid DAG MC, len = %d\n", len);
//  311 	RPL_STAT(rpl_stats.malformed_msgs++);
//  312         return;
//  313       }
//  314       dio.mc.type = buffer[i + 2];
//  315       dio.mc.flags = buffer[i + 3] << 1;
//  316       dio.mc.flags |= buffer[i + 4] >> 7;
//  317       dio.mc.aggr = (buffer[i + 4] >> 4) & 0x3;
//  318       dio.mc.prec = buffer[i + 4] & 0xf;
//  319       dio.mc.length = buffer[i + 5];
//  320 
//  321       if(dio.mc.type == RPL_DAG_MC_NONE) {
//  322         /* No metric container: do nothing */
//  323       } else if(dio.mc.type == RPL_DAG_MC_ETX) {
//  324         dio.mc.obj.etx = get16(buffer, i + 6);
//  325 
//  326         PRINTF("RPL: DAG MC: type %u, flags %u, aggr %u, prec %u, length %u, ETX %u\n",
//  327 	       (unsigned)dio.mc.type,  
//  328 	       (unsigned)dio.mc.flags, 
//  329 	       (unsigned)dio.mc.aggr, 
//  330 	       (unsigned)dio.mc.prec, 
//  331 	       (unsigned)dio.mc.length, 
//  332 	       (unsigned)dio.mc.obj.etx);
//  333       } else if(dio.mc.type == RPL_DAG_MC_ENERGY) {
//  334         dio.mc.obj.energy.flags = buffer[i + 6];
//  335         dio.mc.obj.energy.energy_est = buffer[i + 7];
//  336       } else {
//  337        PRINTF("RPL: Unhandled DAG MC type: %u\n", (unsigned)dio.mc.type);
//  338        return;
//  339       }
//  340       break;
//  341     case RPL_OPTION_ROUTE_INFO:
//  342       if(len < 9) {
//  343         PRINTF("RPL: Invalid destination prefix option, len = %d\n", len);
//  344 	RPL_STAT(rpl_stats.malformed_msgs++);
//  345         return;
//  346       }
//  347 
//  348       /* The flags field includes the preference value. */
//  349       dio.destination_prefix.length = buffer[i + 2];
//  350       dio.destination_prefix.flags = buffer[i + 3];
//  351       dio.destination_prefix.lifetime = get32(buffer, i + 4);
//  352 
//  353       if(((dio.destination_prefix.length + 7) / 8) + 8 <= len &&
//  354          dio.destination_prefix.length <= 128) {
//  355         PRINTF("RPL: Copying destination prefix\n");
//  356         memcpy(&dio.destination_prefix.prefix, &buffer[i + 8],
//  357                (dio.destination_prefix.length + 7) / 8);
//  358       } else {
//  359         PRINTF("RPL: Invalid route info option, len = %d\n", len);
//  360 	RPL_STAT(rpl_stats.malformed_msgs++);
//  361 	return;
//  362       }
//  363 
//  364       break;
//  365     case RPL_OPTION_DAG_CONF:
//  366       if(len != 16) {
//  367         PRINTF("RPL: Invalid DAG configuration option, len = %d\n", len);
//  368 	RPL_STAT(rpl_stats.malformed_msgs++);
//  369         return;
//  370       }
//  371 
//  372       /* Path control field not yet implemented - at i + 2 */
//  373       dio.dag_intdoubl = buffer[i + 3];
//  374       dio.dag_intmin = buffer[i + 4];
//  375       dio.dag_redund = buffer[i + 5];
//  376       dio.dag_max_rankinc = get16(buffer, i + 6);
//  377       dio.dag_min_hoprankinc = get16(buffer, i + 8);
//  378       dio.ocp = get16(buffer, i + 10);
//  379       /* buffer + 12 is reserved */
//  380       dio.default_lifetime = buffer[i + 13];
//  381       dio.lifetime_unit = get16(buffer, i + 14);
//  382       PRINTF("RPL: DAG conf:dbl=%d, min=%d red=%d maxinc=%d mininc=%d ocp=%d d_l=%u l_u=%u\n",
//  383              dio.dag_intdoubl, dio.dag_intmin, dio.dag_redund,
//  384              dio.dag_max_rankinc, dio.dag_min_hoprankinc, dio.ocp,
//  385              dio.default_lifetime, dio.lifetime_unit);
//  386       break;
//  387     case RPL_OPTION_PREFIX_INFO:
//  388       if(len != 32) {
//  389         PRINTF("RPL: DAG prefix info not ok, len != 32\n");
//  390 	RPL_STAT(rpl_stats.malformed_msgs++);
//  391         return;
//  392       }
//  393       dio.prefix_info.length = buffer[i + 2];
??dio_input_3:
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  394       dio.prefix_info.flags = buffer[i + 3];
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4f
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  395       /* valid lifetime is ingnored for now - at i + 4 */
//  396       /* preferred lifetime stored in lifetime */
//  397       dio.prefix_info.lifetime = get32(buffer, i + 8);
        ; Setup parameters for call to function get32
        MOV     A,R6
        ADD     A,#0x8
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get32?relay
        MOV     A,#0x4a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  398       /* 32-bit reserved at i + 12 */
//  399       PRINTF("RPL: Copying prefix information\n");
//  400       memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 6,#0x10
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 121)
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x10
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
//  401       break;
??dio_input_4:
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
??dio_input_2:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,#0x0
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??dio_input_5 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R2
        JNZ     ??dio_input_6
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        SJMP    ??dio_input_7
??dio_input_6:
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??dio_input_7:
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,#0x0
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R7
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R0
        MOV     A,?V0 + 7
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??dio_input_1 & 0xFFFF
        MOV     A,R2
        ADD     A,#-0x2
        JZ      ??dio_input_8
        DEC     A
        JNZ     $+5
        LJMP    ??dio_input_9 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??dio_input_10 & 0xFFFF
        ADD     A,#-0x4
        JNZ     $+5
        LJMP    ??dio_input_11 & 0xFFFF
        LJMP    ??dio_input_4 & 0xFFFF
??dio_input_8:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x6
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??dio_input_1 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     A,#0x51
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x52
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x53
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??dio_input_12
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??dio_input_13
        ; Setup parameters for call to function get16
        MOV     A,R6
        ADD     A,#0x6
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
??dio_input_12:
        LJMP    ??dio_input_4 & 0xFFFF
??dio_input_13:
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??dio_input_14
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x55
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x56
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??dio_input_12
??dio_input_14:
        LJMP    ??dio_input_1 & 0xFFFF
??dio_input_9:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x9
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??dio_input_1 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x39
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function get32
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get32?relay
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     A,?V0 + 6
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??dio_input_15
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x7f
        JNC     ??dio_input_15
        ; Setup parameters for call to function memcpy
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 121)
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x8
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 119)
        LJMP    ??dio_input_4 & 0xFFFF
??dio_input_15:
        LJMP    ??dio_input_1 & 0xFFFF
??dio_input_10:
        MOV     A,#0x10
        XRL     A,?V0 + 0
        JNZ     ??dio_input_16
        MOV     A,#0x0
        XRL     A,?V0 + 1
??dio_input_16:
        JZ      $+5
        LJMP    ??dio_input_1 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function get16
        MOV     A,R6
        ADD     A,#0x6
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function get16
        MOV     A,R6
        ADD     A,#0x8
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function get16
        MOV     A,R6
        ADD     A,#0xa
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function get16
        MOV     A,R6
        ADD     A,#0xe
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??get16?relay
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        LJMP    ??dio_input_4 & 0xFFFF
??dio_input_11:
        MOV     A,#0x20
        XRL     A,?V0 + 0
        JNZ     ??dio_input_17
        MOV     A,#0x0
        XRL     A,?V0 + 1
??dio_input_17:
        JNZ     $+5
        LJMP    ??dio_input_3 & 0xFFFF
        SJMP    ??dio_input_1
//  402     default:
//  403       PRINTF("RPL: Unsupported suboption type in DIO: %u\n",
//  404 	(unsigned)subopt_type);
//  405     }
//  406   }
//  407 
//  408 #ifdef RPL_DEBUG_DIO_INPUT
//  409   RPL_DEBUG_DIO_INPUT(&from, &dio);
//  410 #endif
//  411 
//  412   rpl_process_dio(&from, &dio);
??dio_input_5:
        ; Setup parameters for call to function rpl_process_dio
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x57
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??rpl_process_dio?relay
//  413 }
??dio_input_1:
        MOV     A,#0x67
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  414 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void
//  416 dio_output(rpl_instance_t *instance, uip_ipaddr_t *uc_addr)
dio_output:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function dio_output
        CODE
//  417 {
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, set32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dio_output, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
//  418   unsigned char *buffer;
//  419   int pos;
//  420   rpl_dag_t *dag = instance->current_dag;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  421 #if !RPL_LEAF_ONLY
//  422   uip_ipaddr_t addr;
//  423 #endif /* !RPL_LEAF_ONLY */
//  424 
//  425 #if RPL_LEAF_ONLY
//  426   /* In leaf mode, we send DIO message only as unicasts in response to 
//  427      unicast DIS messages. */
//  428   if(uc_addr == NULL) {
//  429     PRINTF("RPL: LEAF ONLY have multicast addr: skip dio_output\n");
//  430     return;
//  431   }
//  432 #endif /* RPL_LEAF_ONLY */
//  433 
//  434   /* DAG Information Object */
//  435   pos = 0;
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//  436 
//  437   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
//  438   buffer[pos++] = instance->instance_id;
        MOV     A,?V0 + 0
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  439   buffer[pos++] = dag->version;
        MOV     A,?V0 + 2
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  440 
//  441 #if RPL_LEAF_ONLY
//  442   PRINTF("RPL: LEAF ONLY DIO rank set to INFINITE_RANK\n");
//  443   set16(buffer, pos, INFINITE_RANK);
//  444 #else /* RPL_LEAF_ONLY */
//  445   set16(buffer, pos, dag->rank);
        ; Setup parameters for call to function set16
        MOV     A,?V0 + 2
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  446 #endif /* RPL_LEAF_ONLY */
//  447   pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  448 
//  449   buffer[pos] = 0;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  450   if(dag->grounded) {
        MOV     A,?V0 + 2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??dio_output_0
//  451     buffer[pos] |= RPL_DIO_GROUNDED;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//  452   }
//  453 
//  454   buffer[pos] |= instance->mop << RPL_DIO_MOP_SHIFT;
??dio_output_0:
        MOV     A,?V0 + 0
        ADD     A,#0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R0,A
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  455   buffer[pos] |= dag->preference & RPL_DIO_PREFERENCE_MASK;
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R0,A
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  456   pos++;
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  457 
//  458   buffer[pos++] = instance->dtsn_out;
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  459 
//  460   /* always request new DAO to refresh route */
//  461   RPL_LOLLIPOP_INCREMENT(instance->dtsn_out);
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??dio_output_1
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??dio_output_2
??dio_output_1:
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,#0x7d
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  462 
//  463   /* reserved 2 bytes */
//  464   buffer[pos++] = 0; /* flags */
??dio_output_2:
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  465   buffer[pos++] = 0; /* reserved */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  466 
//  467   memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 8,#0x10
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  468   pos += 16;
        MOV     A,?V0 + 6
        ADD     A,#0x10
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  469 
//  470 #if !RPL_LEAF_ONLY
//  471   if(instance->mc.type != RPL_DAG_MC_NONE) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??dio_output_3 & 0xFFFF
//  472     instance->of->update_metric_container(instance);
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xa
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  473 
//  474     buffer[pos++] = RPL_OPTION_DAG_METRIC_CONTAINER;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  475     buffer[pos++] = 6;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x6
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  476     buffer[pos++] = instance->mc.type;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  477     buffer[pos++] = instance->mc.flags >> 1;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RRC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  478     buffer[pos] = (instance->mc.flags & 1) << 7;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        RRC     A
        RRC     A
        ANL     A,#0x80
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  479     buffer[pos++] |= (instance->mc.aggr << 4) | instance->mc.prec;
        MOV     R0,?V0 + 6
        MOV     R1,?V0 + 7
        MOV     A,R0
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        ORL     A,R2
        MOV     R2,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
//  480     if(instance->mc.type == RPL_DAG_MC_ETX) {
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      $+5
        LJMP    ??dio_output_4 & 0xFFFF
//  481       buffer[pos++] = 2;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  482       set16(buffer, pos, instance->mc.obj.etx);
        ; Setup parameters for call to function set16
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  483       pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  484     } else if(instance->mc.type == RPL_DAG_MC_ENERGY) {
//  485       buffer[pos++] = 2;
//  486       buffer[pos++] = instance->mc.obj.energy.flags;
//  487       buffer[pos++] = instance->mc.obj.energy.energy_est;
//  488     } else {
//  489       PRINTF("RPL: Unable to send DIO because of unhandled DAG MC type %u\n",
//  490 	(unsigned)instance->mc.type);
//  491       return;
//  492     }
//  493   }
//  494 #endif /* !RPL_LEAF_ONLY */
//  495 
//  496   /* Always add a DAG configuration option. */
//  497   buffer[pos++] = RPL_OPTION_DAG_CONF;
??dio_output_3:
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  498   buffer[pos++] = 14;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0xe
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  499   buffer[pos++] = 0; /* No Auth, PCS = 0 */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  500   buffer[pos++] = instance->dio_intdoubl;
        MOV     A,?V0 + 0
        ADD     A,#0x7f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  501   buffer[pos++] = instance->dio_intmin;
        MOV     A,?V0 + 0
        ADD     A,#-0x80
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  502   buffer[pos++] = instance->dio_redundancy;
        MOV     A,?V0 + 0
        ADD     A,#-0x7f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  503   set16(buffer, pos, instance->max_rankinc);
        ; Setup parameters for call to function set16
        MOV     A,?V0 + 0
        ADD     A,#-0x7a
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  504   pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  505   set16(buffer, pos, instance->min_hoprankinc);
        ; Setup parameters for call to function set16
        MOV     A,?V0 + 0
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  506   pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  507   /* OCP is in the DAG_CONF option */
//  508   set16(buffer, pos, instance->of->ocp);
        ; Setup parameters for call to function set16
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  509   pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  510   buffer[pos++] = 0; /* reserved */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  511   buffer[pos++] = instance->default_lifetime;
        MOV     A,?V0 + 0
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  512   set16(buffer, pos, instance->lifetime_unit);
        ; Setup parameters for call to function set16
        MOV     A,?V0 + 0
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set16?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  513   pos += 2;
        MOV     A,?V0 + 6
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  514 
//  515   /* Check if we have a prefix to send also. */
//  516   if(dag->prefix_info.length > 0) {
        MOV     A,?V0 + 2
        ADD     A,#0x35
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x1
        JNC     $+5
        LJMP    ??dio_output_5 & 0xFFFF
//  517     buffer[pos++] = RPL_OPTION_PREFIX_INFO;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x8
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  518     buffer[pos++] = 30; /* always 30 bytes + 2 long */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x1e
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  519     buffer[pos++] = dag->prefix_info.length;
        MOV     A,?V0 + 2
        ADD     A,#0x35
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  520     buffer[pos++] = dag->prefix_info.flags;
        MOV     A,?V0 + 2
        ADD     A,#0x36
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  521     set32(buffer, pos, dag->prefix_info.lifetime);
        ; Setup parameters for call to function set32
        MOV     A,?V0 + 2
        ADD     A,#0x31
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set32?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  522     pos += 4;
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  523     set32(buffer, pos, dag->prefix_info.lifetime);
        ; Setup parameters for call to function set32
        MOV     A,?V0 + 2
        ADD     A,#0x31
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??set32?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  524     pos += 4;
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  525     memset(&buffer[pos], 0, 4);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  526     pos += 4;
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  527     memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,?V0 + 2
        ADD     A,#0x21
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  528     pos += 16;
        MOV     A,?V0 + 6
        ADD     A,#0x10
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  529     PRINTF("RPL: Sending prefix info in DIO for ");
//  530     PRINT6ADDR(&dag->prefix_info.prefix);
//  531     PRINTF("\n");
//  532   } else {
//  533     PRINTF("RPL: No prefix to announce (len %d)\n",
//  534            dag->prefix_info.length);
//  535   }
//  536 
//  537 #if RPL_LEAF_ONLY
//  538 #if (DEBUG) & DEBUG_PRINT
//  539   if(uc_addr == NULL) {
//  540     PRINTF("RPL: LEAF ONLY sending unicast-DIO from multicast-DIO\n");
//  541   }
//  542 #endif /* DEBUG_PRINT */
//  543   PRINTF("RPL: Sending unicast-DIO with rank %u to ",
//  544       (unsigned)dag->rank);
//  545   PRINT6ADDR(uc_addr);
//  546   PRINTF("\n");
//  547   uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
//  548 #else /* RPL_LEAF_ONLY */
//  549   /* Unicast requests get unicast replies! */
//  550   if(uc_addr == NULL) {
??dio_output_5:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??dio_output_6 & 0xFFFF
//  551     PRINTF("RPL: Sending a multicast-DIO with rank %u\n",
//  552         (unsigned)instance->current_dag->rank);
//  553     uip_create_linklocal_rplnodes_mcast(&addr);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1a
        MOVX    @DPTR,A
//  554     uip_icmp6_send(&addr, ICMP6_RPL, RPL_CODE_DIO, pos);
        ; Setup parameters for call to function uip_icmp6_send
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        LJMP    ??dio_output_7 & 0xFFFF
//  555   } else {
??dio_output_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??dio_output_8
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        LJMP    ??dio_output_3 & 0xFFFF
??dio_output_8:
        SJMP    ??dio_output_7
//  556     PRINTF("RPL: Sending unicast-DIO with rank %u to ",
//  557         (unsigned)instance->current_dag->rank);
//  558     PRINT6ADDR(uc_addr);
//  559     PRINTF("\n");
//  560     uip_icmp6_send(uc_addr, ICMP6_RPL, RPL_CODE_DIO, pos);
??dio_output_6:
        ; Setup parameters for call to function uip_icmp6_send
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  561   }
//  562 #endif /* RPL_LEAF_ONLY */
//  563 }
??dio_output_7:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  564 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  565 static void
//  566 dao_input(void)
dao_input:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function dao_input
        CODE
//  567 {
        FUNCALL dao_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, rpl_get_instance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, uip_ds6_route_lookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, uip_ds6_route_nexthop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, uip_ds6_route_nexthop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, rpl_find_parent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, rpl_add_route
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_input, dao_ack_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 36
        MOV     A,#-0x24
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  568   uip_ipaddr_t dao_sender_addr;
//  569   rpl_dag_t *dag;
//  570   rpl_instance_t *instance;
//  571   unsigned char *buffer;
//  572   uint16_t sequence;
//  573   uint8_t instance_id;
//  574   uint8_t lifetime;
//  575   uint8_t prefixlen;
//  576   uint8_t flags;
//  577   uint8_t subopt_type;
//  578   /*
//  579   uint8_t pathcontrol;
//  580   uint8_t pathsequence;
//  581   */
//  582   uip_ipaddr_t prefix;
//  583   uip_ds6_route_t *rep;
//  584   uint8_t buffer_length;
//  585   int pos;
//  586   int len;
//  587   int i;
//  588   int learned_from;
//  589   rpl_parent_t *p;
//  590 
//  591   prefixlen = 0;
        MOV     ?V0 + 6,#0x0
//  592 
//  593   uip_ipaddr_copy(&dao_sender_addr, &UIP_IP_BUF->srcipaddr);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     R4,#(uip_aligned_buf + 8) & 0xff
        MOV     R5,#((uip_aligned_buf + 8) >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  594 
//  595   /* Destination Advertisement Object */
//  596   PRINTF("RPL: Received a DAO from ");
//  597   PRINT6ADDR(&dao_sender_addr);
//  598   PRINTF("\n");
//  599 
//  600   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 5,A
//  601   buffer_length = uip_len - uip_l3_icmp_hdr_len;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x2c
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#uip_len
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  602 
//  603   pos = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  604   instance_id = buffer[pos++];
        MOV     A,?V0 + 4
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  605 
//  606   instance = rpl_get_instance(instance_id);
        ; Setup parameters for call to function rpl_get_instance
        LCALL   ??rpl_get_instance?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 14,?V0 + 0
        MOV     ?V0 + 15,?V0 + 1
//  607   if(instance == NULL) {
        MOV     A,?V0 + 14
        ORL     A,?V0 + 15
        JNZ     $+5
        LJMP    ??dao_input_0 & 0xFFFF
//  608     PRINTF("RPL: Ignoring a DAO for an unknown RPL instance(%u)\n",
//  609            instance_id);
//  610     return;
//  611   }
//  612 
//  613   lifetime = instance->default_lifetime;
        MOV     A,?V0 + 14
        ADD     A,#-0x7e
        MOV     DPL,A
        MOV     A,?V0 + 15
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
//  614 
//  615   flags = buffer[pos++];
        MOV     A,?V0 + 4
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  616   /* reserved */
//  617   pos++;
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  618   sequence = buffer[pos++];
        MOV     A,?V0 + 4
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,R6
        ADD     A,#0x1
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  619 
//  620   dag = instance->current_dag;
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
//  621   /* Is the DAGID present? */
//  622   if(flags & RPL_DAO_D_FLAG) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??dao_input_1
//  623     if(memcmp(&dag->dag_id, &buffer[pos], sizeof(dag->dag_id))) {
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 2,#0x10
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,?V0 + 4
        ADD     A,R6
        MOV     R4,A
        MOV     A,?V0 + 5
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??memcmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      $+5
        LJMP    ??dao_input_0 & 0xFFFF
//  624       PRINTF("RPL: Ignoring a DAO for a DAG different from ours\n");
//  625       return;
//  626     }
//  627     pos += 16;
        MOV     A,R6
        ADD     A,#0x10
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  628   } else {
//  629     /* Perhaps, there are verification to do but ... */
//  630   }
//  631 
//  632   /* Check if there are any RPL options present. */
//  633   for(i = pos; i < buffer_length; i += len) {
??dao_input_1:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        SJMP    ??dao_input_2
//  634     subopt_type = buffer[i];
//  635     if(subopt_type == RPL_OPTION_PAD1) {
//  636       len = 1;
//  637     } else {
//  638       /* The option consists of a two-byte header and a payload. */
//  639       len = 2 + buffer[i + 1];
//  640     }
//  641 
//  642     switch(subopt_type) {
//  643     case RPL_OPTION_TARGET:
//  644       /* Handle the target option. */
//  645       prefixlen = buffer[i + 3];
//  646       memset(&prefix, 0, sizeof(prefix));
//  647       memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);
//  648       break;
//  649     case RPL_OPTION_TRANSIT:
//  650       /* The path sequence and control are ignored. */
//  651       /*      pathcontrol = buffer[i + 3];
//  652               pathsequence = buffer[i + 4];*/
//  653       lifetime = buffer[i + 5];
??dao_input_3:
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
//  654       /* The parent address is also ignored. */
//  655       break;
??dao_input_4:
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     ?V0 + 3,A
??dao_input_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??dao_input_5 & 0xFFFF
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R2
        JNZ     ??dao_input_6
        MOV     R6,#0x1
        MOV     R7,#0x0
        SJMP    ??dao_input_7
??dao_input_6:
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
??dao_input_7:
        MOV     A,R2
        ADD     A,#-0x5
        JZ      ??dao_input_8
        DEC     A
        JZ      ??dao_input_3
        SJMP    ??dao_input_4
??dao_input_8:
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        ; Setup parameters for call to function memset
        MOV     ?V0 + 10,#0x10
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 10
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 10,R0
        MOV     ?V0 + 11,R1
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        LJMP    ??dao_input_4 & 0xFFFF
//  656     }
//  657   }
//  658 
//  659   PRINTF("RPL: DAO lifetime: %u, prefix length: %u prefix: ",
//  660           (unsigned)lifetime, (unsigned)prefixlen);
//  661   PRINT6ADDR(&prefix);
//  662   PRINTF("\n");
//  663 
//  664   rep = uip_ds6_route_lookup(&prefix);
??dao_input_5:
        ; Setup parameters for call to function uip_ds6_route_lookup
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??uip_ds6_route_lookup?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  665 
//  666   if(lifetime == RPL_ZERO_LIFETIME) {
        MOV     A,?V0 + 8
        JZ      $+5
        LJMP    ??dao_input_9 & 0xFFFF
//  667     PRINTF("RPL: No-Path DAO received\n");
//  668     /* No-Path DAO received; invoke the route purging routine. */
//  669     if(rep != NULL &&
//  670        rep->state.nopath_received == 0 &&
//  671        rep->length == prefixlen &&
//  672        uip_ds6_route_nexthop(rep) != NULL &&
//  673        uip_ipaddr_cmp(uip_ds6_route_nexthop(rep), &dao_sender_addr)) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??dao_input_0 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??dao_input_0 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,#0x1c
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 6
        JNZ     ??dao_input_10
        ; Setup parameters for call to function uip_ds6_route_nexthop
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??uip_ds6_route_nexthop?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??dao_input_10
        ; Setup parameters for call to function memcmp
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R7,A
        MOV     A,DPL
        MOV     R6,DPL
        MOV     A,DPH
        MOV     R7,DPH
        ; Setup parameters for call to function uip_ds6_route_nexthop
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??uip_ds6_route_nexthop?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??memcmp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??dao_input_10
//  674       PRINTF("RPL: Setting expiration timer for prefix ");
//  675       PRINT6ADDR(&prefix);
//  676       PRINTF("\n");
//  677       rep->state.nopath_received = 1;
        MOV     A,?V0 + 2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
//  678       rep->state.lifetime = DAO_EXPIRATION_TIMEOUT;
        MOV     R4,#0x3c
        MOV     R5,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  679     }
//  680     return;
??dao_input_10:
        LJMP    ??dao_input_0 & 0xFFFF
//  681   }
//  682 
//  683   learned_from = uip_is_addr_mcast(&dao_sender_addr) ?
//  684                  RPL_ROUTE_FROM_MULTICAST_DAO : RPL_ROUTE_FROM_UNICAST_DAO;
??dao_input_9:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??dao_input_11
        MOV     R6,#0x2
        MOV     R7,#0x0
        SJMP    ??dao_input_12
??dao_input_11:
        MOV     R6,#0x1
        MOV     R7,#0x0
//  685 
//  686   PRINTF("RPL: DAO from %s\n",
//  687          learned_from == RPL_ROUTE_FROM_UNICAST_DAO? "unicast": "multicast");
//  688   if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
??dao_input_12:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??dao_input_13
        MOV     A,#0x0
        XRL     A,R7
??dao_input_13:
        JZ      $+5
        LJMP    ??dao_input_14 & 0xFFFF
//  689     /* Check whether this is a DAO forwarding loop. */
//  690     p = rpl_find_parent(dag, &dao_sender_addr);
        ; Setup parameters for call to function rpl_find_parent
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??rpl_find_parent?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
//  691     /* check if this is a new DAO registration with an "illegal" rank */
//  692     /* if we already route to this node it is likely */
//  693     if(p != NULL &&
//  694        DAG_RANK(p->rank, instance) < DAG_RANK(dag->rank, instance)) {
        MOV     A,R4
        ORL     A,R5
        JZ      ??dao_input_15
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 14
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 15
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     A,?V0 + 12
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 14
        ADD     A,#-0x78
        MOV     DPL,A
        MOV     A,?V0 + 15
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,?V0 + 2
        MOV     A,?V0 + 5
        SUBB    A,?V0 + 3
        JNC     ??dao_input_15
//  695       PRINTF("RPL: Loop detected when receiving a unicast DAO from a node with a lower rank! (%u < %u)\n",
//  696           DAG_RANK(p->rank, instance), DAG_RANK(dag->rank, instance));
//  697       p->rank = INFINITE_RANK;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  698       p->updated = 1;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  699       return;
        LJMP    ??dao_input_0 & 0xFFFF
//  700     }
//  701 
//  702     /* If we get the DAO from our parent, we also have a loop. */
//  703     if(p != NULL && p == dag->preferred_parent) {
??dao_input_15:
        MOV     A,R4
        ORL     A,R5
        JZ      ??dao_input_14
        MOV     A,?V0 + 12
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        XRL     A,R0
        JNZ     ??dao_input_16
        MOV     A,R5
        XRL     A,R1
??dao_input_16:
        JNZ     ??dao_input_14
//  704       PRINTF("RPL: Loop detected when receiving a unicast DAO from our parent\n");
//  705       p->rank = INFINITE_RANK;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  706       p->updated = 1;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  707       return;
        LJMP    ??dao_input_0 & 0xFFFF
//  708     }
//  709   }
//  710 
//  711   PRINTF("RPL: adding DAO route\n");
//  712   rep = rpl_add_route(dag, &prefix, prefixlen, &dao_sender_addr);
??dao_input_14:
        ; Setup parameters for call to function rpl_add_route
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??rpl_add_route?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  713   if(rep == NULL) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??dao_input_0 & 0xFFFF
//  714     RPL_STAT(rpl_stats.mem_overflows++);
//  715     PRINTF("RPL: Could not add a route after receiving a DAO\n");
//  716     return;
//  717   }
//  718 
//  719   rep->state.lifetime = RPL_LIFETIME(instance, lifetime);
        MOV     A,?V0 + 14
        ADD     A,#-0x76
        MOV     DPL,A
        MOV     A,?V0 + 15
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,?V0 + 2
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  720   rep->state.learned_from = learned_from;
        MOV     A,R6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0 + 2
        ADD     A,#0x1a
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  721 
//  722   if(learned_from == RPL_ROUTE_FROM_UNICAST_DAO) {
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??dao_input_17
        MOV     A,#0x0
        XRL     A,R7
??dao_input_17:
        JZ      $+5
        LJMP    ??dao_input_0 & 0xFFFF
//  723     if(dag->preferred_parent != NULL &&
//  724        rpl_get_parent_ipaddr(dag->preferred_parent) != NULL) {
        MOV     A,?V0 + 12
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dao_input_18
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     A,?V0 + 12
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??dao_input_18
//  725       PRINTF("RPL: Forwarding DAO to parent ");
//  726       PRINT6ADDR(rpl_get_parent_ipaddr(dag->preferred_parent));
//  727       PRINTF("\n");
//  728       uip_icmp6_send(rpl_get_parent_ipaddr(dag->preferred_parent),
//  729                      ICMP6_RPL, RPL_CODE_DAO, buffer_length);
        ; Setup parameters for call to function uip_icmp6_send
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 2,#0x2
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     A,?V0 + 12
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 60)
//  730     }
//  731     if(flags & RPL_DAO_K_FLAG) {
??dao_input_18:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??dao_input_0
//  732       dao_ack_output(instance, &dao_sender_addr, sequence);
        ; Setup parameters for call to function dao_ack_output
        MOV     R1,?V0 + 0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??dao_ack_output?relay
//  733     }
//  734   }
//  735 }
??dao_input_0:
        MOV     A,#0x24
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  736 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  737 void
//  738 dao_output(rpl_parent_t *parent, uint8_t lifetime)
dao_output:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function dao_output
        CODE
//  739 {
        FUNCALL dao_output, get_global_addr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_output, dao_output_target
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
//  740   /* Destination Advertisement Object */
//  741   uip_ipaddr_t prefix;
//  742 
//  743   if(get_global_addr(&prefix) == 0) {
        ; Setup parameters for call to function get_global_addr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??get_global_addr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??dao_output_0
//  744     PRINTF("RPL: No global address set for this node - suppressing DAO\n");
//  745     return;
//  746   }
//  747 
//  748   /* Sending a DAO with own prefix as target */
//  749   dao_output_target(parent, &prefix, lifetime);
        ; Setup parameters for call to function dao_output_target
        MOV     R1,?V0 + 0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??dao_output_target?relay
//  750 }
??dao_output_0:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  751 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  752 void
//  753 dao_output_target(rpl_parent_t *parent, uip_ipaddr_t *prefix, uint8_t lifetime)
dao_output_target:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function dao_output_target
        CODE
//  754 {
        FUNCALL dao_output_target, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_output_target, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_output_target, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_output_target, rpl_get_parent_ipaddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dao_output_target, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 4,R1
//  755   rpl_dag_t *dag;
//  756   rpl_instance_t *instance;
//  757   unsigned char *buffer;
//  758   uint8_t prefixlen;
//  759   int pos;
//  760 
//  761   /* Destination Advertisement Object */
//  762 
//  763   if(parent == NULL) {
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??dao_output_target_0 & 0xFFFF
//  764     PRINTF("RPL dao_output_target error parent NULL\n");
//  765     return;
//  766   }
//  767 
//  768   dag = parent->dag;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  769   if(dag == NULL) {
        MOV     A,R4
        ORL     A,R5
        JNZ     $+5
        LJMP    ??dao_output_target_0 & 0xFFFF
//  770     PRINTF("RPL dao_output_target error dag NULL\n");
//  771     return;
//  772   }
//  773 
//  774   instance = dag->instance;
        MOV     A,R4
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  775 
//  776   if(instance == NULL) {
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??dao_output_target_0 & 0xFFFF
//  777     PRINTF("RPL dao_output_target error instance NULL\n");
//  778     return;
//  779   }
//  780   if(prefix == NULL) {
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     $+5
        LJMP    ??dao_output_target_0 & 0xFFFF
//  781     PRINTF("RPL dao_output_target error prefix NULL\n");
//  782     return;
//  783   }
//  784 #ifdef RPL_DEBUG_DAO_OUTPUT
//  785   RPL_DEBUG_DAO_OUTPUT(parent);
//  786 #endif
//  787 
//  788   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R2
        MOV     R6,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R3
        MOV     R7,A
//  789 
//  790   RPL_LOLLIPOP_INCREMENT(dao_sequence);
        MOV     DPTR,#dao_sequence
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??dao_output_target_1
        MOV     DPTR,#dao_sequence
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??dao_output_target_2
??dao_output_target_1:
        MOV     DPTR,#dao_sequence
        MOVX    A,@DPTR
        ADD     A,#0x1
        ANL     A,#0x7f
        MOV     DPTR,#dao_sequence
        MOVX    @DPTR,A
//  791   pos = 0;
??dao_output_target_2:
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//  792 
//  793   buffer[pos++] = instance->instance_id;
        MOV     A,R0
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  794   buffer[pos] = 0;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  795 #if RPL_DAO_SPECIFY_DAG
//  796   buffer[pos] |= RPL_DAO_D_FLAG;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
//  797 #endif /* RPL_DAO_SPECIFY_DAG */
//  798 #if RPL_CONF_DAO_ACK
//  799   buffer[pos] |= RPL_DAO_K_FLAG;
//  800 #endif /* RPL_CONF_DAO_ACK */
//  801   ++pos;
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  802   buffer[pos++] = 0; /* reserved */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  803   buffer[pos++] = dao_sequence;
        MOV     DPTR,#dao_sequence
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  804 #if RPL_DAO_SPECIFY_DAG
//  805   memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 8,#0x10
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  806   pos+=sizeof(dag->dag_id);
        MOV     A,?V0 + 6
        ADD     A,#0x10
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  807 #endif /* RPL_DAO_SPECIFY_DAG */
//  808 
//  809   /* create target subopt */
//  810   prefixlen = sizeof(*prefix) * CHAR_BIT;
        MOV     ?V0 + 8,#-0x80
//  811   buffer[pos++] = RPL_OPTION_TARGET;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x5
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  812   buffer[pos++] = 2 + ((prefixlen + 7) / CHAR_BIT);
        MOV     ?V0 + 10,?V0 + 8
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 10
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  813   buffer[pos++] = 0; /* reserved */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  814   buffer[pos++] = prefixlen;
        MOV     A,?V0 + 8
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  815   memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 10,?V0 + 8
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 10
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 10,R0
        MOV     ?V0 + 11,R1
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  816   pos += ((prefixlen + 7) / CHAR_BIT);
        MOV     ?V0 + 9,#0x0
        MOV     A,?V0 + 8
        ADD     A,#0x7
        MOV     R0,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     A,?V0 + 6
        ADD     A,?V0 + 2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 3
        MOV     ?V0 + 7,A
//  817 
//  818   /* Create a transit information sub-option. */
//  819   buffer[pos++] = RPL_OPTION_TRANSIT;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x6
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  820   buffer[pos++] = 4;
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  821   buffer[pos++] = 0; /* flags - ignored */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  822   buffer[pos++] = 0; /* path control - ignored */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  823   buffer[pos++] = 0; /* path seq - ignored */
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  824   buffer[pos++] = lifetime;
        MOV     A,?V0 + 4
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     DPH,A
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  825 
//  826   PRINTF("RPL: Sending DAO with prefix ");
//  827   PRINT6ADDR(prefix);
//  828   PRINTF(" to ");
//  829   PRINT6ADDR(rpl_get_parent_ipaddr(parent));
//  830   PRINTF("\n");
//  831 
//  832   if(rpl_get_parent_ipaddr(parent) != NULL) {
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??dao_output_target_0
//  833     uip_icmp6_send(rpl_get_parent_ipaddr(parent), ICMP6_RPL, RPL_CODE_DAO, pos);
        ; Setup parameters for call to function uip_icmp6_send
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 2,#0x2
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function rpl_get_parent_ipaddr
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??rpl_get_parent_ipaddr?relay
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  834   }
//  835 }
??dao_output_target_0:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  836 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  837 static void
//  838 dao_ack_input(void)
dao_ack_input:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function dao_ack_input
        CODE
//  839 {
        ; Saved register size: 0
        ; Auto size: 0
//  840 #if DEBUG
//  841   unsigned char *buffer;
//  842   uint8_t buffer_length;
//  843   uint8_t instance_id;
//  844   uint8_t sequence;
//  845   uint8_t status;
//  846 
//  847   buffer = UIP_ICMP_PAYLOAD;
//  848   buffer_length = uip_len - uip_l3_icmp_hdr_len;
//  849 
//  850   instance_id = buffer[0];
//  851   sequence = buffer[2];
//  852   status = buffer[3];
//  853 
//  854   PRINTF("RPL: Received a DAO ACK with sequence number %d and status %d from ",
//  855     sequence, status);
//  856   PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
//  857   PRINTF("\n");
//  858 #endif /* DEBUG */
//  859 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock12
//  860 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  861 void
//  862 dao_ack_output(rpl_instance_t *instance, uip_ipaddr_t *dest, uint8_t sequence)
dao_ack_output:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function dao_ack_output
        CODE
//  863 {
        FUNCALL dao_ack_output, uip_icmp6_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     ?V0 + 0,R1
//  864   unsigned char *buffer;
//  865 
//  866   PRINTF("RPL: Sending a DAO ACK with sequence number %d to ", sequence);
//  867   PRINT6ADDR(dest);
//  868   PRINTF("\n");
//  869 
//  870   buffer = UIP_ICMP_PAYLOAD;
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#(uip_aligned_buf + 44) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((uip_aligned_buf + 44) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
//  871 
//  872   buffer[0] = instance->instance_id;
        MOV     A,R6
        ADD     A,#0x7b
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  873   buffer[1] = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  874   buffer[2] = sequence;
        MOV     A,?V0 + 0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  875   buffer[3] = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  876 
//  877   uip_icmp6_send(dest, ICMP6_RPL, RPL_CODE_DAO_ACK, 4);
        ; Setup parameters for call to function uip_icmp6_send
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 2,#0x3
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x65
        MOV     R5,#0x0
        LCALL   ??uip_icmp6_send?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  878 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  879 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 void
//  881 uip_rpl_input(void)
uip_rpl_input:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function uip_rpl_input
        CODE
//  882 {
        FUNCALL uip_rpl_input, dio_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uip_rpl_input, dis_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uip_rpl_input, dao_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uip_rpl_input, dao_ack_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  883   PRINTF("Received an RPL control message\n");
//  884   switch(UIP_ICMP_BUF->icode) {
        MOV     DPTR,#uip_ext_len
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#uip_aligned_buf & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(uip_aligned_buf >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??uip_rpl_input_0
        DEC     A
        JZ      ??uip_rpl_input_1
        DEC     A
        JZ      ??uip_rpl_input_2
        DEC     A
        JZ      ??uip_rpl_input_3
        SJMP    ??uip_rpl_input_4
//  885   case RPL_CODE_DIO:
//  886     dio_input();
??uip_rpl_input_1:
        ; Setup parameters for call to function dio_input
        LCALL   ??dio_input?relay
//  887     break;
        SJMP    ??uip_rpl_input_4
//  888   case RPL_CODE_DIS:
//  889     dis_input();
??uip_rpl_input_0:
        ; Setup parameters for call to function dis_input
        LCALL   ??dis_input?relay
//  890     break;
        SJMP    ??uip_rpl_input_4
//  891   case RPL_CODE_DAO:
//  892     dao_input();
??uip_rpl_input_2:
        ; Setup parameters for call to function dao_input
        LCALL   ??dao_input?relay
//  893     break;
        SJMP    ??uip_rpl_input_4
//  894   case RPL_CODE_DAO_ACK:
//  895     dao_ack_input();
??uip_rpl_input_3:
        ; Setup parameters for call to function dao_ack_input
        LCALL   ??dao_ack_input?relay
//  896     break;
//  897   default:
//  898     PRINTF("RPL: received an unknown ICMP6 code (%u)\n", UIP_ICMP_BUF->icode);
//  899     break;
//  900   }
//  901 
//  902   uip_len = 0;
??uip_rpl_input_4:
        MOV     DPTR,#uip_len
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  903 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock14

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for dao_sequence>`:
        DATA8
        DB 240

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_258>`:
        DATA32
        DD 600

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_global_addr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    get_global_addr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get32?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    get32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??set32?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    set32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get16?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    get16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??set16?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    set16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dis_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dis_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dis_output?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dis_output

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dio_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dio_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dio_output?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dio_output

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dao_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dao_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dao_output?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dao_output

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dao_output_target?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dao_output_target

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dao_ack_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dao_ack_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dao_ack_output?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dao_ack_output

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uip_rpl_input?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uip_rpl_input

        END
//  904 #endif /* UIP_CONF_IPV6 */
// 
// 6 820 bytes in segment BANKED_CODE
//    90 bytes in segment BANK_RELAYS
//     5 bytes in segment XDATA_I
//     5 bytes in segment XDATA_ID
// 
// 6 911 bytes of CODE  memory (+ 4 bytes shared)
//     1 byte  of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
