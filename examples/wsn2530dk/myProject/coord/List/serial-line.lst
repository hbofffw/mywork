###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:43 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\dev\serial-line.c            #
#    Command line       =  D:\myWork\myWork\core\dev\serial-line.c -D         #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\serial-line.lst                             #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\serial-line.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\dev\serial-line.c
      1          /*
      2           * Copyright (c) 2005, Swedish Institute of Computer Science
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the Contiki operating system.
     30           *
     31           */
     32          #include "dev/serial-line.h"
     33          #include <string.h> /* for memcpy() */
     34          
     35          #include "lib/ringbuf.h"
     36          
     37          #ifdef SERIAL_LINE_CONF_BUFSIZE
     38          #define BUFSIZE SERIAL_LINE_CONF_BUFSIZE
     39          #else /* SERIAL_LINE_CONF_BUFSIZE */
     40          #define BUFSIZE 128
     41          #endif /* SERIAL_LINE_CONF_BUFSIZE */
     42          
     43          #if (BUFSIZE & (BUFSIZE - 1)) != 0
     44          #pragma error SERIAL_LINE_CONF_BUFSIZE must be a power of two (i.e., 1, 2, 4, 8, 16, 32, 64, ...).
     45          #pragma error Change SERIAL_LINE_CONF_BUFSIZE in contiki-conf.h.
     46          #endif
     47          
     48          #define IGNORE_CHAR(c) (c == 0x0d)
     49          #define END 0x0a
     50          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          static struct ringbuf rxbuf;
   \                     rxbuf:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          static uint8_t rxbuf_data[BUFSIZE];
   \                     rxbuf_data:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
     53          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     54          PROCESS(serial_line_process, "Serial driver");
   \                     serial_line_process:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for serial_line_process>`
   \   000008                REQUIRE __INIT_XDATA_I
     55          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          process_event_t serial_line_event_message;
   \                     serial_line_event_message:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     57          
     58          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          int
     60          serial_line_input_byte(unsigned char c)
   \                     serial_line_input_byte:
     61          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     62            static uint8_t overflow = 0; /* Buffer overflow: ignore until END */
     63            
     64            if(IGNORE_CHAR(c)) {
   \   000007   740D         MOV     A,#0xd
   \   000009   6E           XRL     A,R6
   \   00000A   7006         JNZ     ??serial_line_input_byte_0
     65              return 0;
   \   00000C   7A00         MOV     R2,#0x0
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   804A         SJMP    ??serial_line_input_byte_1
     66            }
     67          
     68            if(!overflow) {
   \                     ??serial_line_input_byte_0:
   \   000012   90....       MOV     DPTR,#??overflow
   \   000015   E0           MOVX    A,@DPTR
   \   000016   701B         JNZ     ??serial_line_input_byte_2
     69              /* Add character */
     70              if(ringbuf_put(&rxbuf, c) == 0) {
   \   000018                ; Setup parameters for call to function ringbuf_put
   \   000018   EE           MOV     A,R6
   \   000019   F9           MOV     R1,A
   \   00001A   7A..         MOV     R2,#rxbuf & 0xff
   \   00001C   7B..         MOV     R3,#(rxbuf >> 8) & 0xff
   \   00001E   12....       LCALL   ??ringbuf_put?relay
   \   000021   8A..         MOV     ?V0 + 0,R2
   \   000023   8B..         MOV     ?V0 + 1,R3
   \   000025   E5..         MOV     A,?V0 + 0
   \   000027   45..         ORL     A,?V0 + 1
   \   000029   7026         JNZ     ??serial_line_input_byte_3
     71                /* Buffer overflow: ignore the rest of the line */
     72                overflow = 1;
   \   00002B   90....       MOV     DPTR,#??overflow
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   801E         SJMP    ??serial_line_input_byte_3
     73              }
     74            } else {
     75              /* Buffer overflowed:
     76               * Only (try to) add terminator characters, otherwise skip */
     77              if(c == END && ringbuf_put(&rxbuf, c) != 0) {
   \                     ??serial_line_input_byte_2:
   \   000033   740A         MOV     A,#0xa
   \   000035   6E           XRL     A,R6
   \   000036   7019         JNZ     ??serial_line_input_byte_3
   \   000038                ; Setup parameters for call to function ringbuf_put
   \   000038   EE           MOV     A,R6
   \   000039   F9           MOV     R1,A
   \   00003A   7A..         MOV     R2,#rxbuf & 0xff
   \   00003C   7B..         MOV     R3,#(rxbuf >> 8) & 0xff
   \   00003E   12....       LCALL   ??ringbuf_put?relay
   \   000041   8A..         MOV     ?V0 + 0,R2
   \   000043   8B..         MOV     ?V0 + 1,R3
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   45..         ORL     A,?V0 + 1
   \   000049   6006         JZ      ??serial_line_input_byte_3
     78                overflow = 0;
   \   00004B   90....       MOV     DPTR,#??overflow
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
     79              }
     80            }
     81          
     82            /* Wake up consumer process */
     83            process_poll(&serial_line_process);
   \                     ??serial_line_input_byte_3:
   \   000051                ; Setup parameters for call to function process_poll
   \   000051   7A..         MOV     R2,#serial_line_process & 0xff
   \   000053   7B..         MOV     R3,#(serial_line_process >> 8) & 0xff
   \   000055   12....       LCALL   ??process_poll?relay
     84            return 1;
   \   000058   7A01         MOV     R2,#0x1
   \   00005A   7B00         MOV     R3,#0x0
   \                     ??serial_line_input_byte_1:
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
     85          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??overflow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          PROCESS_THREAD(serial_line_process, ev, data)
   \                     process_thread_serial_line_process:
     88          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
     89            static char buf[BUFSIZE];
     90            static int ptr;
     91            static int c;
     92          
     93            PROCESS_BEGIN();
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 3,A
   \   000018   78..         MOV     R0,#?V0 + 2
   \   00001A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for process_thread_serial_line_pro_0`:
   \   00001D   0000         DW        0
   \   00001F   0300         DW        3
   \   000021   0000         DW        0
   \   000023   ....         DW        ??process_thread_serial_line_process_0
   \   000025   6800         DW        104
   \   000027   ....         DW        ??process_thread_serial_line_process_1
   \   000029   7A00         DW        122
   \   00002B   ....         DW        ??process_thread_serial_line_process_2
   \   00002D   ....         DW        ??process_thread_serial_line_process_3
     94          
     95            serial_line_event_message = process_alloc_event();
   \                     ??process_thread_serial_line_process_0:
   \   00002F                ; Setup parameters for call to function process_alloc_event
   \   00002F   12....       LCALL   ??process_alloc_event?relay
   \   000032   E9           MOV     A,R1
   \   000033   90....       MOV     DPTR,#serial_line_event_message
   \   000036   F0           MOVX    @DPTR,A
     96            ptr = 0;
   \   000037   90....       MOV     DPTR,#??ptr
   \   00003A   7400         MOV     A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   803C         SJMP    ??process_thread_serial_line_process_4
     97          
     98            while(1) {
     99              /* Fill application buffer until newline or empty */
    100              c = ringbuf_get(&rxbuf);
    101              
    102              if(c == -1) {
    103                /* Buffer empty, wait for poll */
    104                PROCESS_YIELD();
    105              } else {
    106                if(c != END) {
    107                  if(ptr < BUFSIZE-1) {
   \                     ??process_thread_serial_line_process_5:
   \   000043   90....       MOV     DPTR,#??ptr
   \   000046   C3           CLR     C
   \   000047   E0           MOVX    A,@DPTR
   \   000048   947F         SUBB    A,#0x7f
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   9400         SUBB    A,#0x0
   \   00004E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000050   65D0         XRL     A,PSW
   \   000052   33           RLC     A
   \   000053   502A         JNC     ??process_thread_serial_line_process_4
    108                    buf[ptr++] = (uint8_t)c;
   \   000055   90....       MOV     DPTR,#??c
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   C0E0         PUSH    A
   \   000060   90....       MOV     DPTR,#??ptr
   \   000063   E0           MOVX    A,@DPTR
   \   000064   24..         ADD     A,#??buf & 0xff
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   34..         ADDC    A,#(??buf >> 8) & 0xff
   \   00006B   F9           MOV     R1,A
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
   \   000073   90....       MOV     DPTR,#??ptr
   \   000076   E0           MOVX    A,@DPTR
   \   000077   2401         ADD     A,#0x1
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F0           MOVX    @DPTR,A
    109                  } else {
    110                    /* Ignore character (wait for EOL) */
    111                  }
    112                } else {
   \                     ??process_thread_serial_line_process_4:
   \   00007F                ; Setup parameters for call to function ringbuf_get
   \   00007F   7A..         MOV     R2,#rxbuf & 0xff
   \   000081   7B..         MOV     R3,#(rxbuf >> 8) & 0xff
   \   000083   12....       LCALL   ??ringbuf_get?relay
   \   000086   90....       MOV     DPTR,#??c
   \   000089   EA           MOV     A,R2
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   EB           MOV     A,R3
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   90....       MOV     DPTR,#??c
   \   000091   E0           MOVX    A,@DPTR
   \   000092   64FF         XRL     A,#0xff
   \   000094   7004         JNZ     ??process_thread_serial_line_process_6
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   64FF         XRL     A,#0xff
   \                     ??process_thread_serial_line_process_6:
   \   00009A   7015         JNZ     ??process_thread_serial_line_process_7
   \   00009C   7A00         MOV     R2,#0x0
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   7468         MOV     A,#0x68
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   7400         MOV     A,#0x0
   \   0000A8   F0           MOVX    @DPTR,A
   \                     ??process_thread_serial_line_process_1:
   \   0000A9   EA           MOV     A,R2
   \   0000AA   70D3         JNZ     ??process_thread_serial_line_process_4
   \   0000AC   7901         MOV     R1,#0x1
   \   0000AE   02....       LJMP    ??process_thread_serial_line_process_8 & 0xFFFF
   \                     ??process_thread_serial_line_process_7:
   \   0000B1   90....       MOV     DPTR,#??c
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   640A         XRL     A,#0xa
   \   0000B7   7004         JNZ     ??process_thread_serial_line_process_9
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6400         XRL     A,#0x0
   \                     ??process_thread_serial_line_process_9:
   \   0000BD   7084         JNZ     ??process_thread_serial_line_process_5
    113                  /* Terminate */
    114                  buf[ptr++] = (uint8_t)'\0';
   \   0000BF   90....       MOV     DPTR,#??ptr
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   24..         ADD     A,#??buf & 0xff
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   34..         ADDC    A,#(??buf >> 8) & 0xff
   \   0000CA   F9           MOV     R1,A
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   8983         MOV     DPH,R1
   \   0000CF   7400         MOV     A,#0x0
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   90....       MOV     DPTR,#??ptr
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   2401         ADD     A,#0x1
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   3400         ADDC    A,#0x0
   \   0000DD   F0           MOVX    @DPTR,A
    115          
    116                  /* Broadcast event */
    117                  process_post(PROCESS_BROADCAST, serial_line_event_message, buf);
   \   0000DE                ; Setup parameters for call to function process_post
   \   0000DE   7C..         MOV     R4,#??buf & 0xff
   \   0000E0   7D..         MOV     R5,#(??buf >> 8) & 0xff
   \   0000E2   90....       MOV     DPTR,#serial_line_event_message
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   7A00         MOV     R2,#0x0
   \   0000E9   7B00         MOV     R3,#0x0
   \   0000EB   12....       LCALL   ??process_post?relay
    118          
    119                  /* Wait until all processes have handled the serial line event */
    120                  if(PROCESS_ERR_OK ==
    121                    process_post(PROCESS_CURRENT(), PROCESS_EVENT_CONTINUE, NULL)) {
   \   0000EE                ; Setup parameters for call to function process_post
   \   0000EE   7C00         MOV     R4,#0x0
   \   0000F0   7D00         MOV     R5,#0x0
   \   0000F2   7985         MOV     R1,#-0x7b
   \   0000F4   90....       MOV     DPTR,#process_current
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FA           MOV     R2,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   FB           MOV     R3,A
   \   0000FC   12....       LCALL   ??process_post?relay
   \   0000FF   8A..         MOV     ?V0 + 2,R2
   \   000101   8B..         MOV     ?V0 + 3,R3
   \   000103   E5..         MOV     A,?V0 + 2
   \   000105   45..         ORL     A,?V0 + 3
   \   000107   701A         JNZ     ??process_thread_serial_line_process_10
    122                    PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_CONTINUE);
   \   000109   7A00         MOV     R2,#0x0
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   747A         MOV     A,#0x7a
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \   000113   7400         MOV     A,#0x0
   \   000115   F0           MOVX    @DPTR,A
   \                     ??process_thread_serial_line_process_2:
   \   000116   EA           MOV     A,R2
   \   000117   6006         JZ      ??process_thread_serial_line_process_11
   \   000119   7485         MOV     A,#-0x7b
   \   00011B   65..         XRL     A,?V0 + 0
   \   00011D   6004         JZ      ??process_thread_serial_line_process_10
   \                     ??process_thread_serial_line_process_11:
   \   00011F   7901         MOV     R1,#0x1
   \   000121   801C         SJMP    ??process_thread_serial_line_process_8
    123                  }
    124                  ptr = 0;
   \                     ??process_thread_serial_line_process_10:
   \   000123   90....       MOV     DPTR,#??ptr
   \   000126   7400         MOV     A,#0x0
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   7400         MOV     A,#0x0
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   02....       LJMP    ??process_thread_serial_line_process_4 & 0xFFFF
    125                }
    126              }
    127            }
    128          
    129            PROCESS_END();
   \                     ??process_thread_serial_line_process_3:
   \   000130   7A00         MOV     R2,#0x0
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   7400         MOV     A,#0x0
   \   000138   F0           MOVX    @DPTR,A
   \   000139   A3           INC     DPTR
   \   00013A   7400         MOV     A,#0x0
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   7903         MOV     R1,#0x3
   \                     ??process_thread_serial_line_process_8:
   \   00013F   7F04         MOV     R7,#0x4
   \   000141   02....       LJMP    ?BANKED_LEAVE_XDATA
    130          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??buf:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??ptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??c:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    131          /*---------------------------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          void
    133          serial_line_init(void)
   \                     serial_line_init:
    134          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    135            ringbuf_init(&rxbuf, rxbuf_data, sizeof(rxbuf_data));
   \   000004                ; Setup parameters for call to function ringbuf_init
   \   000004   7980         MOV     R1,#-0x80
   \   000006   7C..         MOV     R4,#rxbuf_data & 0xff
   \   000008   7D..         MOV     R5,#(rxbuf_data >> 8) & 0xff
   \   00000A   7A..         MOV     R2,#rxbuf & 0xff
   \   00000C   7B..         MOV     R3,#(rxbuf >> 8) & 0xff
   \   00000E   12....       LCALL   ??ringbuf_init?relay
    136            process_start(&serial_line_process, NULL);
   \   000011                ; Setup parameters for call to function process_start
   \   000011   7C00         MOV     R4,#0x0
   \   000013   7D00         MOV     R5,#0x0
   \   000015   7A..         MOV     R2,#serial_line_process & 0xff
   \   000017   7B..         MOV     R3,#(serial_line_process >> 8) & 0xff
   \   000019   12....       LCALL   ??process_start?relay
    137          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for serial_line_process>`:
   \   000000   0000         DW 0H
   \   000002   ....         DW ??process_thread_serial_line_process?relay
   \   000004   00000000     DB 0, 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??serial_line_input_byte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    serial_line_input_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??process_thread_serial_line_process?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    process_thread_serial_line_process

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??serial_line_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    serial_line_init
    138          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     12  process_thread_serial_line_process
                          0 0 12 -> process_alloc_event
                          0 0 12 -> process_post
                          0 0 12 -> ringbuf_get
       2      0      0  serial_line_init
                          2 0  0 -> process_start
                          2 0  0 -> ringbuf_init
       0      0     10  serial_line_input_byte
                          0 0 10 -> process_poll
                          0 0 10 -> ringbuf_put


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for serial_line_process>
       6  ??process_thread_serial_line_process?relay
       6  ??serial_line_init?relay
       6  ??serial_line_input_byte?relay
     128  buf
       2  c
       1  overflow
     324  process_thread_serial_line_process
       2  ptr
       5  rxbuf
     128  rxbuf_data
       1  serial_line_event_message
      35  serial_line_init
      97  serial_line_input_byte
       8  serial_line_process

 
 456 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   8 bytes in segment XDATA_I
   8 bytes in segment XDATA_ID
 267 bytes in segment XDATA_Z
 
 482 bytes of CODE  memory
 275 bytes of XDATA memory

Errors: none
Warnings: none
