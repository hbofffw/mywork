///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:51 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\cpu\cc253x\stack.c               /
//    Command line       =  D:\myWork\myWork\cpu\cc253x\stack.c -D            /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\stack.s51                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME stack

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN __INIT_DATA_Z

        PUBLIC ??stack_get_max?relay
        FUNCTION ??stack_get_max?relay,0203H
        PUBLIC ??stack_poison?relay
        FUNCTION ??stack_poison?relay,0203H
        PUBLIC `sp`
        PUBLIC stack_get_max
        FUNCTION stack_get_max,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC stack_poison
        FUNCTION stack_poison,080203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
stack_get_max       SYMBOL "stack_get_max"
??stack_get_max?relay SYMBOL "?relay", stack_get_max
stack_poison        SYMBOL "stack_poison"
??stack_poison?relay SYMBOL "?relay", stack_poison

// D:\myWork\myWork\cpu\cc253x\stack.c
//    1 /*
//    2  * Copyright (c) 2011, George Oikonomou - <oikonomou@users.sourceforge.net>
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  */
//   31 
//   32 /**
//   33  * \file
//   34  *         8051 stack debugging facilities
//   35  *
//   36  * \author
//   37  *         George Oikonomou - <oikonomou@users.sourceforge.net>
//   38  *         Philippe Retornaz (EPFL)
//   39  *         YoCiHou - <www.iotdev.net>
//   40  */
//   41 #include "contiki.h"
//   42 
//   43 #ifndef STACK_POISON
//   44 #define STACK_POISON 0xAA
//   45 #endif
//   46 

        RSEG DATA_Z:DATA:NOROOT(0)
        DATA8
//   47 CC_AT_DATA uint8_t sp;
`sp`:
        DS 1
        REQUIRE __INIT_DATA_Z
//   48 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 void
//   50 stack_poison(void)
stack_poison:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function stack_poison
        CODE
//   51 {
        ; Saved register size: 0
        ; Auto size: 0
//   52   /*fill unused satck with constant STACK_POISON 0xAA(170)*/
//   53   asm("mov r1, SP\n"
//   54       "poison_loop:\n"
//   55       "inc r1\n"
//   56       "mov @r1, #170\n"
//   57       "cjne r1, #0xFF, poison_loop"
//   58         );
        mov r1, SP
??poison_loop:
        inc r1
        mov @r1, #170
        cjne r1, #0xFF, ??poison_loop
//   59 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//   60 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 uint8_t
//   62 stack_get_max(void)
stack_get_max:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function stack_get_max
        CODE
//   63 {
        ; Saved register size: 0
        ; Auto size: 0
//   64   uint8_t __data *sp = (uint8_t __data *)0xff;
        MOV     R2,#-0x1
//   65   uint8_t free = 0;
        MOV     R1,#0x0
        SJMP    ??stack_get_max_0
//   66 
//   67   while(*sp-- == STACK_POISON) {
//   68     free++;
??stack_get_max_1:
        INC     R1
//   69   }
??stack_get_max_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R0
        MOV     R2,A
        MOV     A,@R0
        XRL     A,#0xaa
        JZ      ??stack_get_max_1
//   70 
//   71   return 0xff - free;
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R1
        MOV     R1,A
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//   72 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stack_poison?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stack_poison

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??stack_get_max?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    stack_get_max

        END
// 
// 37 bytes in segment BANKED_CODE
// 12 bytes in segment BANK_RELAYS
//  1 byte  in segment DATA_Z
// 
// 49 bytes of CODE memory
//  1 byte  of DATA memory
//
//Errors: none
//Warnings: none
