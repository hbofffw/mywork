###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             03/Apr/2014  10:45:42 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\myWork\myWork\core\net\rpl\rpl-of0.c            #
#    Command line       =  D:\myWork\myWork\core\net\rpl\rpl-of0.c -D         #
#                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC             #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\ -lA D:\myWork\myWork\examples\wsn2530dk\my #
#                          Project\coord\List\ --diag_suppress                #
#                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o          #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\ -e --no_cse --no_unroll --no_inline         #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data --nr_virtual_regs    #
#                          16 --preinclude D:\myWork\myWork\examples\wsn2530d #
#                          k\myProject\..\..\..\cpu\cc253x\cc253x.h -I        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\cpu\cc253x\ -I D:\myWork\myWork\examples\wsn2 #
#                          530dk\myProject\..\..\..\platform\wsn2530dk\ -I    #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\. #
#                          .\..\core\ -I D:\myWork\myWork\examples\wsn2530dk\ #
#                          myProject\..\..\..\apps\ -I                        #
#                          D:\myWork\myWork\examples\wsn2530dk\myProject\ -Ol #
#    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\List\rpl-of0.lst                                 #
#    Object file        =  D:\myWork\myWork\examples\wsn2530dk\myProject\coor #
#                          d\Obj\rpl-of0.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\myWork\myWork\core\net\rpl\rpl-of0.c
      1          /**
      2           * \addtogroup uip6
      3           * @{
      4           */
      5          /*
      6           * Copyright (c) 2010, Swedish Institute of Computer Science.
      7           * All rights reserved.
      8           *
      9           * Redistribution and use in source and binary forms, with or without
     10           * modification, are permitted provided that the following conditions
     11           * are met:
     12           * 1. Redistributions of source code must retain the above copyright
     13           *    notice, this list of conditions and the following disclaimer.
     14           * 2. Redistributions in binary form must reproduce the above copyright
     15           *    notice, this list of conditions and the following disclaimer in the
     16           *    documentation and/or other materials provided with the distribution.
     17           * 3. Neither the name of the Institute nor the names of its contributors
     18           *    may be used to endorse or promote products derived from this software
     19           *    without specific prior written permission.
     20           *
     21           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     22           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     24           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     25           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     27           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     28           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     29           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     30           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     31           * SUCH DAMAGE.
     32           *
     33           * This file is part of the Contiki operating system.
     34           */
     35          /**
     36           * \file
     37           *         An implementation of RPL's objective function 0.
     38           *
     39           * \author Joakim Eriksson <joakime@sics.se>, Nicolas Tsiftes <nvt@sics.se>
     40           */
     41          
     42          #include "net/rpl/rpl-private.h"
     43          
     44          #define DEBUG DEBUG_NONE
     45          #include "net/uip-debug.h"
     46          
     47          static void reset(rpl_dag_t *);
     48          static rpl_parent_t *best_parent(rpl_parent_t *, rpl_parent_t *);
     49          static rpl_dag_t *best_dag(rpl_dag_t *, rpl_dag_t *);
     50          static rpl_rank_t calculate_rank(rpl_parent_t *, rpl_rank_t);
     51          static void update_metric_container(rpl_instance_t *);
     52          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     53          rpl_of_t rpl_of0 = {
   \                     rpl_of0:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for rpl_of0>`
   \   00000E                REQUIRE __INIT_XDATA_I
     54            reset,
     55            NULL,
     56            best_parent,
     57            best_dag,
     58            calculate_rank,
     59            update_metric_container,
     60            0
     61          };
     62          
     63          #define DEFAULT_RANK_INCREMENT  RPL_MIN_HOPRANKINC
     64          
     65          #define MIN_DIFFERENCE (RPL_MIN_HOPRANKINC + RPL_MIN_HOPRANKINC / 2)
     66          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          static void
     68          reset(rpl_dag_t *dag)
   \                     reset:
     69          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     70            PRINTF("RPL: Resetting OF0\n");
     71          }
   \   000000   02....       LJMP    ?BRET
     72          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     73          static rpl_rank_t
     74          calculate_rank(rpl_parent_t *p, rpl_rank_t base_rank)
   \                     calculate_rank:
     75          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     76            rpl_rank_t increment;
     77            if(base_rank == 0) {
   \   000004   EC           MOV     A,R4
   \   000005   4D           ORL     A,R5
   \   000006   7017         JNZ     ??calculate_rank_0
     78              if(p == NULL) {
   \   000008   EA           MOV     A,R2
   \   000009   4B           ORL     A,R3
   \   00000A   7006         JNZ     ??calculate_rank_1
     79                return INFINITE_RANK;
   \   00000C   7AFF         MOV     R2,#-0x1
   \   00000E   7BFF         MOV     R3,#-0x1
   \   000010   8057         SJMP    ??calculate_rank_2
     80              }
     81              base_rank = p->rank;
   \                     ??calculate_rank_1:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FC           MOV     R4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FD           MOV     R5,A
     82            }
     83          
     84            increment = p != NULL ?
     85                          p->dag->instance->min_hoprankinc :
     86                          DEFAULT_RANK_INCREMENT;
   \                     ??calculate_rank_0:
   \   00001F   EA           MOV     A,R2
   \   000020   4B           ORL     A,R3
   \   000021   6029         JZ      ??calculate_rank_3
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C8           XCH     A,R0
   \   00002E   241B         ADD     A,#0x1b
   \   000030   F582         MOV     DPL,A
   \   000032   E8           MOV     A,R0
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C8           XCH     A,R0
   \   00003C   2488         ADD     A,#-0x78
   \   00003E   F582         MOV     DPL,A
   \   000040   E8           MOV     A,R0
   \   000041   3400         ADDC    A,#0x0
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   8004         SJMP    ??calculate_rank_4
   \                     ??calculate_rank_3:
   \   00004C   7800         MOV     R0,#0x0
   \   00004E   7901         MOV     R1,#0x1
     87          
     88            if((rpl_rank_t)(base_rank + increment) < base_rank) {
   \                     ??calculate_rank_4:
   \   000050   EC           MOV     A,R4
   \   000051   28           ADD     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   ED           MOV     A,R5
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   C3           CLR     C
   \   000057   EA           MOV     A,R2
   \   000058   9C           SUBB    A,R4
   \   000059   EB           MOV     A,R3
   \   00005A   9D           SUBB    A,R5
   \   00005B   5006         JNC     ??calculate_rank_5
     89              PRINTF("RPL: OF0 rank %d incremented to infinite rank due to wrapping\n",
     90                  base_rank);
     91              return INFINITE_RANK;
   \   00005D   7AFF         MOV     R2,#-0x1
   \   00005F   7BFF         MOV     R3,#-0x1
   \   000061   8006         SJMP    ??calculate_rank_2
     92            }
     93            return base_rank + increment;
   \                     ??calculate_rank_5:
   \   000063   EC           MOV     A,R4
   \   000064   28           ADD     A,R0
   \   000065   FA           MOV     R2,A
   \   000066   ED           MOV     A,R5
   \   000067   39           ADDC    A,R1
   \   000068   FB           MOV     R3,A
   \                     ??calculate_rank_2:
   \   000069   D083         POP     DPH
   \   00006B   D082         POP     DPL
   \   00006D   02....       LJMP    ?BRET
     94          
     95          }
     96          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          static rpl_dag_t *
     98          best_dag(rpl_dag_t *d1, rpl_dag_t *d2)
   \                     best_dag:
     99          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    100            if(d1->grounded) {
   \   000004   EA           MOV     A,R2
   \   000005   2413         ADD     A,#0x13
   \   000007   F582         MOV     DPL,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   600F         JZ      ??best_dag_0
    101              if (!d2->grounded) {
   \   000011   EC           MOV     A,R4
   \   000012   2413         ADD     A,#0x13
   \   000014   F582         MOV     DPL,A
   \   000016   ED           MOV     A,R5
   \   000017   3400         ADDC    A,#0x0
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   7015         JNZ     ??best_dag_1
    102                return d1;
   \   00001E   807C         SJMP    ??best_dag_2
    103              }
    104            } else if(d2->grounded) {
   \                     ??best_dag_0:
   \   000020   EC           MOV     A,R4
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   3400         ADDC    A,#0x0
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6006         JZ      ??best_dag_1
    105              return d2;
   \   00002D   EC           MOV     A,R4
   \   00002E   FA           MOV     R2,A
   \   00002F   ED           MOV     A,R5
   \   000030   FB           MOV     R3,A
   \   000031   8069         SJMP    ??best_dag_2
    106            }
    107          
    108            if(d1->preference < d2->preference) {
   \                     ??best_dag_1:
   \   000033   EC           MOV     A,R4
   \   000034   2414         ADD     A,#0x14
   \   000036   F582         MOV     DPL,A
   \   000038   ED           MOV     A,R5
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   EA           MOV     A,R2
   \   000040   2414         ADD     A,#0x14
   \   000042   F582         MOV     DPL,A
   \   000044   EB           MOV     A,R3
   \   000045   3400         ADDC    A,#0x0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C3           CLR     C
   \   00004B   98           SUBB    A,R0
   \   00004C   5006         JNC     ??best_dag_3
    109              return d2;
   \   00004E   EC           MOV     A,R4
   \   00004F   FA           MOV     R2,A
   \   000050   ED           MOV     A,R5
   \   000051   FB           MOV     R3,A
   \   000052   8048         SJMP    ??best_dag_2
    110            } else {
    111              if(d1->preference > d2->preference) {
   \                     ??best_dag_3:
   \   000054   EA           MOV     A,R2
   \   000055   2414         ADD     A,#0x14
   \   000057   F582         MOV     DPL,A
   \   000059   EB           MOV     A,R3
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   EC           MOV     A,R4
   \   000061   2414         ADD     A,#0x14
   \   000063   F582         MOV     DPL,A
   \   000065   ED           MOV     A,R5
   \   000066   3400         ADDC    A,#0x0
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C3           CLR     C
   \   00006C   98           SUBB    A,R0
   \   00006D   402D         JC      ??best_dag_2
    112                return d1;
    113              }
    114            }
    115          
    116            if(d2->rank < d1->rank) {
   \   00006F   EC           MOV     A,R4
   \   000070   2419         ADD     A,#0x19
   \   000072   F582         MOV     DPL,A
   \   000074   ED           MOV     A,R5
   \   000075   3400         ADDC    A,#0x0
   \   000077   F583         MOV     DPH,A
   \   000079   C082         PUSH    DPL
   \   00007B   C083         PUSH    DPH
   \   00007D   EA           MOV     A,R2
   \   00007E   2419         ADD     A,#0x19
   \   000080   F582         MOV     DPL,A
   \   000082   EB           MOV     A,R3
   \   000083   3400         ADDC    A,#0x0
   \   000085   F583         MOV     DPH,A
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   D083         POP     DPH
   \   00008E   D082         POP     DPL
   \   000090   C3           CLR     C
   \   000091   E0           MOVX    A,@DPTR
   \   000092   98           SUBB    A,R0
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   99           SUBB    A,R1
   \   000096   5004         JNC     ??best_dag_2
    117              return d2;
   \   000098   EC           MOV     A,R4
   \   000099   FA           MOV     R2,A
   \   00009A   ED           MOV     A,R5
   \   00009B   FB           MOV     R3,A
    118            } else {
    119              return d1;
   \                     ??best_dag_2:
   \   00009C   D083         POP     DPH
   \   00009E   D082         POP     DPL
   \   0000A0   02....       LJMP    ?BRET
    120            }
    121          }
    122          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          static rpl_parent_t *
    124          best_parent(rpl_parent_t *p1, rpl_parent_t *p2)
   \                     best_parent:
    125          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    126            rpl_rank_t r1, r2;
    127            rpl_dag_t *dag;
    128            
    129            PRINTF("RPL: Comparing parent ");
    130            PRINT6ADDR(&p1->addr);
    131            PRINTF(" (confidence %d, rank %d) with parent ",
    132                  p1->link_metric, p1->rank);
    133            PRINT6ADDR(&p2->addr);
    134            PRINTF(" (confidence %d, rank %d)\n",
    135                  p2->link_metric, p2->rank);
    136          
    137          
    138            r1 = DAG_RANK(p1->rank, p1->dag->instance) * RPL_MIN_HOPRANKINC  +
    139                   p1->link_metric;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   CA           XCH     A,R2
   \   000021   241B         ADD     A,#0x1b
   \   000023   F582         MOV     DPL,A
   \   000025   EA           MOV     A,R2
   \   000026   3400         ADDC    A,#0x0
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   CA           XCH     A,R2
   \   00002F   2488         ADD     A,#-0x78
   \   000031   F582         MOV     DPL,A
   \   000033   EA           MOV     A,R2
   \   000034   3400         ADDC    A,#0x0
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   ?US_DIV_MOD
   \   000040   E8           MOV     A,R0
   \   000041   75F000       MOV     B,#0x0
   \   000044   A4           MUL     AB
   \   000045   C8           XCH     A,R0
   \   000046   AAF0         MOV     R2,B
   \   000048   75F001       MOV     B,#0x1
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   FA           MOV     R2,A
   \   00004E   75F000       MOV     B,#0x0
   \   000051   E9           MOV     A,R1
   \   000052   A4           MUL     AB
   \   000053   2A           ADD     A,R2
   \   000054   F9           MOV     R1,A
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   28           ADD     A,R0
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   39           ADDC    A,R1
   \   000066   F5..         MOV     ?V0 + 1,A
    140            r2 = DAG_RANK(p2->rank, p1->dag->instance) * RPL_MIN_HOPRANKINC  +
    141                   p2->link_metric;
   \   000068   8C82         MOV     DPL,R4
   \   00006A   8D83         MOV     DPH,R5
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   CA           XCH     A,R2
   \   000080   241B         ADD     A,#0x1b
   \   000082   F582         MOV     DPL,A
   \   000084   EA           MOV     A,R2
   \   000085   3400         ADDC    A,#0x0
   \   000087   F583         MOV     DPH,A
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FA           MOV     R2,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   CA           XCH     A,R2
   \   00008E   2488         ADD     A,#-0x78
   \   000090   F582         MOV     DPL,A
   \   000092   EA           MOV     A,R2
   \   000093   3400         ADDC    A,#0x0
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FA           MOV     R2,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   ?US_DIV_MOD
   \   00009F   E8           MOV     A,R0
   \   0000A0   75F000       MOV     B,#0x0
   \   0000A3   A4           MUL     AB
   \   0000A4   C8           XCH     A,R0
   \   0000A5   AAF0         MOV     R2,B
   \   0000A7   75F001       MOV     B,#0x1
   \   0000AA   A4           MUL     AB
   \   0000AB   2A           ADD     A,R2
   \   0000AC   FA           MOV     R2,A
   \   0000AD   75F000       MOV     B,#0x0
   \   0000B0   E9           MOV     A,R1
   \   0000B1   A4           MUL     AB
   \   0000B2   2A           ADD     A,R2
   \   0000B3   F9           MOV     R1,A
   \   0000B4   8C82         MOV     DPL,R4
   \   0000B6   8D83         MOV     DPH,R5
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   28           ADD     A,R0
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   39           ADDC    A,R1
   \   0000C4   F9           MOV     R1,A
    142            /* Compare two parents by looking both and their rank and at the ETX
    143               for that parent. We choose the parent that has the most
    144               favourable combination. */
    145          
    146            dag = (rpl_dag_t *)p1->dag; /* Both parents must be in the same DAG. */
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FA           MOV     R2,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FB           MOV     R3,A
    147            if(r1 < r2 + MIN_DIFFERENCE &&
    148               r1 > r2 - MIN_DIFFERENCE) {
   \   0000D0   E8           MOV     A,R0
   \   0000D1   2480         ADD     A,#-0x80
   \   0000D3   F5..         MOV     ?V0 + 2,A
   \   0000D5   E9           MOV     A,R1
   \   0000D6   3401         ADDC    A,#0x1
   \   0000D8   F5..         MOV     ?V0 + 3,A
   \   0000DA   C3           CLR     C
   \   0000DB   E5..         MOV     A,?V0 + 0
   \   0000DD   95..         SUBB    A,?V0 + 2
   \   0000DF   E5..         MOV     A,?V0 + 1
   \   0000E1   95..         SUBB    A,?V0 + 3
   \   0000E3   5026         JNC     ??best_parent_0
   \   0000E5   E8           MOV     A,R0
   \   0000E6   2480         ADD     A,#-0x80
   \   0000E8   F5..         MOV     ?V0 + 2,A
   \   0000EA   E9           MOV     A,R1
   \   0000EB   34FE         ADDC    A,#-0x2
   \   0000ED   F5..         MOV     ?V0 + 3,A
   \   0000EF   C3           CLR     C
   \   0000F0   E5..         MOV     A,?V0 + 2
   \   0000F2   95..         SUBB    A,?V0 + 0
   \   0000F4   E5..         MOV     A,?V0 + 3
   \   0000F6   95..         SUBB    A,?V0 + 1
   \   0000F8   5011         JNC     ??best_parent_0
    149              return dag->preferred_parent;
   \   0000FA   EA           MOV     A,R2
   \   0000FB   2417         ADD     A,#0x17
   \   0000FD   F582         MOV     DPL,A
   \   0000FF   EB           MOV     A,R3
   \   000100   3400         ADDC    A,#0x0
   \   000102   F583         MOV     DPH,A
   \   000104   E0           MOVX    A,@DPTR
   \   000105   FA           MOV     R2,A
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FB           MOV     R3,A
   \   000109   8013         SJMP    ??best_parent_1
    150            } else if(r1 < r2) {
   \                     ??best_parent_0:
   \   00010B   C3           CLR     C
   \   00010C   E5..         MOV     A,?V0 + 0
   \   00010E   98           SUBB    A,R0
   \   00010F   E5..         MOV     A,?V0 + 1
   \   000111   99           SUBB    A,R1
   \   000112   5006         JNC     ??best_parent_2
    151              return p1;
   \   000114   EE           MOV     A,R6
   \   000115   FA           MOV     R2,A
   \   000116   EF           MOV     A,R7
   \   000117   FB           MOV     R3,A
   \   000118   8004         SJMP    ??best_parent_1
    152            } else {
    153              return p2;
   \                     ??best_parent_2:
   \   00011A   EC           MOV     A,R4
   \   00011B   FA           MOV     R2,A
   \   00011C   ED           MOV     A,R5
   \   00011D   FB           MOV     R3,A
   \                     ??best_parent_1:
   \   00011E   7F04         MOV     R7,#0x4
   \   000120   02....       LJMP    ?BANKED_LEAVE_XDATA
    154            }
    155          }
    156          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          static void
    158          update_metric_container(rpl_instance_t *instance)
   \                     update_metric_container:
    159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    160            instance->mc.type = RPL_DAG_MC_NONE;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   7400         MOV     A,#0x0
   \   00000A   F0           MOVX    @DPTR,A
    161          }
   \   00000B   D083         POP     DPH
   \   00000D   D082         POP     DPL
   \   00000F   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for rpl_of0>`:
   \   000000   ....         DW ??reset?relay
   \   000002   0000         DW 0H
   \   000004   ....         DW ??best_parent?relay
   \   000006   ....         DW ??best_dag?relay
   \   000008   ....         DW ??calculate_rank?relay
   \   00000A   ....         DW ??update_metric_container?relay
   \   00000C   0000         DW 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calculate_rank?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calculate_rank

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??best_dag?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    best_dag

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??best_parent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    best_parent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??update_metric_container?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    update_metric_container

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       4      0      0  best_dag
       0      0     12  best_parent
       2      0      0  calculate_rank
       0      0      0  reset
       2      0      0  update_metric_container


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Initializer for rpl_of0>
       6  ??best_dag?relay
       6  ??best_parent?relay
       6  ??calculate_rank?relay
       6  ??reset?relay
       6  ??update_metric_container?relay
     163  best_dag
     291  best_parent
     112  calculate_rank
       3  reset
      14  rpl_of0
      18  update_metric_container

 
 587 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  14 bytes in segment XDATA_I
  14 bytes in segment XDATA_ID
 
 631 bytes of CODE  memory
  14 bytes of XDATA memory

Errors: none
Warnings: none
