///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            03/Apr/2014  10:45:48 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\myWork\myWork\core\sys\energest.c              /
//    Command line       =  D:\myWork\myWork\core\sys\energest.c -D           /
//                          AUTOSTART_ENABLE -D PROJECT_CONF_H -lC            /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\ -lA D:\myWork\myWork\examples\wsn2530dk\ /
//                          myProject\coord\List\ --diag_suppress             /
//                          Pa050,Pa082,Pe550 --diag_warning Pe144 -o         /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\Obj\ -e --no_cse --no_unroll --no_inline       /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 --preinclude D:\myWork\myWork\examples\wsn2530 /
//                          dk\myProject\..\..\..\cpu\cc253x\cc253x.h -I      /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\..\ /
//                          ..\..\cpu\cc253x\ -I D:\myWork\myWork\examples\ws /
//                          n2530dk\myProject\..\..\..\platform\wsn2530dk\    /
//                          -I D:\myWork\myWork\examples\wsn2530dk\myProject\ /
//                          ..\..\..\core\ -I D:\myWork\myWork\examples\wsn25 /
//                          30dk\myProject\..\..\..\apps\ -I                  /
//                          D:\myWork\myWork\examples\wsn2530dk\myProject\    /
//                          -Ol                                               /
//    List file          =  D:\myWork\myWork\examples\wsn2530dk\myProject\coo /
//                          rd\List\energest.s51                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME energest

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??energest_flush?relay
        FUNCTION ??energest_flush?relay,0203H
        PUBLIC ??energest_init?relay
        FUNCTION ??energest_init?relay,0203H
        PUBLIC ??energest_leveldevice_leveltime?relay
        FUNCTION ??energest_leveldevice_leveltime?relay,0203H
        PUBLIC ??energest_type_set?relay
        FUNCTION ??energest_type_set?relay,0203H
        PUBLIC ??energest_type_time?relay
        FUNCTION ??energest_type_time?relay,0203H
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBLIC energest_current_mode
        PUBLIC energest_current_time
        PUBLIC energest_flush
        FUNCTION energest_flush,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC energest_init
        FUNCTION energest_init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC energest_leveldevice_leveltime
        FUNCTION energest_leveldevice_leveltime,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC energest_total_count
        PUBLIC energest_total_time
        PUBLIC energest_type_set
        FUNCTION energest_type_set,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC energest_type_time
        FUNCTION energest_type_time,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
energest_flush      SYMBOL "energest_flush"
??energest_flush?relay SYMBOL "?relay", energest_flush
energest_init       SYMBOL "energest_init"
??energest_init?relay SYMBOL "?relay", energest_init
energest_leveldevice_leveltime SYMBOL "energest_leveldevice_leveltime"
??energest_leveldevice_leveltime?relay SYMBOL "?relay", energest_leveldevice_leveltime
energest_type_set   SYMBOL "energest_type_set"
??energest_type_set?relay SYMBOL "?relay", energest_type_set
energest_type_time  SYMBOL "energest_type_time"
??energest_type_time?relay SYMBOL "?relay", energest_type_time


        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1
// D:\myWork\myWork\core\sys\energest.c
//    1 /*
//    2  * Copyright (c) 2007, Swedish Institute of Computer Science.
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  * 1. Redistributions of source code must retain the above copyright
//    9  *    notice, this list of conditions and the following disclaimer.
//   10  * 2. Redistributions in binary form must reproduce the above copyright
//   11  *    notice, this list of conditions and the following disclaimer in the
//   12  *    documentation and/or other materials provided with the distribution.
//   13  * 3. Neither the name of the Institute nor the names of its contributors
//   14  *    may be used to endorse or promote products derived from this software
//   15  *    without specific prior written permission.
//   16  *
//   17  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
//   18  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//   19  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//   20  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
//   21  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   22  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   23  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   24  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//   25  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
//   26  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
//   27  * SUCH DAMAGE.
//   28  *
//   29  * This file is part of the Contiki operating system.
//   30  *
//   31  */
//   32 
//   33 /**
//   34  * \file
//   35  *         Implementation of the energy estimation module
//   36  * \author
//   37  *         Adam Dunkels <adam@sics.se>
//   38  */
//   39 
//   40 #include "sys/energest.h"
//   41 #include "contiki-conf.h"
//   42 
//   43 #if ENERGEST_CONF_ON
//   44 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   45 int energest_total_count;
energest_total_count:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   46 energest_t energest_total_time[ENERGEST_TYPE_MAX];
energest_total_time:
        DS 48
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   47 rtimer_clock_t energest_current_time[ENERGEST_TYPE_MAX];
energest_current_time:
        DS 24
        REQUIRE __INIT_XDATA_Z
//   48 #ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
//   49 energest_t energest_leveldevice_current_leveltime[ENERGEST_CONF_LEVELDEVICE_LEVELS];
//   50 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 unsigned char energest_current_mode[ENERGEST_TYPE_MAX];
energest_current_mode:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   52 
//   53 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   54 void
//   55 energest_init(void)
energest_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function energest_init
        CODE
//   56 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   57   int i;
//   58   for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??energest_init_0
//   59     energest_total_time[i].current = energest_current_time[i] = 0;
??energest_init_1:
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_current_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_current_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        CLR     A
        MOV     R6,A
        MOV     R7,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     ?V0 + 0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R1,A
        MOV     A,#energest_total_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_total_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   60     energest_current_mode[i] = 0;
        MOV     A,#energest_current_mode & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(energest_current_mode >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//   61   }
        MOV     A,R2
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??energest_init_0:
        CLR     C
        MOV     A,R2
        SUBB    A,#0xc
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??energest_init_1 & 0xFFFF
//   62 #ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
//   63   for(i = 0; i < ENERGEST_CONF_LEVELDEVICE_LEVELS; ++i) {
//   64     energest_leveldevice_current_leveltime[i].current = 0;
//   65   }
//   66 #endif
//   67 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   68 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   69 unsigned long
//   70 energest_type_time(int type)
energest_type_time:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function energest_type_time
        CODE
//   71 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   72   /* Note: does not support ENERGEST_CONF_LEVELDEVICE_LEVELS! */
//   73 #ifndef ENERGEST_CONF_LEVELDEVICE_LEVELS
//   74   if(energest_current_mode[type]) {
        MOV     A,#energest_current_mode & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(energest_current_mode >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??energest_type_time_0 & 0xFFFF
//   75     rtimer_clock_t now = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R4,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R5,A
//   76     energest_total_time[type].current += (rtimer_clock_t)
//   77       (now - energest_current_time[type]);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_current_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_current_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,R5
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_total_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_total_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//   78     energest_current_time[type] = now;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_current_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_current_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   79   }
//   80 #endif /* ENERGEST_CONF_LEVELDEVICE_LEVELS */
//   81   return energest_total_time[type].current;
??energest_type_time_0:
        MOV     A,R2
        MOV     B,#0x4
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x4
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,#energest_total_time & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(energest_total_time >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ?XLOAD_R2345
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
        REQUIRE T1CNTL
        REQUIRE T1CNTH
//   82 }
//   83 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 unsigned long
//   85 energest_leveldevice_leveltime(int powerlevel)
energest_leveldevice_leveltime:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function energest_leveldevice_leveltime
        CODE
//   86 {
        ; Saved register size: 0
        ; Auto size: 0
//   87 #ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
//   88   return energest_leveldevice_current_leveltime[powerlevel].current;
//   89 #else
//   90   return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//   91 #endif
//   92 }
//   93 /*---------------------------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   94 void
//   95 energest_type_set(int type, unsigned long val)
energest_type_set:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function energest_type_set
        CODE
//   96 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//   97   energest_total_time[type].current = val;
        MOV     A,R2
        MOV     B,#0x4
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x4
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,#energest_total_time & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(energest_total_time >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//   98 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//   99 /*---------------------------------------------------------------------------*/
//  100 /* Note: does not support ENERGEST_CONF_LEVELDEVICE_LEVELS! */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  101 void
//  102 energest_flush(void)
energest_flush:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function energest_flush
        CODE
//  103 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  104   rtimer_clock_t now;
//  105   int i;
//  106   for(i = 0; i < ENERGEST_TYPE_MAX; i++) {
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??energest_flush_0 & 0xFFFF
//  107     if(energest_current_mode[i]) {
??energest_flush_1:
        MOV     A,#energest_current_mode & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(energest_current_mode >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??energest_flush_2 & 0xFFFF
//  108       now = RTIMER_NOW();
        MOV     A,0xe2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,0xe3
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R4,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R5,A
//  109       energest_total_time[i].current += (rtimer_clock_t)
//  110 	(now - energest_current_time[i]);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_current_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_current_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 0,A
        MOV     A,R5
        SUBB    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x4
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x4
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_total_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_total_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  111       energest_current_time[i] = now;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#energest_current_time & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(energest_current_time >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  112     }
//  113   }
??energest_flush_2:
        MOV     A,R2
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??energest_flush_0:
        CLR     C
        MOV     A,R2
        SUBB    A,#0xc
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??energest_flush_1 & 0xFFFF
//  114 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
        REQUIRE T1CNTL
        REQUIRE T1CNTH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??energest_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    energest_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??energest_type_time?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    energest_type_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??energest_leveldevice_leveltime?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    energest_leveldevice_leveltime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??energest_type_set?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    energest_type_set

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??energest_flush?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    energest_flush

        END
//  115 /*---------------------------------------------------------------------------*/
//  116 #else /* ENERGEST_CONF_ON */
//  117 void energest_type_set(int type, unsigned long val) {}
//  118 void energest_init(void) {}
//  119 unsigned long energest_type_time(int type) { return 0; }
//  120 void energest_flush(void) {}
//  121 #endif /* ENERGEST_CONF_ON */
// 
// 642 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  86 bytes in segment XDATA_Z
// 
// 672 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  86 bytes of XDATA memory
//
//Errors: none
//Warnings: none
